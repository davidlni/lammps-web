{"version":3,"sources":["lammps/src/pair_bop.cpp","lammps/src/pair.h","lammps/src/memory.h","/home/jenkins/emsdk-portable/emscripten/1.37.18/system/include/libcxx/math.h","lammps/src/bond_fene.cpp","lammps/src/bond.h","lammps/src/pair_airebo.cpp","lammps/src/my_page.h","lammps/src/pair_airebo.h","lammps/src/math_special.h","lammps/src/pair_lj_charmm_coul_charmm.cpp","lammps/src/atom_vec_molecular.h","lammps/src/atom_vec_molecular.cpp","lammps/src/atom_vec.h","lammps/src/pair_rebo.h","lammps/src/pair_rebo.cpp","lammps/src/fix_bond_create.cpp","/home/jenkins/emsdk-portable/emscripten/1.37.18/system/include/libcxx/string.h","lammps/src/fix.h","lammps/src/atom.h","lammps/src/pair_gw_zbl.h","lammps/src/pair_gw_zbl.cpp","lammps/src/pair_lj_charmm_coul_charmm_implicit.h","lammps/src/pair_lj_charmm_coul_charmm_implicit.cpp","lammps/src/read_restart.cpp","lammps/src/pointers.h","lammps/src/read_restart.h","lammps/src/mpiio.h","lammps/src/pair_tip4p_cut.cpp","lammps/src/mpi.cpp","lammps/src/improper_umbrella.cpp","lammps/src/improper.h","lammps/src/bond_nonlinear.cpp","lammps/src/bond_quartic.cpp","lammps/src/lammpscontroller.cpp","lammps/src/pair_nb3b_harmonic.cpp","lammps/src/atom_vec_bond.h","lammps/src/atom_vec_bond.cpp","lammps/src/pair_eam_alloy.h","lammps/src/pair_eam_alloy.cpp","lammps/src/angle_cosine_squared.cpp","lammps/src/angle.h","lammps/src/pair_gw.cpp","lammps/src/pair_gw.h","lammps/src/bond_harmonic.cpp","lammps/src/fix_bond_break.cpp","lammps/src/pair_lj_cut_tip4p_cut.cpp","lammps/src/dihedral_harmonic.cpp","lammps/src/dihedral.h","lammps/src/pair_lj_charmmfsw_coul_charmmfsh.cpp","lammps/src/fix_tfmc.cpp","lammps/src/pair_vashishta_table.cpp","lammps/src/pair_tersoff_mod_c.h","lammps/src/pair_tersoff_mod_c.cpp","lammps/src/write_restart.cpp","lammps/src/write_restart.h","lammps/src/dihedral_multi_harmonic.cpp","lammps/src/improper_cvff.cpp","lammps/src/angle_harmonic.cpp","lammps/src/pair_hbond_dreiding_morse.h","lammps/src/pair_hbond_dreiding_morse.cpp","lammps/src/angle_charmm.cpp","lammps/src/fix_atomify.cpp","lammps/src/bond_table.cpp","lammps/src/pair_hbond_dreiding_lj.cpp","lammps/src/pair_airebo_morse.h","lammps/src/pair_airebo_morse.cpp","lammps/src/pair_comb3.cpp","lammps/src/pair_comb3.h","lammps/src/atom_vec_full.h","lammps/src/atom_vec_full.cpp","lammps/src/pair_tersoff.cpp","lammps/src/pair_tersoff.h","lammps/src/dihedral_helix.cpp","lammps/src/pair_adp.cpp","lammps/src/atom_vec_template.h","lammps/src/atom_vec_template.cpp","lammps/src/pair_sw.cpp","lammps/src/angle_cosine_periodic.cpp","lammps/src/fix_bond_swap.cpp","lammps/src/improper_harmonic.cpp","lammps/src/dihedral_opls.cpp","lammps/src/pair_eim.cpp","lammps/src/angle_table.cpp","lammps/src/pair_polymorphic.cpp","lammps/src/pair_polymorphic.h","lammps/src/atom_vec_angle.h","lammps/src/atom_vec_angle.cpp","lammps/src/pair_tersoff_mod.h","lammps/src/pair_tersoff_mod.cpp","lammps/src/bond_fene_expand.cpp","lammps/src/pair_eam_fs.h","lammps/src/pair_eam_fs.cpp","lammps/src/pair_lcbop.cpp","lammps/src/pair_lcbop.h","lammps/src/bond_morse.cpp","lammps/src/dihedral_charmm.cpp","lammps/src/fix_atom_swap.cpp","lammps/src/fix_gcmc.cpp","lammps/src/math_extra.h","lammps/src/fix_qeq_comb.cpp","lammps/src/pair_tersoff_zbl.h","lammps/src/pair_tersoff_zbl.cpp","lammps/src/fix_cmap.cpp","lammps/src/pair_comb.cpp","lammps/src/pair_comb.h","lammps/src/pair_eam.cpp","lammps/src/angle_cosine.cpp","lammps/src/pair_dsmc.cpp","lammps/src/pair_dsmc.h","lammps/src/dihedral_charmmfsw.cpp","lammps/src/pair_vashishta.cpp","lammps/src/angle_cosine_delta.h","lammps/src/angle_cosine_delta.cpp"],"names":[],"mappingsgLA;AACA;AAAA;AAAA;;;;;;AACA;;;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;AACA;;;;;;;AAEA;AAAA;AAAA;;AAGA;AAAA;;;AAFA;;;;AAEA;AAAA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AApFA;;;;;;AAAA;;;;AAAA;AAoFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AACA;;;;AACA;AAAA;AACA;AAAA;AAFA;AAAA;AAGA;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;AAMA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAGA;AAAA;AAAA;AAFA;AACA;AACA;;;;;AAxFA;AAAA;;;;;;;;AANA;AAAA;;;;;;;AAwGA;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA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AACA;;;;;;;;;;;;;;;AD0tKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;AAIA;;AAFA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;AC96KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADqrJA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;;;;;AAGA;AAAA;;;;AAAA;;;;;;AAEA;;AADA;AAAA;AAAA;AAAA;;AADA;AAAA;;;;;;;AAgBA;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA1BA;AAAA;AAAA;AACA;;;;;;;;;;;;AAAA;;;AA8BA;AAAA;;;;;;AAAA;;;;;;AAEA;;AADA;AAAA;AAAA;AAAA;;AADA;AAAA;;;;;;;AAgBA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;;;AACA;AAAA;AAAA;AACA;AADA;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AACA;AAAA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;;;;;;;;AAYA;;;;;AAEA;;;AAAA;;;;AACA;AAAA;;;;AACA;AAAA;;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AArDA;AAAA;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;;AA6DA;;;AAAA;;AACA;;;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;AAQA;AAAA;;;;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;AAQA;;;;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;;;;AAQA;;;AAAA;;;;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;AAQA;;;AAAA;;;;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AAQA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;AAIA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;;AAIA;AAAA;;;;;AAAA;AAAA;AAAA;AACA;;;;AAKA;AAAA;;;;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAEA;AAHA;AAAA;;;;;;;;AAKA;;;;;AACA;AAAA;;;;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;;;AAUA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAVA;AAAA;;;;;;;;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;AAPA;;;;;;;;AAUA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;;;;;;;;;;;AAIA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAEA;;;;;AADA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AACA;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AALA;;AAAA;;;;;;;;;;;;AAYA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAOA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;A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;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAAA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAKA;AAAA;AACA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAHA;AAAA;;;;;;;;;;AAMA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;;;AAEA;AACA;;;AAAA;AAAA;AAAA;;;AAKA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAGA;AAAA;AACA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAHA;AAAA;;;;;;;;;;AAMA;AAAA;AACA;AAIA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;;;;;;AASA;AAAA;AAAA;AAAA;;;;;AACA;;;;;;;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAJA;AAAA;AAAA;;;;;;;;;AAWA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAKA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAEA;;AACA;;;AAKA;AAAA;AAAA;;;;AAIA;;AACA;;;AAKA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;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A;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAKA;AAAA;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAJA;AAAA;AAAA;;;;;;;;;;;;;;;;AAaA;AAAA;AAEA;AAAA;AAAA;;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAEA;;AACA;;;AAKA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAIA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAUA;AAAA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;A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AAA;;;;;;;;;;;;;;;;AAaA;AAAA;AAEA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;;;AAKA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAKA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAHA;AAAA;;;;;;;;;;AAMA;AACA;AAAA;AACA;AAMA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;;AA3BA;AA4BA;AACA;AAAA;AACA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAJA;AAAA;AAAA;;;;;;;;;AAYA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;;;AAKA;AAAA;AAAA;;;;AAIA;;AACA;;;AAKA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;A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;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;;;AAKA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAKA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAJA;AAAA;AAAA;;;;;;;;;AAUA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;;;AAKA;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAlBA;AAAA;AAmBA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAKA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;;;;AAzLA;;AAAA;;;;;;;;;;;AAgMA;AAAA;AAAA;;;;AAzVA;AAAA;;;;;;;;;;;AAgWA;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;AANA;;AAAA;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAJA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;;;AAEA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;;;AAKA;;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;AAKA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AACA;AAOA;AAAA;AAAA;AAAA;AAEA;AADA;AAEA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;;AACA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAJA;AAAA;AAAA;;;;;;;;;AAUA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;;;AAGA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;;;AAKA;;;AAIA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAlBA;AAAA;AAmBA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAKA;AACA;AAAA;;AACA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;;;;AA1LA;;AAAA;;;;;;;;;;;;;;;;AAqMA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAJA;AAAA;AAAA;;;;;;;;;AAUA;;;;;AAEA;AACA;;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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;;;;;;;;;;;;;;;;;;;;;;;;AAmpGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AAGA;AAAA;;AAFA;AAAA;;AAGA;AAAA;AAAA;AAAA;;;AAMA;AACA;AAAA;;;;;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;;AAMA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AACA;;;;;;;;AAIA;AAAA;;;;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AACA;AAAA;;;;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;;;;;;;;AASA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AACA;;;;;;;;AAMA;AAAA;;;;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;;;;;;;;AASA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;;;;AACA;;;;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAEA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;;;;AACA;;;;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAEA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;;;;AACA;;;;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAEA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAaA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;;;;AACA;;;;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAEA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAaA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;;;;AACA;;;;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAEA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAaA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;;;;AACA;;;;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAEA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;AAWA;AAKA;AAAA;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA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AEA;;;AACA;AAAA;AAAA;;;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;;;AAGA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAEA;;;;;;;;;;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;AAEA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AACA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;AAEA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;AAIA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAnDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA4GA;AACA;;;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;AAMA;AAAA;AAEA;AACA;AAAA;AACA;AAFA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAAA;AACA;AAAA;;AAKA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAVA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAaA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AACA;AAAA;AAKA;AADA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;;AACA;AAAA;AAAA;AADA;;AAGA;;AACA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;AAAA;;;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;AACA;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;AAhTA;AAAA;;;;;;;;;;;AAXA;AAAA;;;;;;;AAiUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;AAiUA;;;;;;;;;;;;;;;;;;;;;;;;AAhUA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AACA;AAAA;AAEA;;;AACA;AAAA;AAAA;;;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AADA;AADA;AAGA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;AApPA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAjCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA5BA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAVA;AAAA;;;;;;;AAiUA;;;;;;;;;;AEplCA;AAAA;AAAA;AACA;;;;AAUA;;AAPA;;;;AAOA;;AAHA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAEA;;;;;;;;;;AAYA;AAAA;AAAA;AACA;;;;AAUA;;AAPA;;;;AAOA;;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAEA;;;;;;;;ACzGA;AAAA;;;AAQA;;AAPA;AAAA;AAAA;AAGA;;;;;;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;;AAGA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AH0hEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AACA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAvBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AA6BA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AACA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAvBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AA6BA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAFA;;AAGA;;;;;AAGA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;;;;;;AA/BA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAnBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AA6DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;AAsrBA;;AAprBA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AA/FA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAsGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AA5FA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAoGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AALA;;;;;;;;;;;;;;;AAMA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAvCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAkEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAvCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAwZA;;AAvVA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AArBA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AArJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AArCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAmMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AACA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAvCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAkEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAkEA;;;;;;;;;;;;;;;AAjEA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAvCA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAkEA;;;;;;;;AExyFA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AFyzFA;AACA;AACA;AACA;AACA;AAIA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;;AADA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;;AADA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;;AADA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;;AAGA;AAEA;AAAA;AACA;;;AAEA;AAAA;AA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AA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAvBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AA6BA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAjGA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AA2GA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AACA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAvBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AA6BA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AA/FA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAsGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAvCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAkEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;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AEA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAtJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAtCA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAuMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAIA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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A;;;;;;AAAA;AAAA;;;;;;;;;;;AApBA;;;;;;AAAA;;;;AAAA;AAoBA;;;;;;;;;;;;;;;;;;;;;;;AAaA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AACA;;;;;;;;AAIA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AAIA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AADA;AAEA;;;;;AAEA;;;;;A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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA;;;;;;;;;AATA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAUA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAiBA;;;;;;;AA+BA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA;;AAbA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;;;;;;;;;;;AAnDA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;;;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAIA;;;;;;;;;AAqGA;AACA;AAAA;;;AAAA;AAAA;;;AACA;AAAA;;AAAA;AAAA;;;;AACA;AAAA;;AAAA;AAAA;;;;AACA;AAAA;;AAAA;AAAA;;;;AAEA;AACA;AAAA;;AAAA;;;;;;;AAGA;;;;;;;;;AA/UA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;;AAAA;AAAA;AAAA;;;;AAAA;AACA;AAFA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;AToCA;AAAA;;;;;;;ASxNA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;ACbA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC2BA;;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AADA;AAAA;AACA;AADA;AADA;AAAA;;;;;;;;;;;AAIA;AAAA;AAAA;;;AAKA;;AAJA;AAAA;AAAA;AAAA;AAAA;;;AAIA;;;;;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AACA;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;A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AAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAQA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;ACv5BA;;;;;;;;AAEA;;;;;;;AAWA;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADo5BA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;AV/eA;AACA;;;;;;;;;AAOA;;AACA;AACA;;;;;;;;;AAFA;AAAA;AACA;AACA;;;;;;;AW5cA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AXgBA;AAAA;;AAAA;;AAaA;;AAXA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;;;;;AAKA;;;AAJA;AAAA;AAAA;AACA;AAFA;AACA;AADA;;;;;;;;AAKA;;;;;;;;AU/IA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjBA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;ACEA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;;;;;;;AAjkKA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAIA;A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AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;AACA;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;;AAAA;;;;;;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;AACA;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;;AAAA;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;;;;;;;AACA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;AAEA;AAAA;;AAKA;AAAA;;AAAA;;;;;;;;;;AAJA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;AAtpJA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;AJ3BA;AIiCA;;AAAA;;AACA;AAAA;AAAA;AACA;;;;AAIA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;;AJjDA;AIoDA;;AAAA;;AACA;AAAA;AAAA;AAdA;;;;;;;;;;;;;;AAiBA;;;;;;;AACA;AAAA;AAAA;;AAKA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AACA;AADA;;;;;AAEA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;;;;;;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAEA;AADA;AAEA;AADA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AADA;AACA;AAAA;AAFA;AAEA;AAFA;AAIA;;AAEA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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AAA;;AACA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;;;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;AAMA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;AACA;AADA;AAAA;AAAA;;;AAEA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AACA;;;;;;;;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;;;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;;AACA;AAAA;;AACA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAOA;;;;;AAEA;;;;;AAEA;;;;;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;;AACA;AAAA;AAAA;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AACA;AAAA;AADA;AAEA;AAAA;AAFA;AAEA;AAAA;AAFA;;AAGA;AAAA;AAAA;AAAA;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AADA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AACA;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;AACA;AACA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AAAA;AAAA;AAAA;;;;;AAEA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChhBA;AACA;AAAA;AAAA;;AAMA;AAAA;;AALA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AAPA;;;;;;AAAA;;;;AAAA;AAOA;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD0BA;AAAA;AAAA;;AACA;AAAA;;AADA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAgLA;;;;;;;;;;;;;;;;;;;AA/KA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAEA;AACA;AACA;AAFA;AAAA;AASA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;AA5KA;AAAA;;;;;;;AAgLA;;;;;;;;AClNA;;;;;;;;;;;;;ADyOA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;;AASA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AATA;AAAA;AACA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AALA;AAAA;AAAA;;;;;;;AAUA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;AAhFA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AACA;;;AADA;AAAA;AAAA;AACA;;;;;;;AArsCA;;;;;;;;;AArCA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;;AApCA;AAAA;;;;;;;AAsCA;;;;;;;;;;;;;AAsBA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAQA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AARA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAJA;AAAA;AAAA;;;;;;;AASA;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;AAlGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AACA;;;AADA;AAAA;AAAA;AACA;;;;;;;AArcA;AACA;AAAA;AAAA;;AAQA;AAAA;;AAPA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AATA;;;;;;AAAA;;;;AAAA;AASA;;;;;;;;;AAsLA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;;;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAzLA;AAAA;AAAA;;AACA;AAAA;;AADA;;AAKA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;AAkGA;;;;;;;;;;;;AA9FA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;AAKA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AACA;AADA;;;;;;;;AA9FA;AAAA;;;;;;;AAkGA;;;;;;;;;;;;;;AAyBA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAUA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAVA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AANA;AAAA;AAAA;;;;;;;AAWA;;;;;;;AA8BA;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;;;;;AASA;;;AAmCA;;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;AAQA;;AAPA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;;;;;;AArrFA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;;AAAA;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;AAAA;;AAKA;AAAA;;AAJA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAEA;AAAA;;AAFA;AAEA;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AAZA;;;;;;AAAA;;;;AAAA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAEA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;;;;AA1BA;;;;;;;;;AAXA;AAAA;;;;;;;;AAXA;AAAA;;;;;;;;AAqDA;AAAA;AAAA;;AACA;;AADA;AACA;;;;;;;;AAqBA;;AACA;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;;;;AACA;;;;;;;;;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAZA;AAAA;;;;;;;;AAkBA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;;;AAAA;;;AACA;AAAA;AAAA;;;;AAAA;AACA;AAFA;AAAA;AAAA;;;;;;;AAOA;;;;AAAA;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAHA;AAAA;;;;;;;AADA;AAAA;;;;;;;AAOA;;AACA;;;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;;AArHA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAsHA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AAUA;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;AlBzPA;AkB+PA;;AAAA;;AACA;AAAA;AAAA;AACA;;;;AAIA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;;AlB/QA;AkBkRA;;AAAA;;AACA;AAAA;AAAA;AAdA;;;;;;;;;;;;;;AAiBA;;;;;;;AACA;AAAA;AAAA;;AAKA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;AACA;;;AAAA;;AACA;;;AAAA;;;;AAEA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAHA;AAAA;AAAA;;;;;;;AAOA;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AAqBA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;;;;;;;;AAWA;AAAA;AACA;AAAA;;AAIA;;;;;;;AAHA;AAAA;AAAA;AACA;AAAA;;AAAA;;AAFA;AAAA;;;;;;;AAIA;;;;;;;AjChIA;AAAA;;AAKA;;AAJA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;AAxEA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAKA;;;AAQA;;;AARA;;;AACA;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;;;;;;;AACA;;;;;AAJA;AAEA;AAFA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;AiCiMA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AjCrZA;AAAA;AACA;AACA;;;;;;;AiCnDA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;AC2BA;;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;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AAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;AA5GA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AACA;;;AADA;AAAA;AAAA;AACA;;;;;;;AA1HA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE0BA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;;AAAA;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;AAAA;;AAKA;AAAA;;AAJA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAEA;AAAA;;AAFA;AAEA;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AAZA;;;;;;AAAA;;;;AAAA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAEA;;;AACA;AAAA;AAAA;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AADA;;;;AAlCA;AAAA;;;;;;;AAyCA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAOA;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAEA;AAAA;;;;AAbA;AAAA;;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;AAMA;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;;;;AA1BA;AAAA;;;;;;;;AAhDA;AAAA;;;;;;;;;AAtDA;AAAA;;;;;;;;AAqIA;AAAA;AAAA;;AACA;;AADA;AACA;;;;;;;;AAqBA;;AACA;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;;;;AACA;;;;;;;;;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAZA;AAAA;;;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;;;AAAA;;;AACA;AAAA;AAAA;;;;AAAA;AACA;AAFA;AAAA;AAAA;;;;;;;AAOA;;;;AAAA;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAHA;AAAA;;;;;;;AADA;AAAA;;;;;;;AAOA;;AACA;;;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;AzB3UA;AyBiVA;;AAAA;;AACA;AAAA;AAAA;AACA;;;;AAIA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;;AzBjWA;AyBoWA;;AAAA;;AACA;AAAA;AAAA;AAdA;;;;;;;;;;;;;;AAiBA;;;;;;;AACA;AAAA;AAAA;;AAKA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AADA;;;;;AAEA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;;;AAyDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAgCA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AACA;;AADA;AAAA;AACA;;;;;;;;AAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;;AAEA;;;;;;;;AAnCA;AAAA;AACA;AAAA;AAEA;AAAA;;;AAGA;;AAFA;AAAA;;;AAEA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;AAMA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AADA;;;AAGA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;AAuBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAtbA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAoQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;AACA;;;AAAA;;AACA;;;AAAA;;;;AAEA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAHA;AAAA;AAAA;;;;;;;AAOA;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AAkBA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAAA;;;;;;;;AAYA;AAAA;AACA;AAAA;;AAEA;;;;;;;AADA;AAAA;AAAA;AAAA;;AAAA;;AADA;AAAA;;;;;;;AAEA;;;;;;;;;;;;AAwBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AAEA;AAAA;AAAA;;;;;;AAAA;;;;;AAGA;;;;AACA;;;;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;ACnfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;ADwjBA;AACA;AACA;AAAA;AAAA;;;;;;AAAA;;;;;AAGA;;;;AACA;;;;AACA;;;;AAEA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;;;AAGA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;ACjnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AApBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AD+nBA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;ACpnBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AzCjCA;AAAA;AACA;AACA;;;;;;;AwCplBA;AACA;AAAA;AAAA;;AAKA;AAAA;;AALA;AAAA;AAAA;;AAKA;AAAA;;AAJA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AANA;;;;;;AAAA;;;;AAAA;AAMA;;;;;;;;;;;;;;AAWA;AAAA;AAAA;;AACA;AAAA;;AADA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAqCA;;;;;;;;AApCA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;;AAnCA;AAAA;;;;;;;AAqCA;;;;;;;;;;;;;AAsBA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAPA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;;;;;;;AAQA;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;;;;;;;;AAQA;AACA;AAAA;;AAAA;AAAA;;AAGA;;AAFA;AAAA;;;AAEA;;AAFA;AAAA;;AAEA;;;;;;;AAzGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AACA;;;AADA;AAAA;AAAA;AACA;;;;;;;AAtiMA;;AA5LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAAA;;;;;;;;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;;;;;;;;;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AApBA;AAAA;;;;;;;;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AACA;AADA;;;;;;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;;;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;;;;;;;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;;;AACA;AAAA;AAAA;;;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;AAOA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;;;;AADA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;;;;AAIA;;;AAQA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;AACA;AAAA;AAAA;;;;;AADA;AAAA;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;AA9CA;AAAA;;;;;;;;AAmDA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;;AAsCA;;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAqCA;;AAhCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;;;;;;;;;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AACA;;AAAA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAVA;AAAA;;;;;;;;AAiBA;AAIA;;;;;;;;AAoUA;AAAA;AAAA;AAAA;;AACA;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;;AAEA;;;AAqBA;;;;;;AApBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;;;;;;;AAAA;;AAqBA;;AAbA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;;;AASA;;;;;AARA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAAA;;;;;AALA;AAAA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAEA;;AACA;;AAoBA;;;;;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;;;;;;;AAoBA;;AAbA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;;AAQA;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAAA;;;;;AAJA;AAAA;;;;;;;AAQA;;;;;;;;;;;;AASA;AACA;;;AAIA;;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;;;;;;;;AAIA;;;;;;;;;;;;AAUA;;AAOA;;;;;;AANA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAJA;AAAA;;;;;;;AAOA;;;;;;;AAiDA;AAAA;AACA;AADA;;;AAEA;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;;;;AAldA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AADA;AAAA;;;;;;;;AAHA;AAAA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;;;;;;;;;AAEA;AAAA;AAEA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAEA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAEA;;;;;;;;;;;;AAKA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;;;AAAA;;;;AAlBA;AAAA;AAAA;;;;;;;AAqBA;;AAAA;;;AAzBA;AAAA;;;;;;;;AA4BA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAKA;;AAJA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;AAwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AApBA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;AACA;AANA;;;;;;;;;AAQA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;;;;;;;;AAOA;AAAA;AAAA;AAfA;;;;;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAvBA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;;;;;AACA;AARA;;;;;;;;;AAUA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;;;;;;;;AAQA;AAAA;AAAA;AAlBA;;;;;;;;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAvBA;;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;AACA;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;AACA;AARA;;;;;;;;;AAUA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;;;;;;;;AAQA;AAAA;AAAA;AAlBA;;;;;;;;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AA1KA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;AACA;AAAA;AADA;AACA;AAAA;AADA;;;;;;;AAQA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;AADA;AAAA;;;;;;;;;;;AAJA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAOA;;;AAQA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;AADA;AAAA;;;;;;;;;;;AAJA;AAAA;;;;;;;;AAQA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAuIA;;;;;AAUA;;;AATA;;;;;;;AACA;AAAA;AAAA;;;;AADA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AAPA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;AA5oBA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;;AAEA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AAEA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;;;AAQA;AAAA;;AAAA;;;;;;;AAPA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;;;;;;;AACA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AAIA;;;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;AAAA;AAIA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;AAC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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AADA;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AAFA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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AA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AANA;AAAA;AAAA;;;;;;;;;AADA;AAAA;AAAA;;;;;;;AAWA;;AACA;;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;AAiCA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA;;;;;;;;;AATA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA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;;AAAA;;;;;;;;;AAVA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;AAGA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAAA;;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAEA;AAAA;;AACA;AACA;AAAA;;;AAGA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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A;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AACA;AADA;;;;;AAEA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;;;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAKA;;;;AAJA;AAAA;AAAA;;AAAA;;;;;;AAIA;;;;AAHA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;ACjDA;AAAA;AAAA;;;;;;;;;;;;;;;ADyDA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;ArCnBA;AqCqBA;;AAGA;AAAA;;AAFA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;ArC5BA;AqC4BA;;;;AAAA;AAAA;;;;;AAEA;ArCFA;AqCEA;;AAAA;;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;;AA2BA;AACA;AACA;;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;;AACA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAGA;;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AAAA;;AAMA;;AA+CA;;;;;;;;;;;;;;;;;AA9CA;AAAA;AAAA;;;;;;;AAkBA;AAAA;;;;AAuBA;AAAA;;;;;AAGA;AAAA;AAAA;AA5CA;AAAA;AAAA;;;;;;;;;;AA0CA;AACA;;;;AAxBA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;AApCA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;AAEA;AAAA;;;AAhBA;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;ArC5LA;AqC8LA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AAAA;;AAKA;AAAA;;AACA;AACA;AACA;AAKA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAOA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;;AACA;AACA;;;AAGA;AAAA;AAAA;ArC5PA;AqC8PA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;;AACA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;;AAJA;AAAA;AADA;AAAA;AADA;AAAA;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AA2BA;AAAA;AAAA;;AAkBA;AAAA;AAAA;;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;AAAA;AAAA;;;;AACA;;AAKA;AAAA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAGA;AAAA;AAAA;AARA;AAAA;AAAA;;;;;;;;AAUA;AAAA;AACA;;;AA/BA;AAAA;;AAAA;AAAA;;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAmCA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;;;AAGA;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;AAoLA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAhMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAA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AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;A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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;AA5GA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AACA;;;AADA;AAAA;AAAA;AACA;;;;;;;AA9HA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkCA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;;AAdA;AAAA;;;;;;;;;;;;;;;;;;AAeA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;AAEA;AACA;;;AAEA;AAAA;AAAA;;;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AACA;AAAA;AAEA;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AADA;AAEA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;;;;;;;;AAIA;AAAA;AAAA;AACA;AACA;;;AAGA;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;;;;AACA;AAAA;;;AAEA;AAAA;;AAAA;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;;;AACA;AAAA;AAAA;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;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;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAA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;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;AAEA;AAAA;AAEA;AAAA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AhE5rFA;AgE4rFA;AACA;AAAA;AAAA;;;;AAGA;AAAA;AAAA;AAAA;;AAEA;AAAA;;;AAEA;AAAA;AAAA;AAEA;AAAA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AhE3sFA;AgE2sFA;AACA;AAAA;AAAA;AAAA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;AAUA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAA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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAKA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD2+DA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AhEx4CA;AAAA;AgE04CA;;;;AACA;;;;AACA;;;;AACA;AAEA;AACA;AACA;AACA;AAGA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;AAEA;AAAA;;;;AAGA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AhEj6CA;AgEu6CA;AAAA;AhEv6CA;AAAA;AgEu6CA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AArNA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAqBA;;;;AAhBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AA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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;;;AAWA;;AACA;;;AAuBA;;;;;;AAtBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;;;;;;;AAAA;;AAuBA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AACA;AAAA;AADA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AADA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;;AAOA;;;;;;AANA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;;;;;;;AAAA;;AAOA;;;;;;;;;;;;;;;;;;;;;;AAYA;;AACA;;;AAkDA;;;;;;;;AAjDA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;;;;;;;AAAA;;AAkDA;;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AACA;AAAA;;AADA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;;AACA;;;AA8BA;;;;;;;;AA7BA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;;;;;;;AAAA;;AA8BA;;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AAiBA;;;;;;;;;;;;AAhBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;;AANA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AARA;AAAA;;;;;;;AAAA;;AAiBA;;;;;;;;;;AAUA;AACA;;AAKA;;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;;;;;;;AAKA;;;;;;;;;;AASA;AACA;;AAQA;;;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;;;;;;;AAQA;;;;;;;;;;AASA;AACA;;;AAKA;;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;;;;;;;;AAKA;;;;;;;;;;AAUA;;AAMA;;;;;;AALA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;AACA;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;;;;;;;AAAA;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AADA;AAAA;AAAA;AACA;;AAFA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AAMA;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;;;;;;;AAAA;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;AACA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;;;;;;;AAAA;;;;;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAEA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;;;;;;;AAAA;;;;AAebA;AAAA;;;;;;;AAAA;;;;;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;AAUA;;;AAKA;;;;;;AAJA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;;;;;;;AAAA;;AAKA;;;;;;;;;;;;;;;;;;;;AAUA;AACA;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;;;;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;AASA;AACA;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;;;;;;;;;;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;;;;;;;AASA;AACA;;;AAIA;;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AACA;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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A;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AACA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAHA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;;AAYA;;;;;;;;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;;;;;;;AAYA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AASA;;AAQA;;;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAQA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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AAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AA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ACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;A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AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;;;;AAMA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAEA;;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AADA;AAAA;;;AADA;;;;;;;;AAIA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAD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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;ACuBA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;AAuBA;;;;;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAFA;AAAA;AAAA;;;;;;;AAOA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;;AAAA;;AAJA;AAAA;;;;;;;;AAUA;AAAA;;;;AAMA;;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;;;;;;;AAMA;;;;;;;;;;;;;AAUA;;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;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AA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;AACA;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;;;;;;;AAAA;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAEA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;;;;;;;AAAA;;;;AAgdA;AAAA;;;;;;;AAAA;;;;;;;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;AAUA;;;AAMA;;;;;;;AALA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;;;;;;;AAAA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAUA;AACA;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;;;;;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AASA;AACA;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;AAHA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;;;;;;;;;;AASA;AACA;;;AAKA;;;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AACA;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;;;AAKA;;AAJA;AAAA;AAAA;AAAA;AAAA;;;AAIA;;;;;;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AACA;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AALA;AAAA;AAAA;AACA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAHA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;;AAaaA;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AASA;;AASA;;;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AASA;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;AAEA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;AAxmBA;AACA;AAAA;AAAA;;AAcA;AAAA;;AAZA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;;AAAA;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;AAAA;;AAMA;AAAA;;AALA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAEA;AAAA;;AAFA;AAEA;AAAA;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AAfA;;;;;;AAAA;;;;AAAA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAGA;;;;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAIA;AAAA;AACA;;;AACA;AAAA;AAAA;;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;AACA;;AAAA;AAAA;AAAA;;;;;AACA;;AAAA;AAAA;;;;;;;;;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;AACA;AAAA;AADA;;;;;;;AAzCA;AAAA;;;;;;;AA6CA;AAEA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;;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AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;;;;AAsFA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AADA;AAEA;;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AAAA;AAAA;;AAKA;AAAA;;AALA;AAAA;AAAA;;AAKA;AAAA;;AAJA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAEA;AAAA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;AANA;;;;;;AAAA;;;;AAAA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;;AACA;AAAA;;AADA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AA+IA;;;;;;;;;;;;;;;;;;AA9IA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AA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AA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5LA;AAAA;AAAA;AAAA;AAAA;AAGA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;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;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AAEA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;;AAcA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AA5BA;AAAA;;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AA0BA;AAAA;AACA;;;AACA;AAAA;AAAA;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;;;;;;;;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AADA;;;;;;AA1EA;AAAA;;;;;;;;;;;AA8EA;AAAA;;AA6DA;AAAA;;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AA1BA;AAAA;AAAA;;;;;;;;;AA+BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;AAKA;AAAA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA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;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;;;;;;;AAYA;;;;;;ACtmBA;AAAA;AAAA;;;;;;AANA;AAAA;AAAA;;;;;;;;;;;;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;AD0oBA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;AC9eA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD0fA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;ACziBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ADmjBA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;AC5iBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AnFhNA;AAAA;AACA;AACA;;;;;;;AAFA;AAAA;AACA;AACA;;;;;;;AkFpDA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAWA;;;;;;;AEtCA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACwBA;;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AACA;A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;AAWA;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AASA;;AAQA;;;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAQA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;;;;;;AAhdA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;AxEVA;AwEgBA;;AAA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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAMA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;AAFA;;;;;AAAA;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAUA;;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AADA;AAAA;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAFA;AAAA;;;;;;;AAnFA;AAkFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAeA;;AAkBA;;AAlBA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;AAKA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;AACA;AACA;AAAA;AAAA;;;AAAA;;;;;;;AAdA;AAAA;;;;;;;AADA;AAAA;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADpcA;;;;;;;;;AAMA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AAEA;AAAA;AAAA;;AACA;;AADA;AACA;;;;;;;;AA2BA;;AACA;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AAQA;AAAA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAKA;;;;;;;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;;;;;AALA;AAAA;;;;;;;;AAUA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;;;AAAA;;;AACA;AAAA;AAAA;;;;AAAA;AACA;AAFA;AAAA;AAAA;;;;;;;AAOA;;;;AAAA;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAHA;AAAA;;;;;;;AADA;AAAA;;;;;;;AAOA;;AACA;;;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA;;;AATA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;;AAAA;;;;;;;AAAA;;AAAA;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;AAAA;AAAA;;;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAIA;;AAJA;;;AAAA;AAAA;AAAA;;;;;;;AAAA;AACA;;;;AAGA;;;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAGA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;;;;;;;AA4gCA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AACA;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;;;;;;;AAjqCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;;;AAAA;AAAA;AAAA;;;;AAAA;AACA;AAFA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAu1BA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAwHA;;AAvHA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAMA;AACA;AAAA;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAGA;AACA;AAAA;;;;;;;AAQA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;;;;;AATA;AAAA;;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;;;;;AATA;AAAA;;;;;;;AAgsCA;;;;;;;;;;;;;AA0BA;;;AAFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;;;;;;;AADA;;;;;;;AADA;AAAA;;;;;;;AA8JA;;;;;;;;;;;;;;;;;AAp/BA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAEA;;AA8DA;;;;;;;;;;;AA7DA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAVA;AAAA;;;;;;;;;;;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AA/BA;AAAA;;;;;;;AAoCA;;AA0BA;;;;;;;;;;;AAzBA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;AAAA;;;;;;;;AAXA;AAAA;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;;AAqEA;;;;;;;;;;;;;;;;;;;AApEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AACA;AAAA;AAEA;;;AACA;AAAA;AAAA;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAhCA;AA+BA;AAAA;AAAA;AACA;;;;AAzDA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AARA;AAAA;;;;;;;AAqEA;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;AAgEA;;;;;;;;;;;;;;;;;AA/DA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAEA;;;AACA;AAAA;AAAA;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AAGA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAfA;AAcA;AACA;;;;AApDA;AAAA;AAAA;;;;;;;;AARA;AAAA;;;;;;;AAgEA;;;;;;;;;;;AC1ZA;AAAA;AAAA;AACA;;;;AAWA;;AARA;;;;AAQA;;AAJA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;;;;;;;;;AAYA;AAAA;AAAA;AACA;;;AAUA;;AAPA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AD0dA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAKA;;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;AAKA;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;AAOA;AAAA;AAAA;AACA;;AAPA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;;;AAlBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAqBA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;;AAiGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhGA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AA5FA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAiGA;;;;;;;;;;;;;;;;;;;;;;;AAkxBA;AAAA;AAAA;AAAA;AAAA;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAqCA;;;;;;;;;;;;AApCA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;;AAHA;AAIA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAGA;;;;;AAAA;;AACA;AAAA;AACA;;;AAjCA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAqCA;;;;;;;;;;;;;;AAyQA;AAEA;AAGA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAoBA;;AAlBA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA;;AAbA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;AApDA;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;AA/zBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AAHA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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A;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AAIA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAMA;;;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;;AAOA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AAQA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;;AACA;AACA;;;AAKA;AAAA;;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;AAAA;;AACA;AAMA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;;;;;;;;;;;AAKA;AACA;AACA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;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;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;AAAA;AAAA;;;;;;;;AAwDA;AAAA;AAAA;;;;;;;;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACA;A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AAA;AAAA;;;AAcA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;AAkFA;;AAhFA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsBA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAA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;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApCA;AAAA;AAAA;;;;;;;;AAwCA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;AAAA;AAAA;;;;;;;;AAgCA;AAAA;AAAA;;;;;;;;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;AApoBA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAkEA;;AAhEA;AAEA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAEA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AA8BA;;AA5BA;AAEA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;;;AAcA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AACA;AAAA;;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;AAuFA;;AArFA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsBA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAGA;;;;AAAA;AAGA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAEA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;AAumCA;AAAA;AAAA;AAAA;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AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AAIA;AAAA;;AAAA;;;;;;;AAIA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;AAAA;;AAIA;;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;AAAA;AAKA;AAAA;AADA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;;;AAQA;AAAA;;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;;;;;;;AAAA;AAAA;AACA;AAAA;;AAAA;;;;;;;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;AAAA;AAAA;AAJA;AAAA;;;;;;;;;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAMA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AAEA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AAGA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AAEA;AAAA;AAAA;;;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AACA;AAAA;AAAA;;;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AACA;AAAA;;;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AACA;AAAA;;;;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AACA;AAAA;;;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;AAIA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAUA;AATA;AAUA;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAKA;AAAA;AACA;AAAA;AACA;AANA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AATA;AASA;AACA;AAAA;AACA;AAAA;AAGA;;AA4GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3GA;AAAA;AAAA;AAAA;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;AAEA;AAAA;;AACA;AACA;;;;AACA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;;;AACA;AAEA;AAAA;AAAA;AACA;AADA;AADA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AADA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;AAMA;AAAA;AAAA;;;;AALA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;AAxxRA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AA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;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;;;;AAWA;AAAA;;AAAA;;;;;;;AAVA;AAAA;;AAAA;AAAA;;AAAA;;;;;;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AAEA;AAAA;AACA;;AANA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;ArF3BA;AqFiCA;;AAAA;;AACA;AAAA;AAAA;AACA;;;;AAIA;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AACA;AACA;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;;;;;ArFjDA;AqFoDA;;AAAA;;AACA;AAAA;AAAA;AAdA;;;;;;;;;;;;;;AAiBA;;;;;;;AACA;AAAA;AAAA;;AAKA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AACA;AADA;;;;;AAEA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;;;;;;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAEA;AADA;AAEA;AADA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AADA;AACA;AAAA;AAFA;AAEA;AAFA;AAIA;;AAEA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;;AAEA;;;;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A;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAAA;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAKA;AAAA;;;AAEA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;;;;AA5PA;AAAA;AAAA;;;;;;;AAgQA;;;;;;;;;AAgqBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;;AAJA;AACA;AACA;AAAA;AAEA;;;;;;;AAQA;AAAA;AAAA;AACA;;;;;;;;AAwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AACA;AACA;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;;;;;;;AAQA;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAQA;;;;;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAQA;;;;;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;AAlJA;AAAA;AAAA;AAAA;AAAA;;;AAQA;AAAA;AAEA;;;;;;;;;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAQA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAQA;;;;;;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAQA;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AATA;;;;;;;;;AA9tBA;AAAA;AAAA;AAAA;;AACA;;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;AAMA;AAAA;AAAA;AAAA;AACA;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;AtF5gBA;AsFk7BA;;AAEA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AtFt9BA;AsFs+BA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;AAOA;;AA2EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AtF/jCA;AsFs/BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AAzEA;AAAA;;;;;;;AA2EA;;;;;;;AAMA;AAAA;AAAA;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;;AAIA;AACA;;;;;;;AAJA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;;;;;;;;AADA;AAAA;;;;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;;AAYA;;;;;;;;;;;AAXA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AARA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AADA;AAAA;;;;;;;AAYA;;;;;;;;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;AAYA;;AAMA;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAMA;;;;;;AAgMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AA9fA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAMA;;AAJA;AACA;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;AA+DA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAEA;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAjDA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;AAAA;;;;;;;AAAA;AADA;AAAA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;AAnJA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AAQA;AAAA;;;;;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;;;;;;;AAFA;AAAA;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;;;AAIA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AARA;AAAA;;;;;;;AAWA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AA5CA;AAAA;;;;;;;AAFA;AAAA;;;;;;;AAkDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AA5IA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;;;;;;;;;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;;;;;;;;;AAMA;AAAA;AAEA;;AAGA;AAAA;AAAA;AACA;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AAGA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAxuBA;AAMA;AALA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AANA;AAGA;;;;AAGA;AAAA;AAAA;;AAAA;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;;AAIA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;;AAAA;;;;AACA;AAAA;;AAAA;;;;AACA;AAAA;;AAAA;;;;AACA;AAAA;;AAAA;;;;AAIA;AAAA;;AAAA;;;;AAaA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;AACA;AAAA;;AAAA;;;;AACA;AAAA;;AAAA;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAugBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAOA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAHA;AAAA;;;;;;;AASA;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;;AAGA;AAAA;;;;;;;AAMA;;;;;;;;;;;;;AAAA;;;AAZA;AAAA;;;;;;;;;;;;;;AA6BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAlFA;;;;;;;;AA6DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AApEA;;;;;;;;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAtDA;;;;;;;;AAiCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAxCA;;;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AA1BA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAZA;;;;;;;;;;AA9BA;AAAA;;;;;;;;;;;;;;;;;;;;;AAwHA;;;;;AAAA;;;AADA;AACA;;;;;;;;;;;;AChrBA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;AAEA;;AAAA;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AAEA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;AAAA;;AAEA;AAAA;AAAA;;AAMA;AAAA;;AALA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;;AAFA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AARA;AAAA;;;;;;;;;;;AArBA;;;;;;AAAA;;;;AAAA;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;;AAFA;AAAA;AAAA;AAEA;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;AACA;AAAA;AACA;AACA;AAAA;AAEA;;;AACA;AAAA;AAAA;;;;;AACA;;AACA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAA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AAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AADA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AA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A;AAAA;AAEA;AAAA;;;;;;AACA;;;AAAA;;AACA;;;AAAA;;;;AAEA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAHA;AAAA;AAAA;;;;;;;AAOA;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AADA;AAAA;AAAA;;;;;;;;AAiBA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AA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ACA;AAAA;AAAA;AAAA;;;;;AADA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;AAIA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAGA;AACA;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAHA;AAIA;;AAGA;;AAHA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;;;;;;;;;;;;;;;;;;;;;;AAciBA;AAAA;AACA;AACA;;;;;;;A6GrmBA;AAAA;AAAA;;AACA;AAAA;;AADA;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AA6FA;;;;;;;;;;;;AA5FA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;AAZA;AAUA;AACA;AACA;AAAA;;;AAIA;AAIA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;;AA1FA;AAAA;;;;;;;AA6FA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAhJA;AAAA;AAAA","file":"web/js/lammps.js","sourcesContent":["/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: D.K. Ward (donward@sandia.gov) and X.W. Zhou (Sandia)\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   The formulation for this work follows (a) D.G. Pettifor, et al., Mat.\n   Sci. and Eng. A365, 2-13, (2004);(b) D.A. Murdick, et al., Phys.\n   Rev. B 73, 045206 (2006);(c) D.G. Pettifor and I.I. Oleinik., Phys\n   Rev. Lett. 84, 4124 (2000); (d) D.K. Ward, et al., Phys. Rev. B 85,\n   115206 (2012).\n\n   Copyright (2012) Sandia Corporation.  Under the terms of Contract DE-\n   AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   rights in this software.\n\n   pairbop v 1.0 comes with no warranty of any kind.  pairbop v 1.0 is a\n   copyrighted code that is distributed free-of-charge, under the terms\n   of the GNU Public License (GPL).  See \"Open-Source\n   Rules\"_http://lammps.sandia.gov/open_source.html\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <mpi.h>\n#include \"pair_bop.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"memory.h\"\n#include \"error.h\"\n#include <ctype.h>\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n#define EPSILON 1.0e-6\n\n/* ---------------------------------------------------------------------- */\n\nPairBOP::PairBOP(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n  ghostneigh = 1;\n\n  map = NULL;\n  pi_a = NULL;\n  pro_delta = NULL;\n  pi_delta = NULL;\n  pi_p = NULL;\n  pi_c = NULL;\n  r1 = NULL;\n  sigma_r0 = NULL;\n  pi_r0 = NULL;\n  phi_r0 = NULL;\n  sigma_rc = NULL;\n  pi_rc = NULL;\n  phi_rc = NULL;\n  sigma_beta0 = NULL;\n  pi_beta0 = NULL;\n  phi0 = NULL;\n  sigma_n = NULL;\n  pi_n = NULL;\n  phi_m = NULL;\n  sigma_nc = NULL;\n  pi_nc = NULL;\n  phi_nc = NULL;\n  pro = NULL;\n  sigma_delta = NULL;\n  sigma_c = NULL;\n  sigma_a = NULL;\n  sigma_f = NULL;\n  sigma_k = NULL;\n  small3 = NULL;\n  rcut = NULL;\n  rcut3 = NULL;\n  rcutsq = NULL;\n  rcutsq3 = NULL;\n  dr = NULL;\n  rdr = NULL;\n  dr3 = NULL;\n  rdr3 = NULL;\n  disij = NULL;\n  rij = NULL;\n  neigh_index = NULL;\n  neigh_index3 = NULL;\n  cosAng = NULL;\n  betaS = NULL;\n  dBetaS = NULL;\n  betaP = NULL;\n  dBetaP = NULL;\n  repul = NULL;\n  dRepul = NULL;\n  itypeSigBk = NULL;\n  itypePiBk = NULL;\n  pBetaS = NULL;\n  pBetaS1 = NULL;\n  pBetaS2 = NULL;\n  pBetaS3 = NULL;\n  pBetaS4 = NULL;\n  pBetaS5 = NULL;\n  pBetaS6 = NULL;\n  pLong = NULL;\n  pLong1 = NULL;\n  pLong2 = NULL;\n  pLong3 = NULL;\n  pLong4 = NULL;\n  pLong5 = NULL;\n  pLong6 = NULL;\n  pBetaP = NULL;\n  pBetaP1 = NULL;\n  pBetaP2 = NULL;\n  pBetaP3 = NULL;\n  pBetaP4 = NULL;\n  pBetaP5 = NULL;\n  pBetaP6 = NULL;\n  pRepul = NULL;\n  pRepul1 = NULL;\n  pRepul2 = NULL;\n  pRepul3 = NULL;\n  pRepul4 = NULL;\n  pRepul5 = NULL;\n  pRepul6 = NULL;\n  FsigBO = NULL;\n  FsigBO1 = NULL;\n  FsigBO2 = NULL;\n  FsigBO3 = NULL;\n  FsigBO4 = NULL;\n  FsigBO5 = NULL;\n  FsigBO6 = NULL;\n  rcmin = NULL;\n  rcmax = NULL;\n  rcmaxp = NULL;\n  setflag = NULL;\n  cutsq = NULL;\n  cutghost = NULL;\n\n  gfunc = NULL;\n  gfunc1 = NULL;\n  gfunc2 = NULL;\n  gfunc3 = NULL;\n  gfunc4 = NULL;\n  gfunc5 = NULL;\n  gfunc6 = NULL;\n  gpara = NULL;\n  bt_sg=NULL;\n  bt_pi=NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairBOP::~PairBOP()\n{\n  if(allocated) {\n    memory_theta_destroy();\n    if (otfly==0) memory->destroy(cos_index);\n    delete [] map;\n\n    memory->destroy(BOP_index);\n    memory->destroy(BOP_total);\n    memory->destroy(BOP_index3);\n    memory->destroy(BOP_total3);\n    memory->destroy(rcut);\n    memory->destroy(rcut3);\n    memory->destroy(rcutsq);\n    memory->destroy(rcutsq3);\n    memory->destroy(dr);\n    memory->destroy(rdr);\n    memory->destroy(dr3);\n    memory->destroy(rdr3);\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(cutghost);\n    memory->destroy(pBetaS);\n    memory->destroy(pBetaS1);\n    memory->destroy(pBetaS2);\n    memory->destroy(pBetaS3);\n    memory->destroy(pBetaS4);\n    memory->destroy(pBetaS5);\n    memory->destroy(pBetaS6);\n    memory->destroy(pLong);\n    memory->destroy(pLong1);\n    memory->destroy(pLong2);\n    memory->destroy(pLong3);\n    memory->destroy(pLong4);\n    memory->destroy(pLong5);\n    memory->destroy(pLong6);\n    memory->destroy(pBetaP);\n    memory->destroy(pBetaP1);\n    memory->destroy(pBetaP2);\n    memory->destroy(pBetaP3);\n    memory->destroy(pBetaP4);\n    memory->destroy(pBetaP5);\n    memory->destroy(pBetaP6);\n    memory->destroy(pRepul);\n    memory->destroy(pRepul1);\n    memory->destroy(pRepul2);\n    memory->destroy(pRepul3);\n    memory->destroy(pRepul4);\n    memory->destroy(pRepul5);\n    memory->destroy(pRepul6);\n    memory->destroy(FsigBO);\n    memory->destroy(FsigBO1);\n    memory->destroy(FsigBO2);\n    memory->destroy(FsigBO3);\n    memory->destroy(FsigBO4);\n    memory->destroy(FsigBO5);\n    memory->destroy(FsigBO6);\n    memory->destroy(pi_a);\n    memory->destroy(pro_delta);\n    memory->destroy(pi_delta);\n    memory->destroy(pi_p);\n    memory->destroy(pi_c);\n    memory->destroy(r1);\n    memory->destroy(pro);\n    memory->destroy(sigma_delta);\n    memory->destroy(sigma_c);\n    memory->destroy(sigma_a);\n    memory->destroy(sigma_f);\n    memory->destroy(sigma_k);\n    memory->destroy(small3);\n    memory->destroy(gfunc);\n    memory->destroy(gfunc1);\n    memory->destroy(gfunc2);\n    memory->destroy(gfunc3);\n    memory->destroy(gfunc4);\n    memory->destroy(gfunc5);\n    memory->destroy(gfunc6);\n    memory->destroy(gpara);\n  }\n  if(allocate_sigma) {\n    destroy_sigma();\n  }\n  if(allocate_pi) {\n    destroy_pi();\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::compute(int eflag, int vflag)\n{\n  int pass;\n  int i,j,ii,jj,iij,i12;\n  int inum,temp_ij,ks;\n  int nlisti;\n  int itype,jtype;\n  tagint i_tag,j_tag;\n  int *ilist,*iilist;\n  int **firstneigh;\n  double dpr1,ps;\n  double ftmp1,ftmp2,ftmp3,dE;\n  double dis_ij[3],rsq_ij,r_ij;\n  double betaS_ij,dBetaS_ij;\n  double betaP_ij,dBetaP_ij;\n  double repul_ij,dRepul_ij;\n  double value,dvalue;\n  double totE;\n  double rcut_min;\n\n  double **f = atom->f;\n  double **x = atom->x;\n  int *type = atom->type;\n  tagint *tag = atom->tag;\n  int newton_pair = force->newton_pair;\n  int nlocal = atom->nlocal;\n  int nall = nlocal + atom->nghost;\n  int cnt1;\n  MPI_Comm_rank(world,&me);\n\n  inum = list->inum;\n  ilist = list->ilist;\n  firstneigh = list->firstneigh;\n\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  // BOP Neighbor lists must be updated every timestep\n  maxnall=nall;\n  gneigh();\n  // For non on the fly calculations cos and derivatives\n  // are calculated in advance and stored\n  totE=0;\n  piB_0=0;\n  sigB_0=0;\n  for (ii = 0; ii < inum; ii++) {\n    i=ilist[ii];\n    f[i][0]=0;\n    f[i][1]=0;\n    f[i][2]=0;\n  }\n  for (ii = 0; ii < inum; ii++) {\n    i=ilist[ii];\n    i_tag=tag[i];\n    itype=map[type[i]]+1;\n    iilist=firstneigh[i];\n    nlisti=BOP_total[i];\n    for(jj=0;jj<nlisti;jj++) {\n      temp_ij=BOP_index[i]+jj;\n      j=iilist[neigh_index[temp_ij]];\n      j_tag=tag[j];\n      jtype=map[type[j]]+1;\n      if(j_tag>=i_tag) {\n        sigB_0=sigmaBo(ii,jj);\n        piB_0=PiBo(ii,jj);\n        if(otfly==0) {\n          if(neigh_flag[temp_ij]) {\n            dpr1=(dRepul[temp_ij]-2.0*dBetaS[temp_ij]*sigB_0\n                -2.0*dBetaP[temp_ij]*piB_0)/rij[temp_ij];\n            ftmp1=dpr1*disij[0][temp_ij];\n            ftmp2=dpr1*disij[1][temp_ij];\n            ftmp3=dpr1*disij[2][temp_ij];\n            f[i][0]=f[i][0]+ftmp1;\n            f[i][1]=f[i][1]+ftmp2;\n            f[i][2]=f[i][2]+ftmp3;\n            f[j][0]=f[j][0]-ftmp1;\n            f[j][1]=f[j][1]-ftmp2;\n            f[j][2]=f[j][2]-ftmp3;\n            // add repulsive and bond order components to total energy\n            // (d) Eq.1\n\n            dE=-2.0*betaS[temp_ij]*sigB_0-2.0*betaP[temp_ij]*piB_0;\n            totE+=dE+repul[temp_ij];\n            if(evflag) {\n              ev_tally_full(i,repul[temp_ij],dE,0.0,0.0,0.0,0.0);\n              ev_tally_full(j,repul[temp_ij],dE,0.0,0.0,0.0,0.0);\n              ev_tally_xyz(i,j,nlocal,newton_pair,0.0,0.0,-ftmp1,-ftmp2,-ftmp3,\n                  disij[0][temp_ij],disij[1][temp_ij],disij[2][temp_ij]);\n            }\n          }\n        }\n        else {\n          if(itype==jtype)\n            iij=itype-1;\n          else if(itype<jtype)\n            iij=itype*bop_types-itype*(itype+1)/2+jtype-1;\n          else\n            iij=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n          dis_ij[0]=x[j][0]-x[i][0];\n          dis_ij[1]=x[j][1]-x[i][1];\n          dis_ij[2]=x[j][2]-x[i][2];\n          rsq_ij=dis_ij[0]*dis_ij[0]\n              +dis_ij[1]*dis_ij[1]\n              +dis_ij[2]*dis_ij[2];\n          r_ij=sqrt(rsq_ij);\n          if(r_ij<=rcut[iij]) {\n            ps=r_ij*rdr[iij]+1.0;\n            ks=(int)ps;\n            if(nr-1<ks)\n              ks=nr-1;\n            ps=ps-ks;\n            if(ps>1.0)\n              ps=1.0;\n            betaS_ij=((pBetaS3[iij][ks-1]*ps+pBetaS2[iij][ks-1])*ps\n                +pBetaS1[iij][ks-1])*ps+pBetaS[iij][ks-1];\n            dBetaS_ij=(pBetaS6[iij][ks-1]*ps+pBetaS5[iij][ks-1])*ps\n                +pBetaS4[iij][ks-1];\n            betaP_ij=((pBetaP3[iij][ks-1]*ps+pBetaP2[iij][ks-1])*ps\n                +pBetaP1[iij][ks-1])*ps+pBetaP[iij][ks-1];\n            dBetaP_ij=(pBetaP6[iij][ks-1]*ps+pBetaP5[iij][ks-1])*ps\n                +pBetaP4[iij][ks-1];\n            repul_ij=((pRepul3[iij][ks-1]*ps+pRepul2[iij][ks-1])*ps\n                +pRepul1[iij][ks-1])*ps+pRepul[iij][ks-1];\n            dRepul_ij=(pRepul6[iij][ks-1]*ps+pRepul5[iij][ks-1])*ps\n                +pRepul4[iij][ks-1];\n            dpr1=(dRepul_ij-2.0*dBetaS_ij*sigB_0\n                -2.0*dBetaP_ij*piB_0)/r_ij;\n            ftmp1=dpr1*dis_ij[0];\n            ftmp2=dpr1*dis_ij[1];\n            ftmp3=dpr1*dis_ij[2];\n            f[i][0]=f[i][0]+ftmp1;\n            f[i][1]=f[i][1]+ftmp2;\n            f[i][2]=f[i][2]+ftmp3;\n            f[j][0]=f[j][0]-ftmp1;\n            f[j][1]=f[j][1]-ftmp2;\n            f[j][2]=f[j][2]-ftmp3;\n\n            // add repulsive and bond order components to total energy\n            // (d) Eq. 1\n\n            dE=-2.0*betaS_ij*sigB_0-2.0*betaP_ij*piB_0;\n            totE+=dE+repul_ij;\n            if(evflag) {\n              ev_tally_full(i,repul_ij,dE,0.0,0.0,0.0,0.0);\n              ev_tally_full(j,repul_ij,dE,0.0,0.0,0.0,0.0);\n              ev_tally_xyz(i,j,nlocal,newton_pair,0.0,0.0,-ftmp1,-ftmp2,-ftmp3,\n                  dis_ij[0],dis_ij[1],dis_ij[2]);\n            }\n          }\n        }\n      }\n    }\n  }\n  cnt1=0;\n  rcut_min=10000;\n  for (ii = 0; ii < inum; ii++) {\n    i=ilist[ii];\n    i_tag=tag[i];\n    itype=map[type[i]]+1;\n    iilist=firstneigh[i];\n    nlisti=BOP_total3[i];\n    for(jj=0;jj<nlisti;jj++) {\n      temp_ij=BOP_index3[i]+jj;\n      j=iilist[neigh_index3[temp_ij]];\n      j_tag=tag[j];\n      if(i_tag < j_tag) {\n        jtype=map[type[j]]+1;\n        pass=0;\n        if(itype==jtype)\n          i12=itype-1;\n        else if(itype<jtype)\n          i12=itype*bop_types-itype*(itype+1)/2+jtype-1;\n        else\n          i12=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n        dis_ij[0]=x[j][0]-x[i][0];\n        dis_ij[1]=x[j][1]-x[i][1];\n        dis_ij[2]=x[j][2]-x[i][2];\n        r_ij=sqrt(dis_ij[0]*dis_ij[0]+dis_ij[1]*dis_ij[1]+dis_ij[2]*dis_ij[2]);\n        if(r_ij<rcut_min) {\n          rcut_min=r_ij;\n        }\n        if(r_ij<=rcut3[i12])\n          pass=1;\n        if(pass==1) {\n          ps=r_ij*rdr3[i12]+1.0;\n          ks=(int)ps;\n          if(nr-1<ks)\n            ks=nr-1;\n          ps=ps-ks;\n          if(ps>1.0)\n            ps=1.0;\n          value=((pLong3[i12][ks-1]*ps+pLong2[i12][ks-1])*ps+\n              pLong1[i12][ks-1])*ps+pLong[i12][ks-1];\n          if(value<=0.0) value=pLong[i12][ks-1];\n          dvalue=(pLong6[i12][ks-1]*ps+\n              pLong5[i12][ks-1])*ps+pLong4[i12][ks-1];\n          dpr1=-dvalue/r_ij;\n          ftmp1=dpr1*dis_ij[0];\n          ftmp2=dpr1*dis_ij[1];\n          ftmp3=dpr1*dis_ij[2];\n          f[i][0]=f[i][0]+ftmp1;\n          f[i][1]=f[i][1]+ftmp2;\n          f[i][2]=f[i][2]+ftmp3;\n          f[j][0]=f[j][0]-ftmp1;\n          f[j][1]=f[j][1]-ftmp2;\n          f[j][2]=f[j][2]-ftmp3;\n          totE=totE-value;\n          if(evflag) {\n            ev_tally_full(i,0,-value,0.0,0.0,0.0,0.0);\n            ev_tally_full(j,0,-value,0.0,0.0,0.0,0.0);\n            ev_tally_xyz(i,j,nlocal,newton_pair,0.0,0.0,-ftmp1,-ftmp2,-ftmp3,\n                dis_ij[0],dis_ij[1],dis_ij[2]);\n          }\n          cnt1++;\n        }\n      }\n    }\n  }\n  if (vflag_fdotr) virial_fdotr_compute();\n  bop_step = 1;\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairBOP::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(rcut,npairs,\"BOP:rcut\");\n  memory->create(rcut3,npairs,\"BOP:rcut3\");\n  memory->create(rcutsq,npairs,\"BOP:rcutsq\");\n  memory->create(rcutsq3,npairs,\"BOP:rcutsq3\");\n  memory->create(dr,npairs,\"BOP:dr\");\n  memory->create(rdr,npairs,\"BOP:dr\");\n  memory->create(dr3,npairs,\"BOP:dr\");\n  memory->create(rdr3,npairs,\"BOP:dr\");\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n  memory->create(cutghost,n+1,n+1,\"pair:cutghost\");\n  memory->create(pBetaS,npairs,nr,\"BOP:pBetaS\");\n  memory->create(pBetaS1,npairs,nr,\"BOP:pBetaS1\");\n  memory->create(pBetaS2,npairs,nr,\"BOP:pBetaS2\");\n  memory->create(pBetaS3,npairs,nr,\"BOP:pBetaS3\");\n  memory->create(pBetaS4,npairs,nr,\"BOP:pBetaS4\");\n  memory->create(pBetaS5,npairs,nr,\"BOP:pBetaS5\");\n  memory->create(pBetaS6,npairs,nr,\"BOP:pBetaS6\");\n  memory->create(pLong,npairs,nr,\"BOP:pLong\");\n  memory->create(pLong1,npairs,nr,\"BOP:pLong\");\n  memory->create(pLong2,npairs,nr,\"BOP:pLong\");\n  memory->create(pLong3,npairs,nr,\"BOP:pLong\");\n  memory->create(pLong4,npairs,nr,\"BOP:pLong\");\n  memory->create(pLong5,npairs,nr,\"BOP:pLong\");\n  memory->create(pLong6,npairs,nr,\"BOP:pLong\");\n  memory->create(pBetaP,npairs,nr,\"BOP:pBetaP\");\n  memory->create(pBetaP1,npairs,nr,\"BOP:pBetaP1\");\n  memory->create(pBetaP2,npairs,nr,\"BOP:pBetaP2\");\n  memory->create(pBetaP3,npairs,nr,\"BOP:pBetaP3\");\n  memory->create(pBetaP4,npairs,nr,\"BOP:pBetaP4\");\n  memory->create(pBetaP5,npairs,nr,\"BOP:pBetaP5\");\n  memory->create(pBetaP6,npairs,nr,\"BOP:pBetaP6\");\n  memory->create(pRepul,npairs,nr,\"BOP:pRepul\");\n  memory->create(pRepul1,npairs,nr,\"BOP:pRepul1\");\n  memory->create(pRepul2,npairs,nr,\"BOP:pRepul2\");\n  memory->create(pRepul3,npairs,nr,\"BOP:pRepul3\");\n  memory->create(pRepul4,npairs,nr,\"BOP:pRepul4\");\n  memory->create(pRepul5,npairs,nr,\"BOP:pRepul5\");\n  memory->create(pRepul6,npairs,nr,\"BOP:pRepul6\");\n  memory->create(FsigBO,npairs,nBOt,\"BOP:FsigBO\");\n  memory->create(FsigBO1,npairs,nBOt,\"BOP:FsigBO1\");\n  memory->create(FsigBO2,npairs,nBOt,\"BOP:FsigBO2\");\n  memory->create(FsigBO3,npairs,nBOt,\"BOP:FsigBO3\");\n  memory->create(FsigBO4,npairs,nBOt,\"BOP:FsigBO4\");\n  memory->create(FsigBO5,npairs,nBOt,\"BOP:FsigBO5\");\n  memory->create(FsigBO6,npairs,nBOt,\"BOP:FsigBO6\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairBOP::settings(int narg, char **arg)\n{\n  otfly = 1;\n\n  int iarg = 0;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"save\") == 0) {\n      otfly = 0;\n      iarg++;\n    } else error->all(FLERR,\"Illegal pair_style command\");\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs(Updated: D.K. Ward 05/06/10)\n------------------------------------------------------------------------- */\n\nvoid PairBOP::coeff(int narg, char **arg)\n{\n  int i,j;\n  int n = atom->ntypes;\n  MPI_Comm_rank(world,&me);\n  map = new int[n+1];\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // ensure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read the potential file\n  nr=2000;\n  nBOt=2000;\n  ntheta=2000;\n  bop_step=0;\n  nb_pi=0;\n  nb_sg=0;\n  allocate_sigma=0;\n  allocate_pi=0;\n  allocate_neigh=0;\n  update_list=0;\n  maxnall=0;\n\n  read_table(arg[2]);\n\n  // match element names to BOP word types\n  if (me == 0) {\n    for (i = 3; i < narg; i++) {\n      if (strcmp(arg[i],\"NULL\") == 0) {\n        map[i-2] = -1;\n        continue;\n      }\n      for (j = 0; j < bop_types; j++) {\n        if (strcmp(arg[i],elements[j]) == 0) break;\n      }\n      map[i-2] = j;\n    }\n  }\n\n  MPI_Bcast(&map[1],atom->ntypes,MPI_INT,0,world);\n  if (me == 0) {\n    if (elements) {\n      for (i = 0; i < bop_types; i++) delete [] elements[i];\n      delete [] elements;\n    }\n  }\n  // clear setflag since coeff() called once with I,J = * *\n  n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairBOP::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style BOP requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style BOP requires newton pair on\");\n\n  // check that user sets comm->cutghostuser to 3x the max BOP cutoff\n\n  if (comm->cutghostuser < 3.0*cutmax - EPSILON) {\n    char str[128];\n    sprintf(str,\"Pair style bop requires comm ghost cutoff \"\n            \"at least 3x larger than %g\",cutmax);\n    error->all(FLERR,str);\n  }\n\n  // need a full neighbor list and neighbors of ghosts\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n  neighbor->requests[irequest]->ghost = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairBOP::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  int ii = map[i]+1;\n  int jj = map[j]+1;\n\n  int ij;\n  if (ii==jj) ij=ii-1;\n  else if (ii<jj) ij=ii*bop_types-ii*(ii+1)/2+jj-1;\n  else ij=jj*bop_types-jj*(jj+1)/2+ii-1;\n\n\n  if(rcut[ij]>rcut3[ij]) {\n    cutghost[i][j] = rcut[ij];\n    cutghost[j][i] = cutghost[i][j];\n    cutsq[i][j] = rcut[ij]*rcut[ij];\n    cutsq[j][i] = cutsq[i][j];\n    return rcut[ij];\n  } else {\n    cutghost[i][j] = rcut3[ij];\n    cutghost[j][i] = cutghost[i][j];\n    cutsq[i][j] = rcut3[ij]*rcut3[ij];\n    cutsq[j][i] = cutsq[i][j];\n    return rcut3[ij];\n  }\n}\n\n/* ----------------------------------------------------------------------\n   create BOP neighbor list from main neighbor list\n   BOP neighbor list stores neighbors of ghost atoms\n   BOP requires neighbor's of k if k is a neighbor of\n   j and j is a neighbor of i\n------------------------------------------------------------------------- */\n\nvoid PairBOP::gneigh()\n{\n  int i,ii;\n  int j,jj,kk;\n  int itype,jtype,i12;\n  int temp_ij,temp_ik,temp_ijk;\n  int n,ks,max_check,neigh_t;\n  int max_check3;\n  int nlisti;\n  int *ilist,*numneigh;\n  int *iilist;\n  int **firstneigh;\n  int nlocal = atom->nlocal;\n  int nall = nlocal + atom->nghost;\n  double dis[3],r;\n  double rj2,rk2,rsq,ps;\n  double rj1k1,rj2k2;\n  double **x = atom->x;\n  int *type = atom->type;\n\n  if(allocate_neigh==0) {\n    memory->create (BOP_index,nall,\"BOP_index\");\n    memory->create (BOP_index3,nall,\"BOP_index3\");\n    memory->create (BOP_total,nall,\"BOP_total\");\n    memory->create (BOP_total3,nall,\"BOP_total\");\n    if (otfly==0) memory->create (cos_index,nall,\"cos_index\");\n    allocate_neigh=1;\n  }\n  else {\n    memory->grow (BOP_index,nall,\"BOP_index\");\n    memory->grow (BOP_index3,nall,\"BOP_index3\");\n    memory->grow (BOP_total,nall,\"BOP_total\");\n    memory->grow (BOP_total3,nall,\"BOP_total3\");\n    if (otfly==0) memory->grow (cos_index,nall,\"cos_index\");\n    allocate_neigh=1;\n  }\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n  if(bop_step==0) {\n    maxneigh=0;\n    maxneigh3=0;\n    maxnall=0;\n  }\n  neigh_total=0;\n  neigh_total3=0;\n  cos_total=0;\n  for (ii = 0; ii < nall; ii++) {\n    if(ii<nlocal)\n      i= ilist[ii];\n    else\n      i=ii;\n    itype = map[type[i]]+1;\n\n    iilist=firstneigh[i];\n    max_check=0;\n    max_check3=0;\n    for(jj=0;jj<numneigh[i];jj++) {\n      j=iilist[jj];\n      jtype = map[type[j]]+1;\n      if(itype==jtype)\n        i12=itype-1;\n      else if(itype<jtype)\n        i12=itype*bop_types-itype*(itype+1)/2+jtype-1;\n      else\n        i12=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n      if(i12>=npairs) {\n        error->one(FLERR,\"Too many atom pairs for pair bop\");\n      }\n      dis[0]=x[j][0]-x[i][0];\n      dis[1]=x[j][1]-x[i][1];\n      dis[2]=x[j][2]-x[i][2];\n      rsq=dis[0]*dis[0]\n          +dis[1]*dis[1]\n          +dis[2]*dis[2];\n      r=sqrt(rsq);\n      if(r<=rcut[i12]) {\n        max_check++;\n      }\n      if(r<=rcut3[i12]) {\n        max_check3++;\n      }\n    }\n\n    BOP_index[i]=neigh_total;\n    BOP_index3[i]=neigh_total3;\n    BOP_total[i]=max_check;\n    BOP_total3[i]=max_check3;\n    neigh_total+=max_check;\n    neigh_total3+=max_check3;\n\n    if(max_check>maxneigh||max_check3>maxneigh3){\n       maxneigh=max_check;\n       maxneigh3=max_check3;\n    }\n    if(otfly==0) {\n      cos_index[i]=cos_total;\n      cos_total+=max_check*(max_check-1)/2;\n    }\n  }\n  maxnall=nall;\n    if(update_list!=0)\n      memory_theta_grow();\n    else\n      memory_theta_create();\n    neigh_t=0;\n    for (ii = 0; ii < nall; ii++) {\n      if(ii<nlocal)\n        i= ilist[ii];\n      else\n        i=ii;\n      itype = map[type[i]]+1;\n      iilist=firstneigh[i];\n      max_check=0;\n      max_check3=0;\n      for(jj=0;jj<numneigh[i];jj++) {\n        j=iilist[jj];\n        jtype = map[type[j]]+1;\n        if(itype==jtype)\n          i12=itype-1;\n        else if(itype<jtype)\n          i12=itype*bop_types-itype*(itype+1)/2+jtype-1;\n        else\n          i12=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n        if(i12>=npairs) {\n          error->one(FLERR,\"Too many atom pairs for pair bop\");\n        }\n        dis[0]=x[j][0]-x[i][0];\n        dis[1]=x[j][1]-x[i][1];\n        dis[2]=x[j][2]-x[i][2];\n        rsq=dis[0]*dis[0]\n            +dis[1]*dis[1]\n            +dis[2]*dis[2];\n        r=sqrt(rsq);\n        if(r<=rcut[i12]) {\n          temp_ij=BOP_index[i]+max_check;\n          if(i==0) {\n          }\n          neigh_index[temp_ij]=jj;\n          neigh_flag[temp_ij]=1;\n          max_check++;\n        }\n        if(r<=rcut3[i12]) {\n          temp_ij=BOP_index3[i]+max_check3;\n          neigh_index3[temp_ij]=jj;\n          neigh_flag3[temp_ij]=1;\n          max_check3++;\n        }\n      }\n    }\n  if(otfly==0) {\n    for (ii = 0; ii < nall; ii++) {\n      if(ii<nlocal)\n        i= ilist[ii];\n      else\n        i=ii;\n      itype = map[type[i]]+1;\n\n      iilist=firstneigh[i];\n      nlisti=BOP_total[i];\n      max_check=0;\n      for(jj=0;jj<nlisti;jj++) {\n        temp_ij=BOP_index[i]+jj;\n        j=iilist[neigh_index[temp_ij]];\n        if(temp_ij>=neigh_total) {\n        }\n        if(temp_ij<0) {\n        }\n        jtype = map[type[j]]+1;\n        if(itype==jtype)\n          i12=itype-1;\n        else if(itype<jtype)\n          i12=itype*bop_types-itype*(itype+1)/2+jtype-1;\n        else\n          i12=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n        if(i12>=npairs) {\n          error->one(FLERR,\"Too many atom pairs for pair bop\");\n        }\n        disij[0][temp_ij]=x[j][0]-x[i][0];\n        disij[1][temp_ij]=x[j][1]-x[i][1];\n        disij[2][temp_ij]=x[j][2]-x[i][2];\n        rsq=disij[0][temp_ij]*disij[0][temp_ij]\n            +disij[1][temp_ij]*disij[1][temp_ij]\n            +disij[2][temp_ij]*disij[2][temp_ij];\n        rij[temp_ij]=sqrt(rsq);\n        if(rij[temp_ij]<=rcut[i12]) {\n          max_check++;\n        }\n        else\n          neigh_flag[temp_ij]=0;\n      }\n    }\n    neigh_t+=max_check;\n    for (ii = 0; ii < nall; ii++) {\n      if(ii<nlocal)\n        i= ilist[ii];\n      else\n        i=ii;\n      itype = map[type[i]]+1;\n\n      iilist=firstneigh[i];\n      nlisti=BOP_total[i];\n      for(jj=0;jj<nlisti;jj++) {\n        temp_ij=BOP_index[i]+jj;\n        j=iilist[neigh_index[temp_ij]];\n\n        jtype = map[type[j]]+1;\n\n        if(itype==jtype)\n          i12=itype-1;\n        else if(itype<jtype)\n          i12=itype*bop_types-itype*(itype+1)/2+jtype-1;\n        else\n          i12=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n        if(i12>=npairs) {\n          error->one(FLERR,\"Too many atom pairs for pair bop\");\n        }\n        ps=rij[temp_ij]*rdr[i12]+1.0;\n        ks=(int)ps;\n        if(nr-1<ks)\n          ks=nr-1;\n        ps=ps-ks;\n        if(ps>1.0)\n          ps=1.0;\n        betaS[temp_ij]=((pBetaS3[i12][ks-1]*ps+pBetaS2[i12][ks-1])*ps+pBetaS1[i12][ks-1])*ps+pBetaS[i12][ks-1];\n        dBetaS[temp_ij]=(pBetaS6[i12][ks-1]*ps+pBetaS5[i12][ks-1])*ps\n            +pBetaS4[i12][ks-1];\n        betaP[temp_ij]=((pBetaP3[i12][ks-1]*ps+pBetaP2[i12][ks-1])*ps\n            +pBetaP1[i12][ks-1])*ps+pBetaP[i12][ks-1];\n        dBetaP[temp_ij]=(pBetaP6[i12][ks-1]*ps+pBetaP5[i12][ks-1])*ps\n            +pBetaP4[i12][ks-1];\n        repul[temp_ij]=((pRepul3[i12][ks-1]*ps+pRepul2[i12][ks-1])*ps\n            +pRepul1[i12][ks-1])*ps+pRepul[i12][ks-1];\n        dRepul[temp_ij]=(pRepul6[i12][ks-1]*ps+pRepul5[i12][ks-1])*ps\n            +pRepul4[i12][ks-1];\n      }\n    }\n    for (ii = 0; ii < nall; ii++) {\n      n=0;\n      if(ii<nlocal)\n        i= ilist[ii];\n      else\n        i=ii;\n      iilist=firstneigh[i];\n      nlisti=BOP_total[i];\n      for(jj=0;jj<nlisti;jj++) {\n        temp_ij=BOP_index[i]+jj;\n        j=iilist[neigh_index[temp_ij]];\n        rj2=rij[temp_ij]*rij[temp_ij];\n        for(kk=jj+1;kk<nlisti;kk++) {\n          if(cos_index[i]+n>=cos_total) {\n            error->one(FLERR,\"Too many atom triplets for pair bop\");\n          }\n          temp_ik=BOP_index[i]+kk;\n          temp_ijk=cos_index[i]+n;\n          if(temp_ijk>=cos_total) {\n            error->one(FLERR,\"Too many atom triplets for pair bop\");\n          }\n          rk2=rij[temp_ik]*rij[temp_ik];\n          rj1k1=rij[temp_ij]*rij[temp_ik];\n          rj2k2=rj1k1*rj1k1;\n          if(temp_ijk>=cos_total) {\n            error->one(FLERR,\"Too many atom triplets for pair bop\");\n          }\n          cosAng[temp_ijk]=(disij[0][temp_ij]*disij[0][temp_ik]+disij[1][temp_ij]\n              *disij[1][temp_ik]+disij[2][temp_ij]*disij[2][temp_ik])/rj1k1;\n          dcAng[temp_ijk][0][0]=(disij[0][temp_ik]*rj1k1-cosAng[temp_ijk]\n              *disij[0][temp_ij]*rk2)/(rj2k2);\n          dcAng[temp_ijk][1][0]=(disij[1][temp_ik]*rj1k1-cosAng[temp_ijk]\n              *disij[1][temp_ij]*rk2)/(rj2k2);\n          dcAng[temp_ijk][2][0]=(disij[2][temp_ik]*rj1k1-cosAng[temp_ijk]\n              *disij[2][temp_ij]*rk2)/(rj2k2);\n          dcAng[temp_ijk][0][1]=(disij[0][temp_ij]*rj1k1-cosAng[temp_ijk]\n              *disij[0][temp_ik]*rj2)/(rj2k2);\n          dcAng[temp_ijk][1][1]=(disij[1][temp_ij]*rj1k1-cosAng[temp_ijk]\n              *disij[1][temp_ik]*rj2)/(rj2k2);\n          dcAng[temp_ijk][2][1]=(disij[2][temp_ij]*rj1k1-cosAng[temp_ijk]\n              *disij[2][temp_ik]*rj2)/(rj2k2);\n          n++;\n        }\n      }\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::theta()\n{\n  int i,j,ii,jj,kk;\n  int itype,jtype,i12;\n  int temp_ij,temp_ik,temp_ijk;\n  int n,nlocal,nall,ks;\n  int nlisti;\n  int *ilist;\n  int *iilist;\n  int **firstneigh;\n  double rj2,rk2,rsq,ps;\n  double rj1k1,rj2k2;\n  double **x = atom->x;\n  int *type = atom->type;\n\n  nlocal = atom->nlocal;\n  nall = nlocal+atom->nghost;\n  ilist = list->ilist;\n  firstneigh = list->firstneigh;\n  if(update_list!=0)\n    memory_theta_grow();\n  else\n    memory_theta_create();\n  for (ii = 0; ii < nall; ii++) {\n    if(ii<nlocal)\n      i= ilist[ii];\n    else\n      i=ii;\n    itype = map[type[i]]+1;\n\n    iilist=firstneigh[i];\n    nlisti=BOP_total[i];\n    for(jj=0;jj<nlisti;jj++) {\n      temp_ij=BOP_index[i]+jj;\n      j=iilist[neigh_index[temp_ij]];\n      jtype = map[type[j]]+1;\n      if(itype==jtype)\n        i12=itype-1;\n      else if(itype<jtype)\n        i12=itype*bop_types-itype*(itype+1)/2+jtype-1;\n      else\n        i12=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n      if(i12>=npairs) {\n        error->one(FLERR,\"Too many atom pairs for pair bop\");\n      }\n      disij[0][temp_ij]=x[j][0]-x[i][0];\n      disij[1][temp_ij]=x[j][1]-x[i][1];\n      disij[2][temp_ij]=x[j][2]-x[i][2];\n      rsq=disij[0][temp_ij]*disij[0][temp_ij]\n          +disij[1][temp_ij]*disij[1][temp_ij]\n          +disij[2][temp_ij]*disij[2][temp_ij];\n      rij[temp_ij]=sqrt(rsq);\n      if(rij[temp_ij]<=rcut[i12])\n        neigh_flag[temp_ij]=1;\n      else\n        neigh_flag[temp_ij]=0;\n      if(rij[temp_ij]<=rcut3[i12])\n        neigh_flag3[temp_ij]=1;\n      else\n        neigh_flag3[temp_ij]=0;\n      ps=rij[temp_ij]*rdr[i12]+1.0;\n      ks=(int)ps;\n      if(nr-1<ks)\n        ks=nr-1;\n      ps=ps-ks;\n      if(ps>1.0)\n        ps=1.0;\n      betaS[temp_ij]=((pBetaS3[i12][ks-1]*ps+pBetaS2[i12][ks-1])*ps+pBetaS1[i12][ks-1])*ps+pBetaS[i12][ks-1];\n      dBetaS[temp_ij]=(pBetaS6[i12][ks-1]*ps+pBetaS5[i12][ks-1])*ps\n          +pBetaS4[i12][ks-1];\n      betaP[temp_ij]=((pBetaP3[i12][ks-1]*ps+pBetaP2[i12][ks-1])*ps\n          +pBetaP1[i12][ks-1])*ps+pBetaP[i12][ks-1];\n      dBetaP[temp_ij]=(pBetaP6[i12][ks-1]*ps+pBetaP5[i12][ks-1])*ps\n          +pBetaP4[i12][ks-1];\n      repul[temp_ij]=((pRepul3[i12][ks-1]*ps+pRepul2[i12][ks-1])*ps\n          +pRepul1[i12][ks-1])*ps+pRepul[i12][ks-1];\n      dRepul[temp_ij]=(pRepul6[i12][ks-1]*ps+pRepul5[i12][ks-1])*ps\n          +pRepul4[i12][ks-1];\n    }\n  }\n  for (ii = 0; ii < nall; ii++) {\n    n=0;\n    if(ii<nlocal)\n      i= ilist[ii];\n    else\n      i=ii;\n    iilist=firstneigh[i];\n    nlisti=BOP_total[i];\n    for(jj=0;jj<nlisti;jj++) {\n      temp_ij=BOP_index[i]+jj;\n      j=iilist[neigh_index[temp_ij]];\n      rj2=rij[temp_ij]*rij[temp_ij];\n      for(kk=jj+1;kk<nlisti;kk++) {\n        if(cos_index[i]+n>=cos_total) {\n          error->one(FLERR,\"Too many atom triplets for pair bop\");\n        }\n        temp_ik=BOP_index[i]+kk;\n        temp_ijk=cos_index[i]+n;\n        if(temp_ijk>=cos_total) {\n          error->one(FLERR,\"Too many atom triplets for pair bop\");\n        }\n        rk2=rij[temp_ik]*rij[temp_ik];\n        rj1k1=rij[temp_ij]*rij[temp_ik];\n        rj2k2=rj1k1*rj1k1;\n        if(temp_ijk>=cos_total) {\n          error->one(FLERR,\"Too many atom triplets for pair bop\");\n        }\n        cosAng[temp_ijk]=(disij[0][temp_ij]*disij[0][temp_ik]+disij[1][temp_ij]\n            *disij[1][temp_ik]+disij[2][temp_ij]*disij[2][temp_ik])/rj1k1;\n        dcAng[temp_ijk][0][0]=(disij[0][temp_ik]*rj1k1-cosAng[temp_ijk]\n              *disij[0][temp_ij]*rk2)/(rj2k2);\n        dcAng[temp_ijk][1][0]=(disij[1][temp_ik]*rj1k1-cosAng[temp_ijk]\n            *disij[1][temp_ij]*rk2)/(rj2k2);\n        dcAng[temp_ijk][2][0]=(disij[2][temp_ik]*rj1k1-cosAng[temp_ijk]\n            *disij[2][temp_ij]*rk2)/(rj2k2);\n        dcAng[temp_ijk][0][1]=(disij[0][temp_ij]*rj1k1-cosAng[temp_ijk]\n            *disij[0][temp_ik]*rj2)/(rj2k2);\n        dcAng[temp_ijk][1][1]=(disij[1][temp_ij]*rj1k1-cosAng[temp_ijk]\n            *disij[1][temp_ik]*rj2)/(rj2k2);\n        dcAng[temp_ijk][2][1]=(disij[2][temp_ij]*rj1k1-cosAng[temp_ijk]\n            *disij[2][temp_ik]*rj2)/(rj2k2);\n        n++;\n      }\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::theta_mod()\n{\n  if(update_list!=0)\n    memory_theta_grow();\n  else\n    memory_theta_create();\n}\n\n/* ---------------------------------------------------------------------- */\n\n/*  The formulation differs slightly to avoid negative square roots\n    in the calculation of Sigma^(1/2) of (a) Eq. 6 and (b) Eq. 11 */\n\n/* ---------------------------------------------------------------------- */\n\n/*  The formulation differs slightly to avoid negative square roots\n    in the calculation of Theta_pi,ij of (a) Eq. 36 and (b) Eq. 18 */\n\ndouble PairBOP::sigmaBo(int itmp, int jtmp)\n{\n  int nb_t,new_n_tot;\n  int i,j,k,kp,m,pp,kpj,kpk,kkp;\n  int ktmp,ltmp,mtmp;\n  int i_tag,j_tag;\n  int kp1,kp2,kp1type;\n  int iij,iik,ijk,ikkp,ji,iikp,ijkp;\n  int nkp,nk0;\n  int jNeik,kNeii,kNeij,kNeikp;\n  int kpNeij,kpNeik,lp1;\n  int new1,new2,nlocal;\n  int *ilist,*iilist,*jlist,*klist,*kplist;\n  int **firstneigh;\n  int temp_ij,temp_ik,temp_jkp,temp_kk,temp_jk;\n  int temp_ji,temp_kpj,temp_kkp;\n  int temp_ikp,temp_kpk;\n  int nb_ij,nb_ik,nb_ikp;\n  int nb_jk,nb_jkp,nb_kkp;\n  int kp_nsearch,nsearch;\n  int sig_flag,setting,ncmp,ks;\n  int itype,jtype,ktype,kptype;\n  int bt_i,bt_j;\n  int same_ikp,same_jkp,same_kpk;\n  int same_jkpj,same_kkpk;\n  int pass_ij,pass_ik,pass_jk;\n  int pass_jkp,pass_ikp,pass_kkp;\n  int njik,ngj,ngk;\n  int nijk,ngji,ngjk;\n  int nikj,ngki,ngkj;\n  int njikp,nglj,ngl;\n  int nkikp,nglk,nglkp;\n  int nikkp,ngli,nijkp;\n  int ngkkp,njkpk,ngkpj;\n  int ngjkp,ngkpk,ngi;\n  int nkjkp,njkkp;\n  int ang_ijk,ang_jik,ang_ikj;\n  int ang_jikp,ang_kikp,ang_ikkp;\n  int ang_ijkp,ang_jkpk,ang_kjkp;\n  int ang_jkkp;\n  int ni_ij,ni_ji,ni_ik;\n  int ni_jk,ni_ikN,ni_kj;\n  int ni_jkp,ni_kpj,ni_ikp,ni_kkp;\n  int ni_kpk,ni_kpnsearch;\n  int temp_ikN,temp_kj;\n  int nlisti,nlistj,nlistk,nlistkp;\n  double AA,BB,CC,DD,EE,EE1,FF;\n  double AAC,BBC,CCC,DDC,EEC,FFC,GGC;\n  double AACFF,UT,bndtmp,UTcom;\n  double amean,ps;\n  double gfactor1,gprime1,gsqprime;\n  double gfactorsq,gfactor2,gprime2;\n  double gfactorsq2,gsqprime2;\n  double gfactor3,gprime3,gfactor,rfactor;\n  double drfactor,gfactor4,gprime4,agpdpr3;\n  double rfactor0,rfactorrt,rfactor1rt,rfactor1;\n  double rcm1,rcm2,gcm1,gcm2,gcm3;\n  double agpdpr1,agpdpr2,app1,app2,app3,app4;\n  double dsigB1,dsigB2,xrun;\n  double part0,part1,part2,part3,part4;\n  double psign,bndtmp0,pp1;\n  double bndtmp1,bndtmp2,bndtmp3,bndtmp4,bndtmp5;\n  double dis_ij[3],rsq_ij,r_ij;\n  double betaS_ij,dBetaS_ij;\n  double dis_ik[3],rsq_ik,r_ik;\n  double betaS_ik,dBetaS_ik;\n  double dis_ikp[3],rsq_ikp,r_ikp;\n  double betaS_ikp,dBetaS_ikp;\n  double dis_jk[3],rsq_jk,r_jk;\n  double betaS_jk,dBetaS_jk;\n  double dis_jkp[3],rsq_jkp,r_jkp;\n  double betaS_jkp,dBetaS_jkp;\n  double dis_kkp[3],rsq_kkp,r_kkp;\n  double betaS_kkp,dBetaS_kkp;\n  double cosAng_jik,dcA_jik[3][2];\n  double cosAng_jikp,dcA_jikp[3][2];\n  double cosAng_kikp,dcA_kikp[3][2];\n  double cosAng_ijk,dcA_ijk[3][2];\n  double cosAng_ijkp,dcA_ijkp[3][2];\n  double cosAng_kjkp,dcA_kjkp[3][2];\n  double cosAng_ikj,dcA_ikj[3][2];\n  double cosAng_ikkp,dcA_ikkp[3][2];\n  double cosAng_jkkp,dcA_jkkp[3][2];\n  double cosAng_jkpk,dcA_jkpk[3][2];\n\n  double ftmp[3],xtmp[3];\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int newton_pair = force->newton_pair;\n  int *type = atom->type;\n  nlocal = atom->nlocal;\n  ilist = list->ilist;\n  firstneigh = list->firstneigh;\n  MPI_Comm_rank(world,&me);\n\n  if(nb_sg==0) {\n    nb_sg=(maxneigh)*(maxneigh/2);\n  }\n  if(allocate_sigma) {\n    destroy_sigma();\n  }\n\n  create_sigma(nb_sg);\n  sigB=0;\n  if(itmp<nlocal) {\n    i = ilist[itmp];\n  } else {\n    i=itmp;\n  }\n\n  i_tag=tag[i];\n  itype = map[type[i]]+1;\n\n  memset(bt_sg,0,sizeof(struct B_SG)*nb_sg);\n  for(m=0;m<nb_sg;m++) {\n    bt_sg[m].i=-1;\n    bt_sg[m].j=-1;\n    bt_sg[m].temp=-1;\n  }\n  nb_t=0;\n  iilist=firstneigh[i];\n  temp_ij=BOP_index[i]+jtmp;\n  ni_ij=neigh_index[temp_ij];\n  j=iilist[ni_ij];\n  jlist=firstneigh[j];\n  j_tag=tag[j];\n  jtype = map[type[j]]+1;\n  nb_ij=nb_t;\n  nb_t++;\n  if(nb_t>nb_sg) {\n    new_n_tot=nb_sg+maxneigh;\n    grow_sigma(nb_sg,new_n_tot);\n    nb_sg=new_n_tot;\n  }\n  bt_sg[nb_ij].temp=temp_ij;\n  bt_sg[nb_ij].i=i;\n  bt_sg[nb_ij].j=j;\n  if(j_tag>=i_tag) {\n    if(itype==jtype)\n      iij=itype-1;\n    else if(itype<jtype)\n      iij=itype*bop_types-itype*(itype+1)/2+jtype-1;\n    else\n      iij=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n    nlistj=BOP_total[j];\n    for(ji=0;ji<nlistj;ji++) {\n      temp_ji=BOP_index[j]+ji;\n      ni_ji=neigh_index[temp_ji];\n      if(x[jlist[ni_ji]][0]==x[i][0]) {\n        if(x[jlist[ni_ji]][1]==x[i][1]) {\n          if(x[jlist[ni_ji]][2]==x[i][2]) {\n            break;\n          }\n        }\n      }\n    }\n    pass_ij=0;\n    if(otfly==1) {\n      dis_ij[0]=x[j][0]-x[i][0];\n      dis_ij[1]=x[j][1]-x[i][1];\n      dis_ij[2]=x[j][2]-x[i][2];\n      rsq_ij=dis_ij[0]*dis_ij[0]\n          +dis_ij[1]*dis_ij[1]\n          +dis_ij[2]*dis_ij[2];\n      r_ij=sqrt(rsq_ij);\n      if(r_ij<rcut[iij]) {\n        pass_ij=1;\n        ps=r_ij*rdr[iij]+1.0;\n        ks=(int)ps;\n        if(nr-1<ks)\n          ks=nr-1;\n        ps=ps-ks;\n        if(ps>1.0)\n          ps=1.0;\n        betaS_ij=((pBetaS3[iij][ks-1]*ps+pBetaS2[iij][ks-1])*ps\n            +pBetaS1[iij][ks-1])*ps+pBetaS[iij][ks-1];\n        dBetaS_ij=(pBetaS6[iij][ks-1]*ps+pBetaS5[iij][ks-1])*ps\n            +pBetaS4[iij][ks-1];\n      }\n    } else {\n      if(neigh_flag[temp_ij]) {\n        pass_ij=1;\n        dis_ij[0]=disij[0][temp_ij];\n        dis_ij[1]=disij[1][temp_ij];\n        dis_ij[2]=disij[2][temp_ij];\n        r_ij=rij[temp_ij];\n        betaS_ij=betaS[temp_ij];\n        dBetaS_ij=dBetaS[temp_ij];\n      }\n    }\n    if(pass_ij==1) {\n      nSigBk=0;\n\n//AA-EE1 are the components making up Eq. 30 (a)\n\n      AA=0.0;\n      BB=0.0;\n      CC=0.0;\n      DD=0.0;\n      EE=0.0;\n      EE1=0.0;\n\n//FF is the Beta_sigma^2 term\n\n      FF=betaS_ij*betaS_ij;\n\n//agpdpr1 is derivative of FF w.r.t. r_ij\n\n      agpdpr1=2.0*betaS_ij*dBetaS_ij/r_ij;\n\n//dXX derivatives are taken with respect to all pairs contributing to the energy\n//nb_ij is derivative w.r.t. ij pair\n\n      bt_sg[nb_ij].dFF[0]=agpdpr1*dis_ij[0];\n      bt_sg[nb_ij].dFF[1]=agpdpr1*dis_ij[1];\n      bt_sg[nb_ij].dFF[2]=agpdpr1*dis_ij[2];\n\n//k is loop over all neighbors of i again with j neighbor of i\n\n      nlisti=BOP_total[i];\n      for(ktmp=0;ktmp<nlisti;ktmp++) {\n        temp_ik=BOP_index[i]+ktmp;\n        ni_ik=neigh_index[temp_ik];\n        if(ktmp!=jtmp) {\n          k=iilist[ni_ik];\n          klist=firstneigh[k];\n          ktype = map[type[k]]+1;\n          if(itype==ktype)\n            iik=itype-1;\n          else if(itype<ktype)\n            iik=itype*bop_types-itype*(itype+1)/2+ktype-1;\n          else\n            iik=ktype*bop_types-ktype*(ktype+1)/2+itype-1;\n\n//find neighbor of k that is equal to i\n\n          nlistk=BOP_total[k];\n          for(kNeii=0;kNeii<nlistk;kNeii++) {\n            temp_ikN=BOP_index[k]+kNeii;\n            ni_ikN=neigh_index[temp_ikN];\n            if(x[klist[ni_ikN]][0]==x[i][0]) {\n              if(x[klist[ni_ikN]][1]==x[i][1]) {\n                if(x[klist[ni_ikN]][2]==x[i][2]) {\n                  break;\n                }\n              }\n            }\n          }\n          pass_ik=0;\n          if(otfly==1) {\n            dis_ik[0]=x[k][0]-x[i][0];\n            dis_ik[1]=x[k][1]-x[i][1];\n            dis_ik[2]=x[k][2]-x[i][2];\n            rsq_ik=dis_ik[0]*dis_ik[0]\n                +dis_ik[1]*dis_ik[1]\n                +dis_ik[2]*dis_ik[2];\n            r_ik=sqrt(rsq_ik);\n            if(r_ik<=rcut[iik]) {\n              pass_ik=1;\n              ps=r_ik*rdr[iik]+1.0;\n              ks=(int)ps;\n              if(nr-1<ks)\n                ks=nr-1;\n              ps=ps-ks;\n              if(ps>1.0)\n                ps=1.0;\n              betaS_ik=((pBetaS3[iik][ks-1]*ps+pBetaS2[iik][ks-1])*ps\n                  +pBetaS1[iik][ks-1])*ps+pBetaS[iik][ks-1];\n              dBetaS_ik=(pBetaS6[iik][ks-1]*ps+pBetaS5[iik][ks-1])*ps\n                  +pBetaS4[iik][ks-1];\n            }\n          } else {\n            if(neigh_flag[temp_ik]) {\n              pass_ik=1;\n              dis_ik[0]=disij[0][temp_ik];\n              dis_ik[1]=disij[1][temp_ik];\n              dis_ik[2]=disij[2][temp_ik];\n              r_ik=rij[temp_ik];\n              betaS_ik=betaS[temp_ik];\n              dBetaS_ik=dBetaS[temp_ik];\n            }\n          }\n          if(pass_ik==1) {\n\n//find neighbor of i that is equal to k\n\n            nlistj=BOP_total[j];\n            for(jNeik=0;jNeik<nlistj;jNeik++) {\n              temp_jk=BOP_index[j]+jNeik;\n              ni_jk=neigh_index[temp_jk];\n              if(x[jlist[ni_jk]][0]==x[k][0]) {\n                if(x[jlist[ni_jk]][1]==x[k][1]) {\n                  if(x[jlist[ni_jk]][2]==x[k][2]) {\n                    break;\n                  }\n                }\n              }\n            }\n\n//find neighbor of k that is equal to j\n\n            for(kNeij=0;kNeij<nlistk;kNeij++) {\n              temp_kj=BOP_index[k]+kNeij;\n              ni_kj=neigh_index[temp_kj];\n              if(x[klist[ni_kj]][0]==x[j][0]) {\n                if(x[klist[ni_kj]][1]==x[j][1]) {\n                  if(x[klist[ni_kj]][2]==x[j][2]) {\n                    break;\n                  }\n                }\n              }\n            }\n            pass_jk=0;\n            if(otfly==1) {\n              dis_jk[0]=x[k][0]-x[j][0];\n              dis_jk[1]=x[k][1]-x[j][1];\n              dis_jk[2]=x[k][2]-x[j][2];\n              rsq_jk=dis_jk[0]*dis_jk[0]\n                  +dis_jk[1]*dis_jk[1]\n                  +dis_jk[2]*dis_jk[2];\n              r_jk=sqrt(rsq_jk);\n            } else {\n              if(neigh_flag[temp_jk]) {\n                pass_jk=1;\n                dis_jk[0]=disij[0][temp_jk];\n                dis_jk[1]=disij[1][temp_jk];\n                dis_jk[2]=disij[2][temp_jk];\n                r_jk=rij[temp_jk];\n              }\n            }\n\n            sig_flag=0;\n            for(nsearch=0;nsearch<nSigBk;nsearch++) {\n              ncmp=itypeSigBk[nsearch];\n              if(x[ncmp][0]==x[k][0]) {\n                if(x[ncmp][1]==x[k][1]) {\n                  if(x[ncmp][2]==x[k][2]) {\n                    nk0=nsearch;\n                    sig_flag=1;\n                    break;\n                  }\n                }\n              }\n            }\n            if(sig_flag==0) {\n              nSigBk=nSigBk+1;\n              nk0=nSigBk-1;\n              itypeSigBk[nk0]=k;\n            }\n            nb_ik=nb_t;\n            nb_t++;\n            if(nb_t>nb_sg) {\n              new_n_tot=nb_sg+maxneigh;\n              grow_sigma(nb_sg,new_n_tot);\n              nb_sg=new_n_tot;\n            }\n            bt_sg[nb_ik].temp=temp_ik;\n            bt_sg[nb_ik].i=i;\n            bt_sg[nb_ik].j=k;\n            nb_jk=nb_t;\n            nb_t++;\n            if(nb_t>nb_sg) {\n              new_n_tot=nb_sg+maxneigh;\n              grow_sigma(nb_sg,new_n_tot);\n              nb_sg=new_n_tot;\n            }\n            bt_sg[nb_jk].temp=temp_jk;\n            bt_sg[nb_jk].i=j;\n            bt_sg[nb_jk].j=k;\n            if(otfly==1) {\n              cosAng_jik=(dis_ij[0]*dis_ik[0]+dis_ij[1]*dis_ik[1]\n                  +dis_ij[2]*dis_ik[2])/(r_ij*r_ik);\n              dcA_jik[0][0]=(dis_ik[0]*r_ij*r_ik-cosAng_jik\n                  *dis_ij[0]*r_ik*r_ik)/(r_ij*r_ij*r_ik*r_ik);\n              dcA_jik[1][0]=(dis_ik[1]*r_ij*r_ik-cosAng_jik\n                  *dis_ij[1]*r_ik*r_ik)/(r_ij*r_ij*r_ik*r_ik);\n              dcA_jik[2][0]=(dis_ik[2]*r_ij*r_ik-cosAng_jik\n                  *dis_ij[2]*r_ik*r_ik)/(r_ij*r_ij*r_ik*r_ik);\n\n              dcA_jik[0][1]=(dis_ij[0]*r_ij*r_ik-cosAng_jik\n                  *dis_ik[0]*r_ij*r_ij)/(r_ij*r_ij*r_ik*r_ik);\n              dcA_jik[1][1]=(dis_ij[1]*r_ij*r_ik-cosAng_jik\n                  *dis_ik[1]*r_ij*r_ij)/(r_ij*r_ij*r_ik*r_ik);\n              dcA_jik[2][1]=(dis_ij[2]*r_ij*r_ik-cosAng_jik\n                  *dis_ik[2]*r_ij*r_ij)/(r_ij*r_ij*r_ik*r_ik);\n            } else {\n              if(ktmp!=jtmp) {\n                if(jtmp<ktmp) {\n                  njik=jtmp*(2*nlisti-jtmp-1)/2+(ktmp-jtmp)-1;\n                  ngj=0;\n                  ngk=1;\n                }\n                else {\n                  njik=ktmp*(2*nlisti-ktmp-1)/2+(jtmp-ktmp)-1;\n                  ngj=1;\n                  ngk=0;\n                }\n                ang_jik=cos_index[i]+njik;\n                cosAng_jik=cosAng[ang_jik];\n                dcA_jik[0][0]=dcAng[ang_jik][0][ngj];\n                dcA_jik[1][0]=dcAng[ang_jik][1][ngj];\n                dcA_jik[2][0]=dcAng[ang_jik][2][ngj];\n                dcA_jik[0][1]=dcAng[ang_jik][0][ngk];\n                dcA_jik[1][1]=dcAng[ang_jik][1][ngk];\n                dcA_jik[2][1]=dcAng[ang_jik][2][ngk];\n              }\n            }\n            amean=cosAng_jik;\n            if(amean<-1.0) amean=-1.0;\n            if(npower<=2) {\n              ps=(amean-1.0)*rdtheta+1.0;\n              ks=(int)ps;\n              if(ntheta-1<ks)\n                ks=ntheta-1;\n              ps=ps-ks;\n              if(ps>1.0)\n                ps=1.0;\n              ks=ks-1;\n              gfactor1=((gfunc3[jtype][itype][ktype][ks]*ps+\n                  gfunc2[jtype][itype][ktype][ks])*ps+\n                  gfunc1[jtype][itype][ktype][ks])*ps+\n                  gfunc[jtype][itype][ktype][ks];\n              gprime1=(gfunc6[jtype][itype][ktype][ks]*ps+\n                  gfunc5[jtype][itype][ktype][ks])*ps+\n                  gfunc4[jtype][itype][ktype][ks];\n            } else {\n              gfactor1=gpara[jtype-1][itype-1][ktype-1][0];\n              gprime1=0.0;\n              xrun=1.0;\n              for(lp1=1;lp1<npower+1;lp1++) {\n                gprime1=gprime1+(double)(lp1)*xrun*gpara[jtype-1][itype-1][ktype-1][lp1];\n                xrun=xrun*amean;\n                gfactor1=gfactor1+xrun*gpara[jtype-1][itype-1][ktype-1][lp1];\n              }\n            }\n            gfactorsq=gfactor1*gfactor1;\n            gsqprime=2.0*gfactor1*gprime1;\n\n//AA is Eq. 34 (a) or Eq. 10 (c) for the i atom\n//1st CC is Eq. 11 (c) for i atom where j & k=neighbor of i\n\n            AA=AA+gfactorsq*betaS_ik*betaS_ik;\n\n//agpdpr1 is derivative of AA w.r.t. Beta(rik)\n//app1 is derivative of AA w.r.t. cos(theta_jik)\n\n            agpdpr1=2.0*gfactorsq*betaS_ik*dBetaS_ik/r_ik;\n            app1=betaS_ik*betaS_ik*gsqprime;\n\n            bt_sg[nb_ij].dAA[0]+=\n                app1*dcA_jik[0][0];\n            bt_sg[nb_ij].dAA[1]+=\n                app1*dcA_jik[1][0];\n            bt_sg[nb_ij].dAA[2]+=\n                app1*dcA_jik[2][0];\n            bt_sg[nb_ik].dAA[0]+=\n                app1*dcA_jik[0][1]\n                +agpdpr1*dis_ik[0];\n            bt_sg[nb_ik].dAA[1]+=\n                app1*dcA_jik[1][1]\n                +agpdpr1*dis_ik[1];\n            bt_sg[nb_ik].dAA[2]+=\n                app1*dcA_jik[2][1]\n                +agpdpr1*dis_ik[2];\n\n            if(sigma_a[iij]!=0.0) {\n              CC=CC+gfactorsq*betaS_ik*betaS_ik*betaS_ik*betaS_ik;\n              agpdpr2=2.0*betaS_ik*betaS_ik*agpdpr1;\n              app2=betaS_ik*betaS_ik*app1;\n              bt_sg[nb_ij].dCC[0]+=\n                  app2*dcA_jik[0][0];\n              bt_sg[nb_ij].dCC[1]+=\n                  app2*dcA_jik[1][0];\n              bt_sg[nb_ij].dCC[2]+=\n                  app2*dcA_jik[2][0];\n              bt_sg[nb_ik].dCC[0]+=\n                  app2*dcA_jik[0][1]\n                  +agpdpr2*dis_ik[0];\n              bt_sg[nb_ik].dCC[1]+=\n                  app2*dcA_jik[1][1]\n                  +agpdpr2*dis_ik[1];\n              bt_sg[nb_ik].dCC[2]+=\n                  app2*dcA_jik[2][1]\n                  +agpdpr2*dis_ik[2];\n            }\n\n//k' is loop over neighbors all neighbors of j with k a neighbor\n//of i and j a neighbor of i and determine which k' is k\n            if(sigma_f[iij]!=0.5&&sigma_k[iij]!=0.0) {\n              same_kpk=0;\n\n              for(ltmp=0;ltmp<nlistj;ltmp++) {\n                temp_jkp=BOP_index[j]+ltmp;\n                ni_jkp=neigh_index[temp_jkp];\n                kp1=jlist[ni_jkp];\n                kp1type=map[type[kp1]]+1;\n                if(x[kp1][0]==x[k][0]) {\n                  if(x[kp1][1]==x[k][1]) {\n                    if(x[kp1][2]==x[k][2]) {\n                      same_kpk=1;\n                      break;\n                    }\n                  }\n                }\n              }\n              if(same_kpk){\n\n//loop over neighbors of k\n\n                for(mtmp=0;mtmp<nlistk;mtmp++) {\n                  temp_kpj=BOP_index[k]+mtmp;\n                  ni_kpj=neigh_index[temp_kpj];\n                  kp2=klist[ni_kpj];\n                  if(x[kp2][0]==x[j][0]) {\n                    if(x[kp2][1]==x[j][1]) {\n                      if(x[kp2][2]==x[j][2]) {\n                        break;\n                      }\n                    }\n                  }\n                }\n                if(jtype==ktype)\n                  ijk=jtype-1;\n                else if(jtype < ktype)\n                  ijk=jtype*bop_types-jtype*(jtype+1)/2+ktype-1;\n                else\n                  ijk=ktype*bop_types-ktype*(ktype+1)/2+jtype-1;\n                if(jtype==kp1type)\n                  ijkp=jtype-1;\n                else if(jtype<kp1type)\n                  ijkp=jtype*bop_types-jtype*(jtype+1)/2+kp1type-1;\n                else\n                  ijkp=kp1type*bop_types-kp1type*(kp1type+1)/2+jtype-1;\n                pass_jkp=0;\n                if(otfly==1) {\n                  dis_jkp[0]=x[kp1][0]-x[j][0];\n                  dis_jkp[1]=x[kp1][1]-x[j][1];\n                  dis_jkp[2]=x[kp1][2]-x[j][2];\n                  rsq_jkp=dis_jkp[0]*dis_jkp[0]\n                      +dis_jkp[1]*dis_jkp[1]\n                      +dis_jkp[2]*dis_jkp[2];\n                  r_jkp=sqrt(rsq_jkp);\n                  if(r_jkp<=rcut[ijkp]) {\n                    pass_jkp=1;\n                    ps=r_jkp*rdr[ijkp]+1.0;\n                    ks=(int)ps;\n                    if(nr-1<ks)\n                      ks=nr-1;\n                    ps=ps-ks;\n                    if(ps>1.0)\n                      ps=1.0;\n                    betaS_jkp=((pBetaS3[ijkp][ks-1]*ps+pBetaS2[ijkp][ks-1])*ps\n                        +pBetaS1[ijkp][ks-1])*ps+pBetaS[ijkp][ks-1];\n                    dBetaS_jkp=(pBetaS6[ijkp][ks-1]*ps+pBetaS5[ijkp][ks-1])*ps\n                        +pBetaS4[ijkp][ks-1];\n                    cosAng_ijk=(-dis_ij[0]*dis_jk[0]-dis_ij[1]*dis_jk[1]\n                        -dis_ij[2]*dis_jk[2])/(r_ij*r_jk);\n                    dcA_ijk[0][0]=(dis_jk[0]*r_ij*r_jk-cosAng_ijk\n                        *-dis_ij[0]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n                    dcA_ijk[1][0]=(dis_jk[1]*r_ij*r_jk-cosAng_ijk\n                        *-dis_ij[1]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n                    dcA_ijk[2][0]=(dis_jk[2]*r_ij*r_jk-cosAng_ijk\n                        *-dis_ij[2]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n                    dcA_ijk[0][1]=(-dis_ij[0]*r_ij*r_jk-cosAng_ijk\n                        *dis_jk[0]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n                    dcA_ijk[1][1]=(-dis_ij[1]*r_ij*r_jk-cosAng_ijk\n                        *dis_jk[1]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n                    dcA_ijk[2][1]=(-dis_ij[2]*r_ij*r_jk-cosAng_ijk\n                        *dis_jk[2]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n                  }\n                } else {\n                  if(neigh_flag[temp_jkp]) {\n                    pass_jkp=1;\n                    dis_jkp[0]=disij[0][temp_jkp];\n                    dis_jkp[1]=disij[1][temp_jkp];\n                    dis_jkp[2]=disij[2][temp_jkp];\n                    r_jkp=rij[temp_jkp];\n                    betaS_jkp=betaS[temp_jkp];\n                    dBetaS_jkp=dBetaS[temp_jkp];\n                    if(ji<ltmp) {\n                      nijk=ji*(2*nlistj-ji-1)/2+(ltmp-ji)-1;\n                      ngji=0;\n                      ngjk=1;\n                    }\n                    else {\n                      nijk=ltmp*(2*nlistj-ltmp-1)/2+(ji-ltmp)-1;\n                      ngji=1;\n                      ngjk=0;\n                    }\n                    ang_ijk=cos_index[j]+nijk;\n                    cosAng_ijk=cosAng[ang_ijk];\n                    dcA_ijk[0][0]=dcAng[ang_ijk][0][ngji];\n                    dcA_ijk[1][0]=dcAng[ang_ijk][1][ngji];\n                    dcA_ijk[2][0]=dcAng[ang_ijk][2][ngji];\n                    dcA_ijk[0][1]=dcAng[ang_ijk][0][ngjk];\n                    dcA_ijk[1][1]=dcAng[ang_ijk][1][ngjk];\n                    dcA_ijk[2][1]=dcAng[ang_ijk][2][ngjk];\n                  }\n                }\n                if(pass_jkp==1) {\n                  amean=cosAng_ijk;\n                  if(amean<-1.0) amean=-1.0;\n                  if(npower<=2) {\n                    ps=(amean-1.0)*rdtheta+1.0;\n                    ks=(int)ps;\n                    if(ntheta-1<ks)\n                      ks=ntheta-1;\n                    ps=ps-ks;\n                    if(ps>1.0)\n                      ps=1.0;\n                    ks=ks-1;\n                    gfactor2=((gfunc3[itype][jtype][ktype][ks]*ps+\n                        gfunc2[itype][jtype][ktype][ks])*ps+\n                        gfunc1[itype][jtype][ktype][ks])*ps+\n                        gfunc[itype][jtype][ktype][ks];\n                    gprime2=(gfunc6[itype][jtype][ktype][ks]*ps+\n                        gfunc5[itype][jtype][ktype][ks])*ps+\n                        gfunc4[itype][jtype][ktype][ks];\n                  } else {\n                    gfactor2=gpara[itype-1][jtype-1][ktype-1][0];\n                    gprime2=0.0;\n                    xrun=1.0;\n                    for(lp1=1;lp1<npower+1;lp1++) {\n                      gprime2=gprime2+(lp1)*xrun*gpara[itype-1][jtype-1][ktype-1][lp1];\n                      xrun=xrun*amean;\n                      gfactor2=gfactor2+xrun*gpara[itype-1][jtype-1][ktype-1][lp1];\n                    }\n                  }\n                  if(otfly==1) {\n                    cosAng_ikj=(dis_ik[0]*dis_jk[0]+dis_ik[1]*dis_jk[1]\n                        +dis_ik[2]*dis_jk[2])/(r_ik*r_jk);\n                    dcA_ikj[0][0]=(-dis_jk[0]*r_ik*r_jk-cosAng_ikj\n                        *-dis_ik[0]*r_jk*r_jk)/(r_ik*r_ik*r_jk*r_jk);\n                    dcA_ikj[1][0]=(-dis_jk[1]*r_ik*r_jk-cosAng_ikj\n                        *-dis_ik[1]*r_jk*r_jk)/(r_ik*r_ik*r_jk*r_jk);\n                    dcA_ikj[2][0]=(-dis_jk[2]*r_ik*r_jk-cosAng_ikj\n                        *-dis_ik[2]*r_jk*r_jk)/(r_ik*r_ik*r_jk*r_jk);\n                    dcA_ikj[0][1]=(-dis_ik[0]*r_ik*r_jk-cosAng_ikj\n                        *-dis_jk[0]*r_ik*r_ik)/(r_ik*r_ik*r_jk*r_jk);\n                    dcA_ikj[1][1]=(-dis_ik[1]*r_ik*r_jk-cosAng_ikj\n                        *-dis_jk[1]*r_ik*r_ik)/(r_ik*r_ik*r_jk*r_jk);\n                    dcA_ikj[2][1]=(-dis_ik[2]*r_ik*r_jk-cosAng_ikj\n                        *-dis_jk[2]*r_ik*r_ik)/(r_ik*r_ik*r_jk*r_jk);\n                  } else {\n                    if(kNeii<mtmp) {\n                      nikj=kNeii*(2*nlistk-kNeii-1)/2+(mtmp-kNeii)-1;\n                      ngki=0;\n                      ngkj=1;\n                    }\n                    else {\n                      nikj=mtmp*(2*nlistk-mtmp-1)/2+(kNeii-mtmp)-1;\n                      ngki=1;\n                      ngkj=0;\n                    }\n                    ang_ikj=cos_index[k]+nikj;\n\n                    cosAng_ikj=cosAng[ang_ikj];\n                    dcA_ikj[0][0]=dcAng[ang_ikj][0][ngki];\n                    dcA_ikj[1][0]=dcAng[ang_ikj][1][ngki];\n                    dcA_ikj[2][0]=dcAng[ang_ikj][2][ngki];\n                    dcA_ikj[0][1]=dcAng[ang_ikj][0][ngkj];\n                    dcA_ikj[1][1]=dcAng[ang_ikj][1][ngkj];\n                    dcA_ikj[2][1]=dcAng[ang_ikj][2][ngkj];\n                  }\n                  amean=cosAng_ikj;\n                  if(amean<-1.0) amean=-1.0;\n                  if(npower<=2) {\n                    ps=(amean-1.0)*rdtheta+1.0;\n                    ks=(int)ps;\n                    if(ntheta-1<ks)\n                      ks=ntheta-1;\n                    ps=ps-ks;\n                    if(ps>1.0)\n                      ps=1.0;\n                    ks=ks-1;\n                    gfactor3=((gfunc3[itype][jtype][jtype][ks]*ps+\n                        gfunc2[itype][ktype][jtype][ks])*ps+\n                        gfunc1[itype][ktype][jtype][ks])*ps+\n                        gfunc[itype][ktype][jtype][ks];\n                    gprime3=(gfunc6[itype][ktype][jtype][ks]*ps+\n                        gfunc5[itype][ktype][jtype][ks])*ps+\n                        gfunc4[itype][ktype][jtype][ks];\n                  } else {\n                    gfactor3=gpara[itype-1][ktype-1][jtype-1][0];\n                    gprime3=0.0;\n                    xrun=1.0;\n                    for(lp1=1;lp1<npower+1;lp1++) {\n                      gprime3=gprime3+(lp1)*xrun*gpara[itype-1][ktype-1][jtype-1][lp1];\n                      xrun=xrun*amean;\n                      gfactor3=gfactor3+xrun*gpara[itype-1][ktype-1][jtype-1][lp1];\n                    }\n                  }\n                  gfactor=gfactor1*gfactor2*gfactor3;\n                  rfactor=betaS_ik*betaS_jkp;\n\n//EE1 is (b) Eq. 12\n\n                  EE1=EE1+gfactor*rfactor;\n\n//rcm1 is derivative of EE1 w.r.t Beta(r_ik)\n//rcm2 is derivative of EE1 w.r.t Beta(r_jk')\n//gcm1 is derivative of EE1 w.r.t cos(theta_jik)\n//gcm2 is derivative of EE1 w.r.t cos(theta_ijk)\n//gcm3 is derivative of EE1 w.r.t cos(theta_ikj)\n\n                  rcm1=gfactor*betaS_jkp*dBetaS_ik/r_ik;\n                  rcm2=gfactor*betaS_ik*dBetaS_jkp/r_jkp;\n                  gcm1=rfactor*gprime1*gfactor2*gfactor3;\n                  gcm2=rfactor*gfactor1*gprime2*gfactor3;\n                  gcm3=rfactor*gfactor1*gfactor2*gprime3;\n                  bt_sg[nb_ij].dEE1[0]+=\n                      gcm1*dcA_jik[0][0]\n                      -gcm2*dcA_ijk[0][0];\n                  bt_sg[nb_ij].dEE1[1]+=\n                      gcm1*dcA_jik[1][0]\n                      -gcm2*dcA_ijk[1][0];\n                  bt_sg[nb_ij].dEE1[2]+=\n                      gcm1*dcA_jik[2][0]\n                      -gcm2*dcA_ijk[2][0];\n                  bt_sg[nb_ik].dEE1[0]+=\n                      gcm1*dcA_jik[0][1]\n                      +rcm1*dis_ik[0]\n                      -gcm3*dcA_ikj[0][0];\n                  bt_sg[nb_ik].dEE1[1]+=\n                      gcm1*dcA_jik[1][1]\n                      +rcm1*dis_ik[1]\n                      -gcm3*dcA_ikj[1][0];\n                  bt_sg[nb_ik].dEE1[2]+=\n                      gcm1*dcA_jik[2][1]\n                      +rcm1*dis_ik[2]\n                      -gcm3*dcA_ikj[2][0];\n                  bt_sg[nb_jk].dEE1[0]+=\n                      gcm2*dcA_ijk[0][1]\n                      +rcm2*dis_jkp[0]\n                      -gcm3*dcA_ikj[0][1];\n                  bt_sg[nb_jk].dEE1[1]+=\n                      gcm2*dcA_ijk[1][1]\n                      +rcm2*dis_jkp[1]\n                      -gcm3*dcA_ikj[1][1];\n                  bt_sg[nb_jk].dEE1[2]+=\n                      gcm2*dcA_ijk[2][1]\n                      +rcm2*dis_jkp[2]\n                      -gcm3*dcA_ikj[2][1];\n                }\n              }\n            }\n\n// k and k' and j are all different neighbors of i\n            if(sigma_a[iij]!=0) {\n              for(ltmp=0;ltmp<ktmp;ltmp++) {\n                if(ltmp!=jtmp) {\n                  temp_ikp=BOP_index[i]+ltmp;\n                  ni_ikp=neigh_index[temp_ikp];\n                  kp=iilist[ni_ikp];\n                  kptype = map[type[kp]]+1;\n                  if(itype==kptype)\n                    iikp=itype-1;\n                  else if(itype<kptype)\n                    iikp=itype*bop_types-itype*(itype+1)/2+kptype-1;\n                  else\n                    iikp=kptype*bop_types-kptype*(kptype+1)/2+itype-1;\n                  for(nsearch=0;nsearch<nSigBk;nsearch++) {\n                    ncmp=itypeSigBk[nsearch];\n                    if(x[ncmp][0]==x[kp][0]) {\n                      if(x[ncmp][1]==x[kp][1]) {\n                        if(x[ncmp][2]==x[kp][2]) {\n                          break;\n                        }\n                      }\n                    }\n                  }\n                  pass_ikp=0;\n                  if(otfly==1) {\n                    dis_ikp[0]=x[kp][0]-x[i][0];\n                    dis_ikp[1]=x[kp][1]-x[i][1];\n                    dis_ikp[2]=x[kp][2]-x[i][2];\n                    rsq_ikp=dis_ikp[0]*dis_ikp[0]\n                        +dis_ikp[1]*dis_ikp[1]\n                        +dis_ikp[2]*dis_ikp[2];\n                    r_ikp=sqrt(rsq_ikp);\n                    if(r_ikp<=rcut[iikp]) {\n                      pass_ikp=1;\n                      ps=r_ikp*rdr[iikp]+1.0;\n                      ks=(int)ps;\n                      if(nr-1<ks)\n                        ks=nr-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      betaS_ikp=((pBetaS3[iikp][ks-1]*ps+pBetaS2[iikp][ks-1])*ps\n                          +pBetaS1[iikp][ks-1])*ps+pBetaS[iikp][ks-1];\n                      dBetaS_ikp=(pBetaS6[iikp][ks-1]*ps+pBetaS5[iikp][ks-1])*ps\n                          +pBetaS4[iikp][ks-1];\n                    }\n                  } else {\n                    if(neigh_flag[temp_ikp]) {\n                      pass_ikp=1;\n                      dis_ikp[0]=disij[0][temp_ikp];\n                      dis_ikp[1]=disij[1][temp_ikp];\n                      dis_ikp[2]=disij[2][temp_ikp];\n                      r_ikp=rij[temp_ikp];\n                      betaS_ikp=betaS[temp_ikp];\n                      dBetaS_ikp=dBetaS[temp_ikp];\n                    }\n                  }\n                  if(pass_ikp==1) {\n                    nb_ikp=nb_t;\n                    nb_t++;\n                    if(nb_t>nb_sg) {\n                      new_n_tot=nb_sg+maxneigh;\n                      grow_sigma(nb_sg,new_n_tot);\n                      nb_sg=new_n_tot;\n                    }\n                    bt_sg[nb_ikp].temp=temp_ikp;\n                    bt_sg[nb_ikp].i=i;\n                    bt_sg[nb_ikp].j=kp;\n                    if(otfly==1) {\n                      cosAng_jikp=(dis_ij[0]*dis_ikp[0]+dis_ij[1]*dis_ikp[1]\n                          +dis_ij[2]*dis_ikp[2])/(r_ij*r_ikp);\n                      dcA_jikp[0][0]=(dis_ikp[0]*r_ij*r_ikp-cosAng_jikp\n                          *dis_ij[0]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                      dcA_jikp[1][0]=(dis_ikp[1]*r_ij*r_ikp-cosAng_jikp\n                          *dis_ij[1]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                      dcA_jikp[2][0]=(dis_ikp[2]*r_ij*r_ikp-cosAng_jikp\n                          *dis_ij[2]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                      dcA_jikp[0][1]=(dis_ij[0]*r_ij*r_ikp-cosAng_jikp\n                          *dis_ikp[0]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                      dcA_jikp[1][1]=(dis_ij[1]*r_ij*r_ikp-cosAng_jikp\n                          *dis_ikp[1]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                      dcA_jikp[2][1]=(dis_ij[2]*r_ij*r_ikp-cosAng_jikp\n                          *dis_ikp[2]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                      cosAng_kikp=(dis_ik[0]*dis_ikp[0]+dis_ik[1]*dis_ikp[1]\n                          +dis_ik[2]*dis_ikp[2])/(r_ik*r_ikp);\n                      dcA_kikp[0][0]=(dis_ikp[0]*r_ik*r_ikp-cosAng_kikp\n                          *dis_ik[0]*r_ikp*r_ikp)/(r_ik*r_ik*r_ikp*r_ikp);\n                      dcA_kikp[1][0]=(dis_ikp[1]*r_ik*r_ikp-cosAng_kikp\n                          *dis_ik[1]*r_ikp*r_ikp)/(r_ik*r_ik*r_ikp*r_ikp);\n                      dcA_kikp[2][0]=(dis_ikp[2]*r_ik*r_ikp-cosAng_kikp\n                          *dis_ik[2]*r_ikp*r_ikp)/(r_ik*r_ik*r_ikp*r_ikp);\n                      dcA_kikp[0][1]=(dis_ik[0]*r_ik*r_ikp-cosAng_kikp\n                          *dis_ikp[0]*r_ik*r_ik)/(r_ik*r_ik*r_ikp*r_ikp);\n                      dcA_kikp[1][1]=(dis_ik[1]*r_ik*r_ikp-cosAng_kikp\n                          *dis_ikp[1]*r_ik*r_ik)/(r_ik*r_ik*r_ikp*r_ikp);\n                      dcA_kikp[2][1]=(dis_ik[2]*r_ik*r_ikp-cosAng_kikp\n                          *dis_ikp[2]*r_ik*r_ik)/(r_ik*r_ik*r_ikp*r_ikp);\n                    } else {\n                      if(jtmp<ltmp) {\n                        njikp=jtmp*(2*nlisti-jtmp-1)/2+(ltmp-jtmp)-1;\n                        nglj=0;\n                        ngl=1;\n                      }\n                      else {\n                        njikp=ltmp*(2*nlisti-ltmp-1)/2+(jtmp-ltmp)-1;\n                        nglj=1;\n                        ngl=0;\n                      }\n                      if(ktmp<ltmp) {\n                        nkikp=ktmp*(2*nlisti-ktmp-1)/2+(ltmp-ktmp)-1;\n                        nglk=0;\n                        nglkp=1;\n                      }\n                      else {\n                        nkikp=ltmp*(2*nlisti-ltmp-1)/2+(ktmp-ltmp)-1;\n                        nglk=1;\n                        nglkp=0;\n                      }\n                      ang_jikp=cos_index[i]+njikp;\n                      cosAng_jikp=cosAng[ang_jikp];\n                      dcA_jikp[0][0]=dcAng[ang_jikp][0][nglj];\n                      dcA_jikp[1][0]=dcAng[ang_jikp][1][nglj];\n                      dcA_jikp[2][0]=dcAng[ang_jikp][2][nglj];\n                      dcA_jikp[0][1]=dcAng[ang_jikp][0][ngl];\n                      dcA_jikp[1][1]=dcAng[ang_jikp][1][ngl];\n                      dcA_jikp[2][1]=dcAng[ang_jikp][2][ngl];\n                      ang_kikp=cos_index[i]+nkikp;\n                      cosAng_kikp=cosAng[ang_jikp];\n                      dcA_kikp[0][0]=dcAng[ang_kikp][0][nglk];\n                      dcA_kikp[1][0]=dcAng[ang_kikp][1][nglk];\n                      dcA_kikp[2][0]=dcAng[ang_kikp][2][nglk];\n                      dcA_kikp[0][1]=dcAng[ang_kikp][0][nglkp];\n                      dcA_kikp[1][1]=dcAng[ang_kikp][1][nglkp];\n                      dcA_kikp[2][1]=dcAng[ang_kikp][2][nglkp];\n                    }\n                    amean=cosAng_jikp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor2=((gfunc3[jtype][itype][kptype][ks]*ps+\n                          gfunc2[jtype][itype][kptype][ks])*ps+\n                          gfunc1[jtype][itype][kptype][ks])*ps+\n                          gfunc[jtype][itype][kptype][ks];\n                      gprime2=(gfunc6[jtype][itype][kptype][ks]*ps+\n                          gfunc5[jtype][itype][kptype][ks])*ps+\n                          gfunc4[jtype][itype][kptype][ks];\n                    } else {\n                      gfactor2=gpara[jtype-1][itype-1][kptype-1][0];\n                      gprime2=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime2=gprime2+(lp1)*xrun*gpara[jtype-1][itype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor2=gfactor2+xrun*gpara[jtype-1][itype-1][kptype-1][lp1];\n                      }\n                    }\n                    amean=cosAng_kikp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor3=((gfunc3[ktype][itype][kptype][ks]*ps+\n                          gfunc2[ktype][itype][kptype][ks])*ps+\n                          gfunc1[ktype][itype][kptype][ks])*ps+\n                          gfunc[ktype][itype][kptype][ks];\n                      gprime3=(gfunc6[ktype][itype][kptype][ks]*ps+\n                          gfunc5[ktype][itype][kptype][ks])*ps+\n                          gfunc4[ktype][itype][kptype][ks];\n                    } else {\n                      gfactor3=gpara[ktype-1][itype-1][kptype-1][0];\n                      gprime3=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime3=gprime3+(lp1)*xrun*gpara[ktype-1][itype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor3=gfactor3+xrun*gpara[ktype-1][itype-1][kptype-1][lp1];\n                      }\n                    }\n                    gfactor=gfactor1*gfactor2*gfactor3;\n                    rfactorrt=betaS_ik*betaS_ikp;\n                    rfactor=rfactorrt*rfactorrt;\n\n//2nd CC is second term of Eq. 11 (c) for i atom where j , k & k' =neighbor of i\n\n                    CC=CC+2.0*gfactor*rfactor;\n\n//agpdpr1 is derivative of CC 2nd term w.r.t. Beta(r_ik)\n//agpdpr2 is derivative of CC 2nd term w.r.t. Beta(r_ik')\n//app1 is derivative of CC 2nd term w.r.t. cos(theta_jik)\n//app2 is derivative of CC 2nd term w.r.t. cos(theta_jik')\n//app3 is derivative of CC 2nd term w.r.t. cos(theta_kik')\n\n                    agpdpr1=4.0*gfactor*rfactorrt*betaS_ikp\n                        *dBetaS_ik/r_ik;\n                    agpdpr2=4.0*gfactor*rfactorrt*betaS_ik\n                        *dBetaS_ikp/r_ikp;\n                    app1=2.0*rfactor*gfactor2*gfactor3*gprime1;\n                    app2=2.0*rfactor*gfactor1*gfactor3*gprime2;\n                    app3=2.0*rfactor*gfactor1*gfactor2*gprime3;\n                    bt_sg[nb_ij].dCC[0]+=\n                        app1*dcA_jik[0][0]\n                        +app2*dcA_jikp[0][0];\n                    bt_sg[nb_ij].dCC[1]+=\n                        app1*dcA_jik[1][0]\n                        +app2*dcA_jikp[1][0];\n                    bt_sg[nb_ij].dCC[2]+=\n                        app1*dcA_jik[2][0]\n                        +app2*dcA_jikp[2][0];\n                    bt_sg[nb_ik].dCC[0]+=\n                        app1*dcA_jik[0][1]\n                        +app3*dcA_kikp[0][0]\n                        +agpdpr1*dis_ik[0];\n                    bt_sg[nb_ik].dCC[1]+=\n                        app1*dcA_jik[1][1]\n                        +app3*dcA_kikp[1][0]\n                        +agpdpr1*dis_ik[1];\n                    bt_sg[nb_ik].dCC[2]+=\n                        app1*dcA_jik[2][1]\n                        +app3*dcA_kikp[2][0]\n                        +agpdpr1*dis_ik[2];\n                    bt_sg[nb_ikp].dCC[0]=\n                        app2*dcA_jikp[0][1]\n                        +app3*dcA_kikp[0][1]\n                        +agpdpr2*dis_ikp[0];\n                    bt_sg[nb_ikp].dCC[1]=\n                        app2*dcA_jikp[1][1]\n                        +app3*dcA_kikp[1][1]\n                        +agpdpr2*dis_ikp[1];\n                    bt_sg[nb_ikp].dCC[2]=\n                        app2*dcA_jikp[2][1]\n                        +app3*dcA_kikp[2][1]\n                        +agpdpr2*dis_ikp[2];\n                  }\n                }\n              }\n\n// j and k are different neighbors of i and k' is a neighbor k not equal to i\n\n              for(ltmp=0;ltmp<nlistk;ltmp++) {\n                temp_kkp=BOP_index[k]+ltmp;\n                ni_kkp=neigh_index[temp_ik];\n                kp=klist[ni_kkp];;\n                kptype = map[type[kp]]+1;\n                same_ikp=0;\n                same_jkp=0;\n                if(x[i][0]==x[kp][0]) {\n                  if(x[i][1]==x[kp][1]) {\n                    if(x[i][2]==x[kp][2]) {\n                      same_ikp=1;\n                    }\n                  }\n                }\n                if(x[j][0]==x[kp][0]) {\n                  if(x[j][1]==x[kp][1]) {\n                    if(x[j][2]==x[kp][2]) {\n                      same_jkp=1;\n                    }\n                  }\n                }\n                if(!same_ikp&&!same_jkp) {\n                  if(ktype==kptype)\n                    ikkp=ktype-1;\n                  else if(ktype<kptype)\n                    ikkp=ktype*bop_types-ktype*(ktype+1)/2+kptype-1;\n                  else\n                    ikkp=kptype*bop_types-kptype*(kptype+1)/2+ktype-1;\n                  pass_kkp=0;\n                  if(otfly==1) {\n                    dis_kkp[0]=x[kp][0]-x[k][0];\n                    dis_kkp[1]=x[kp][1]-x[k][1];\n                    dis_kkp[2]=x[kp][2]-x[k][2];\n                    rsq_kkp=dis_kkp[0]*dis_kkp[0]\n                        +dis_kkp[1]*dis_kkp[1]\n                        +dis_kkp[2]*dis_kkp[2];\n                    r_kkp=sqrt(rsq_kkp);\n                    if(r_kkp<=rcut[ikkp]) {\n                      pass_kkp=1;\n                      ps=r_kkp*rdr[ikkp]+1.0;\n                      ks=(int)ps;\n                      if(nr-1<ks)\n                        ks=nr-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      betaS_kkp=((pBetaS3[ikkp][ks-1]*ps+pBetaS2[ikkp][ks-1])*ps\n                          +pBetaS1[ikkp][ks-1])*ps+pBetaS[ikkp][ks-1];\n                      dBetaS_kkp=(pBetaS6[ikkp][ks-1]*ps+pBetaS5[ikkp][ks-1])*ps\n                          +pBetaS4[ikkp][ks-1];\n                    }\n                  } else {\n                    if(neigh_flag[temp_kkp]) {\n                      pass_kkp=1;\n                      dis_kkp[0]=disij[0][temp_kkp];\n                      dis_kkp[1]=disij[1][temp_kkp];\n                      dis_kkp[2]=disij[2][temp_kkp];\n                      r_kkp=rij[temp_kkp];\n                      betaS_kkp=betaS[temp_kkp];\n                      dBetaS_kkp=dBetaS[temp_kkp];\n                    }\n                  }\n                  if(pass_kkp==1) {\n                    sig_flag=0;\n                    for(nsearch=0;nsearch<nSigBk;nsearch++) {\n                      ncmp=itypeSigBk[nsearch];\n                      if(x[ncmp][0]==x[kp][0]) {\n                        if(x[ncmp][1]==x[kp][1]) {\n                          if(x[ncmp][2]==x[kp][2]) {\n                            sig_flag=1;\n                            nkp=nsearch;\n                            break;\n                          }\n                        }\n                      }\n                    }\n                    if(sig_flag==0) {\n                      nSigBk=nSigBk+1;\n                      nkp=nSigBk-1;\n                      itypeSigBk[nkp]=kp;\n                    }\n                    if(otfly==1) {\n                      cosAng_ikkp=(-dis_ik[0]*dis_kkp[0]-dis_ik[1]*dis_kkp[1]\n                          -dis_ik[2]*dis_kkp[2])/(r_ik*r_kkp);\n                      dcA_ikkp[0][0]=(dis_kkp[0]*r_ik*r_kkp-cosAng_ikkp\n                          *-dis_ik[0]*r_kkp*r_kkp)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[1][0]=(dis_kkp[1]*r_ik*r_kkp-cosAng_ikkp\n                          *-dis_ik[1]*r_kkp*r_kkp)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[2][0]=(dis_kkp[2]*r_ik*r_kkp-cosAng_ikkp\n                          *-dis_ik[2]*r_kkp*r_kkp)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[0][1]=(-dis_ik[0]*r_ik*r_kkp-cosAng_ikkp\n                          *dis_kkp[0]*r_ik*r_ik)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[1][1]=(-dis_ik[1]*r_ik*r_kkp-cosAng_ikkp\n                          *dis_kkp[1]*r_ik*r_ik)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[2][1]=(-dis_ik[2]*r_ik*r_kkp-cosAng_ikkp\n                          *dis_kkp[2]*r_ik*r_ik)/(r_ik*r_ik*r_kkp*r_kkp);\n                    } else {\n                      if(kNeii<ltmp) {\n                        nikkp=kNeii*(2*nlistk-kNeii-1)/2+(ltmp-kNeii)-1;\n                        nglkp=1;\n                        ngli=0;\n                      }\n                      else {\n                        nikkp=ltmp*(2*nlistk-ltmp-1)/2+(kNeii-ltmp)-1;\n                        nglkp=0;\n                        ngli=1;\n                      }\n                      ang_ikkp=cos_index[i]+nikkp;\n                      cosAng_ikkp=cosAng[ang_ikkp];\n                      dcA_ikkp[0][0]=dcAng[ang_ikkp][0][nglkp];\n                      dcA_ikkp[1][0]=dcAng[ang_ikkp][1][nglkp];\n                      dcA_ikkp[2][0]=dcAng[ang_ikkp][2][nglkp];\n                      dcA_ikkp[0][1]=dcAng[ang_ikkp][0][ngli];\n                      dcA_ikkp[1][1]=dcAng[ang_ikkp][1][ngli];\n                      dcA_ikkp[2][1]=dcAng[ang_ikkp][2][ngli];\n                    }\n\n                    nb_kkp=nb_t;\n                    nb_t++;\n                    if(nb_t>nb_sg) {\n                      new_n_tot=nb_sg+maxneigh;\n                      grow_sigma(nb_sg,new_n_tot);\n                      nb_sg=new_n_tot;\n                    }\n                    bt_sg[nb_kkp].temp=temp_kkp;\n                    bt_sg[nb_kkp].i=k;\n                    bt_sg[nb_kkp].j=kp;\n                    amean=cosAng_ikkp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor2=((gfunc3[itype][ktype][kptype][ks]*ps+\n                          gfunc2[itype][ktype][kptype][ks])*ps+\n                          gfunc1[itype][ktype][kptype][ks])*ps+\n                          gfunc[itype][ktype][kptype][ks];\n                      gprime2=(gfunc6[itype][ktype][kptype][ks]*ps+\n                          gfunc5[itype][ktype][kptype][ks])*ps+\n                          gfunc4[itype][ktype][kptype][ks];\n                    } else {\n                      gfactor2=gpara[itype-1][ktype-1][kptype-1][0];\n                      gprime2=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime2=gprime2+(lp1)*xrun*gpara[itype-1][ktype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor2=gfactor2+xrun*gpara[itype-1][ktype-1][kptype-1][lp1];\n                      }\n                    }\n                    gfactorsq2=gfactor2*gfactor2;\n                    gsqprime2=2.0*gfactor2*gprime2;\n                    gfactor=gfactorsq*gfactorsq2;\n                    rfactorrt=betaS_ik*betaS_kkp;\n                    rfactor=rfactorrt*rfactorrt;\n\n//3rd CC is third term of Eq. 11 (c) for i atom\n//where j , k =neighbor of i & k' =neighbor of k\n\n                    CC=CC+gfactor*rfactor;\n\n//agpdpr1 is derivative of CC 3rd term w.r.t. Beta(r_ik)\n//agpdpr2 is derivative of CC 3rd term w.r.t. Beta(r_kk')\n//app1 is derivative of CC 3rd term w.r.t. cos(theta_jik)\n//app2 is derivative of CC 3rd term w.r.t. cos(theta_ikk')\n\n                    agpdpr1=2.0*gfactor*rfactorrt*betaS_kkp\n                        *dBetaS_ik/r_ik;\n                    agpdpr2=2.0*gfactor*rfactorrt*betaS_ik\n                        *dBetaS_kkp/r_kkp;\n                    app1=rfactor*gfactorsq2*gsqprime;\n                    app2=rfactor*gfactorsq*gsqprime2;\n                    bt_sg[nb_ij].dCC[0]+=\n                        app1*dcA_jik[0][0];\n                    bt_sg[nb_ij].dCC[1]+=\n                        app1*dcA_jik[1][0];\n                    bt_sg[nb_ij].dCC[2]+=\n                        app1*dcA_jik[2][0];\n                    bt_sg[nb_ik].dCC[0]+=\n                        app1*dcA_jik[0][1]\n                        +agpdpr1*dis_ik[0]\n                        -app2*dcA_ikkp[0][0];\n                    bt_sg[nb_ik].dCC[1]+=\n                        app1*dcA_jik[1][1]\n                        +agpdpr1*dis_ik[1]\n                        -app2*dcA_ikkp[1][0];\n                    bt_sg[nb_ik].dCC[2]+=\n                        app1*dcA_jik[2][1]\n                        +agpdpr1*dis_ik[2]\n                        -app2*dcA_ikkp[2][0];\n                    bt_sg[nb_kkp].dCC[0]+=\n                        app2*dcA_ikkp[0][1]\n                        +agpdpr2*dis_kkp[0];\n                    bt_sg[nb_kkp].dCC[1]+=\n                        app2*dcA_ikkp[1][1]\n                        +agpdpr2*dis_kkp[1];\n                    bt_sg[nb_kkp].dCC[2]+=\n                        app2*dcA_ikkp[2][1]\n                        +agpdpr2*dis_kkp[2];\n                  }\n                }\n              }\n\n//j and k are different neighbors of i and k' is a neighbor j not equal to k\n\n              for(ltmp=0;ltmp<nlistj;ltmp++) {\n                sig_flag=0;\n                temp_jkp=BOP_index[j]+ltmp;\n                ni_jkp=neigh_index[temp_jkp];\n                kp=jlist[ni_jkp];\n                kptype = map[type[kp]]+1;\n                kplist=firstneigh[kp];\n\n                same_kkpk=0;\n                same_jkpj=0;\n                nlistkp=BOP_total[kp];\n                for(kpNeij=0;kpNeij<nlistkp;kpNeij++) {\n                  temp_kpj=BOP_index[kp]+kpNeij;\n                  ni_kpj=neigh_index[temp_kpj];\n                  kpj=kplist[ni_kpj];\n                  if(x[j][0]==x[kpj][0]) {\n                    if(x[j][1]==x[kpj][1]) {\n                      if(x[j][2]==x[kpj][2]) {\n                        same_jkpj=1;\n                        break;\n                      }\n                    }\n                  }\n                }\n                for(kpNeik=0;kpNeik<nlistkp;kpNeik++) {\n                  temp_kpk=BOP_index[kp]+kpNeik;\n                  ni_kpk=neigh_index[temp_kpk];\n                  kpk=kplist[ni_kpk];\n                  if(x[k][0]==x[kpk][0]) {\n                    if(x[k][1]==x[kpk][1]) {\n                      if(x[k][2]==x[kpk][2]) {\n                        same_kkpk=1;\n                        break;\n                      }\n                    }\n                  }\n                }\n                if(!same_jkpj&&!same_kkpk) {\n                  same_kkpk=0;\n                  for(kNeikp=0;kNeikp<nlistk;kNeikp++) {\n                    temp_kkp=BOP_index[k]+kNeikp;\n                    ni_kkp=neigh_index[temp_kkp];\n                    kkp=kplist[ni_kkp];\n                    if(x[kp][0]==x[kkp][0]) {\n                      if(x[kp][1]==x[kkp][1]) {\n                        if(x[kp][2]==x[kkp][2]) {\n                          sig_flag=1;\n                          break;\n                        }\n                      }\n                    }\n                  }\n                  if(sig_flag==1) {\n                    for(nsearch=0;nsearch<nlistkp;nsearch++) {\n                      kp_nsearch=BOP_index[kp]+nsearch;\n                      ni_kpnsearch=neigh_index[kp_nsearch];\n                      ncmp=kplist[ni_kpnsearch];\n                      if(x[ncmp][0]==x[j][0]) {\n                        if(x[ncmp][1]==x[j][1]) {\n                          if(x[ncmp][2]==x[j][2]) {\n                            kpNeij=nsearch;\n                          }\n                        }\n                      }\n                      if(x[ncmp][0]==x[k][0]) {\n                        if(x[ncmp][1]==x[k][1]) {\n                          if(x[ncmp][2]==x[k][2]) {\n                            kpNeik=nsearch;\n                          }\n                        }\n                      }\n                    }\n                    if(jtype==kptype)\n                      ijkp=jtype-1;\n                    else if(jtype<kptype)\n                      ijkp=jtype*bop_types-jtype*(jtype+1)/2+kptype-1;\n                    else\n                      ijkp=kptype*bop_types-kptype*(kptype+1)/2+jtype-1;\n                    if(ktype==kptype)\n                      ikkp=ktype-1;\n                    else if(ktype<kptype)\n                      ikkp=ktype*bop_types-ktype*(ktype+1)/2+kptype-1;\n                    else\n                      ikkp=kptype*bop_types-kptype*(kptype+1)/2+ktype-1;\n                    if(otfly==1) {\n                      dis_jkp[0]=x[kp][0]-x[j][0];\n                      dis_jkp[1]=x[kp][1]-x[j][1];\n                      dis_jkp[2]=x[kp][2]-x[j][2];\n                      rsq_jkp=dis_jkp[0]*dis_jkp[0]\n                          +dis_jkp[1]*dis_jkp[1]\n                          +dis_jkp[2]*dis_jkp[2];\n                      r_jkp=sqrt(rsq_jkp);\n                      ps=r_jkp*rdr[ijkp]+1.0;\n                      ks=(int)ps;\n                      if(nr-1<ks)\n                        ks=nr-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      betaS_jkp=((pBetaS3[ijkp][ks-1]*ps+pBetaS2[ijkp][ks-1])*ps\n                          +pBetaS1[ijkp][ks-1])*ps+pBetaS[ijkp][ks-1];\n                      dBetaS_jkp=(pBetaS6[ijkp][ks-1]*ps+pBetaS5[ijkp][ks-1])*ps\n                          +pBetaS4[ijkp][ks-1];\n                      dis_kkp[0]=x[kp][0]-x[k][0];\n                      dis_kkp[1]=x[kp][1]-x[k][1];\n                      dis_kkp[2]=x[kp][2]-x[k][2];\n                      rsq_kkp=dis_kkp[0]*dis_kkp[0]\n                          +dis_kkp[1]*dis_kkp[1]\n                          +dis_kkp[2]*dis_kkp[2];\n                      r_kkp=sqrt(rsq_kkp);\n                      ps=r_kkp*rdr[ikkp]+1.0;\n                      ks=(int)ps;\n                      if(nr-1<ks)\n                        ks=nr-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      betaS_kkp=((pBetaS3[ikkp][ks-1]*ps+pBetaS2[ikkp][ks-1])*ps\n                          +pBetaS1[ikkp][ks-1])*ps+pBetaS[ikkp][ks-1];\n                      dBetaS_kkp=(pBetaS6[ikkp][ks-1]*ps+pBetaS5[ikkp][ks-1])*ps\n                          +pBetaS4[ikkp][ks-1];\n                      cosAng_ijkp=(-dis_ij[0]*dis_jkp[0]-dis_ij[1]*dis_jkp[1]\n                          -dis_ij[2]*dis_jkp[2])/(r_ij*r_jkp);\n                      dcA_ijkp[0][0]=(dis_jkp[0]*r_ij*r_jkp-cosAng_ijkp\n                          *-dis_ij[0]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[1][0]=(dis_jkp[1]*r_ij*r_jkp-cosAng_ijkp\n                          *-dis_ij[1]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[2][0]=(dis_jkp[2]*r_ij*r_jkp-cosAng_ijkp\n                          *-dis_ij[2]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[0][1]=(-dis_ij[0]*r_ij*r_jkp-cosAng_ijkp\n                          *dis_jkp[0]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[1][1]=(-dis_ij[1]*r_ij*r_jkp-cosAng_ijkp\n                          *dis_jkp[1]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[2][1]=(-dis_ij[2]*r_ij*r_jkp-cosAng_ijkp\n                          *dis_jkp[2]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                      cosAng_ikkp=(-dis_ik[0]*dis_kkp[0]-dis_ik[1]*dis_kkp[1]\n                          -dis_ik[2]*dis_kkp[2])/(r_ik*r_kkp);\n                      dcA_ikkp[0][0]=(dis_kkp[0]*r_ik*r_kkp-cosAng_ikkp\n                          *-dis_ik[0]*r_kkp*r_kkp)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[1][0]=(dis_kkp[1]*r_ik*r_kkp-cosAng_ikkp\n                          *-dis_ik[1]*r_kkp*r_kkp)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[2][0]=(dis_kkp[2]*r_ik*r_kkp-cosAng_ikkp\n                          *-dis_ik[2]*r_kkp*r_kkp)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[0][1]=(-dis_ik[0]*r_ik*r_kkp-cosAng_ikkp\n                          *dis_kkp[0]*r_ik*r_ik)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[1][1]=(-dis_ik[1]*r_ik*r_kkp-cosAng_ikkp\n                          *dis_kkp[1]*r_ik*r_ik)/(r_ik*r_ik*r_kkp*r_kkp);\n                      dcA_ikkp[2][1]=(-dis_ik[2]*r_ik*r_kkp-cosAng_ikkp\n                          *dis_kkp[2]*r_ik*r_ik)/(r_ik*r_ik*r_kkp*r_kkp);\n                      cosAng_jkpk=(dis_jkp[0]*dis_kkp[0]+dis_jkp[1]*dis_kkp[1]\n                          +dis_jkp[2]*dis_kkp[2])/(r_jkp*r_kkp);\n                      dcA_jkpk[0][0]=(-dis_kkp[0]*r_jkp*r_kkp-cosAng_jkpk\n                          *-dis_jkp[0]*r_kkp*r_kkp)/(r_jkp*r_jkp*r_kkp*r_kkp);\n                      dcA_jkpk[1][0]=(-dis_kkp[1]*r_jkp*r_kkp-cosAng_jkpk\n                          *-dis_jkp[1]*r_kkp*r_kkp)/(r_jkp*r_jkp*r_kkp*r_kkp);\n                      dcA_jkpk[2][0]=(-dis_kkp[2]*r_jkp*r_kkp-cosAng_jkpk\n                          *-dis_jkp[2]*r_kkp*r_kkp)/(r_jkp*r_jkp*r_kkp*r_kkp);\n                      dcA_jkpk[0][1]=(-dis_jkp[0]*r_jkp*r_kkp-cosAng_jkpk\n                          *-dis_kkp[0]*r_jkp*r_jkp)/(r_jkp*r_jkp*r_kkp*r_kkp);\n                      dcA_jkpk[1][1]=(-dis_jkp[1]*r_jkp*r_kkp-cosAng_jkpk\n                          *-dis_kkp[1]*r_jkp*r_jkp)/(r_jkp*r_jkp*r_kkp*r_kkp);\n                      dcA_jkpk[2][1]=(-dis_jkp[2]*r_jkp*r_kkp-cosAng_jkpk\n                          *-dis_kkp[2]*r_jkp*r_jkp)/(r_jkp*r_jkp*r_kkp*r_kkp);\n                    } else {\n                      dis_jkp[0]=disij[0][temp_jkp];\n                      dis_jkp[1]=disij[1][temp_jkp];\n                      dis_jkp[2]=disij[2][temp_jkp];\n                      r_jkp=rij[temp_jkp];\n                      betaS_jkp=betaS[temp_jkp];\n                      dBetaS_jkp=dBetaS[temp_jkp];\n                      dis_kkp[0]=disij[0][temp_kkp];\n                      dis_kkp[1]=disij[1][temp_kkp];\n                      dis_kkp[2]=disij[2][temp_kkp];\n                      r_kkp=rij[temp_kkp];\n                      betaS_kkp=betaS[temp_kkp];\n                      dBetaS_kkp=dBetaS[temp_kkp];\n                      if(ji<ltmp) {\n                        nijkp=(ji)*nlistj-(ji+1)*(ji+2)/2+ltmp;\n                        ngji=0;\n                        ngjkp=1;\n                      }\n                      else {\n                        nijkp=(ltmp)*nlistj-(ltmp+1)*(ltmp+2)/2+ji;\n                        ngji=1;\n                        ngjkp=0;\n                      }\n                      if(kNeii<kNeikp) {\n                        nikkp=(kNeii)*nlistk-(kNeii+1)*(kNeii+2)/2+kNeikp;\n                        ngki=0;\n                        ngkkp=1;\n                      }\n                      else {\n                        nikkp=(kNeikp)*nlistk-(kNeikp+1)*(kNeikp+2)/2+kNeii;\n                        ngki=1;\n                        ngkkp=0;\n                      }\n                      if(kpNeij<kpNeik) {\n                        njkpk=(kpNeij)*nlistkp-(kpNeij+1)*(kpNeij+2)/2+kpNeik;\n                        ngkpj=0;\n                        ngkpk=1;\n                      }\n                      else {\n                        njkpk=(kpNeik)*nlistkp-(kpNeik+1)*(kpNeik+2)/2+kpNeij;\n                        ngkpj=1;\n                        ngkpk=0;\n                      }\n                      ang_ijkp=cos_index[j]+nijkp;\n                      ang_ikkp=cos_index[k]+nikkp;\n                      ang_jkpk=cos_index[kp]+njkpk;\n                      cosAng_ijkp=cosAng[ang_ijkp];\n                      dcA_ijkp[0][0]=dcAng[ang_ijkp][0][ngji];\n                      dcA_ijkp[1][0]=dcAng[ang_ijkp][1][ngji];\n                      dcA_ijkp[2][0]=dcAng[ang_ijkp][2][ngji];\n                      dcA_ijkp[0][1]=dcAng[ang_ijkp][0][ngjkp];\n                      dcA_ijkp[1][1]=dcAng[ang_ijkp][1][ngjkp];\n                      dcA_ijkp[2][1]=dcAng[ang_ijkp][2][ngjkp];\n                      cosAng_ikkp=cosAng[ang_ikkp];\n                      dcA_ikkp[0][0]=dcAng[ang_ikkp][0][ngki];\n                      dcA_ikkp[1][0]=dcAng[ang_ikkp][1][ngki];\n                      dcA_ikkp[2][0]=dcAng[ang_ikkp][2][ngki];\n                      dcA_ikkp[0][1]=dcAng[ang_ikkp][0][ngkkp];\n                      dcA_ikkp[1][1]=dcAng[ang_ikkp][1][ngkkp];\n                      dcA_ikkp[2][1]=dcAng[ang_ikkp][2][ngkkp];\n                      cosAng_jkpk=cosAng[ang_jkpk];\n                      dcA_jkpk[0][0]=dcAng[ang_jkpk][0][ngkpj];\n                      dcA_jkpk[1][0]=dcAng[ang_jkpk][1][ngkpj];\n                      dcA_jkpk[2][0]=dcAng[ang_jkpk][2][ngkpj];\n                      dcA_jkpk[0][1]=dcAng[ang_jkpk][0][ngkpk];\n                      dcA_jkpk[1][1]=dcAng[ang_jkpk][1][ngkpk];\n                      dcA_jkpk[2][1]=dcAng[ang_jkpk][2][ngkpk];\n                    }\n                    sig_flag=0;\n                    for(nsearch=0;nsearch<nSigBk;nsearch++) {\n                      ncmp=itypeSigBk[nsearch];\n                      if(x[ncmp][0]==x[kp][0]) {\n                        if(x[ncmp][1]==x[kp][1]) {\n                          if(x[ncmp][2]==x[kp][2]) {\n                            nkp=nsearch;\n                            sig_flag=1;\n                            break;\n                          }\n                        }\n                      }\n                    }\n                    if(sig_flag==0) {\n                      nSigBk=nSigBk+1;\n                      nkp=nSigBk-1;\n                      itypeSigBk[nkp]=kp;\n                    }\n                    temp_kpk=BOP_index[kp]+kpNeik;\n                    nb_jkp=nb_t;\n                    nb_t++;\n                    if(nb_t>nb_sg) {\n                      new_n_tot=nb_sg+maxneigh;\n                      grow_sigma(nb_sg,new_n_tot);\n                      nb_sg=new_n_tot;\n                    }\n                    bt_sg[nb_jkp].temp=temp_jkp;\n                    bt_sg[nb_jkp].i=j;\n                    bt_sg[nb_jkp].j=kp;\n                    nb_kkp=nb_t;\n                    nb_t++;\n                    if(nb_t>nb_sg) {\n                      new_n_tot=nb_sg+maxneigh;\n                      grow_sigma(nb_sg,new_n_tot);\n                      nb_sg=new_n_tot;\n                    }\n                    bt_sg[nb_kkp].temp=temp_kkp;\n                    bt_sg[nb_kkp].i=k;\n                    bt_sg[nb_kkp].j=kp;\n                    amean=cosAng_ijkp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                      ps=1.0;\n                      ks=ks-1;\n                      gfactor2=((gfunc3[itype][jtype][kptype][ks]*ps+\n                          gfunc2[itype][jtype][kptype][ks])*ps+\n                          gfunc1[itype][jtype][kptype][ks])*ps+\n                          gfunc[itype][jtype][kptype][ks];\n                      gprime2=(gfunc6[itype][jtype][kptype][ks]*ps+\n                          gfunc5[itype][jtype][kptype][ks])*ps+\n                          gfunc4[itype][jtype][kptype][ks];\n                    } else {\n                      gfactor2=gpara[itype-1][jtype-1][kptype-1][0];\n                      gprime2=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime2=gprime2+(lp1)*xrun*gpara[itype-1][jtype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor2=gfactor2+xrun*gpara[itype-1][jtype-1][kptype-1][lp1];\n                      }\n                    }\n                    amean=cosAng_ikkp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor3=((gfunc3[itype][ktype][kptype][ks]*ps+\n                          gfunc2[itype][ktype][kptype][ks])*ps+\n                          gfunc1[itype][ktype][kptype][ks])*ps+\n                          gfunc[itype][ktype][kptype][ks];\n                      gprime3=(gfunc6[itype][ktype][kptype][ks]*ps+\n                          gfunc5[itype][ktype][kptype][ks])*ps+\n                          gfunc4[itype][ktype][kptype][ks];\n                    } else {\n                      gfactor3=gpara[itype-1][ktype-1][kptype-1][0];\n                      gprime3=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime3=gprime3+(lp1)*xrun*gpara[itype-1][ktype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor3=gfactor3+xrun*gpara[itype-1][ktype-1][kptype-1][lp1];\n                      }\n                    }\n                    amean=cosAng_jkpk;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor4=((gfunc3[jtype][kptype][ktype][ks]*ps+\n                          gfunc2[jtype][kptype][ktype][ks])*ps+\n                          gfunc1[jtype][kptype][ktype][ks])*ps+\n                          gfunc[jtype][kptype][ktype][ks];\n                      gprime4=(gfunc6[jtype][kptype][ktype][ks]*ps+\n                          gfunc5[jtype][kptype][ktype][ks])*ps+\n                          gfunc4[jtype][kptype][ktype][ks];\n                    } else {\n                      gfactor4=gpara[jtype-1][kptype-1][ktype-1][0];\n                      gprime4=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime4=gprime4+(lp1)*xrun*gpara[jtype-1][kptype-1][ktype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor4=gfactor4+xrun*gpara[jtype-1][kptype-1][ktype-1][lp1];\n                      }\n                    }\n                    gfactor=gfactor1*gfactor2*gfactor3*gfactor4;\n                    rfactor0=(betaS_ik+small2)*(betaS_jkp+small2)\n                        *(betaS_kkp+small2);\n                    rfactor=pow(rfactor0,2.0/3.0);\n                    drfactor=2.0/3.0*pow(rfactor0,-1.0/3.0);\n\n//EE is Eq. 25(notes)\n\n                    EE=EE+gfactor*rfactor;\n\n//agpdpr1 is derivative of agpdpr1 w.r.t. Beta(r_ik)\n//agpdpr2 is derivative of agpdpr1 w.r.t. Beta(r_jk')\n//agpdpr3 is derivative of agpdpr1 w.r.t. Beta(r_kk')\n//app1 is derivative of agpdpr1 w.r.t. cos(theta_jik)\n//app2 is derivative of agpdpr1 w.r.t. cos(theta_ijk')\n//app3 is derivative of agpdpr1 w.r.t. cos(theta_ikk')\n//app4 is derivative of agpdpr1 w.r.t. cos(theta_jk'k)\n\n                    agpdpr1=gfactor*drfactor*(betaS_jkp+small2)*(betaS_kkp\n                        +small2)*dBetaS_ik/r_ik;\n                    agpdpr2=gfactor*drfactor*(betaS_ik+small2)*(betaS_kkp\n                        +small2)*dBetaS_jkp/r_jkp;\n                    agpdpr3=gfactor*drfactor*(betaS_ik+small2)*(betaS_jkp\n                        +small2)*dBetaS_kkp/r_kkp;\n                    app1=rfactor*gfactor2*gfactor3*gfactor4*gprime1;\n                    app2=rfactor*gfactor1*gfactor3*gfactor4*gprime2;\n                    app3=rfactor*gfactor1*gfactor2*gfactor4*gprime3;\n                    app4=rfactor*gfactor1*gfactor2*gfactor3*gprime4;\n                    bt_sg[nb_ij].dEE[0]+=\n                        app1*dcA_jik[0][0]\n                        -app2*dcA_ijkp[0][0];\n                    bt_sg[nb_ij].dEE[1]+=\n                        app1*dcA_jik[1][0]\n                        -app2*dcA_ijkp[1][0];\n                    bt_sg[nb_ij].dEE[2]+=\n                        app1*dcA_jik[2][0]\n                        -app2*dcA_ijkp[2][0];\n                    bt_sg[nb_ik].dEE[0]+=\n                        app1*dcA_jik[0][1]\n                        +agpdpr1*dis_ik[0]\n                        -app3*dcA_ikkp[0][0];\n                    bt_sg[nb_ik].dEE[1]+=\n                        app1*dcA_jik[1][1]\n                        +agpdpr1*dis_ik[1]\n                        -app3*dcA_ikkp[1][0];\n                    bt_sg[nb_ik].dEE[2]+=\n                        app1*dcA_jik[2][1]\n                        +agpdpr1*dis_ik[2]\n                        -app3*dcA_ikkp[2][0];\n                    bt_sg[nb_jkp].dEE[0]+=\n                        app2*dcA_ijkp[0][1]\n                        +agpdpr2*dis_jkp[0]\n                        -app4*dcA_jkpk[0][0];\n                    bt_sg[nb_jkp].dEE[1]+=\n                        app2*dcA_ijkp[1][1]\n                        +agpdpr2*dis_jkp[1]\n                        -app4*dcA_jkpk[1][0];\n                    bt_sg[nb_jkp].dEE[2]+=\n                        app2*dcA_ijkp[2][1]\n                        +agpdpr2*dis_jkp[2]\n                        -app4*dcA_jkpk[2][0];\n                    bt_sg[nb_kkp].dEE[0]+=\n                        app3*dcA_ikkp[0][1]\n                        +agpdpr3*dis_kkp[0]\n                        -app4*dcA_jkpk[0][1];\n                    bt_sg[nb_kkp].dEE[1]+=\n                        app3*dcA_ikkp[1][1]\n                        +agpdpr3*dis_kkp[1]\n                        -app4*dcA_jkpk[1][1];\n                    bt_sg[nb_kkp].dEE[2]+=\n                        app3*dcA_ikkp[2][1]\n                        +agpdpr3*dis_kkp[2]\n                        -app4*dcA_jkpk[2][1];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n//j is a neighbor of i and k is a neighbor of j not equal to i\n      for(ktmp=0;ktmp<nlistj;ktmp++) {\n        if(ktmp!=ji) {\n          temp_jk=BOP_index[j]+ktmp;\n          ni_jk=neigh_index[temp_jk];\n          k=jlist[ni_jk];\n\n          klist=firstneigh[k];\n          ktype=map[type[k]]+1;\n          nlistk=BOP_total[k];\n          for(kNeij=0;kNeij<nlistk;kNeij++) {\n            if(x[klist[kNeij]][0]==x[j][0]) {\n              if(x[klist[kNeij]][1]==x[j][1]) {\n                if(x[klist[kNeij]][2]==x[j][2]) {\n                  break;\n                }\n              }\n            }\n          }\n          if(jtype==ktype)\n            ijk=jtype-1;\n          else if(jtype<ktype)\n            ijk=jtype*bop_types-jtype*(jtype+1)/2+ktype-1;\n          else\n            ijk=ktype*bop_types-ktype*(ktype+1)/2+jtype-1;\n          sig_flag=0;\n          for(nsearch=0;nsearch<nSigBk;nsearch++) {\n            ncmp=itypeSigBk[nsearch];\n            if(x[ncmp][0]==x[k][0]) {\n              if(x[ncmp][1]==x[k][1]) {\n                if(x[ncmp][2]==x[k][2]) {\n                  new1=nsearch;\n                  sig_flag=1;\n                  break;\n                }\n              }\n            }\n          }\n          if(sig_flag==0) {\n            nSigBk=nSigBk+1;\n            new1=nSigBk-1;\n            itypeSigBk[new1]=k;\n          }\n          pass_jk=0;\n          if(otfly==1) {\n            dis_jk[0]=x[k][0]-x[j][0];\n            dis_jk[1]=x[k][1]-x[j][1];\n            dis_jk[2]=x[k][2]-x[j][2];\n            rsq_jk=dis_jk[0]*dis_jk[0]\n                +dis_jk[1]*dis_jk[1]\n                +dis_jk[2]*dis_jk[2];\n            r_jk=sqrt(rsq_jk);\n            if(r_jk<=rcut[ijk]) {\n              pass_jk=1;\n              ps=r_jk*rdr[ijk]+1.0;\n              ks=(int)ps;\n              if(nr-1<ks)\n                ks=nr-1;\n              ps=ps-ks;\n              if(ps>1.0)\n                ps=1.0;\n              betaS_jk=((pBetaS3[ijk][ks-1]*ps+pBetaS2[ijk][ks-1])*ps\n                  +pBetaS1[ijk][ks-1])*ps+pBetaS[ijk][ks-1];\n              dBetaS_jk=(pBetaS6[ijk][ks-1]*ps+pBetaS5[ijk][ks-1])*ps\n                  +pBetaS4[ijk][ks-1];\n              cosAng_ijk=(-dis_ij[0]*dis_jk[0]-dis_ij[1]*dis_jk[1]\n                  -dis_ij[2]*dis_jk[2])/(r_ij*r_jk);\n              dcA_ijk[0][0]=(dis_jk[0]*r_ij*r_jk-cosAng_ijk\n                  *-dis_ij[0]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n              dcA_ijk[1][0]=(dis_jk[1]*r_ij*r_jk-cosAng_ijk\n                  *-dis_ij[1]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n              dcA_ijk[2][0]=(dis_jk[2]*r_ij*r_jk-cosAng_ijk\n                  *-dis_ij[2]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n              dcA_ijk[0][1]=(-dis_ij[0]*r_ij*r_jk-cosAng_ijk\n                  *dis_jk[0]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n              dcA_ijk[1][1]=(-dis_ij[1]*r_ij*r_jk-cosAng_ijk\n                  *dis_jk[1]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n              dcA_ijk[2][1]=(-dis_ij[2]*r_ij*r_jk-cosAng_ijk\n                  *dis_jk[2]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n            }\n          } else {\n            if(neigh_flag[temp_jk]) {\n              pass_jk=1;\n              dis_jk[0]=disij[0][temp_jk];\n              dis_jk[1]=disij[1][temp_jk];\n              dis_jk[2]=disij[2][temp_jk];\n              r_jk=rij[temp_jk];\n              betaS_jk=betaS[temp_jk];\n              dBetaS_jk=dBetaS[temp_jk];\n              if(ktmp<ji) {\n                nijk=ktmp*(2*nlistj-ktmp-1)/2+(ji-ktmp)-1;\n                ngi=1;\n                ngk=0;\n              }\n              else {\n                nijk=ji*(2*nlistj-ji-1)/2+(ktmp-ji)-1;\n                ngi=0;\n                ngk=1;\n              }\n              ang_ijk=cos_index[j]+nijk;\n              cosAng_ijk=cosAng[ang_ijk];\n              dcA_ijk[0][0]=dcAng[ang_ijk][0][ngi];\n              dcA_ijk[1][0]=dcAng[ang_ijk][1][ngi];\n              dcA_ijk[2][0]=dcAng[ang_ijk][2][ngi];\n              dcA_ijk[0][1]=dcAng[ang_ijk][0][ngk];\n              dcA_ijk[1][1]=dcAng[ang_ijk][1][ngk];\n              dcA_ijk[2][1]=dcAng[ang_ijk][2][ngk];\n            }\n          }\n          if(pass_jk==1) {\n            nb_jk=nb_t;\n            nb_t++;\n            if(nb_t>nb_sg) {\n              new_n_tot=nb_sg+maxneigh;\n              grow_sigma(nb_sg,new_n_tot);\n              nb_sg=new_n_tot;\n            }\n            bt_sg[nb_jk].temp=temp_jk;\n            bt_sg[nb_jk].i=j;\n            bt_sg[nb_jk].j=k;\n            amean=cosAng_ijk;\n            if(amean<-1.0) amean=-1.0;\n            if(npower<=2) {\n              ps=(amean-1.0)*rdtheta+1.0;\n              ks=(int)ps;\n              if(ntheta-1<ks)\n              ks=ntheta-1;\n              ps=ps-ks;\n              if(ps>1.0)\n                ps=1.0;\n              ks=ks-1;\n              gfactor1=((gfunc3[itype][jtype][ktype][ks]*ps+\n                  gfunc2[itype][jtype][ktype][ks])*ps+\n                  gfunc1[itype][jtype][ktype][ks])*ps+\n                  gfunc[itype][jtype][ktype][ks];\n              gprime1=(gfunc6[itype][jtype][ktype][ks]*ps+\n                  gfunc5[itype][jtype][ktype][ks])*ps+\n                  gfunc4[itype][jtype][ktype][ks];\n            } else {\n              gfactor1=gpara[itype-1][jtype-1][ktype-1][0];\n              gprime1=0.0;\n              xrun=1.0;\n              for(lp1=1;lp1<npower+1;lp1++) {\n                gprime1=gprime1+(lp1)*xrun*gpara[itype-1][jtype-1][ktype-1][lp1];\n                xrun=xrun*amean;\n                gfactor1=gfactor1+xrun*gpara[itype-1][jtype-1][ktype-1][lp1];\n              }\n            }\n            gfactorsq=gfactor1*gfactor1;\n            gsqprime=2.0*gfactor1*gprime1;\n            rfactor1rt=betaS_jk*betaS_jk;\n            rfactor1=rfactor1rt*rfactor1rt;\n\n//BB is Eq. 34 (a) or Eq. 10 (c) for the j atom\n//1st DD is Eq. 11 (c) for j atom where i & k=neighbor of j\n\n            BB=BB+gfactorsq*rfactor1rt;\n\n//agpdpr1 is derivative of BB  w.r.t. Beta(r_jk)\n//app1 is derivative of BB w.r.t. cos(theta_ijk)\n\n            agpdpr1=2.0*gfactorsq*betaS_jk*dBetaS_jk/r_jk;\n            app1=rfactor1rt*gsqprime;\n            bt_sg[nb_ij].dBB[0]-=\n                app1*dcA_ijk[0][0];\n            bt_sg[nb_ij].dBB[1]-=\n                app1*dcA_ijk[1][0];\n            bt_sg[nb_ij].dBB[2]-=\n                app1*dcA_ijk[2][0];\n            bt_sg[nb_jk].dBB[0]+=\n                app1*dcA_ijk[0][1]\n                +agpdpr1*dis_jk[0];\n            bt_sg[nb_jk].dBB[1]+=\n                app1*dcA_ijk[1][1]\n                +agpdpr1*dis_jk[1];\n            bt_sg[nb_jk].dBB[2]+=\n                app1*dcA_ijk[2][1]\n                +agpdpr1*dis_jk[2];\n            if(sigma_a[iij]!=0) {\n              app2=rfactor1rt*app1;\n              agpdpr2=2.0*rfactor1rt*agpdpr1;\n              DD=DD+gfactorsq*rfactor1;\n              bt_sg[nb_ij].dDD[0]-=\n                  app2*dcA_ijk[0][0];\n              bt_sg[nb_ij].dDD[1]-=\n                  app2*dcA_ijk[1][0];\n              bt_sg[nb_ij].dDD[2]-=\n                  app2*dcA_ijk[2][0];\n              bt_sg[nb_jk].dDD[0]+=\n                  app2*dcA_ijk[0][1]\n                  +agpdpr2*dis_jk[0];\n              bt_sg[nb_jk].dDD[1]+=\n                  app2*dcA_ijk[1][1]\n                  +agpdpr2*dis_jk[1];\n              bt_sg[nb_jk].dDD[2]+=\n                  app2*dcA_ijk[2][1]\n                  +agpdpr2*dis_jk[2];\n\n//j is a neighbor of i, k and k' prime different neighbors of j not equal to i\n\n              for(ltmp=0;ltmp<ktmp;ltmp++) {\n                if(ltmp!=ji) {\n                  temp_jkp=BOP_index[j]+ltmp;\n                  ni_jkp=neigh_index[temp_jkp];\n                  kp=jlist[ni_jkp];\n                  kptype=map[type[kp]]+1;\n                  if(jtype==kptype)\n                    ijkp=jtype-1;\n                  else if(jtype<kptype)\n                    ijkp=jtype*bop_types-jtype*(jtype+1)/2+kptype-1;\n                  else\n                    ijkp=kptype*bop_types-kptype*(kptype+1)/2+jtype-1;\n                  for(nsearch=0;nsearch<nSigBk;nsearch++) {\n                    ncmp=itypeSigBk[nsearch];\n                    if(x[ncmp][0]==x[kp][0]) {\n                      if(x[ncmp][1]==x[kp][1]) {\n                        if(x[ncmp][2]==x[kp][2]) {\n                          new2=nsearch;\n                          break;\n                        }\n                      }\n                    }\n                  }\n                  pass_jkp=0;\n                  if(otfly==1) {\n                    dis_jkp[0]=x[kp][0]-x[j][0];\n                    dis_jkp[1]=x[kp][1]-x[j][1];\n                    dis_jkp[2]=x[kp][2]-x[j][2];\n                    rsq_jkp=dis_jkp[0]*dis_jkp[0]\n                        +dis_jkp[1]*dis_jkp[1]\n                        +dis_jkp[2]*dis_jkp[2];\n                    r_jkp=sqrt(rsq_jkp);\n                    if(r_jkp<=rcut[ijkp]) {\n                      pass_jkp=1;\n                      ps=r_jkp*rdr[ijkp]+1.0;\n                      ks=(int)ps;\n                      if(nr-1<ks)\n                        ks=nr-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      betaS_jkp=((pBetaS3[ijkp][ks-1]*ps+pBetaS2[ijkp][ks-1])*ps\n                          +pBetaS1[ijkp][ks-1])*ps+pBetaS[ijkp][ks-1];\n                      dBetaS_jkp=(pBetaS6[ijkp][ks-1]*ps+pBetaS5[ijkp][ks-1])*ps\n                          +pBetaS4[ijkp][ks-1];\n                      cosAng_ijkp=(-dis_ij[0]*dis_jkp[0]-dis_ij[1]*dis_jkp[1]\n                          -dis_ij[2]*dis_jkp[2])/(r_ij*r_jkp);\n                      dcA_ijkp[0][0]=(dis_jkp[0]*r_ij*r_jkp-cosAng_ijkp\n                          *-dis_ij[0]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[1][0]=(dis_jkp[1]*r_ij*r_jkp-cosAng_ijkp\n                          *-dis_ij[1]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[2][0]=(dis_jkp[2]*r_ij*r_jkp-cosAng_ijkp\n                          *-dis_ij[2]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[0][1]=(-dis_ij[0]*r_ij*r_jkp-cosAng_ijkp\n                          *dis_jkp[0]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[1][1]=(-dis_ij[1]*r_ij*r_jkp-cosAng_ijkp\n                          *dis_jkp[1]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                      dcA_ijkp[2][1]=(-dis_ij[2]*r_ij*r_jkp-cosAng_ijkp\n                          *dis_jkp[2]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                      cosAng_kjkp=(dis_jk[0]*dis_jkp[0]+dis_jk[1]*dis_jkp[1]\n                          +dis_jk[2]*dis_jkp[2])/(r_jk*r_jkp);\n                      dcA_kjkp[0][0]=(dis_jkp[0]*r_jk*r_jkp-cosAng_kjkp\n                          *dis_jk[0]*r_jkp*r_jkp)/(r_jk*r_jk*r_jkp*r_jkp);\n                      dcA_kjkp[1][0]=(dis_jkp[1]*r_jk*r_jkp-cosAng_kjkp\n                          *dis_jk[1]*r_jkp*r_jkp)/(r_jk*r_jk*r_jkp*r_jkp);\n                      dcA_kjkp[2][0]=(dis_jkp[2]*r_jk*r_jkp-cosAng_kjkp\n                          *dis_jk[2]*r_jkp*r_jkp)/(r_jk*r_jk*r_jkp*r_jkp);\n                      dcA_kjkp[0][1]=(dis_jk[0]*r_jk*r_jkp-cosAng_kjkp\n                          *dis_jkp[0]*r_jk*r_jk)/(r_jk*r_jk*r_jkp*r_jkp);\n                      dcA_kjkp[1][1]=(dis_jk[1]*r_jk*r_jkp-cosAng_kjkp\n                          *dis_jkp[1]*r_jk*r_jk)/(r_jk*r_jk*r_jkp*r_jkp);\n                      dcA_kjkp[2][1]=(dis_jk[2]*r_jk*r_jkp-cosAng_kjkp\n                          *dis_jkp[2]*r_jk*r_jk)/(r_jk*r_jk*r_jkp*r_jkp);\n                    }\n                  } else {\n                    if(neigh_flag[temp_jkp]) {\n                      pass_jkp=1;\n                      dis_jkp[0]=disij[0][temp_jkp];\n                      dis_jkp[1]=disij[1][temp_jkp];\n                      dis_jkp[2]=disij[2][temp_jkp];\n                      r_jkp=rij[temp_jkp];\n                      betaS_jkp=betaS[temp_jkp];\n                      dBetaS_jkp=dBetaS[temp_jkp];\n                      if(ji<ltmp) {\n                        nijkp=ji*(2*nlistj-ji-1)/2+(ltmp-ji)-1;\n                        ngli=0;\n                        ngl=1;\n                      }\n                      else {\n                        nijkp=ltmp*(2*nlistj-ltmp-1)/2+(ji-ltmp)-1;\n                        ngli=1;\n                        ngl=0;\n                      }\n                      if(ktmp<ltmp) {\n                        nkjkp=ktmp*(2*nlistj-ktmp-1)/2+(ltmp-ktmp)-1;\n                        ngjk=0;\n                        ngjkp=1;\n                      }\n                      else {\n                        nkjkp=ltmp*(2*nlistj-ltmp-1)/2+(ktmp-ltmp)-1;\n                        ngjk=1;\n                        ngjkp=0;\n                      }\n                      ang_ijkp=cos_index[j]+nijkp;\n                      cosAng_ijkp=cosAng[ang_ijkp];\n                      dcA_ijkp[0][0]=dcAng[ang_ijkp][0][ngli];\n                      dcA_ijkp[1][0]=dcAng[ang_ijkp][1][ngli];\n                      dcA_ijkp[2][0]=dcAng[ang_ijkp][2][ngli];\n                      dcA_ijkp[0][1]=dcAng[ang_ijkp][0][ngl];\n                      dcA_ijkp[1][1]=dcAng[ang_ijkp][1][ngl];\n                      dcA_ijkp[2][1]=dcAng[ang_ijkp][2][ngl];\n                      ang_kjkp=cos_index[j]+nkjkp;\n                      cosAng_kjkp=cosAng[ang_kjkp];\n                      dcA_kjkp[0][0]=dcAng[ang_kjkp][0][ngjk];\n                      dcA_kjkp[1][0]=dcAng[ang_kjkp][1][ngjk];\n                      dcA_kjkp[2][0]=dcAng[ang_kjkp][2][ngjk];\n                      dcA_kjkp[0][1]=dcAng[ang_kjkp][0][ngjkp];\n                      dcA_kjkp[1][1]=dcAng[ang_kjkp][1][ngjkp];\n                      dcA_kjkp[2][1]=dcAng[ang_kjkp][2][ngjkp];\n                    }\n                  }\n                  if(pass_jkp==1) {\n                    nb_jkp=nb_t;\n                    nb_t++;\n                    if(nb_t>nb_sg) {\n                      new_n_tot=nb_sg+maxneigh;\n                      grow_sigma(nb_sg,new_n_tot);\n                      nb_sg=new_n_tot;\n                    }\n                    bt_sg[nb_jkp].temp=temp_jkp;\n                    bt_sg[nb_jkp].i=j;\n                    bt_sg[nb_jkp].j=kp;\n                    amean=cosAng_ijkp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor2=((gfunc3[itype][jtype][kptype][ks]*ps+\n                          gfunc2[itype][jtype][kptype][ks])*ps+\n                          gfunc1[itype][jtype][kptype][ks])*ps+\n                          gfunc[itype][jtype][kptype][ks];\n                      gprime2=(gfunc6[itype][jtype][kptype][ks]*ps+\n                          gfunc5[itype][jtype][kptype][ks])*ps+\n                          gfunc4[itype][jtype][kptype][ks];\n                    } else {\n                      gfactor2=gpara[itype-1][jtype-1][kptype-1][0];\n                      gprime2=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime2=gprime2+(lp1)*xrun*gpara[itype-1][jtype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor2=gfactor2+xrun*gpara[itype-1][jtype-1][kptype-1][lp1];\n                      }\n                    }\n                    amean=cosAng_kjkp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor3=((gfunc3[ktype][jtype][kptype][ks]*ps+\n                          gfunc2[ktype][jtype][kptype][ks])*ps+\n                          gfunc1[ktype][jtype][kptype][ks])*ps+\n                          gfunc[ktype][jtype][kptype][ks];\n                      gprime3=(gfunc6[ktype][jtype][kptype][ks]*ps+\n                          gfunc5[ktype][jtype][kptype][ks])*ps+\n                          gfunc4[ktype][jtype][kptype][ks];\n                    } else {\n                      gfactor3=gpara[ktype-1][jtype-1][kptype-1][0];\n                      gprime3=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime3=gprime3+(lp1)*xrun*gpara[ktype-1][jtype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor3=gfactor3+xrun*gpara[ktype-1][jtype-1][kptype-1][lp1];\n                      }\n                    }\n                    gfactor=gfactor1*gfactor2*gfactor3;\n                    rfactorrt=betaS_jk*betaS_jkp;\n                    rfactor=rfactorrt*rfactorrt;\n\n//2nd DD is Eq. 11 (c) for j atom where i , k & k'=neighbor of j\n\n                    DD=DD+2.0*gfactor*rfactor;\n\n//agpdpr1 is derivative of DD  w.r.t. Beta(r_jk)\n//agpdpr2 is derivative of DD  w.r.t. Beta(r_jk')\n//app1 is derivative of DD  w.r.t. cos(theta_ijk)\n//app2 is derivative of DD  w.r.t. cos(theta_ijkp)\n//app3 is derivative of DD  w.r.t. cos(theta_kjkp)\n\n                    agpdpr1=4.0*gfactor*rfactorrt*betaS_jkp\n                        *dBetaS_jk/r_jk;\n                    agpdpr2=4.0*gfactor*rfactorrt*betaS_jk\n                        *dBetaS_jkp/r_jkp;\n                    app1=2.0*rfactor*gfactor2*gfactor3*gprime1;\n                    app2=2.0*rfactor*gfactor1*gfactor3*gprime2;\n                    app3=2.0*rfactor*gfactor1*gfactor2*gprime3;\n                    bt_sg[nb_ij].dDD[0]-=\n                        app1*dcA_ijk[0][0]\n                        +app2*dcA_ijkp[0][0];\n                    bt_sg[nb_ij].dDD[1]-=\n                        app1*dcA_ijk[1][0]\n                        +app2*dcA_ijkp[1][0];\n                    bt_sg[nb_ij].dDD[2]-=\n                        app1*dcA_ijk[2][0]\n                        +app2*dcA_ijkp[2][0];\n                    bt_sg[nb_jk].dDD[0]+=\n                        app1*dcA_ijk[0][1]\n                        +app3*dcA_kjkp[0][0]\n                        +agpdpr1*dis_jk[0];\n                    bt_sg[nb_jk].dDD[1]+=\n                        app1*dcA_ijk[1][1]\n                        +app3*dcA_kjkp[1][0]\n                        +agpdpr1*dis_jk[1];\n                    bt_sg[nb_jk].dDD[2]+=\n                        app1*dcA_ijk[2][1]\n                        +app3*dcA_kjkp[2][0]\n                        +agpdpr1*dis_jk[2];\n                    bt_sg[nb_jkp].dDD[0]+=\n                        app2*dcA_ijkp[0][1]\n                        +app3*dcA_kjkp[0][1]\n                        +agpdpr2*dis_jkp[0];\n                    bt_sg[nb_jkp].dDD[1]+=\n                        app2*dcA_ijkp[1][1]\n                        +app3*dcA_kjkp[1][1]\n                        +agpdpr2*dis_jkp[1];\n                    bt_sg[nb_jkp].dDD[2]+=\n                        app2*dcA_ijkp[2][1]\n                        +app3*dcA_kjkp[2][1]\n                        +agpdpr2*dis_jkp[2];\n\n                  }\n                }\n              }\n\n//j is a neighbor of i, k is a neighbor of j not equal to i and k'\n//is a neighbor of k not equal to j or i\n\n              for(ltmp=0;ltmp<nlistk;ltmp++) {\n                temp_kkp=BOP_index[k]+ltmp;\n                ni_kkp=neigh_index[temp_kkp];\n                kp=klist[ni_kkp];\n                kptype=map[type[kp]]+1;\n                same_ikp=0;\n                same_jkp=0;\n                if(x[i][0]==x[kp][0]) {\n                  if(x[i][1]==x[kp][1]) {\n                    if(x[i][2]==x[kp][2]) {\n                      same_ikp=1;\n                    }\n                  }\n                }\n                if(x[j][0]==x[kp][0]) {\n                  if(x[j][1]==x[kp][1]) {\n                    if(x[j][2]==x[kp][2]) {\n                      same_jkp=1;\n                    }\n                  }\n                }\n                if(!same_ikp&&!same_jkp) {\n                  if(ktype==kptype)\n                    ikkp=ktype-1;\n                  else if(ktype<kptype)\n                    ikkp=ktype*bop_types-ktype*(ktype+1)/2+kptype-1;\n                  else\n                    ikkp=kptype*bop_types-kptype*(kptype+1)/2+ktype-1;\n                  for(kNeij=0;kNeij<nlistk;kNeij++) {\n                    temp_kj=BOP_index[k]+kNeij;\n                    ni_kj=neigh_index[temp_kj];\n                    if(x[klist[ni_kj]][0]==x[j][0]) {\n                      if(x[klist[ni_kj]][1]==x[j][1]) {\n                        if(x[klist[ni_kj]][2]==x[j][2]) {\n                          break;\n                        }\n                      }\n                    }\n                  }\n                  sig_flag=0;\n                  for(nsearch=0;nsearch<nSigBk;nsearch++) {\n                    ncmp=itypeSigBk[nsearch];\n                    if(x[ncmp][0]==x[kp][0]) {\n                      if(x[ncmp][1]==x[kp][1]) {\n                        if(x[ncmp][2]==x[kp][2]) {\n                          new2=nsearch;\n                          sig_flag=1;\n                          break;\n                        }\n                      }\n                    }\n                  }\n                  if(sig_flag==0) {\n                    nSigBk=nSigBk+1;\n                    new2=nSigBk-1;\n                    itypeSigBk[new2]=kp;\n                  }\n                  pass_kkp=0;\n                  if(otfly==1) {\n                    dis_kkp[0]=x[kp][0]-x[k][0];\n                    dis_kkp[1]=x[kp][1]-x[k][1];\n                    dis_kkp[2]=x[kp][2]-x[k][2];\n                    rsq_kkp=dis_kkp[0]*dis_kkp[0]\n                        +dis_kkp[1]*dis_kkp[1]\n                        +dis_kkp[2]*dis_kkp[2];\n                    r_kkp=sqrt(rsq_kkp);\n                    if(r_kkp<=rcut[ikkp]) {\n                      pass_kkp=1;\n                      ps=r_kkp*rdr[ikkp]+1.0;\n                      ks=(int)ps;\n                      if(nr-1<ks)\n                        ks=nr-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      betaS_kkp=((pBetaS3[ikkp][ks-1]*ps+pBetaS2[ikkp][ks-1])*ps\n                          +pBetaS1[ikkp][ks-1])*ps+pBetaS[ikkp][ks-1];\n                      dBetaS_kkp=(pBetaS6[ikkp][ks-1]*ps+pBetaS5[ikkp][ks-1])*ps\n                          +pBetaS4[ikkp][ks-1];\n                      cosAng_jkkp=(-dis_jk[0]*dis_kkp[0]-dis_jk[1]*dis_kkp[1]\n                          -dis_jk[2]*dis_kkp[2])/(r_jk*r_kkp);\n                      dcA_jkkp[0][0]=(dis_kkp[0]*r_jk*r_kkp-cosAng_jkkp\n                          *-dis_jk[0]*r_kkp*r_kkp)/(r_jk*r_jk*r_kkp*r_kkp);\n                      dcA_jkkp[1][0]=(dis_kkp[1]*r_jk*r_kkp-cosAng_jkkp\n                          *-dis_jk[1]*r_kkp*r_kkp)/(r_jk*r_jk*r_kkp*r_kkp);\n                      dcA_jkkp[2][0]=(dis_kkp[2]*r_jk*r_kkp-cosAng_jkkp\n                          *-dis_jk[2]*r_kkp*r_kkp)/(r_jk*r_jk*r_kkp*r_kkp);\n                      dcA_jkkp[0][1]=(-dis_jk[0]*r_jk*r_kkp-cosAng_jkkp\n                          *dis_kkp[0]*r_jk*r_jk)/(r_jk*r_jk*r_kkp*r_kkp);\n                      dcA_jkkp[1][1]=(-dis_jk[1]*r_jk*r_kkp-cosAng_jkkp\n                          *dis_kkp[1]*r_jk*r_jk)/(r_jk*r_jk*r_kkp*r_kkp);\n                      dcA_jkkp[2][1]=(-dis_jk[2]*r_jk*r_kkp-cosAng_jkkp\n                          *dis_kkp[2]*r_jk*r_jk)/(r_jk*r_jk*r_kkp*r_kkp);\n                    }\n                  } else {\n                    if(neigh_flag[temp_kkp]) {\n                      pass_kkp=1;\n                      dis_kkp[0]=disij[0][temp_kkp];\n                      dis_kkp[1]=disij[1][temp_kkp];\n                      dis_kkp[2]=disij[2][temp_kkp];\n                      r_kkp=rij[temp_kkp];\n                      betaS_kkp=betaS[temp_kkp];\n                      dBetaS_kkp=dBetaS[temp_kkp];\n                      if(kNeij<ltmp) {\n                        njkkp=kNeij*(2*nlistk-kNeij-1)/2+(ltmp-kNeij)-1;\n                        nglkp=1;\n                        nglj=0;\n                      }\n                      else {\n                        njkkp=ltmp*(2*nlistk-ltmp-1)/2+(kNeij-ltmp)-1;\n                        nglkp=0;\n                        nglj=1;\n                      }\n                      ang_jkkp=cos_index[k]+njkkp;\n                      cosAng_jkkp=cosAng[ang_jkkp];\n                      dcA_jkkp[0][0]=dcAng[ang_jkkp][0][nglj];\n                      dcA_jkkp[1][0]=dcAng[ang_jkkp][1][nglj];\n                      dcA_jkkp[2][0]=dcAng[ang_jkkp][2][nglj];\n                      dcA_jkkp[0][1]=dcAng[ang_jkkp][0][nglkp];\n                      dcA_jkkp[1][1]=dcAng[ang_jkkp][1][nglkp];\n                      dcA_jkkp[2][1]=dcAng[ang_jkkp][2][nglkp];\n                    }\n                  }\n                  if(pass_kkp==1) {\n                    nb_kkp=nb_t;\n                    nb_t++;\n                    if(nb_t>nb_sg) {\n                      new_n_tot=nb_sg+maxneigh;\n                      grow_sigma(nb_sg,new_n_tot);\n                      nb_sg=new_n_tot;\n                    }\n                    bt_sg[nb_kkp].temp=temp_kkp;\n                    bt_sg[nb_kkp].i=k;\n                    bt_sg[nb_kkp].j=kp;\n                    amean=cosAng_jkkp;\n                    if(amean<-1.0) amean=-1.0;\n                    if(npower<=2) {\n                      ps=(amean-1.0)*rdtheta+1.0;\n                      ks=(int)ps;\n                      if(ntheta-1<ks)\n                        ks=ntheta-1;\n                      ps=ps-ks;\n                      if(ps>1.0)\n                        ps=1.0;\n                      ks=ks-1;\n                      gfactor2=((gfunc3[jtype][ktype][kptype][ks]*ps+\n                          gfunc2[jtype][ktype][kptype][ks])*ps+\n                          gfunc1[jtype][ktype][kptype][ks])*ps+\n                          gfunc[jtype][ktype][kptype][ks];\n                      gprime2=(gfunc6[jtype][ktype][kptype][ks]*ps+\n                          gfunc5[jtype][ktype][kptype][ks])*ps+\n                          gfunc4[jtype][ktype][kptype][ks];\n                    } else {\n                      gfactor2=gpara[jtype-1][ktype-1][kptype-1][0];\n                      gprime2=0.0;\n                      xrun=1.0;\n                      for(lp1=1;lp1<npower+1;lp1++) {\n                        gprime2=gprime2+(lp1)*xrun*gpara[jtype-1][ktype-1][kptype-1][lp1];\n                        xrun=xrun*amean;\n                        gfactor2=gfactor2+xrun*gpara[jtype-1][ktype-1][kptype-1][lp1];\n                      }\n                    }\n                    gfactorsq2=gfactor2*gfactor2;\n                    gsqprime2=2.0*gfactor2*gprime2;\n                    gfactor=gfactorsq*gfactorsq2;\n                    rfactorrt=betaS_jk*betaS_kkp;\n                    rfactor=rfactorrt*rfactorrt;\n\n//3rd DD is Eq. 11 (c) for j atom where i & k=neighbor of j & k'=neighbor of k\n\n                    DD=DD+gfactor*rfactor;\n\n//agpdpr1 is derivative of DD  3rd term w.r.t. Beta(r_jk)\n//agpdpr2 is derivative of DD  3rd term w.r.t. Beta(r_kk')\n//app1 is derivative of DD  3rd term w.r.t. cos(theta_ijk)\n//app2 is derivative of DD  3rd term w.r.t. cos(theta_jkkp)\n\n                    agpdpr1=2.0*gfactor*rfactorrt*betaS_kkp\n                        *dBetaS_jk/r_jk;\n                    agpdpr2=2.0*gfactor*rfactorrt*betaS_jk\n                        *dBetaS_kkp/r_kkp;\n                    app1=rfactor*gfactorsq2*gsqprime;\n                    app2=rfactor*gfactorsq*gsqprime2;\n                    bt_sg[nb_ij].dDD[0]-=\n                        app1*dcA_ijk[0][0];\n                    bt_sg[nb_ij].dDD[1]-=\n                        app1*dcA_ijk[1][0];\n                    bt_sg[nb_ij].dDD[2]-=\n                        app1*dcA_ijk[2][0];\n                    bt_sg[nb_jk].dDD[0]+=\n                        app1*dcA_ijk[0][1]\n                        +agpdpr1*dis_jk[0]\n                        -app2*dcA_jkkp[0][0];\n                    bt_sg[nb_jk].dDD[1]+=\n                        app1*dcA_ijk[1][1]\n                        +agpdpr1*dis_jk[1]\n                        -app2*dcA_jkkp[1][0];\n                    bt_sg[nb_jk].dDD[2]+=\n                        app1*dcA_ijk[2][1]\n                        +agpdpr1*dis_jk[2]\n                        -app2*dcA_jkkp[2][0];\n                    bt_sg[nb_kkp].dDD[0]+=\n                        app2*dcA_jkkp[0][1]\n                        +agpdpr2*dis_kkp[0];\n                    bt_sg[nb_kkp].dDD[1]+=\n                        app2*dcA_jkkp[1][1]\n                        +agpdpr2*dis_kkp[1];\n                    bt_sg[nb_kkp].dDD[2]+=\n                        app2*dcA_jkkp[2][1]\n                        +agpdpr2*dis_kkp[2];\n\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      sig_flag=0;\n      if(FF<=0.000001) {\n        sigB=0.0;\n        sig_flag=1;\n      }\n      if(sig_flag==0){\n      if(sigma_a[iij]==0){\n        if(sig_flag==0) {\n          if(AA<0.0)\n            AA=0.0;\n          if(BB<0.0)\n            BB=0.0;\n          AAC=AA+BB;\n          for(m=0;m<nb_t;m++) {\n            if((bt_sg[m].i>-1)&&(bt_sg[m].j>-1)) {\n              bt_sg[m].dAAC[0]=bt_sg[m].dAA[0]\n                  +bt_sg[m].dBB[0];\n              bt_sg[m].dAAC[1]=bt_sg[m].dAA[1]\n                  +bt_sg[m].dBB[1];\n              bt_sg[m].dAAC[2]=bt_sg[m].dAA[2]\n                  +bt_sg[m].dBB[2];\n            }\n          }\n          bndtmp=(FF+sigma_delta[iij]*sigma_delta[iij]+sigma_c[iij]*AAC+small4);\n          bndtmp0=1.0/sqrt(bndtmp);\n          sigB1=betaS_ij*bndtmp0;\n          bndtmp=-0.5*bndtmp0*bndtmp0*bndtmp0;\n          bndtmp1=bndtmp0+betaS_ij*bndtmp*2.0*betaS_ij;\n          bndtmp1=bndtmp1*dBetaS_ij/r_ij;\n          bndtmp2=betaS_ij*bndtmp*sigma_c[iij];\n          setting=0;\n          for(m=0;m<nb_t;m++) {\n            if((bt_sg[m].i>-1)&&(bt_sg[m].j>-1)) {\n              temp_kk=bt_sg[m].temp;\n              if(temp_kk==temp_ij&&setting==0) {\n                bt_sg[m].dSigB1[0]=bndtmp1*dis_ij[0]\n                    +bndtmp2*bt_sg[m].dAAC[0];\n                bt_sg[m].dSigB1[1]=bndtmp1*dis_ij[1]\n                    +bndtmp2*bt_sg[m].dAAC[1];\n                bt_sg[m].dSigB1[2]=bndtmp1*dis_ij[2]\n                    +bndtmp2*bt_sg[m].dAAC[2];\n                setting=1;\n              }\n              else if(temp_kk==temp_ji&&setting==0) {\n                bt_sg[m].dSigB1[0]=-bndtmp1*dis_ij[0]\n                    +bndtmp2*bt_sg[m].dAAC[0];\n                bt_sg[m].dSigB1[1]=-bndtmp1*dis_ij[1]\n                    +bndtmp2*bt_sg[m].dAAC[1];\n                bt_sg[m].dSigB1[2]=-bndtmp1*dis_ij[2]\n                    +bndtmp2*bt_sg[m].dAAC[2];\n                setting=1;\n              }\n              else {\n                bt_sg[m].dSigB1[0]=bndtmp2*bt_sg[m].dAAC[0];\n                bt_sg[m].dSigB1[1]=bndtmp2*bt_sg[m].dAAC[1];\n                bt_sg[m].dSigB1[2]=bndtmp2*bt_sg[m].dAAC[2];\n              }\n            }\n          }\n        }\n      } else {\n        if(sig_flag==0) {\n          if(AA<0.0)\n            AA=0.0;\n          if(BB<0.0)\n            BB=0.0;\n          if(CC<0.0)\n            CC=0.0;\n          if(DD<0.0)\n            DD=0.0;\n\n// AA and BB are the representations of (a) Eq. 34 and (b) Eq. 9\n// for atoms i and j respectively\n\n          AAC=AA+BB;\n          BBC=AA*BB;\n          CCC=AA*AA+BB*BB;\n          DDC=CC+DD;\n\n//EEC is a modified form of (a) Eq. 33\n          if(DDC<CCC) DDC=CCC;\n          EEC=(DDC-CCC)/(AAC+2.0*small1);\n          AACFF=1.0/(AAC+2.0*small1);\n          for(m=0;m<nb_t;m++) {\n            if((bt_sg[m].i>-1)&&(bt_sg[m].j>-1)) {\n              bt_sg[m].dAAC[0]=bt_sg[m].dAA[0]\n                  +bt_sg[m].dBB[0];\n              bt_sg[m].dAAC[1]=bt_sg[m].dAA[1]\n                  +bt_sg[m].dBB[1];\n              bt_sg[m].dAAC[2]=bt_sg[m].dAA[2]\n                  +bt_sg[m].dBB[2];\n              bt_sg[m].dBBC[0]=bt_sg[m].dAA[0]*BB\n                  +AA*bt_sg[m].dBB[0];\n              bt_sg[m].dBBC[1]=bt_sg[m].dAA[1]*BB\n                  +AA*bt_sg[m].dBB[1];\n              bt_sg[m].dBBC[2]=bt_sg[m].dAA[2]*BB\n                  +AA*bt_sg[m].dBB[2];\n              bt_sg[m].dCCC[0]=2.0*AA*bt_sg[m].dAA[0]\n                  +2.0*BB*bt_sg[m].dBB[0];\n              bt_sg[m].dCCC[1]=2.0*AA*bt_sg[m].dAA[1]\n                  +2.0*BB*bt_sg[m].dBB[1];\n              bt_sg[m].dCCC[2]=2.0*AA*bt_sg[m].dAA[2]\n                  +2.0*BB*bt_sg[m].dBB[2];\n              bt_sg[m].dDDC[0]=bt_sg[m].dCC[0]\n                  +bt_sg[m].dDD[0];\n              bt_sg[m].dDDC[1]=bt_sg[m].dCC[1]\n                  +bt_sg[m].dDD[1];\n              bt_sg[m].dDDC[2]=bt_sg[m].dCC[2]\n                  +bt_sg[m].dDD[2];\n              bt_sg[m].dEEC[0]=(bt_sg[m].dDDC[0]\n                  -bt_sg[m].dCCC[0]\n                  -EEC*bt_sg[m].dAAC[0])*AACFF;\n              bt_sg[m].dEEC[1]=(bt_sg[m].dDDC[1]\n                  -bt_sg[m].dCCC[1]\n                  -EEC*bt_sg[m].dAAC[1])*AACFF;\n              bt_sg[m].dEEC[2]=(bt_sg[m].dDDC[2]\n                  -bt_sg[m].dCCC[2]\n                  -EEC*bt_sg[m].dAAC[2])*AACFF;\n            }\n          }\n          UT=EEC*FF+BBC+small3[iij];\n          UT=1.0/sqrt(UT);\n// FFC is slightly modified form of (a) Eq. 31\n// GGC is slightly modified form of (a) Eq. 32\n// bndtmp is a slightly modified form of (a) Eq. 30 and (b) Eq. 8\n\n          FFC=BBC*UT;\n          GGC=EEC*UT;\n          bndtmp=(FF+sigma_delta[iij]*sigma_delta[iij])*(1.0+sigma_a[iij]*GGC)\n              *(1.0+sigma_a[iij]*GGC)+sigma_c[iij]*(AAC+sigma_a[iij]*EE\n              +sigma_a[iij]*FFC*(2.0+GGC))+small4;\n          UTcom=-0.5*UT*UT*UT;\n          for(m=0;m<nb_t;m++) {\n            if((bt_sg[m].i>-1)&&(bt_sg[m].j>-1)) {\n              bt_sg[m].dUT[0]=UTcom*(bt_sg[m].dEEC[0]*FF\n                  +EEC*bt_sg[m].dFF[0]+bt_sg[m].dBBC[0]);\n              bt_sg[m].dUT[1]=UTcom*(bt_sg[m].dEEC[1]*FF\n                  +EEC*bt_sg[m].dFF[1]+bt_sg[m].dBBC[1]);\n              bt_sg[m].dUT[2]=UTcom*(bt_sg[m].dEEC[2]*FF\n                  +EEC*bt_sg[m].dFF[2]+bt_sg[m].dBBC[2]);\n              bt_sg[m].dFFC[0]=bt_sg[m].dBBC[0]*UT\n                  +BBC*bt_sg[m].dUT[0];\n              bt_sg[m].dFFC[1]=bt_sg[m].dBBC[1]*UT\n                  +BBC*bt_sg[m].dUT[1];\n              bt_sg[m].dFFC[2]=bt_sg[m].dBBC[2]*UT\n                  +BBC*bt_sg[m].dUT[2];\n              bt_sg[m].dGGC[0]=bt_sg[m].dEEC[0]*UT\n                  +EEC*bt_sg[m].dUT[0];\n              bt_sg[m].dGGC[1]=bt_sg[m].dEEC[1]*UT\n                  +EEC*bt_sg[m].dUT[1];\n              bt_sg[m].dGGC[2]=bt_sg[m].dEEC[2]*UT\n                  +EEC*bt_sg[m].dUT[2];\n            }\n          }\n          psign=1.0;\n          if(1.0+sigma_a[iij]*GGC<0.0)\n            psign=-1.0;\n          bndtmp0=1.0/sqrt(bndtmp);\n          sigB1=psign*betaS_ij*(1.0+sigma_a[iij]*GGC)*bndtmp0;\n          bndtmp=-0.5*bndtmp0*bndtmp0*bndtmp0;\n          bndtmp1=psign*(1.0+sigma_a[iij]*GGC)*bndtmp0+psign*betaS_ij\n              *(1.0+sigma_a[iij]*GGC)*bndtmp*2.0*betaS_ij*(1.0\n              +sigma_a[iij]*GGC)*(1.0+sigma_a[iij]*GGC);\n          bndtmp1=bndtmp1*dBetaS_ij/r_ij;\n          bndtmp2=psign*betaS_ij*(1.0+sigma_a[iij]*GGC)*bndtmp*sigma_c[iij];\n          bndtmp3=psign*betaS_ij*(1.0+sigma_a[iij]*GGC)\n              *bndtmp*sigma_c[iij]*sigma_a[iij];\n          bndtmp4=psign*betaS_ij*(1.0+sigma_a[iij]*GGC)\n              *bndtmp*sigma_c[iij]*sigma_a[iij]*(2.0+GGC);\n          bndtmp5=sigma_a[iij]*psign*betaS_ij*bndtmp0\n              +psign*betaS_ij*(1.0+sigma_a[iij]*GGC)*bndtmp\n              *(2.0*(FF+sigma_delta[iij]*sigma_delta[iij])*(1.0\n              +sigma_a[iij]*GGC)*sigma_a[iij]+sigma_c[iij]*sigma_a[iij]*FFC);\n          setting=0;\n          for(m=0;m<nb_t;m++) {\n            if((bt_sg[m].i>-1)&&(bt_sg[m].j>-1)) {\n              temp_kk=bt_sg[m].temp;\n              if(temp_kk==temp_ij&&setting==0) {\n                bt_sg[m].dSigB1[0]=bndtmp1*dis_ij[0]\n                    +(bndtmp2*bt_sg[m].dAAC[0]\n                    +bndtmp3*bt_sg[m].dEE[0]\n                    +bndtmp4*bt_sg[m].dFFC[0]\n                    +bndtmp5*bt_sg[m].dGGC[0]);\n                bt_sg[m].dSigB1[1]=bndtmp1*dis_ij[1]\n                    +(bndtmp2*bt_sg[m].dAAC[1]\n                    +bndtmp3*bt_sg[m].dEE[1]\n                    +bndtmp4*bt_sg[m].dFFC[1]\n                    +bndtmp5*bt_sg[m].dGGC[1]);\n                bt_sg[m].dSigB1[2]=bndtmp1*dis_ij[2]\n                    +(bndtmp2*bt_sg[m].dAAC[2]\n                    +bndtmp3*bt_sg[m].dEE[2]\n                    +bndtmp4*bt_sg[m].dFFC[2]\n                    +bndtmp5*bt_sg[m].dGGC[2]);\n                setting=1;\n              }\n              else if(temp_kk==temp_ji&&setting==0) {\n                bt_sg[m].dSigB1[0]=-bndtmp1*dis_ij[0]\n                    +(bndtmp2*bt_sg[m].dAAC[0]\n                    +bndtmp3*bt_sg[m].dEE[0]\n                    +bndtmp4*bt_sg[m].dFFC[0]\n                    +bndtmp5*bt_sg[m].dGGC[0]);\n                bt_sg[m].dSigB1[1]=-bndtmp1*dis_ij[1]\n                    +(bndtmp2*bt_sg[m].dAAC[1]\n                    +bndtmp3*bt_sg[m].dEE[1]\n                    +bndtmp4*bt_sg[m].dFFC[1]\n                    +bndtmp5*bt_sg[m].dGGC[1]);\n                bt_sg[m].dSigB1[2]=-bndtmp1*dis_ij[2]\n                    +(bndtmp2*bt_sg[m].dAAC[2]\n                    +bndtmp3*bt_sg[m].dEE[2]\n                    +bndtmp4*bt_sg[m].dFFC[2]\n                    +bndtmp5*bt_sg[m].dGGC[2]);\n                setting=1;\n              }\n              else {\n                bt_sg[m].dSigB1[0]=(bndtmp2*bt_sg[m].dAAC[0]\n                    +bndtmp3*bt_sg[m].dEE[0]\n                    +bndtmp4*bt_sg[m].dFFC[0]\n                    +bndtmp5*bt_sg[m].dGGC[0]);\n                bt_sg[m].dSigB1[1]=(bndtmp2*bt_sg[m].dAAC[1]\n                    +bndtmp3*bt_sg[m].dEE[1]\n                    +bndtmp4*bt_sg[m].dFFC[1]\n                    +bndtmp5*bt_sg[m].dGGC[1]);\n                bt_sg[m].dSigB1[2]=(bndtmp2*bt_sg[m].dAAC[2]\n                    +bndtmp3*bt_sg[m].dEE[2]\n                    +bndtmp4*bt_sg[m].dFFC[2]\n                    +bndtmp5*bt_sg[m].dGGC[2]);\n              }\n            }\n          }\n        }\n      }\n\n//This loop is to ensure there is not an error for atoms with no neighbors (deposition)\n\n// sigB is the final expression for (a) Eq. 6 and (b) Eq. 11\n\n      if(nb_t==0) {\n        if(j>i) {\n          bt_sg[0].dSigB1[0]=bndtmp1*dis_ij[0];\n          bt_sg[0].dSigB1[1]=bndtmp1*dis_ij[1];\n          bt_sg[0].dSigB1[2]=bndtmp1*dis_ij[2];\n        }\n        else {\n          bt_sg[0].dSigB1[0]=-bndtmp1*dis_ij[0];\n          bt_sg[0].dSigB1[1]=-bndtmp1*dis_ij[1];\n          bt_sg[0].dSigB1[2]=-bndtmp1*dis_ij[2];\n        }\n        for(pp=0;pp<3;pp++) {\n          bt_sg[0].dAA[pp]=0.0;\n          bt_sg[0].dBB[pp]=0.0;\n          bt_sg[0].dAAC[pp]=0.0;\n          bt_sg[0].dSigB1[pp]=0.0;\n          bt_sg[0].dSigB[pp]=0.0;\n          if(sigma_f[iij]!=0.5&&sigma_k[iij]!=0.0) {\n            bt_sg[0].dCC[pp]=0.0;\n            bt_sg[0].dDD[pp]=0.0;\n            bt_sg[0].dEE[pp]=0.0;\n            bt_sg[0].dEE1[pp]=0.0;\n            bt_sg[0].dFF[pp]=0.0;\n            bt_sg[0].dBBC[pp]=0.0;\n            bt_sg[0].dCCC[pp]=0.0;\n            bt_sg[0].dDDC[pp]=0.0;\n            bt_sg[0].dEEC[pp]=0.0;\n            bt_sg[0].dFFC[pp]=0.0;\n            bt_sg[0].dGGC[pp]=0.0;\n            bt_sg[0].dUT[pp]=0.0;\n          }\n        }\n        bt_sg[0].i=i;\n        bt_sg[0].j=j;\n        bt_sg[0].temp=temp_ij;\n        nb_t++;\n        if(nb_t>nb_sg) {\n          new_n_tot=nb_sg+maxneigh;\n          grow_sigma(nb_sg,new_n_tot);\n          nb_sg=new_n_tot;\n        }\n      }\n      ps=sigB1*rdBO+1.0;\n      ks=(int)ps;\n      if(nBOt-1<ks)\n        ks=nBOt-1;\n      ps=ps-ks;\n      if(ps>1.0)\n        ps=1.0;\n      dsigB1=((FsigBO3[iij][ks-1]*ps+FsigBO2[iij][ks-1])*ps\n          +FsigBO1[iij][ks-1])*ps+FsigBO[iij][ks-1];\n\n      dsigB2=(FsigBO6[iij][ks-1]*ps+FsigBO5[iij][ks-1])*ps+FsigBO4[iij][ks-1];\n      for(m=0;m<nb_t;m++) {\n        if((bt_sg[m].i>-1)&&(bt_sg[m].j>-1)) {\n          temp_kk=bt_sg[m].temp;\n          bt_i=bt_sg[m].i;\n          bt_j=bt_sg[m].j;\n          if(sigma_f[iij]==0.5&&sigma_k[iij]==0.0) {\n            sigB=dsigB1;\n            pp1=2.0*betaS_ij;\n            for(pp=0;pp<3;pp++) {\n              bt_sg[m].dSigB[pp]=dsigB2*bt_sg[m].dSigB1[pp];\n            }\n            for(pp=0;pp<3;pp++) {\n              ftmp[pp]=pp1*bt_sg[m].dSigB[pp];\n              f[bt_i][pp]-=ftmp[pp];\n              f[bt_j][pp]+=ftmp[pp];\n            }\n            if(evflag) {\n              ev_tally_xyz(bt_i,bt_j,nlocal,newton_pair,0.0,0.0,ftmp[0],ftmp[1]\n                  ,ftmp[2],xtmp[0],xtmp[1],xtmp[2]);\n            }\n          } else {\n            part0=(FF+0.5*AAC+small5);\n            part1=(sigma_f[iij]-0.5)*sigma_k[iij];\n            part2=1.0-part1*EE1/part0;\n            part3=dsigB1*part1/part0;\n            part4=part3/part0*EE1;\n\n// sigB is the final expression for (a) Eq. 6 and (b) Eq. 11\n\n            sigB=dsigB1*part2;\n\n            pp1=2.0*betaS_ij;\n            xtmp[0]=x[bt_j][0]-x[bt_i][0];\n            xtmp[1]=x[bt_j][1]-x[bt_i][1];\n            xtmp[2]=x[bt_j][2]-x[bt_i][2];\n            for(pp=0;pp<3;pp++) {\n              bt_sg[m].dSigB[pp]=dsigB2*part2*bt_sg[m].dSigB1[pp]\n                  -part3*bt_sg[m].dEE1[pp]\n                  +part4*(bt_sg[m].dFF[pp]\n                  +0.5*bt_sg[m].dAAC[pp]);\n            }\n            for(pp=0;pp<3;pp++) {\n              ftmp[pp]=pp1*bt_sg[m].dSigB[pp];\n              f[bt_i][pp]-=ftmp[pp];\n              f[bt_j][pp]+=ftmp[pp];\n            }\n            if(evflag) {\n              ev_tally_xyz(bt_i,bt_j,nlocal,newton_pair,0.0,0.0,ftmp[0],ftmp[1]\n                  ,ftmp[2],xtmp[0],xtmp[1],xtmp[2]);\n            }\n          }\n        }\n      }\n    }\n    }\n  }\n  return(sigB);\n}\n\n/* ---------------------------------------------------------------------- */\n\n/*  The formulation differs slightly to avoid negative square roots\n    in the calculation of Theta_pi,ij of (a) Eq. 36 and (b) Eq. 18\n    see (d) */\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairBOP::PiBo(int itmp, int jtmp)\n{\n  int new_n_tot;\n  int i,j,k,kp,m,n,pp,nb_t;\n  int iij,iik,iikp,ji,ki,ijkp,ijk;\n  int nsearch,ncmp;\n  tagint i_tag,j_tag;\n  int ltmp,ktmp;\n  int pi_flag,ks;\n  int nlocal;\n  int *ilist,*iilist,*jlist;\n  int **firstneigh;\n  int itype,jtype,ktype,kptype;\n  int temp_ij,temp_ik,temp_ikp;\n  int temp_jk,temp_jkp;\n  int nb_ij,nb_ik,nb_jk,nb_ikp,nb_jkp;\n  int bt_i,bt_j;\n  int pass_ij,pass_ik,pass_ikp;\n  int pass_jkp,pass_jk;\n  int njik,ngj,ngk;\n  int nkikp,njikp,nglj;\n  int ngl,ngi,nkjkp;\n  int nijkp,ngli,nijk;\n  int ang_jik,ang_jikp,ang_kikp;\n  int ang_ijk,ang_ijkp,ang_kjkp;\n  int ni_ij,ni_ji,ni_ik,ni_ikp;\n  int ni_ki,ni_jk,ni_jkp;\n  int temp_ji,temp_ki;\n  int nlistj,nlisti;\n  double AA,BB,CC;\n  double cosSq,sinFactor,cosFactor;\n  double cosSq1,dotV,BBrt,AB1,AB2;\n  double BBrtR,ABrtR1,ABrtR2;\n  double angFactor,angFactor1,angFactor2;\n  double angFactor3,angFactor4,angRfactor;\n  double dAngR1,dAngR2,agpdpr3;\n  double agpdpr1,agpdpr2,app1,app2,app3;\n  double betaCapSq1,dbetaCapSq1;\n  double betaCapSq2,dbetaCapSq2;\n  double betaCapSum,ps;\n  double ftmp[3],xtmp[3];\n  double dPiB1,dPiB2,dPiB3,pp2;\n\n  double dis_ij[3],rsq_ij,r_ij;\n  double betaP_ij,dBetaP_ij;\n  double dis_ik[3],rsq_ik,r_ik;\n  double betaS_ik,dBetaS_ik;\n  double betaP_ik,dBetaP_ik;\n  double dis_ikp[3],rsq_ikp,r_ikp;\n  double betaS_ikp,dBetaS_ikp;\n  double betaP_ikp,dBetaP_ikp;\n  double dis_jk[3],rsq_jk,r_jk;\n  double betaS_jk,dBetaS_jk;\n  double betaP_jk,dBetaP_jk;\n  double dis_jkp[3],rsq_jkp,r_jkp;\n  double betaS_jkp,dBetaS_jkp;\n  double betaP_jkp,dBetaP_jkp;\n\n  double cosAng_jik,dcA_jik[3][2];\n  double cosAng_jikp,dcA_jikp[3][2];\n  double cosAng_kikp,dcA_kikp[3][2];\n  double cosAng_ijk,dcA_ijk[3][2];\n  double cosAng_ijkp,dcA_ijkp[3][2];\n  double cosAng_kjkp,dcA_kjkp[3][2];\n\n  int newton_pair = force->newton_pair;\n\n  double **f = atom->f;\n  double **x = atom->x;\n  int *type = atom->type;\n  tagint *tag = atom->tag;\n\n  nlocal = atom->nlocal;\n  firstneigh = list->firstneigh;\n  ilist = list->ilist;\n  n=0;\n  if(nb_pi>16) {\n    nb_pi=16;\n  }\n  if(nb_pi==0) {\n    nb_pi=(maxneigh)*(maxneigh/2);\n  }\n\n// Loop over all local atoms for i\n\n  if(allocate_pi) {\n    destroy_pi();\n  }\n  create_pi(nb_pi);\n  piB=0;\n    i = ilist[itmp];\n    i_tag=tag[i];\n    itype = map[type[i]]+1;\n\n// j is a loop over all neighbors of i\n    iilist=firstneigh[i];\n      for(m=0;m<nb_pi;m++) {\n        for(pp=0;pp<3;pp++) {\n          bt_pi[m].dAA[pp]=0.0;\n          bt_pi[m].dBB[pp]=0.0;\n          bt_pi[m].dPiB[pp]=0.0;\n        }\n        bt_pi[m].i=-1;\n        bt_pi[m].j=-1;\n      }\n      nb_t=0;\n      temp_ij=BOP_index[i]+jtmp;\n      ni_ij=neigh_index[temp_ij];\n      j=iilist[ni_ij];\n      jlist=firstneigh[j];\n      j_tag=tag[j];\n      jtype=map[type[j]]+1;\n      ftmp[0]=0.0;\n      ftmp[1]=0.0;\n      ftmp[2]=0.0;\n      if(j_tag>=i_tag) {\n        if(itype==jtype)\n          iij=itype-1;\n        else if(itype<jtype)\n          iij=itype*bop_types-itype*(itype+1)/2+jtype-1;\n        else\n          iij=jtype*bop_types-jtype*(jtype+1)/2+itype-1;\n        if(pi_a[iij]==0) {\n          nPiBk=0;\n          piB=0;\n        } else {\n        AA=0.0;\n        BB=0.0;\n        nPiBk=0;\n        nlistj=BOP_total[j];\n        for(ji=0;ji<nlistj;ji++) {\n          temp_ji=BOP_index[j]+ji;\n          ni_ji=neigh_index[temp_ji];\n          if(x[jlist[ni_ji]][0]==x[i][0]) {\n            if(x[jlist[ni_ji]][1]==x[i][1]) {\n              if(x[jlist[ni_ji]][2]==x[i][2]) {\n                  break;\n              }\n            }\n          }\n        }\n        nb_ij=nb_t;\n        nb_t++;\n        if(nb_t>nb_pi) {\n          new_n_tot=nb_pi+maxneigh;\n          grow_pi(nb_pi,new_n_tot);\n          nb_pi=new_n_tot;\n        }\n        bt_pi[nb_ij].i=i;\n        bt_pi[nb_ij].j=j;\n        bt_pi[nb_ij].temp=temp_ij;\n        pass_ij=0;\n        if(otfly==1) {\n          dis_ij[0]=x[j][0]-x[i][0];\n          dis_ij[1]=x[j][1]-x[i][1];\n          dis_ij[2]=x[j][2]-x[i][2];\n          rsq_ij=dis_ij[0]*dis_ij[0]\n              +dis_ij[1]*dis_ij[1]\n              +dis_ij[2]*dis_ij[2];\n          r_ij=sqrt(rsq_ij);\n          if(r_ij<=rcut[iij]) {\n            pass_ij=1;\n            ps=r_ij*rdr[iij]+1.0;\n            ks=(int)ps;\n            if(nr-1<ks)\n              ks=nr-1;\n            ps=ps-ks;\n            if(ps>1.0)\n              ps=1.0;\n            betaP_ij=((pBetaP3[iij][ks-1]*ps+pBetaP2[iij][ks-1])*ps\n                +pBetaP1[iij][ks-1])*ps+pBetaP[iij][ks-1];\n            dBetaP_ij=(pBetaP6[iij][ks-1]*ps+pBetaP5[iij][ks-1])*ps\n                +pBetaP4[iij][ks-1];\n          }\n        } else {\n          if(neigh_flag[temp_ij]) {\n            pass_ij=1;\n            dis_ij[0]=disij[0][temp_ij];\n            dis_ij[1]=disij[1][temp_ij];\n            dis_ij[2]=disij[2][temp_ij];\n            r_ij=rij[temp_ij];\n            betaP_ij=betaP[temp_ij];\n            dBetaP_ij=dBetaP[temp_ij];\n          }\n        }\n\n// j and k are different neighbors of i\n\n        AA=0.0;\n        BB=0.0;\n        if(pass_ij==1) {\n          nPiBk=0;\n          nlisti=BOP_total[i];\n          for(ktmp=0;ktmp<nlisti;ktmp++) {\n            if(ktmp!=jtmp) {\n              temp_ik=BOP_index[i]+ktmp;\n              ni_ik=neigh_index[temp_ik];\n              k=iilist[ni_ik];\n              ktype=map[type[k]]+1;\n              if(itype==ktype)\n                iik=itype-1;\n              else if(itype<ktype)\n                iik=itype*bop_types-itype*(itype+1)/2+ktype-1;\n              else\n                iik=ktype*bop_types-ktype*(ktype+1)/2+itype-1;\n              pass_ik=0;\n              if(otfly==1) {\n                dis_ik[0]=x[k][0]-x[i][0];\n                dis_ik[1]=x[k][1]-x[i][1];\n                dis_ik[2]=x[k][2]-x[i][2];\n                rsq_ik=dis_ik[0]*dis_ik[0]\n                    +dis_ik[1]*dis_ik[1]\n                    +dis_ik[2]*dis_ik[2];\n                r_ik=sqrt(rsq_ik);\n                if(r_ik<=rcut[iik]) {\n                  pass_ik=1;\n                  ps=r_ik*rdr[iik]+1.0;\n                  ks=(int)ps;\n                  if(nr-1<ks)\n                    ks=nr-1;\n                  ps=ps-ks;\n                  if(ps>1.0)\n                    ps=1.0;\n                  betaS_ik=((pBetaS3[iik][ks-1]*ps+pBetaS2[iik][ks-1])*ps\n                      +pBetaS1[iik][ks-1])*ps+pBetaS[iik][ks-1];\n                  dBetaS_ik=(pBetaS6[iik][ks-1]*ps+pBetaS5[iik][ks-1])*ps\n                      +pBetaS4[iik][ks-1];\n                  betaP_ik=((pBetaP3[iik][ks-1]*ps+pBetaP2[iik][ks-1])*ps\n                      +pBetaP1[iik][ks-1])*ps+pBetaP[iik][ks-1];\n                  dBetaP_ik=(pBetaP6[iik][ks-1]*ps+pBetaP5[iik][ks-1])*ps\n                      +pBetaP4[iik][ks-1];\n                  cosAng_jik=(dis_ij[0]*dis_ik[0]+dis_ij[1]*dis_ik[1]\n                      +dis_ij[2]*dis_ik[2])/(r_ij*r_ik);\n                  dcA_jik[0][0]=(dis_ik[0]*r_ij*r_ik-cosAng_jik\n                      *dis_ij[0]*r_ik*r_ik)/(r_ij*r_ij*r_ik*r_ik);\n                  dcA_jik[1][0]=(dis_ik[1]*r_ij*r_ik-cosAng_jik\n                      *dis_ij[1]*r_ik*r_ik)/(r_ij*r_ij*r_ik*r_ik);\n                  dcA_jik[2][0]=(dis_ik[2]*r_ij*r_ik-cosAng_jik\n                      *dis_ij[2]*r_ik*r_ik)/(r_ij*r_ij*r_ik*r_ik);\n                  dcA_jik[0][1]=(dis_ij[0]*r_ij*r_ik-cosAng_jik\n                      *dis_ik[0]*r_ij*r_ij)/(r_ij*r_ij*r_ik*r_ik);\n                  dcA_jik[1][1]=(dis_ij[1]*r_ij*r_ik-cosAng_jik\n                      *dis_ik[1]*r_ij*r_ij)/(r_ij*r_ij*r_ik*r_ik);\n                  dcA_jik[2][1]=(dis_ij[2]*r_ij*r_ik-cosAng_jik\n                      *dis_ik[2]*r_ij*r_ij)/(r_ij*r_ij*r_ik*r_ik);\n                }\n              } else {\n                if(neigh_flag[temp_ik]) {\n                  pass_ik=1;\n                  dis_ik[0]=disij[0][temp_ik];\n                  dis_ik[1]=disij[1][temp_ik];\n                  dis_ik[2]=disij[2][temp_ik];\n                  r_ik=rij[temp_ik];\n                  betaS_ik=betaS[temp_ik];\n                  dBetaS_ik=dBetaS[temp_ik];\n                  betaP_ik=betaP[temp_ik];\n                  dBetaP_ik=dBetaP[temp_ik];\n                  if(jtmp<ktmp) {\n                    njik=jtmp*(2*nlisti-jtmp-1)/2+(ktmp-jtmp)-1;\n                    ngj=0;\n                    ngk=1;\n                  }\n                  else {\n                    njik=ktmp*(2*nlisti-ktmp-1)/2+(jtmp-ktmp)-1;\n                    ngj=1;\n                    ngk=0;\n                  }\n                  ang_jik=cos_index[i]+njik;\n                  cosAng_jik=cosAng[ang_jik];\n                  dcA_jik[0][0]=dcAng[ang_jik][0][ngj];\n                  dcA_jik[1][0]=dcAng[ang_jik][1][ngj];\n                  dcA_jik[2][0]=dcAng[ang_jik][2][ngj];\n                  dcA_jik[0][1]=dcAng[ang_jik][0][ngk];\n                  dcA_jik[1][1]=dcAng[ang_jik][1][ngk];\n                  dcA_jik[2][1]=dcAng[ang_jik][2][ngk];\n                }\n              }\n              if(pass_ik==1) {\n                nb_ik=nb_t;\n                nb_t++;\n                if(nb_t>nb_pi) {\n                  new_n_tot=nb_pi+maxneigh;\n                  grow_pi(nb_pi,new_n_tot);\n                  nb_pi=new_n_tot;\n                }\n                bt_pi[nb_ik].i=i;\n                bt_pi[nb_ik].j=k;\n                bt_pi[nb_ik].temp=temp_ik;\n                cosSq=cosAng_jik*cosAng_jik;\n                sinFactor=.5*(1.0-cosSq)*pi_p[itype-1]*betaS_ik;\n                cosFactor=.5*(1.0+cosSq)*betaP_ik;\n                betaCapSq1=pi_p[itype-1]*betaS_ik*betaS_ik-betaP_ik\n                    *betaP_ik;\n                dbetaCapSq1=2.0*pi_p[itype-1]*betaS_ik*dBetaS_ik\n                    -2.0*betaP_ik*dBetaP_ik;\n\n//AA is Eq. 37 (a) and Eq. 19 (b) or i atoms\n//1st BB is first term of Eq. 38 (a) where j and k =neighbors i\n                AA=AA+sinFactor*betaS_ik+cosFactor*betaP_ik;\n                BB=BB+.25*(1.0-cosSq)*(1.0-cosSq)*betaCapSq1*betaCapSq1;\n\n//agpdpr1 is derivative of AA w.r.t. for atom i w.r.t. Beta(r_ik)\n//agpdpr2 is derivative of BB w.r.t. for atom i w.r.t. Beta(r_ik)\n//app1 is derivative of AA w.r.t. for atom i w.r.t. cos(theta_jik)\n//app2 is derivative of BB w.r.t. for atom i w.r.t. cos(theta_jik)\n\n                agpdpr1=(2.0*sinFactor*dBetaS_ik+2.0*cosFactor\n                    *dBetaP_ik)/r_ik;\n                app1=cosAng_jik*(-pi_p[itype-1]*betaS_ik*betaS_ik\n                    +betaP_ik*betaP_ik);\n                app2=-(1.0-cosSq)*cosAng_jik*betaCapSq1*betaCapSq1;\n                agpdpr2=.5*(1.0-cosSq)*(1.0-cosSq)*betaCapSq1*dbetaCapSq1/r_ik;\n                itypePiBk[nPiBk]=k;\n                bt_pi[nb_ij].dAA[0]+=\n                    app1*dcA_jik[0][0];\n                bt_pi[nb_ij].dAA[1]+=\n                    app1*dcA_jik[1][0];\n                bt_pi[nb_ij].dAA[2]+=\n                    app1*dcA_jik[2][0];\n                bt_pi[nb_ij].dBB[0]+=\n                    app2*dcA_jik[0][0];\n                bt_pi[nb_ij].dBB[1]+=\n                    app2*dcA_jik[1][0];\n                bt_pi[nb_ij].dBB[2]+=\n                    app2*dcA_jik[2][0];\n                bt_pi[nb_ik].dAA[0]+=\n                    agpdpr1*dis_ik[0]\n                    +app1*dcA_jik[0][1];\n                bt_pi[nb_ik].dAA[1]+=\n                    agpdpr1*dis_ik[1]\n                    +app1*dcA_jik[1][1];\n                bt_pi[nb_ik].dAA[2]+=\n                    agpdpr1*dis_ik[2]\n                    +app1*dcA_jik[2][1];\n                bt_pi[nb_ik].dBB[0]+=\n                    app2*dcA_jik[0][1]\n                    +agpdpr2*dis_ik[0];\n                bt_pi[nb_ik].dBB[1]+=\n                    app2*dcA_jik[1][1]\n                    +agpdpr2*dis_ik[1];\n                bt_pi[nb_ik].dBB[2]+=\n                    app2*dcA_jik[2][1]\n                    +agpdpr2*dis_ik[2];\n\n// j and k and k' are different neighbors of i\n\n                for(ltmp=0;ltmp<ktmp;ltmp++) {\n                  if(ltmp!=jtmp) {\n                    temp_ikp=BOP_index[i]+ltmp;\n                    ni_ikp=neigh_index[temp_ikp];\n                    kp=iilist[ni_ikp];\n                    kptype=map[type[kp]]+1;\n                    for(nsearch=0;nsearch<nPiBk;nsearch++) {\n                      ncmp=itypePiBk[nsearch];\n                      if(x[ncmp][0]==x[kp][0]) {\n                        if(x[ncmp][1]==x[kp][1]) {\n                          if(x[ncmp][2]==x[kp][2]) {\n                            break;\n                          }\n                        }\n                      }\n                    }\n                    if(itype==kptype)\n                      iikp=itype-1;\n                    else if(itype<kptype)\n                      iikp=itype*bop_types-itype*(itype+1)/2+kptype-1;\n                    else\n                      iikp=kptype*bop_types-kptype*(kptype+1)/2+itype-1;\n                    pass_ikp=0;\n                    if(otfly==1) {\n                      dis_ikp[0]=x[kp][0]-x[i][0];\n                      dis_ikp[1]=x[kp][1]-x[i][1];\n                      dis_ikp[2]=x[kp][2]-x[i][2];\n                      rsq_ikp=dis_ikp[0]*dis_ikp[0]\n                          +dis_ikp[1]*dis_ikp[1]\n                          +dis_ikp[2]*dis_ikp[2];\n                      r_ikp=sqrt(rsq_ikp);\n                      if(r_ikp<=rcut[iikp]) {\n                        pass_ikp=1;\n                        ps=r_ikp*rdr[iikp]+1.0;\n                        ks=(int)ps;\n                        if(nr-1<ks)\n                          ks=nr-1;\n                        ps=ps-ks;\n                        if(ps>1.0)\n                          ps=1.0;\n                        betaS_ikp=((pBetaS3[iikp][ks-1]*ps+pBetaS2[iikp][ks-1])*ps\n                            +pBetaS1[iikp][ks-1])*ps+pBetaS[iikp][ks-1];\n                        dBetaS_ikp=(pBetaS6[iikp][ks-1]*ps+pBetaS5[iikp][ks-1])*ps\n                            +pBetaS4[iikp][ks-1];\n                        betaP_ikp=((pBetaP3[iikp][ks-1]*ps+pBetaP2[iikp][ks-1])*ps\n                            +pBetaP1[iikp][ks-1])*ps+pBetaP[iikp][ks-1];\n                        dBetaP_ikp=(pBetaP6[iikp][ks-1]*ps+pBetaP5[iikp][ks-1])*ps\n                            +pBetaP4[iikp][ks-1];\n                        cosAng_jikp=(dis_ij[0]*dis_ikp[0]+dis_ij[1]*dis_ikp[1]\n                            +dis_ij[2]*dis_ikp[2])/(r_ij*r_ikp);\n                        dcA_jikp[0][0]=(dis_ikp[0]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ij[0]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[1][0]=(dis_ikp[1]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ij[1]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[2][0]=(dis_ikp[2]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ij[2]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[0][1]=(dis_ij[0]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ikp[0]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[1][1]=(dis_ij[1]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ikp[1]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[2][1]=(dis_ij[2]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ikp[2]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                        cosAng_kikp=(dis_ik[0]*dis_ikp[0]+dis_ik[1]*dis_ikp[1]\n                            +dis_ik[2]*dis_ikp[2])/(r_ik*r_ikp);\n                        dcA_kikp[0][0]=(dis_ikp[0]*r_ik*r_ikp-cosAng_kikp\n                            *dis_ik[0]*r_ikp*r_ikp)/(r_ik*r_ik*r_ikp*r_ikp);\n                        dcA_kikp[1][0]=(dis_ikp[1]*r_ik*r_ikp-cosAng_kikp\n                            *dis_ik[1]*r_ikp*r_ikp)/(r_ik*r_ik*r_ikp*r_ikp);\n                        dcA_kikp[2][0]=(dis_ikp[2]*r_ik*r_ikp-cosAng_kikp\n                            *dis_ik[2]*r_ikp*r_ikp)/(r_ik*r_ik*r_ikp*r_ikp);\n                        dcA_kikp[0][1]=(dis_ik[0]*r_ik*r_ikp-cosAng_kikp\n                            *dis_ikp[0]*r_ik*r_ik)/(r_ik*r_ik*r_ikp*r_ikp);\n                        dcA_kikp[1][1]=(dis_ik[1]*r_ik*r_ikp-cosAng_kikp\n                            *dis_ikp[1]*r_ik*r_ik)/(r_ik*r_ik*r_ikp*r_ikp);\n                        dcA_kikp[2][1]=(dis_ik[2]*r_ik*r_ikp-cosAng_kikp\n                            *dis_ikp[2]*r_ik*r_ik)/(r_ik*r_ik*r_ikp*r_ikp);\n                      }\n                    } else {\n                      if(neigh_flag[temp_ikp]) {\n                        pass_ikp=1;\n                        dis_ikp[0]=disij[0][temp_ikp];\n                        dis_ikp[1]=disij[1][temp_ikp];\n                        dis_ikp[2]=disij[2][temp_ikp];\n                        r_ikp=rij[temp_ikp];\n                        betaS_ikp=betaS[temp_ikp];\n                        dBetaS_ikp=dBetaS[temp_ikp];\n                        betaP_ikp=betaP[temp_ikp];\n                        dBetaP_ikp=dBetaP[temp_ikp];\n                        nkikp=ltmp*(2*nlisti-ltmp-1)/2+(ktmp-ltmp)-1;\n                        if(jtmp<ltmp) {\n                          njikp=jtmp*(2*nlisti-jtmp-1)/2+(ltmp-jtmp)-1;\n                          nglj=0;\n                          ngl=1;\n                        }\n                        else {\n                          njikp=ltmp*(2*nlisti-ltmp-1)/2+(jtmp-ltmp)-1;\n                          nglj=1;\n                          ngl=0;\n                        }\n                        ang_jikp=cos_index[i]+njikp;\n                        cosAng_jikp=cosAng[ang_jikp];\n                        dcA_jikp[0][0]=dcAng[ang_jikp][0][nglj];\n                        dcA_jikp[1][0]=dcAng[ang_jikp][1][nglj];\n                        dcA_jikp[2][0]=dcAng[ang_jikp][2][nglj];\n                        dcA_jikp[0][1]=dcAng[ang_jikp][0][ngl];\n                        dcA_jikp[1][1]=dcAng[ang_jikp][1][ngl];\n                        dcA_jikp[2][1]=dcAng[ang_jikp][2][ngl];\n                        ang_kikp=cos_index[i]+nkikp;\n                        cosAng_kikp=cosAng[ang_kikp];\n                        dcA_kikp[0][0]=dcAng[ang_kikp][0][1];\n                        dcA_kikp[1][0]=dcAng[ang_kikp][1][1];\n                        dcA_kikp[2][0]=dcAng[ang_kikp][2][1];\n                        dcA_kikp[0][1]=dcAng[ang_kikp][0][0];\n                        dcA_kikp[1][1]=dcAng[ang_kikp][1][0];\n                        dcA_kikp[2][1]=dcAng[ang_kikp][2][0];\n                      }\n                    }\n                    if(pass_ikp==1) {\n                      nb_ikp=nb_t;\n                      nb_t++;\n                      if(nb_t>nb_pi) {\n                        new_n_tot=nb_pi+maxneigh;\n                        grow_pi(nb_pi,new_n_tot);\n                        nb_pi=new_n_tot;\n                      }\n                      bt_pi[nb_ikp].i=i;\n                      bt_pi[nb_ikp].j=kp;\n                      bt_pi[nb_ikp].temp=temp_ikp;\n                      betaCapSq2=pi_p[itype-1]*betaS_ikp*betaS_ikp\n                          -betaP_ikp*betaP_ikp;\n                      dbetaCapSq2=2.0*pi_p[itype-1]*betaS_ikp*dBetaS_ikp\n                          -2.0*betaP_ikp*dBetaP_ikp;\n                      cosSq1=cosAng_jikp*cosAng_jikp;\n                      angFactor=cosAng_kikp-cosAng_jikp*cosAng_jik;\n                      angFactor1=4.0*angFactor;\n                      angFactor2=-angFactor1*cosAng_jikp\n                          +2.0*cosAng_jik*(1.0-cosSq1);\n                      angFactor3=-angFactor1*cosAng_jik\n                          +2.0*cosAng_jikp*(1.0-cosSq);\n                      angFactor4=2.0*angFactor*angFactor-(1.0-cosSq)*(1.0-cosSq1);\n                      betaCapSum=.5*betaCapSq1*betaCapSq2;\n\n//2nd BB is third term of Eq. 38 (a) where j , k and k'=neighbors i\n\n                      BB=BB+betaCapSum*angFactor4;\n//agpdpr1 is derivative of BB w.r.t. for atom i w.r.t. Beta(r_ik)\n//agpdpr2 is derivative of BB w.r.t. for atom i w.r.t. Beta(r_ik')\n//app1 is derivative of BB 3rd term w.r.t. cos(theta_kik')\n//app2 is derivative of BB 3rd term w.r.t. cos(theta_jik)\n//app3 is derivative of BB 3rd term w.r.t. cos(theta_jik')\n\n                      app1=betaCapSum*angFactor1;\n                      app2=betaCapSum*angFactor2;\n                      app3=betaCapSum*angFactor3;\n                      agpdpr1=.5*angFactor4*dbetaCapSq1*betaCapSq2/r_ik;\n                      agpdpr2=.5*angFactor4*betaCapSq1*dbetaCapSq2/r_ikp;\n                      bt_pi[nb_ij].dBB[0]+=\n                          app2*dcA_jik[0][0]\n                          +app3*dcA_jikp[0][0];\n                      bt_pi[nb_ij].dBB[1]+=\n                          app2*dcA_jik[1][0]\n                          +app3*dcA_jikp[1][0];\n                      bt_pi[nb_ij].dBB[2]+=\n                          app2*dcA_jik[2][0]\n                          +app3*dcA_jikp[2][0];\n                      bt_pi[nb_ik].dBB[0]+=\n                          agpdpr1*dis_ik[0]\n                          +app1*dcA_kikp[0][0]\n                          +app2*dcA_jik[0][1];\n                      bt_pi[nb_ik].dBB[1]+=\n                          agpdpr1*dis_ik[1]\n                          +app1*dcA_kikp[1][0]\n                          +app2*dcA_jik[1][1];\n                      bt_pi[nb_ik].dBB[2]+=\n                          agpdpr1*dis_ik[2]\n                          +app1*dcA_kikp[2][0]\n                          +app2*dcA_jik[2][1];\n                      bt_pi[nb_ikp].dBB[0]+=\n                          agpdpr2*dis_ikp[0]\n                          +app1*dcA_kikp[0][1]\n                          +app3*dcA_jikp[0][1];\n                      bt_pi[nb_ikp].dBB[1]+=\n                          agpdpr2*dis_ikp[1]\n                          +app1*dcA_kikp[1][1]\n                          +app3*dcA_jikp[1][1];\n                      bt_pi[nb_ikp].dBB[2]+=\n                          agpdpr2*dis_ikp[2]\n                          +app1*dcA_kikp[2][1]\n                          +app3*dcA_jikp[2][1];\n                    }\n                  }\n                }\n                nPiBk=nPiBk+1;\n              }\n            }\n          }\n\n//j is a neighbor of i and k is a neighbor of j and equal to i\n\n          for(ki=0;ki<nlistj;ki++) {\n            temp_ki=BOP_index[j]+ki;\n            ni_ki=neigh_index[temp_ki];\n            k=jlist[ni_ki];\n            if(x[k][0]==x[i][0]) {\n              if(x[k][1]==x[i][1]) {\n                if(x[k][2]==x[i][2]) {\n                  break;\n                }\n              }\n            }\n          }\n\n//j is a neighbor of i and k is a neighbor of j not equal to i\n          for(ktmp=0;ktmp<nlistj;ktmp++) {\n            if(ktmp!=ki) {\n              temp_jk=BOP_index[j]+ktmp;\n              ni_jk=neigh_index[temp_jk];\n              k=jlist[ni_jk];\n              ktype=map[type[k]]+1;\n              pi_flag=0;\n              for(nsearch=0;nsearch<nPiBk;nsearch++) {\n                ncmp=itypePiBk[nsearch];\n                if(x[ncmp][0]==x[k][0]) {\n                  if(x[ncmp][1]==x[k][1]) {\n                    if(x[ncmp][2]==x[k][2]) {\n                      pi_flag=1;\n                      break;\n                    }\n                  }\n                }\n              }\n              if(pi_flag==0) {\n                itypePiBk[nPiBk]=k;\n              }\n              if(jtype==ktype)\n                ijk=jtype-1;\n              else if(jtype<ktype)\n                ijk=jtype*bop_types-jtype*(jtype+1)/2+ktype-1;\n              else\n                ijk=ktype*bop_types-ktype*(ktype+1)/2+jtype-1;\n              pass_jk=0;\n              if(otfly==1) {\n                dis_jk[0]=x[k][0]-x[j][0];\n                dis_jk[1]=x[k][1]-x[j][1];\n                dis_jk[2]=x[k][2]-x[j][2];\n                rsq_jk=dis_jk[0]*dis_jk[0]\n                    +dis_jk[1]*dis_jk[1]\n                    +dis_jk[2]*dis_jk[2];\n                r_jk=sqrt(rsq_jk);\n                if(r_jk<=rcut[ijk]) {\n                  pass_jk=1;\n                  ps=r_jk*rdr[ijk]+1.0;\n                  ks=(int)ps;\n                  if(nr-1<ks)\n                    ks=nr-1;\n                  ps=ps-ks;\n                  if(ps>1.0)\n                    ps=1.0;\n                  betaS_jk=((pBetaS3[ijk][ks-1]*ps+pBetaS2[ijk][ks-1])*ps\n                      +pBetaS1[ijk][ks-1])*ps+pBetaS[ijk][ks-1];\n                  dBetaS_jk=(pBetaS6[ijk][ks-1]*ps+pBetaS5[ijk][ks-1])*ps\n                      +pBetaS4[ijk][ks-1];\n                  betaP_jk=((pBetaP3[ijk][ks-1]*ps+pBetaP2[ijk][ks-1])*ps\n                      +pBetaP1[ijk][ks-1])*ps+pBetaP[ijk][ks-1];\n                  dBetaP_jk=(pBetaP6[ijk][ks-1]*ps+pBetaP5[ijk][ks-1])*ps\n                      +pBetaP4[ijk][ks-1];\n                  cosAng_ijk=(-dis_ij[0]*dis_jk[0]-dis_ij[1]*dis_jk[1]\n                      -dis_ij[2]*dis_jk[2])/(r_ij*r_jk);\n                  dcA_ijk[0][0]=(dis_jk[0]*r_ij*r_jk-cosAng_ijk\n                      *-dis_ij[0]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n                  dcA_ijk[1][0]=(dis_jk[1]*r_ij*r_jk-cosAng_ijk\n                      *-dis_ij[1]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n                  dcA_ijk[2][0]=(dis_jk[2]*r_ij*r_jk-cosAng_ijk\n                      *-dis_ij[2]*r_jk*r_jk)/(r_ij*r_ij*r_jk*r_jk);\n                  dcA_ijk[0][1]=(-dis_ij[0]*r_ij*r_jk-cosAng_ijk\n                      *dis_jk[0]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n                  dcA_ijk[1][1]=(-dis_ij[1]*r_ij*r_jk-cosAng_ijk\n                      *dis_jk[1]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n                  dcA_ijk[2][1]=(-dis_ij[2]*r_ij*r_jk-cosAng_ijk\n                      *dis_jk[2]*r_ij*r_ij)/(r_ij*r_ij*r_jk*r_jk);\n                }\n              } else {\n                if(neigh_flag[temp_jk]) {\n                  pass_jk=1;\n                  dis_jk[0]=disij[0][temp_jk];\n                  dis_jk[1]=disij[1][temp_jk];\n                  dis_jk[2]=disij[2][temp_jk];\n                  r_jk=rij[temp_jk];\n                  betaS_jk=betaS[temp_jk];\n                  dBetaS_jk=dBetaS[temp_jk];\n                  betaP_jk=betaP[temp_jk];\n                  dBetaP_jk=dBetaP[temp_jk];\n                  if(ktmp<ki) {\n                    nijk=ktmp*(2*nlistj-ktmp-1)/2+(ki-ktmp)-1;\n                    ngi=1;\n                    ngk=0;\n                  }\n                  else {\n                    nijk=ki*(2*nlistj-ki-1)/2+(ktmp-ki)-1;\n                    ngi=0;\n                    ngk=1;\n                  }\n                  ang_ijk=cos_index[j]+nijk;\n                  cosAng_ijk=cosAng[ang_ijk];\n                  dcA_ijk[0][0]=dcAng[ang_ijk][0][ngi];\n                  dcA_ijk[1][0]=dcAng[ang_ijk][1][ngi];\n                  dcA_ijk[2][0]=dcAng[ang_ijk][2][ngi];\n                  dcA_ijk[0][1]=dcAng[ang_ijk][0][ngk];\n                  dcA_ijk[1][1]=dcAng[ang_ijk][1][ngk];\n                  dcA_ijk[2][1]=dcAng[ang_ijk][2][ngk];\n                }\n              }\n              if(pass_jk==1) {\n                nb_jk=nb_t;\n                nb_t++;\n                if(nb_t>nb_pi) {\n                  new_n_tot=nb_pi+maxneigh;\n                  grow_pi(nb_pi,new_n_tot);\n                  nb_pi=new_n_tot;\n                }\n                bt_pi[nb_jk].i=j;\n                bt_pi[nb_jk].j=k;\n                bt_pi[nb_jk].temp=temp_jk;\n                cosSq=cosAng_ijk*cosAng_ijk;\n                sinFactor=.5*(1.0-cosSq)*pi_p[jtype-1]*betaS_jk;\n                cosFactor=.5*(1.0+cosSq)*betaP_jk;\n                betaCapSq1=pi_p[jtype-1]*betaS_jk*betaS_jk\n                    -betaP_jk*betaP_jk;\n                dbetaCapSq1=2.0*pi_p[jtype-1]*betaS_jk*dBetaS_jk\n                    -2.0*betaP_jk*dBetaP_jk;\n\n//AA is Eq. 37 (a) and Eq. 19 (b) for j atoms\n//3rd BB is 2nd term of Eq. 38 (a) where i and k =neighbors j\n\n                AA=AA+sinFactor*betaS_jk+cosFactor*betaP_jk;\n                BB=BB+.25*(1.0-cosSq)*(1.0-cosSq)*betaCapSq1*betaCapSq1;\n\n                agpdpr1=(2.0*sinFactor*dBetaS_jk+2.0*cosFactor\n                    *dBetaP_jk)/r_jk;\n\n//agpdpr1 is derivative of AA for atom j w.r.t. Beta(r_jk)\n//agpdpr2 is derivative of BB for atom j w.r.t. Beta(r_jk)\n//app1 is derivative of AA for j atom w.r.t. cos(theta_ijk)\n//app2 is derivative of BB 2nd term w.r.t. cos(theta_ijk)\n\n                agpdpr2=.5*(1.0-cosSq)*(1.0-cosSq)*betaCapSq1*dbetaCapSq1/r_jk;\n                app1=cosAng_ijk*(-pi_p[jtype-1]*betaS_jk*betaS_jk\n                    +betaP_jk*betaP_jk);\n                app2=-(1.0-cosSq)*cosAng_ijk*betaCapSq1*betaCapSq1;\n                bt_pi[nb_ij].dAA[0]-=\n                    app1*dcA_ijk[0][0];\n                bt_pi[nb_ij].dAA[1]-=\n                    app1*dcA_ijk[1][0];\n                bt_pi[nb_ij].dAA[2]-=\n                    app1*dcA_ijk[2][0];\n                bt_pi[nb_ij].dBB[0]-=\n                    app2*dcA_ijk[0][0];\n                bt_pi[nb_ij].dBB[1]-=\n                    app2*dcA_ijk[1][0];\n                bt_pi[nb_ij].dBB[2]-=\n                    app2*dcA_ijk[2][0];\n                bt_pi[nb_jk].dAA[0]+=\n                    agpdpr1*dis_jk[0]\n                    +app1*dcA_ijk[0][1];\n                bt_pi[nb_jk].dAA[1]+=\n                    agpdpr1*dis_jk[1]\n                    +app1*dcA_ijk[1][1];\n                bt_pi[nb_jk].dAA[2]+=\n                    agpdpr1*dis_jk[2]\n                    +app1*dcA_ijk[2][1];\n                bt_pi[nb_jk].dBB[0]+=\n                    app2*dcA_ijk[0][1]\n                    +agpdpr2*dis_jk[0];\n                bt_pi[nb_jk].dBB[1]+=\n                    app2*dcA_ijk[1][1]\n                    +agpdpr2*dis_jk[1];\n                bt_pi[nb_jk].dBB[2]+=\n                    app2*dcA_ijk[2][1]\n                    +agpdpr2*dis_jk[2];\n\n//j is a neighbor of i and k and k' are different neighbors of j not equal to i\n\n                for(ltmp=0;ltmp<ktmp;ltmp++) {\n                  if(ltmp!=ki) {\n                    temp_jkp=BOP_index[j]+ltmp;\n                    ni_jkp=neigh_index[temp_jkp];\n                    kp=jlist[ni_jkp];\n                    kptype=map[type[kp]]+1;\n                    for(nsearch=0;nsearch<nPiBk;nsearch++) {\n                      ncmp=itypePiBk[nsearch];\n                      if(x[ncmp][0]==x[kp][0]) {\n                        if(x[ncmp][1]==x[kp][1]) {\n                          if(x[ncmp][2]==x[kp][2]) {\n                            break;\n                          }\n                        }\n                      }\n                    }\n                    if(jtype==kptype)\n                      ijkp=jtype-1;\n                    else if(jtype<kptype)\n                      ijkp=jtype*bop_types-jtype*(jtype+1)/2+kptype-1;\n                    else\n                      ijkp=kptype*bop_types-kptype*(kptype+1)/2+jtype-1;\n                    pass_jkp=0;\n                    if(otfly==1) {\n                      dis_jkp[0]=x[kp][0]-x[j][0];\n                      dis_jkp[1]=x[kp][1]-x[j][1];\n                      dis_jkp[2]=x[kp][2]-x[j][2];\n                      rsq_jkp=dis_jkp[0]*dis_jkp[0]\n                          +dis_jkp[1]*dis_jkp[1]\n                          +dis_jkp[2]*dis_jkp[2];\n                      r_jkp=sqrt(rsq_jkp);\n                      if(r_jkp<=rcut[ijkp]) {\n                        pass_jkp=1;\n                        ps=r_jkp*rdr[ijkp]+1.0;\n                        ks=(int)ps;\n                        if(nr-1<ks)\n                          ks=nr-1;\n                        ps=ps-ks;\n                        if(ps>1.0)\n                          ps=1.0;\n                        betaS_jkp=((pBetaS3[ijkp][ks-1]*ps+pBetaS2[ijkp][ks-1])*ps\n                            +pBetaS1[ijkp][ks-1])*ps+pBetaS[ijkp][ks-1];\n                        dBetaS_jkp=(pBetaS6[ijkp][ks-1]*ps+pBetaS5[ijkp][ks-1])*ps\n                            +pBetaS4[ijkp][ks-1];\n                        betaP_jkp=((pBetaP3[ijkp][ks-1]*ps+pBetaP2[ijkp][ks-1])*ps\n                            +pBetaP1[ijkp][ks-1])*ps+pBetaP[ijkp][ks-1];\n                        dBetaP_jkp=(pBetaP6[ijkp][ks-1]*ps+pBetaP5[ijkp][ks-1])*ps\n                            +pBetaP4[ijkp][ks-1];\n                        cosAng_ijkp=(-dis_ij[0]*dis_jkp[0]-dis_ij[1]*dis_jkp[1]\n                            -dis_ij[2]*dis_jkp[2])/(r_ij*r_jkp);\n                        dcA_ijkp[0][0]=(dis_jkp[0]*r_ij*r_jkp-cosAng_ijkp\n                            *-dis_ij[0]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                        dcA_ijkp[1][0]=(dis_jkp[1]*r_ij*r_jkp-cosAng_ijkp\n                            *-dis_ij[1]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                        dcA_ijkp[2][0]=(dis_jkp[2]*r_ij*r_jkp-cosAng_ijkp\n                            *-dis_ij[2]*r_jkp*r_jkp)/(r_ij*r_ij*r_jkp*r_jkp);\n                        dcA_ijkp[0][1]=(-dis_ij[0]*r_ij*r_jkp-cosAng_ijkp\n                            *dis_jkp[0]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                        dcA_ijkp[1][1]=(-dis_ij[1]*r_ij*r_jkp-cosAng_ijkp\n                            *dis_jkp[1]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                        dcA_ijkp[2][1]=(-dis_ij[2]*r_ij*r_jkp-cosAng_ijkp\n                            *dis_jkp[2]*r_ij*r_ij)/(r_ij*r_ij*r_jkp*r_jkp);\n                        cosAng_kjkp=(dis_jk[0]*dis_jkp[0]+dis_jk[1]*dis_jkp[1]\n                            +dis_jk[2]*dis_jkp[2])/(r_jk*r_jkp);\n                        dcA_kjkp[0][0]=(dis_jkp[0]*r_jk*r_jkp-cosAng_kjkp\n                            *dis_jk[0]*r_jkp*r_jkp)/(r_jk*r_jk*r_jkp*r_jkp);\n                        dcA_kjkp[1][0]=(dis_jkp[1]*r_jk*r_jkp-cosAng_kjkp\n                            *dis_jk[1]*r_jkp*r_jkp)/(r_jk*r_jk*r_jkp*r_jkp);\n                        dcA_kjkp[2][0]=(dis_jkp[2]*r_jk*r_jkp-cosAng_kjkp\n                            *dis_jk[2]*r_jkp*r_jkp)/(r_jk*r_jk*r_jkp*r_jkp);\n                        dcA_kjkp[0][1]=(dis_jk[0]*r_jk*r_jkp-cosAng_kjkp\n                            *dis_jkp[0]*r_jk*r_jk)/(r_jk*r_jk*r_jkp*r_jkp);\n                        dcA_kjkp[1][1]=(dis_jk[1]*r_jk*r_jkp-cosAng_kjkp\n                            *dis_jkp[1]*r_jk*r_jk)/(r_jk*r_jk*r_jkp*r_jkp);\n                        dcA_kjkp[2][1]=(dis_jk[2]*r_jk*r_jkp-cosAng_kjkp\n                            *dis_jkp[2]*r_jk*r_jk)/(r_jk*r_jk*r_jkp*r_jkp);\n                      }\n                    } else {\n                      if(neigh_flag[temp_jkp]) {\n                        pass_jkp=1;\n                        dis_jkp[0]=disij[0][temp_jkp];\n                        dis_jkp[1]=disij[1][temp_jkp];\n                        dis_jkp[2]=disij[2][temp_jkp];\n                        r_jkp=rij[temp_jkp];\n                        betaS_jkp=betaS[temp_jkp];\n                        dBetaS_jkp=dBetaS[temp_jkp];\n                        betaP_jkp=betaP[temp_jkp];\n                        dBetaP_jkp=dBetaP[temp_jkp];\n                        nkjkp=ltmp*(2*nlistj-ltmp-1)/2+(ktmp-ltmp)-1;\n                        if(ki<ltmp) {\n                          nijkp=ki*(2*nlistj-ki-1)/2+(ltmp-ki)-1;\n                          ngli=0;\n                          ngl=1;\n                        }\n                        else {\n                          nijkp=ltmp*(2*nlistj-ltmp-1)/2+(ki-ltmp)-1;\n                          ngli=1;\n                          ngl=0;\n                        }\n                        ang_ijkp=cos_index[j]+nijkp;\n                        cosAng_ijkp=cosAng[ang_ijkp];\n                        dcA_ijkp[0][0]=dcAng[ang_ijkp][0][ngli];\n                        dcA_ijkp[1][0]=dcAng[ang_ijkp][1][ngli];\n                        dcA_ijkp[2][0]=dcAng[ang_ijkp][2][ngli];\n                        dcA_ijkp[0][1]=dcAng[ang_ijkp][0][ngl];\n                        dcA_ijkp[1][1]=dcAng[ang_ijkp][1][ngl];\n                        dcA_ijkp[2][1]=dcAng[ang_ijkp][2][ngl];\n                        ang_kjkp=cos_index[j]+nkjkp;\n                        cosAng_kjkp=cosAng[ang_kjkp];\n                        dcA_kjkp[0][0]=dcAng[ang_kjkp][0][1];\n                        dcA_kjkp[1][0]=dcAng[ang_kjkp][1][1];\n                        dcA_kjkp[2][0]=dcAng[ang_kjkp][2][1];\n                        dcA_kjkp[0][1]=dcAng[ang_kjkp][0][0];\n                        dcA_kjkp[1][1]=dcAng[ang_kjkp][1][0];\n                        dcA_kjkp[2][1]=dcAng[ang_kjkp][2][0];\n                      }\n                    }\n                    if(pass_jkp) {\n                      nb_jkp=nb_t;\n                      nb_t++;\n                      if(nb_t>nb_pi) {\n                        new_n_tot=nb_pi+maxneigh;\n                        grow_pi(nb_pi,new_n_tot);\n                        nb_pi=new_n_tot;\n                      }\n                      bt_pi[nb_jkp].i=j;\n                      bt_pi[nb_jkp].j=kp;\n                      bt_pi[nb_jkp].temp=temp_jkp;\n                      betaCapSq2=pi_p[jtype-1]*betaS_jkp*betaS_jkp\n                        -betaP_jkp*betaP_jkp;\n                      dbetaCapSq2=2.0*pi_p[jtype-1]*betaS_jkp*dBetaS_jkp\n                        -2.0*betaP_jkp*dBetaP_jkp;\n                      cosSq1=cosAng_ijkp*cosAng_ijkp;\n                      angFactor=cosAng_kjkp-cosAng_ijkp*cosAng_ijk;\n                      angFactor1=4.0*angFactor;\n                      angFactor2=-angFactor1*cosAng_ijkp\n                        +2.0*cosAng_ijk*(1.0-cosSq1);\n                      angFactor3=-angFactor1*cosAng_ijk\n                        +2.0*cosAng_ijkp*(1.0-cosSq);\n                      angFactor4=2.0*angFactor*angFactor-(1.0-cosSq)*(1.0-cosSq1);\n                        betaCapSum=.5*betaCapSq1*betaCapSq2;\n\n//4th BB is 4th term of Eq. 38 (a) where i , k and k' =neighbors j\n\n                      BB=BB+betaCapSum*angFactor4;\n\n//app1 is derivative of BB 4th term w.r.t. cos(theta_kjk')\n//app2 is derivative of BB 4th term w.r.t. cos(theta_ijk)\n//app3 is derivative of BB 4th term w.r.t. cos(theta_ijk')\n//agpdpr1 is derivative of BB 4th term for atom j w.r.t. Beta(r_jk)\n//agpdpr2 is derivative of BB 4th term for atom j w.r.t. Beta(r_jk')\n\n                      app1=betaCapSum*angFactor1;\n                      app2=betaCapSum*angFactor2;\n                      app3=betaCapSum*angFactor3;\n                      agpdpr1=.5*angFactor4*dbetaCapSq1*betaCapSq2/r_jk;\n                      agpdpr2=.5*angFactor4*betaCapSq1*dbetaCapSq2/r_jkp;\n                      bt_pi[nb_ij].dBB[0]-=\n                          app3*dcA_ijkp[0][0]\n                          +app2*dcA_ijk[0][0];\n                      bt_pi[nb_ij].dBB[1]-=\n                          app3*dcA_ijkp[1][0]\n                          +app2*dcA_ijk[1][0];\n                      bt_pi[nb_ij].dBB[2]-=\n                          app3*dcA_ijkp[2][0]\n                          +app2*dcA_ijk[2][0];\n                      bt_pi[nb_jk].dBB[0]+=\n                          agpdpr1*dis_jk[0]\n                          +app1*dcA_kjkp[0][0]\n                          +app2*dcA_ijk[0][1];\n                      bt_pi[nb_jk].dBB[1]+=\n                          agpdpr1*dis_jk[1]\n                          +app1*dcA_kjkp[1][0]\n                          +app2*dcA_ijk[1][1];\n                      bt_pi[nb_jk].dBB[2]+=\n                          agpdpr1*dis_jk[2]\n                          +app1*dcA_kjkp[2][0]\n                          +app2*dcA_ijk[2][1];\n                      bt_pi[nb_jkp].dBB[0]+=\n                          agpdpr2*dis_jkp[0]\n                          +app1*dcA_kjkp[0][1]\n                          +app3*dcA_ijkp[0][1];\n                      bt_pi[nb_jkp].dBB[1]+=\n                          agpdpr2*dis_jkp[1]\n                          +app1*dcA_kjkp[1][1]\n                          +app3*dcA_ijkp[1][1];\n                      bt_pi[nb_jkp].dBB[2]+=\n                          agpdpr2*dis_jkp[2]\n                          +app1*dcA_kjkp[2][1]\n                          +app3*dcA_ijkp[2][1];\n                    }\n                  }\n                }\n\n//j and k' are different neighbors of i and k is a neighbor of j not equal to i\n\n                for(ltmp=0;ltmp<nlisti;ltmp++) {\n                  if(ltmp!=jtmp) {\n                    temp_ikp=BOP_index[i]+ltmp;\n                    ni_ikp=neigh_index[temp_ikp];\n                    kp=iilist[ni_ikp];\n                    kptype=map[type[kp]]+1;\n                    for(nsearch=0;nsearch<nPiBk;nsearch++) {\n                      ncmp=itypePiBk[nsearch];\n                      if(x[ncmp][0]==x[kp][0]) {\n                        if(x[ncmp][1]==x[kp][1]) {\n                          if(x[ncmp][2]==x[kp][2]) {\n                            break;\n                          }\n                        }\n                      }\n                    }\n                    if(itype==kptype)\n                      iikp=itype-1;\n                    else if(itype<kptype)\n                      iikp=itype*bop_types-itype*(itype+1)/2+kptype-1;\n                    else\n                      iikp=kptype*bop_types-kptype*(kptype+1)/2+itype-1;\n                    pass_ikp=0;\n                    if(otfly==1) {\n                      dis_ikp[0]=x[kp][0]-x[i][0];\n                      dis_ikp[1]=x[kp][1]-x[i][1];\n                      dis_ikp[2]=x[kp][2]-x[i][2];\n                      rsq_ikp=dis_ikp[0]*dis_ikp[0]\n                          +dis_ikp[1]*dis_ikp[1]\n                          +dis_ikp[2]*dis_ikp[2];\n                      r_ikp=sqrt(rsq_ikp);\n                      if(r_ikp<=rcut[iikp]) {\n                        pass_ikp=1;\n                        ps=r_ikp*rdr[iikp]+1.0;\n                        ks=(int)ps;\n                        if(nr-1<ks)\n                          ks=nr-1;\n                        ps=ps-ks;\n                        if(ps>1.0)\n                          ps=1.0;\n                        betaS_ikp=((pBetaS3[iikp][ks-1]*ps+pBetaS2[iikp][ks-1])*ps\n                            +pBetaS1[iikp][ks-1])*ps+pBetaS[iikp][ks-1];\n                        dBetaS_ikp=(pBetaS6[iikp][ks-1]*ps+pBetaS5[iikp][ks-1])*ps\n                            +pBetaS4[iikp][ks-1];\n                        betaP_ikp=((pBetaP3[iikp][ks-1]*ps+pBetaP2[iikp][ks-1])*ps\n                            +pBetaP1[iikp][ks-1])*ps+pBetaP[iikp][ks-1];\n                        dBetaP_ikp=(pBetaP6[iikp][ks-1]*ps+pBetaP5[iikp][ks-1])*ps\n                            +pBetaP4[iikp][ks-1];\n                        cosAng_jikp=(dis_ij[0]*dis_ikp[0]+dis_ij[1]*dis_ikp[1]\n                            +dis_ij[2]*dis_ikp[2])/(r_ij*r_ikp);\n                        dcA_jikp[0][0]=(dis_ikp[0]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ij[0]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[1][0]=(dis_ikp[1]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ij[1]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[2][0]=(dis_ikp[2]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ij[2]*r_ikp*r_ikp)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[0][1]=(dis_ij[0]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ikp[0]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[1][1]=(dis_ij[1]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ikp[1]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                        dcA_jikp[2][1]=(dis_ij[2]*r_ij*r_ikp-cosAng_jikp\n                            *dis_ikp[2]*r_ij*r_ij)/(r_ij*r_ij*r_ikp*r_ikp);\n                      }\n                    } else {\n                      if(neigh_flag[temp_ikp]) {\n                        pass_ikp=1;\n                        dis_ikp[0]=disij[0][temp_ikp];\n                        dis_ikp[1]=disij[1][temp_ikp];\n                        dis_ikp[2]=disij[2][temp_ikp];\n                        r_ikp=rij[temp_ikp];\n                        betaS_ikp=betaS[temp_ikp];\n                        dBetaS_ikp=dBetaS[temp_ikp];\n                        betaP_ikp=betaP[temp_ikp];\n                        dBetaP_ikp=dBetaP[temp_ikp];\n                        if(ltmp<jtmp) {\n                          njikp=ltmp*(2*nlisti-ltmp-1)/2+(jtmp-ltmp)-1;\n                          ngl=1;\n                          nglj=0;\n                        }\n                        else {\n                          njikp=jtmp*(2*nlisti-jtmp-1)/2+(ltmp-jtmp)-1;\n                          ngl=0;\n                          nglj=1;\n                        }\n                        ang_jikp=cos_index[i]+njikp;\n                        cosAng_jikp=cosAng[ang_jikp];\n                        dcA_jikp[0][0]=dcAng[ang_jikp][0][ngl];\n                        dcA_jikp[1][0]=dcAng[ang_jikp][1][ngl];\n                        dcA_jikp[2][0]=dcAng[ang_jikp][2][ngl];\n                        dcA_jikp[0][1]=dcAng[ang_jikp][0][nglj];\n                        dcA_jikp[1][1]=dcAng[ang_jikp][1][nglj];\n                        dcA_jikp[2][1]=dcAng[ang_jikp][2][nglj];\n                      }\n                    }\n                    if(pass_ikp==1) {\n                      nb_ikp=nb_t;\n                      nb_t++;\n                      if(nb_t>nb_pi) {\n                        new_n_tot=nb_pi+maxneigh;\n                        grow_pi(nb_pi,new_n_tot);\n                        nb_pi=new_n_tot;\n                      }\n                      bt_pi[nb_ikp].i=i;\n                      bt_pi[nb_ikp].j=kp;\n                      bt_pi[nb_ikp].temp=temp_ikp;\n\n                      betaCapSq2=pi_p[itype-1]*betaS_ikp*betaS_ikp\n                          -betaP_ikp*betaP_ikp;\n                      dbetaCapSq2=2.0*pi_p[itype-1]*betaS_ikp*dBetaS_ikp\n                          -2.0*betaP_ikp*dBetaP_ikp;\n                      dotV=(dis_jk[0]*dis_ikp[0]+dis_jk[1]\n                          *dis_ikp[1]+dis_jk[2]*dis_ikp[2])\n                          /(r_jk*r_ikp);\n                      cosSq1=cosAng_jikp*cosAng_jikp;\n                      angFactor=dotV+cosAng_jikp*cosAng_ijk;\n                      angRfactor=4.0*angFactor*dotV;\n                      dAngR1=-angRfactor/r_jk;\n                      dAngR2=-angRfactor/r_ikp;\n                      angFactor1=4.0*angFactor*cosAng_jikp\n                          +2.0*cosAng_ijk*(1.0-cosSq1);\n                      angFactor2=4.0*angFactor*cosAng_ijk\n                          +2.0*cosAng_jikp*(1.0-cosSq);\n                      angFactor3=2.0*angFactor*angFactor-(1.0-cosSq)*(1.0-cosSq1);\n                      betaCapSum=.5*betaCapSq1*betaCapSq2;\n\n//5th BB is 5th term of Eq. 38 (a) Eq. 21 (b) where i , k and k' =neighbors j\n\n                      BB=BB+betaCapSum*angFactor3;\n\n//app1 is derivative of BB 5th term w.r.t. cos(theta_ijk)\n//app2 is derivative of BB 5th term w.r.t. cos(theta_jik')\n//agpdpr1 is derivative of BB 5th term for atom j w.r.t. Beta(r_jk)\n//agpdpr2 is derivative of BB 5th term for atom j w.r.t. Beta(r_ik')\n//agpdpr3 is derivative of BB 5th term for atom j w.r.t. dot(r_ik',r_ij)\n\n                      app1=betaCapSum*angFactor1;\n                      app2=betaCapSum*angFactor2;\n                      agpdpr1=(.5*angFactor3*dbetaCapSq1*betaCapSq2\n                          +betaCapSum*dAngR1)/r_jk;\n                      agpdpr2=(.5*angFactor3*betaCapSq1*dbetaCapSq2\n                          +betaCapSum*dAngR2)/r_ikp;\n                      agpdpr3=4.0*betaCapSum*angFactor/(r_ikp*r_jk);\n                      bt_pi[nb_ij].dBB[0]+=\n                          +app2*dcA_jikp[0][0]\n                          -app1*dcA_ijk[0][0];\n                      bt_pi[nb_ij].dBB[1]+=\n                          +app2*dcA_jikp[1][0]\n                          -app1*dcA_ijk[1][0];\n                      bt_pi[nb_ij].dBB[2]+=\n                          +app2*dcA_jikp[2][0]\n                          -app1*dcA_ijk[2][0];\n                      bt_pi[nb_ikp].dBB[0]+=\n                          agpdpr2*dis_ikp[0]\n                          +agpdpr3*dis_jk[0]\n                          +app2*dcA_jikp[0][1];\n                      bt_pi[nb_ikp].dBB[1]+=\n                          agpdpr2*dis_ikp[1]\n                          +agpdpr3*dis_jk[1]\n                          +app2*dcA_jikp[1][1];\n                      bt_pi[nb_ikp].dBB[2]+=\n                          agpdpr2*dis_ikp[2]\n                          +agpdpr3*dis_jk[2]\n                          +app2*dcA_jikp[2][1];\n                      bt_pi[nb_jk].dBB[0]+=\n                          agpdpr1*dis_jk[0]\n                          +agpdpr3*dis_ikp[0]\n                          +app1*dcA_ijk[0][1];\n                      bt_pi[nb_jk].dBB[1]+=\n                          agpdpr1*dis_jk[1]\n                          +agpdpr3*dis_ikp[1]\n                          +app1*dcA_ijk[1][1];\n                      bt_pi[nb_jk].dBB[2]+=\n                          agpdpr1*dis_jk[2]\n                          +agpdpr3*dis_ikp[2]\n                          +app1*dcA_ijk[2][1];\n                    }\n                  }\n                }\n                if(pi_flag==0)\n                  nPiBk=nPiBk+1;\n              }\n            }\n          }\n          n++;\n          pp2=2.0*betaP_ij;\n          for(m=0;m<nb_t;m++) {\n            bt_i=bt_pi[m].i;\n            bt_j=bt_pi[m].j;\n            CC=betaP_ij*betaP_ij+pi_delta[iij]*pi_delta[iij];\n            BBrt=sqrt(BB+small6);\n            AB1=CC+pi_c[iij]*(AA+BBrt)+small7;\n            AB2=CC+pi_c[iij]*(AA-BBrt+sqrt(small6))+small7;\n            BBrtR=1.0/BBrt;\n            ABrtR1=1.0/sqrt(AB1);\n            ABrtR2=1.0/sqrt(AB2);\n\n            piB=(ABrtR1+ABrtR2)*pi_a[iij]*betaP_ij;\n            dPiB1=-.5*(pow(ABrtR1,3)+pow(ABrtR2,3))*pi_c[iij]*pi_a[iij]*betaP_ij;\n            dPiB2=.25*BBrtR*(pow(ABrtR2,3)-pow(ABrtR1,3))*pi_c[iij]*pi_a[iij]*betaP_ij;\n            dPiB3=((ABrtR1+ABrtR2)*pi_a[iij]-(pow(ABrtR1,3)+pow(ABrtR2,3))*pi_a[iij]\n                *betaP_ij*betaP_ij)*dBetaP_ij/r_ij;\n            xtmp[0]=x[bt_j][0]-x[bt_i][0];\n            xtmp[1]=x[bt_j][1]-x[bt_i][1];\n            xtmp[2]=x[bt_j][2]-x[bt_i][2];\n            for(pp=0;pp<3;pp++) {\n              bt_pi[m].dPiB[pp]=\n                  +dPiB1*bt_pi[m].dAA[pp]\n                  +dPiB2*bt_pi[m].dBB[pp];\n              ftmp[pp]=pp2*bt_pi[m].dPiB[pp];\n              f[bt_i][pp]-=ftmp[pp];\n              f[bt_j][pp]+=ftmp[pp];\n            }\n            if(evflag) {\n              ev_tally_xyz(bt_i,bt_j,nlocal,newton_pair,0.0,0.0,ftmp[0],ftmp[1]\n                  ,ftmp[2],xtmp[0],xtmp[1],xtmp[2]);\n            }\n          }\n          for(pp=0;pp<3;pp++) {\n            ftmp[pp]=pp2*dPiB3*dis_ij[pp];\n            f[i][pp]-=ftmp[pp];\n            f[j][pp]+=ftmp[pp];\n          }\n          if(evflag) {\n            ev_tally_xyz(i,j,nlocal,newton_pair,0.0,0.0,ftmp[0],ftmp[1]\n                ,ftmp[2],dis_ij[0],dis_ij[1],dis_ij[2]);\n          }\n          }\n        }\n      }\n  destroy_pi();\n  return(piB);\n}\n\n/* ----------------------------------------------------------------------\n   read BOP potential file\n------------------------------------------------------------------------- */\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::read_table(char *filename)\n{\n  int i,j,k,n,m;\n  int buf1,pass;\n  int nws,ws;\n  double buf2;\n  char s[MAXLINE],buf[2];\n\n  MPI_Comm_rank(world,&me);\n  if (me == 0) {\n    FILE *fp = force->open_potential(filename);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open BOP potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n    fgets(s,MAXLINE,fp);  // skip first comment line\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&bop_types);\n    elements = new char*[bop_types];\n    for(i=0;i<bop_types;i++) elements[i]=NULL;\n    for(i=0;i<bop_types;i++) {\n      fgets(s,MAXLINE,fp);\n      nws=0;\n      ws=1;\n      for(j=0;j<strlen(s);j++) {\n        if(ws==1) {\n          if(isspace(s[j])) {\n            ws=1;\n          } else {\n            ws=0;\n          }\n        } else {\n          if(isspace(s[j])) {\n            ws=1;\n            nws++;\n          } else {\n            ws=0;\n          }\n        }\n      }\n      if(nws!=3){\n         error->all(FLERR,\"Incorrect table format check for element types\");\n      }\n      sscanf(s,\"%d %lf %s\",&buf1,&buf2,buf);\n      n= strlen(buf)+1;\n      elements[i] = new char[n];\n      strcpy(elements[i],buf);\n    }\n    nws=0;\n    ws=1;\n    fgets(s,MAXLINE,fp);\n    for(j=0;j<strlen(s);j++) {\n      if(ws==1) {\n        if(isspace(s[j])) {\n          ws=1;\n        } else {\n          ws=0;\n        }\n      } else {\n        if(isspace(s[j])) {\n          ws=1;\n          nws++;\n        } else {\n          ws=0;\n        }\n      }\n    }\n    if(nws==3) {\n      sscanf(s,\"%d %d %d\",&nr,&ntheta,&nBOt);\n      npower=2;\n      if(ntheta<=10) npower=ntheta;\n    }\n    else {\n      sscanf(s,\"%d %d\",&nr,&nBOt);\n      ntheta=0;\n      npower=3;\n    }\n    fclose(fp);\n    npairs=bop_types*(bop_types+1)/2;\n  }\n\n  MPI_Bcast(&nr,1,MPI_INT,0,world);\n  MPI_Bcast(&nBOt,1,MPI_INT,0,world);\n  MPI_Bcast(&ntheta,1,MPI_INT,0,world);\n  MPI_Bcast(&bop_types,1,MPI_INT,0,world);\n  MPI_Bcast(&npairs,1,MPI_INT,0,world);\n  MPI_Bcast(&npower,1,MPI_INT,0,world);\n  memory->create(pi_a,npairs,\"BOP:pi_a\");\n  memory->create(pro_delta,bop_types,\"BOP:pro_delta\");\n  memory->create(pi_delta,npairs,\"BOP:pi_delta\");\n  memory->create(pi_p,bop_types,\"BOP:pi_p\");\n  memory->create(pi_c,npairs,\"BOP:pi_c\");\n  memory->create(r1,npairs,\"BOP:r1\");\n  memory->create(pro,bop_types,\"BOP:pro\");\n  memory->create(sigma_delta,npairs,\"BOP:sigma_delta\");\n  memory->create(sigma_c,npairs,\"BOP:sigma_c\");\n  memory->create(sigma_a,npairs,\"BOP:sigma_a\");\n  memory->create(sigma_f,npairs,\"BOP:sigma_f\");\n  memory->create(sigma_k,npairs,\"BOP:sigma_k\");\n  memory->create(small3,npairs,\"BOP:small3\");\n  memory->create(gfunc,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc\");\n  memory->create(gfunc1,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc1\");\n  memory->create(gfunc2,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc2\");\n  memory->create(gfunc3,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc3\");\n  memory->create(gfunc4,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc4\");\n  memory->create(gfunc5,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc5\");\n  memory->create(gfunc6,bop_types,bop_types,bop_types,ntheta,\"BOP:gfunc6\");\n  memory->create(gpara,bop_types,bop_types,bop_types,npower+1,\"BOP:gpara\");\n\n  allocate();\n  if (me == 0) {\n    FILE *fp = force->open_potential(filename);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open BOP potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n    fgets(s,MAXLINE,fp);  // skip first comment line\n    for(i=0;i<bop_types+2;i++) {\n      fgets(s,MAXLINE,fp);\n    }\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lf%lf%lf%lf%lf%lf%lf\",&small1,&small2,&small3g\n        ,&small4,&small5,&small6,&small7);\n    for(i=0;i<bop_types;i++) {\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf\",&pi_p[i]);\n    }\n    cutmax=0;\n    for(i=0;i<npairs;i++) {\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf\",&rcut[i]);\n      if(rcut[i]>cutmax)\n        cutmax=rcut[i];\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf%lf%lf%lf\",&sigma_c[i],&sigma_a[i],&pi_c[i],&pi_a[i]);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf%lf\",&sigma_delta[i],&pi_delta[i]);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf%lf%lf\",&sigma_f[i],&sigma_k[i],&small3[i]);\n    }\n    if(nws==3) {\n      for(i=0;i<bop_types;i++)\n        for(j=0;j<bop_types;j++)\n          for(k=j;k<bop_types;k++) {\n            if(npower<=2) {\n              for(m=0;m<ntheta;m++) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gfunc[j][i][k][n],&gfunc[j][i][k][n+1]\n                    ,&gfunc[j][i][k][n+2],&gfunc[j][i][k][n+3],&gfunc[j][i][k][n+4]);\n                n+=4;\n              }\n            } else {\n              if(npower==3) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3]);\n              }\n              else if(npower==4) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n              }\n              else if(npower==5) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf\",&gpara[j][i][k][5]);\n              }\n              else if(npower==6) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf\",&gpara[j][i][k][5],&gpara[j][i][k][6]);\n              }\n              else if(npower==7) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf\",&gpara[j][i][k][5],&gpara[j][i][k][6],&gpara[j][i][k][7]);\n              }\n              else if(npower==8) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf\",&gpara[j][i][k][5],&gpara[j][i][k][6],&gpara[j][i][k][7],&gpara[j][i][k][8]);\n              }\n              else if(npower==9) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][5],&gpara[j][i][k][6],&gpara[j][i][k][7],&gpara[j][i][k][8],&gpara[j][i][k][9]);\n              }\n              else if(npower==10) {\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][0],&gpara[j][i][k][1],&gpara[j][i][k][2],&gpara[j][i][k][3],&gpara[j][i][k][4]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf%lf%lf%lf%lf\",&gpara[j][i][k][5],&gpara[j][i][k][6],&gpara[j][i][k][7],&gpara[j][i][k][8],&gpara[j][i][k][9]);\n                fgets(s,MAXLINE,fp);\n                sscanf(s,\"%lf\",&gpara[j][i][k][10]);\n              }\n            }\n          }\n    } else {\n      for(i=0;i<bop_types;i++)\n        for(j=0;j<bop_types;j++)\n          for(k=0;k<bop_types;k++) {\n            fgets(s,MAXLINE,fp);\n            sscanf(s,\"%lf%lf%lf\",&gpara[i][j][k][0],&gpara[i][j][k][1],&gpara[i][j][k][2]);\n            gpara[j][i][k][3]=0;\n          }\n    }\n    for(i=0;i<npairs;i++) {\n      for(j=0;j<nr;j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lf%lf%lf%lf%lf\",&pRepul[i][j],&pRepul[i][j+1]\n            ,&pRepul[i][j+2],&pRepul[i][j+3],&pRepul[i][j+4]);\n        j+=4;\n      }\n    }\n    for(i=0;i<npairs;i++) {\n      for(j=0;j<nr;j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lf%lf%lf%lf%lf\",&pBetaS[i][j],&pBetaS[i][j+1]\n            ,&pBetaS[i][j+2],&pBetaS[i][j+3],&pBetaS[i][j+4]);\n        j+=4;\n      }\n    }\n    for(i=0;i<npairs;i++) {\n      for(j=0;j<nr;j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lf%lf%lf%lf%lf\",&pBetaP[i][j],&pBetaP[i][j+1]\n            ,&pBetaP[i][j+2],&pBetaP[i][j+3],&pBetaP[i][j+4]);\n        j+=4;\n      }\n    }\n    for(i=0;i<npairs;i++) {\n      for(j=0;j<nBOt;j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lf%lf%lf%lf%lf\",&FsigBO[i][j],&FsigBO[i][j+1]\n            ,&FsigBO[i][j+2],&FsigBO[i][j+3],&FsigBO[i][j+4]);\n        j+=4;\n      }\n    }\n    for(i=0;i<bop_types;i++) {\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf\",&pro_delta[i]);\n    }\n    for(i=0;i<bop_types;i++) {\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lf\",&pro[i]);\n    }\n    for(i=0;i<npairs;i++) {\n      rcut3[i]=0.0;\n    }\n    pass=0;\n    i=0;\n    if(nws==3) {\n      while(fgets(s,MAXLINE,fp)!=NULL&&i<npairs) {\n        sscanf(s,\"%lf\",&rcut3[i]);\n        pass=1;\n        i++;\n      }\n      if(pass==1) {\n        for(i=0;i<npairs;i++) {\n          for(j=0;j<nr;j++) {\n            fgets(s,MAXLINE,fp);\n            sscanf(s,\"%lf%lf%lf%lf%lf\",&pLong[i][j],&pLong[i][j+1]\n                ,&pLong[i][j+2],&pLong[i][j+3],&pLong[i][j+4]);\n            j+=4;\n          }\n        }\n      }\n    }\n    rcutall=0.0;\n    for(i=0;i<npairs;i++) {\n      if(rcut[i]>rcutall)\n        rcutall=rcut[i];\n      if(rcut3[i]>rcutall)\n        rcutall=rcut3[i];\n      rcutsq[i]=rcut[i]*rcut[i];\n      rcutsq3[i]=rcut3[i]*rcut3[i];\n      dr[i]=rcut[i]/((double)nr-1.0);\n      rdr[i]=1.0/dr[i];\n      dr3[i]=rcut3[i]/((double)nr-1.0);\n      rdr3[i]=1.0/dr3[i];\n    }\n    rctroot=rcutall;\n    dtheta=2.0/((double)ntheta-1.0);\n    rdtheta=1.0/dtheta;\n    dBO=1.0/((double)nBOt-1.0);\n    rdBO=1.0/(double)dBO;\n    for(i=0;i<npairs;i++) {\n      pBetaS1[i][0]=pBetaS[i][1]-pBetaS[i][0];\n      pBetaS1[i][1]=0.5*(pBetaS[i][2]-pBetaS[i][0]);\n      pBetaS1[i][nr-2]=0.5*(pBetaS[i][nr-1]-pBetaS[i][nr-3]);\n      pBetaS1[i][nr-1]=pBetaS[i][nr-1]-pBetaS[i][nr-2];\n      pBetaP1[i][0]=pBetaP[i][1]-pBetaP[i][0];\n      pBetaP1[i][1]=0.5*(pBetaP[i][2]-pBetaP[i][0]);\n      pBetaP1[i][nr-2]=0.5*(pBetaP[i][nr-1]-pBetaP[i][nr-3]);\n      pBetaP1[i][nr-1]=pBetaP[i][nr-1]-pBetaP[i][nr-2];\n      pRepul1[i][0]=pRepul[i][1]-pRepul[i][0];\n      pRepul1[i][1]=0.5*(pRepul[i][2]-pRepul[i][0]);\n      pRepul1[i][nr-2]=0.5*(pRepul[i][nr-1]-pRepul[i][nr-3]);\n      pRepul1[i][nr-1]=pRepul[i][nr-1]-pRepul[i][nr-2];\n      FsigBO1[i][0]=FsigBO[i][1]-FsigBO[i][0];\n      FsigBO1[i][1]=0.5*(FsigBO[i][2]-FsigBO[i][0]);\n      FsigBO1[i][nBOt-2]=0.5*(FsigBO[i][nBOt-1]-FsigBO[i][nBOt-3]);\n      FsigBO1[i][nBOt-1]=FsigBO[i][nBOt-1]-FsigBO[i][nBOt-2];\n      pLong1[i][0]=pLong[i][1]-pLong[i][0];\n      pLong1[i][1]=0.5*(pLong[i][2]-pLong[i][0]);\n      pLong1[i][nBOt-2]=0.5*(pLong[i][nr-1]-pLong[i][nr-3]);\n      pLong1[i][nBOt-1]=pLong[i][nr-1]-pLong[i][nr-2];\n      for(k=2;k<nr-2;k++) {\n        pBetaS1[i][k]=((pBetaS[i][k-2]-pBetaS[i][k+2])\n            +8.0*(pBetaS[i][k+1]-pBetaS[i][k-1]))/12.0;\n        pBetaP1[i][k]=((pBetaP[i][k-2]-pBetaP[i][k+2])\n            +8.0*(pBetaP[i][k+1]-pBetaP[i][k-1]))/12.0;\n        pRepul1[i][k]=((pRepul[i][k-2]-pRepul[i][k+2])\n            +8.0*(pRepul[i][k+1]-pRepul[i][k-1]))/12.0;\n        pLong1[i][k]=((pLong[i][k-2]-pLong[i][k+2])\n            +8.0*(pLong[i][k+1]-pLong[i][k-1]))/12.0;\n      }\n      for(k=2;k<nr-2;k++) {\n        FsigBO1[i][k]=((FsigBO[i][k-2]-FsigBO[i][k+2])\n            +8.0*(FsigBO[i][k+1]-FsigBO[i][k-1]))/12.0;\n      }\n      for(k=0;k<nr-1;k++) {\n        pBetaS2[i][k]=3.0*(pBetaS[i][k+1]-pBetaS[i][k])\n            -2.0*pBetaS1[i][k]-pBetaS1[i][k+1];\n        pBetaS3[i][k]=pBetaS1[i][k]+pBetaS1[i][k+1]\n            -2.0*(pBetaS[i][k+1]-pBetaS[i][k]);\n        pBetaP2[i][k]=3.0*(pBetaP[i][k+1]-pBetaP[i][k])\n            -2.0*pBetaP1[i][k]-pBetaP1[i][k+1];\n        pBetaP3[i][k]=pBetaP1[i][k]+pBetaP1[i][k+1]\n            -2.0*(pBetaP[i][k+1]-pBetaP[i][k]);\n        pRepul2[i][k]=3.0*(pRepul[i][k+1]-pRepul[i][k])\n            -2.0*pRepul1[i][k]-pRepul1[i][k+1];\n        pRepul3[i][k]=pRepul1[i][k]+pRepul1[i][k+1]\n            -2.0*(pRepul[i][k+1]-pRepul[i][k]);\n        pLong2[i][k]=3.0*(pLong[i][k+1]-pLong[i][k])\n            -2.0*pLong1[i][k]-pLong1[i][k+1];\n        pLong3[i][k]=pLong1[i][k]+pLong1[i][k+1]\n            -2.0*(pLong[i][k+1]-pLong[i][k]);\n      }\n      for(k=0;k<nBOt-1;k++) {\n        FsigBO2[i][k]=3.0*(FsigBO[i][k+1]-FsigBO[i][k])\n            -2.0*FsigBO1[i][k]-FsigBO1[i][k+1];\n        FsigBO3[i][k]=FsigBO1[i][k]+FsigBO1[i][k+1]\n            -2.0*(FsigBO[i][k+1]-FsigBO[i][k]);\n      }\n      pBetaS2[i][nr-1]=0.0;\n      pBetaS3[i][nr-1]=0.0;\n      pBetaP2[i][nr-1]=0.0;\n      pBetaP3[i][nr-1]=0.0;\n      pRepul2[i][nr-1]=0.0;\n      pRepul3[i][nr-1]=0.0;\n      pLong2[i][nr-1]=0.0;\n      pLong3[i][nr-1]=0.0;\n      FsigBO2[i][nBOt-1]=0.0;\n      FsigBO3[i][nBOt-1]=0.0;\n      for(k=0;k<nr;k++) {\n        pBetaS4[i][k]=pBetaS1[i][k]/dr[i];\n        pBetaS5[i][k]=2.0*pBetaS2[i][k]/dr[i];\n        pBetaS6[i][k]=3.0*pBetaS3[i][k]/dr[i];\n        pBetaP4[i][k]=pBetaP1[i][k]/dr[i];\n        pBetaP5[i][k]=2.0*pBetaP2[i][k]/dr[i];\n        pBetaP6[i][k]=3.0*pBetaP3[i][k]/dr[i];\n        pRepul4[i][k]=pRepul1[i][k]/dr[i];\n        pRepul5[i][k]=2.0*pRepul2[i][k]/dr[i];\n        pRepul6[i][k]=3.0*pRepul3[i][k]/dr[i];\n        pLong4[i][k]=pLong1[i][k]/dr3[i];\n        pLong5[i][k]=2.0*pLong2[i][k]/dr3[i];\n        pLong6[i][k]=3.0*pLong3[i][k]/dr3[i];\n      }\n      for(k=0;k<nBOt;k++) {\n        FsigBO4[i][k]=FsigBO1[i][k]/dBO;\n        FsigBO5[i][k]=2.0*FsigBO2[i][k]/dBO;\n        FsigBO6[i][k]=3.0*FsigBO3[i][k]/dBO;\n      }\n    }\n    if(npower<=2) {\n      for(i=0;i<bop_types;i++) {\n        for(j=0;j<bop_types;j++) {\n          for(k=j;k<bop_types;k++) {\n            gfunc1[j][i][k][0]=gfunc[j][i][k][1]-gfunc[j][i][k][0];\n            gfunc1[j][i][k][1]=0.5*(gfunc[j][i][k][2]-gfunc[j][i][k][0]);\n            gfunc1[j][i][k][ntheta-2]=0.5*(gfunc[j][i][k][ntheta-1]-gfunc[j][i][k][ntheta-3]);\n            gfunc1[j][i][k][ntheta-1]=0.5*(gfunc[j][i][k][ntheta-1]-gfunc[j][i][k][ntheta-2]);\n            for(m=2;m<ntheta-2;m++) {\n              gfunc1[j][i][k][m]=((gfunc[j][i][k][m-2]-gfunc[j][i][k][m+2])+\n                  8.0*(gfunc[j][i][k][m+1]-gfunc[j][i][k][m+1]-gfunc[j][i][k][m-1]))/12.0;\n            }\n            for(m=0;m<ntheta-1;m++) {\n              gfunc2[j][i][k][m]=3.0*(gfunc[j][i][k][m+1]-gfunc[j][i][k][m])-\n                  2.0*gfunc1[j][i][k][m]-gfunc1[j][i][k][m+1];\n              gfunc3[j][i][k][m]=gfunc1[j][i][k][m]+gfunc1[j][i][k][m+1]-\n                  2.0*(gfunc[j][i][k][m+1]-gfunc[j][i][k][m]);\n            }\n            gfunc2[j][i][k][ntheta-1]=0.0;\n            gfunc3[j][i][k][ntheta-1]=0.0;\n            for(m=0;m<ntheta;m++) {\n              gfunc4[j][i][k][ntheta-1]=gfunc1[j][i][k][m]/dtheta;\n              gfunc5[j][i][k][ntheta-1]=2.0*gfunc2[j][i][k][m]/dtheta;\n              gfunc6[j][i][k][ntheta-1]=3.0*gfunc3[j][i][k][m]/dtheta;\n            }\n          }\n        }\n      }\n    }\n    for(i=0;i<bop_types;i++) {\n      for(j=0;j<bop_types;j++) {\n        for(k=0;k<j;k++) {\n          if(npower<=2) {\n            for(n=0;n<ntheta;n++) {\n              gfunc[j][i][k][n]=gfunc[k][i][j][n];\n              gfunc1[j][i][k][n]=gfunc1[k][i][j][n];\n              gfunc2[j][i][k][n]=gfunc2[k][i][j][n];\n              gfunc3[j][i][k][n]=gfunc3[k][i][j][n];\n              gfunc4[j][i][k][n]=gfunc4[k][i][j][n];\n              gfunc5[j][i][k][n]=gfunc5[k][i][j][n];\n              gfunc6[j][i][k][n]=gfunc6[k][i][j][n];\n            }\n          } else {\n            for(n=0;n<npower+1;n++) {\n              gpara[j][i][k][n]=gpara[k][i][j][n];\n            }\n          }\n        }\n      }\n    }\n    fclose(fp);\n  }\n  MPI_Bcast(&rdBO,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&dBO,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rdtheta,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&dtheta,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&bop_types,1,MPI_INT,0,world);\n  MPI_Bcast(&small1,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small2,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small3g,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small4,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small5,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small6,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small7,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pro[0],bop_types,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pro_delta[0],bop_types,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pi_p[0],bop_types,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r1[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcut[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcut3[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcutsq[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcutsq3[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cutmax,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma_a[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma_c[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma_delta[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pi_a[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pi_c[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pi_delta[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma_f[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma_k[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&small3[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&dr[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rdr[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&dr3[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rdr3[0],npairs,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS1[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS2[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS3[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS4[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS5[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaS6[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP1[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP2[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP3[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP4[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP5[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pBetaP6[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong1[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong2[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong3[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong4[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong5[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pLong6[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul1[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul2[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul3[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul4[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul5[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pRepul6[0][0],npairs*nr,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO1[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO2[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO3[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO4[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO5[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  MPI_Bcast(&FsigBO6[0][0],npairs*nBOt,MPI_DOUBLE,0,world);\n  if(npower<=2){\n    MPI_Bcast(&gfunc[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n    MPI_Bcast(&gfunc1[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n    MPI_Bcast(&gfunc2[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n    MPI_Bcast(&gfunc3[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n    MPI_Bcast(&gfunc4[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n    MPI_Bcast(&gfunc5[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n    MPI_Bcast(&gfunc6[0][0][0][0],bop_types*bop_types*bop_types*ntheta,MPI_DOUBLE,0,world);\n  } else {\n    MPI_Bcast(&gpara[0][0][0][0],bop_types*bop_types*bop_types*(npower+1),MPI_DOUBLE,0,world);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairBOP::cutoff(double rp,double vrcut,int mode,double r)\n{\n  double tmp,tmp_beta,tmp_alpha,cut_store;\n\n  if(mode==1) {\n    tmp=(rsmall-rbig)*(r-rp)/(vrcut-rp)+rbig;\n    cut_store=(erfc(tmp)-erfc(rsmall))/(erfc(rbig)-erfc(rsmall));\n  }\n  else {\n    tmp_beta=log(log(rbig)/log(rsmall))/log(rp/vrcut);\n    tmp_alpha=-log(rbig)/pow(rp,tmp_beta);\n    cut_store=(exp(-tmp_alpha*pow(r,tmp_beta))-exp(-tmp_alpha*pow(vrcut\n        ,tmp_beta)))/(exp(-tmp_alpha*pow(rp,tmp_beta))-exp(-tmp_alpha\n        *pow(vrcut,tmp_beta)));\n  }\n  return(cut_store);\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairBOP::memory_usage()\n{\n  int nlocal,nghost,nall;\n  int n = atom->ntypes;\n  nlocal = atom->nlocal;\n  nghost = atom->nghost;\n  nall = nlocal + nghost;\n  double bytes = 0.0;\n\n// rcut\n  bytes += npairs * sizeof (double);\n// rcut3\n  bytes += npairs * sizeof (double);\n// rcutsq\n  bytes += npairs * sizeof (double);\n// rcutsq3\n  bytes += npairs * sizeof (double);\n// dr\n  bytes += npairs * sizeof (double);\n// rdr\n  bytes += npairs * sizeof (double);\n// dr3\n  bytes += npairs * sizeof (double);\n// rdr3\n  bytes += npairs * sizeof (double);\n// setflag\n  bytes += (n+1) * (n+1) * sizeof (int);\n// cutsq\n  bytes += (n+1) * (n+1) * sizeof (double);\n// cutghost\n  bytes += (n+1) * (n+1) * sizeof (double);\n// cutghost\n  bytes += (n+1) * (n+1) * sizeof (double);\n// pBetaS\n  bytes += npairs * nr * sizeof (double);\n// pBetaS1\n  bytes += npairs * nr * sizeof (double);\n// pBetaS2\n  bytes += npairs * nr * sizeof (double);\n// pBetaS3\n  bytes += npairs * nr * sizeof (double);\n// pBetaS4\n  bytes += npairs * nr * sizeof (double);\n// pBetaS5\n  bytes += npairs * nr * sizeof (double);\n// pBetaS6\n  bytes += npairs * nr * sizeof (double);\n// pLong\n  bytes += npairs * nr * sizeof (double);\n// pLong1\n  bytes += npairs * nr * sizeof (double);\n// pLong2\n  bytes += npairs * nr * sizeof (double);\n// pLong3\n  bytes += npairs * nr * sizeof (double);\n// pLong4\n  bytes += npairs * nr * sizeof (double);\n// pLong5\n  bytes += npairs * nr * sizeof (double);\n// pLong6\n  bytes += npairs * nr * sizeof (double);\n// pBetaP\n  bytes += npairs * nr * sizeof (double);\n// pBetaP1\n  bytes += npairs * nr * sizeof (double);\n// pBetaP2\n  bytes += npairs * nr * sizeof (double);\n// pBetaP3\n  bytes += npairs * nr * sizeof (double);\n// pBetaP4\n  bytes += npairs * nr * sizeof (double);\n// pBetaP5\n  bytes += npairs * nr * sizeof (double);\n// pBetaP6\n  bytes += npairs * nr * sizeof (double);\n// pRepul\n  bytes += npairs * nr * sizeof (double);\n// pRepul1\n  bytes += npairs * nr * sizeof (double);\n// pRepul2\n  bytes += npairs * nr * sizeof (double);\n// pRepul3\n  bytes += npairs * nr * sizeof (double);\n// pRepul4\n  bytes += npairs * nr * sizeof (double);\n// pRepul5\n  bytes += npairs * nr * sizeof (double);\n// pRepul6\n  bytes += npairs * nr * sizeof (double);\n// FsigBO\n  bytes += npairs * nr * sizeof (double);\n// FsigBO1\n  bytes += npairs * nr * sizeof (double);\n// FsigBO2\n  bytes += npairs * nr * sizeof (double);\n// FsigBO3\n  bytes += npairs * nr * sizeof (double);\n// FsigBO4\n  bytes += npairs * nr * sizeof (double);\n// FsigBO5\n  bytes += npairs * nr * sizeof (double);\n// FsigBO6\n  bytes += npairs * nr * sizeof (double);\n// itypeSigBk\n  bytes += neigh_ct* sizeof(int);\n// itypePiBk\n  bytes += neigh_ct* sizeof(int);\n// BOP_index\n    bytes += nall * sizeof(double);\n// BOP_total\n    bytes += nall * sizeof(double);\n  if(otfly==0) {\n// cosAng\n    bytes += cos_total* sizeof(double);\n// dcAng\n    bytes += cos_total * 3 * 2 * sizeof(double);\n// disij\n    bytes += neigh_total * 3 * sizeof(double);\n// rij\n    bytes += neigh_total * sizeof(double);\n// betaS\n    bytes += neigh_total * sizeof(double);\n// dBetaS\n    bytes += neigh_total * sizeof(double);\n// betaP\n    bytes += neigh_total * sizeof(double);\n// dBetaP\n    bytes += neigh_total * sizeof(double);\n// repul\n    bytes += neigh_total * sizeof(double);\n// dRepul\n    bytes += neigh_total * sizeof(double);\n// cos_index\n    bytes += nall * sizeof(double);\n  }\n// pi_a\n  bytes += npairs * sizeof(double);\n// pro\n  bytes += bop_types * sizeof(double);\n// pi_delta\n  bytes += npairs * sizeof(double);\n// pi_p\n  bytes += npairs * sizeof(double);\n// pi_c\n  bytes += npairs * sizeof(double);\n// sigma_r0\n  bytes += npairs * sizeof(double);\n// pi_r0\n  bytes += npairs * sizeof(double);\n// phi_r0\n  bytes += npairs * sizeof(double);\n// sigma_rc\n  bytes += npairs * sizeof(double);\n// pi_rc\n  bytes += npairs * sizeof(double);\n// pi_a\n  bytes += npairs * sizeof(double);\n// pro_delta\n  bytes += bop_types * sizeof(double);\n// pi_delta\n  bytes += npairs * sizeof(double);\n// pi_p\n  bytes += npairs * sizeof(double);\n// pi_c\n  bytes += npairs * sizeof(double);\n// sigma_r0\n  bytes += npairs * sizeof(double);\n// pi_r0\n  bytes += npairs * sizeof(double);\n// phi_r0\n  bytes += npairs * sizeof(double);\n// sigma_rc\n  bytes += npairs * sizeof(double);\n// pi_rc\n  bytes += npairs * sizeof(double);\n// phi_rc\n  bytes += npairs * sizeof(double);\n// r1\n  bytes += npairs * sizeof(double);\n// sigma_beta0\n  bytes += npairs * sizeof(double);\n// pi_beta0\n  bytes += npairs * sizeof(double);\n// phi0\n  bytes += npairs * sizeof(double);\n// sigma_n\n  bytes += npairs * sizeof(double);\n// pi_n\n  bytes += npairs * sizeof(double);\n// phi_m\n  bytes += npairs * sizeof(double);\n// sigma_nc\n  bytes += npairs * sizeof(double);\n// pi_nc\n  bytes += npairs * sizeof(double);\n// phi_nc\n  bytes += npairs * sizeof(double);\n// sigma_delta\n  bytes += npairs * sizeof(double);\n// sigma_c\n  bytes += npairs * sizeof(double);\n// sigma_a\n  bytes += npairs * sizeof(double);\n// sigma_f\n  bytes += npairs * sizeof(double);\n// sigma_k\n  bytes += npairs * sizeof(double);\n// small3\n  bytes += npairs * sizeof(double);\n// bt_pi\n  bytes += maxneigh*(maxneigh/2) *sizeof(B_PI);\n// bt_sigma\n  bytes += maxneigh*(maxneigh/2) *sizeof(B_SG);\n  if(npower<=2) {\n// gfunc\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n// gfunc1\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n// gfunc2\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n// gfunc3\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n// gfunc4\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n// gfunc5\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n// gfunc6\n    bytes += bop_types*bop_types*bop_types*ntheta *sizeof(double);\n  } else {\n    bytes += bop_types*bop_types*bop_types*npower+1 *sizeof(double);\n  }\n  return bytes;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::memory_theta_create()\n{\n  neigh_ct=(maxneigh-1)*(maxneigh-1)*(maxneigh-1);\n  if(neigh_ct<1) neigh_ct=1;\n  memory->create(itypeSigBk,neigh_ct,\"itypeSigBk\");\n  memory->create(itypePiBk,neigh_ct,\"itypePiBk\");\n  memory->create(neigh_flag,neigh_total,\"neigh_flag\");\n  memory->create(neigh_flag3,neigh_total3,\"neigh_flag3\");\n  memory->create(neigh_index,neigh_total,\"neigh_index\");\n  memory->create(neigh_index3,neigh_total3,\"neigh_index3\");\n  if(otfly==0) {\n    memory->create(cosAng,cos_total,\"BOP:cosAng\");\n    memory->create(dcAng,cos_total,3,2,\"BOP:dcAng\");\n    memory->create(disij,3,neigh_total,\"disij\");\n    memory->create(rij,neigh_total,\"rij\");\n    memory->create(betaS,neigh_total,\"betaS\");\n    memory->create(dBetaS,neigh_total,\"dBetaS\");\n    memory->create(betaP,neigh_total,\"betaP\");\n    memory->create(dBetaP,neigh_total,\"dBetaP\");\n    memory->create(repul,neigh_total,\"repul\");\n    memory->create(dRepul,neigh_total,\"dRepul\");\n  }\n  update_list=1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::memory_theta_grow()\n{\n  neigh_ct=(maxneigh-1)*(maxneigh-1)*(maxneigh-1);\n  if(neigh_ct<1) neigh_ct=1;\n  memory->grow(itypeSigBk,neigh_ct,\"itypeSigBk\");\n  memory->grow(itypePiBk,neigh_ct,\"itypePiBk\");\n  memory->grow(neigh_flag,neigh_total,\"neigh_flag\");\n  memory->grow(neigh_flag3,neigh_total3,\"neigh_flag3\");\n  memory->grow(neigh_index,neigh_total,\"neigh_index\");\n  memory->grow(neigh_index3,neigh_total3,\"neigh_index3\");\n  if(otfly==0) {\n    memory->grow(cosAng,cos_total,\"BOP:cosAng\");\n    memory->grow(dcAng,cos_total,3,2,\"BOP:dcAng\");\n    memory->grow(disij,3,neigh_total,\"disij\");\n    memory->grow(rij,neigh_total,\"rij\");\n    memory->grow(betaS,neigh_total,\"betaS\");\n    memory->grow(dBetaS,neigh_total,\"dBetaS\");\n    memory->grow(betaP,neigh_total,\"betaP\");\n    memory->grow(dBetaP,neigh_total,\"dBetaP\");\n    memory->grow(repul,neigh_total,\"repul\");\n    memory->grow(dRepul,neigh_total,\"dRepul\");\n  }\n  update_list=1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::memory_theta_destroy()\n{\n\n  memory->destroy(itypeSigBk);\n  memory->destroy(itypePiBk);\n  memory->destroy(neigh_flag);\n  memory->destroy(neigh_flag3);\n  memory->destroy(neigh_index);\n  memory->destroy(neigh_index3);\n  if(otfly==0) {\n    memory->destroy(cosAng);\n    memory->destroy(dcAng);\n    memory->destroy(disij);\n    memory->destroy(rij);\n    memory->destroy(betaS);\n    memory->destroy(dBetaS);\n    memory->destroy(betaP);\n    memory->destroy(dBetaP);\n    memory->destroy(repul);\n    memory->destroy(dRepul);\n  }\n update_list=0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::create_pi(int n_tot)\n{\n  bt_pi = (B_PI *) memory->smalloc(n_tot*sizeof(B_PI),\"BOP:bt_pi\");\n  allocate_pi=1;\n}\n\nvoid PairBOP::create_sigma(int n_tot)\n{\n  bt_sg = (B_SG *) memory->smalloc(n_tot*sizeof(B_SG),\"BOP:bt_sg\");\n  allocate_sigma=1;\n}\n\nvoid PairBOP::destroy_pi()\n{\n  memory->destroy(bt_pi);\n  allocate_pi=0;\n}\n\nvoid PairBOP::destroy_sigma()\n{\n  memory->destroy(bt_sg);\n  allocate_sigma=0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::grow_pi(int n1, int n2)\n{\n  int i,j;\n  B_PI *bt_temp;\n  bt_temp = (B_PI *) memory->smalloc(n1*sizeof(B_PI),\"BOP:b_temp\");\n  for(i=0;i<n1;i++) {\n    bt_temp[i].temp = bt_pi[i].temp;\n    bt_temp[i].i = bt_pi[i].i;\n    bt_temp[i].j = bt_pi[i].j;\n    for(j=0;j<3;j++) {\n      bt_temp[i].dAA[j] = bt_pi[i].dAA[j];\n      bt_temp[i].dBB[j] = bt_pi[i].dBB[j];\n      bt_temp[i].dPiB[j] = bt_pi[i].dPiB[j];\n    }\n  }\n  memory->destroy(bt_pi);\n  bt_pi=NULL;\n  bt_pi = (B_PI *) memory->smalloc(n2*sizeof(B_PI),\"BOP:bt_pi\");\n  for(i=0;i<n1;i++) {\n    bt_pi[i].temp = bt_temp[i].temp;\n    bt_pi[i].i = bt_temp[i].i;\n    bt_pi[i].j = bt_temp[i].j;\n    for(j=0;j<3;j++) {\n      bt_pi[i].dAA[j] = bt_temp[i].dAA[j];\n      bt_pi[i].dBB[j] = bt_temp[i].dBB[j];\n      bt_pi[i].dPiB[j] = bt_temp[i].dPiB[j];\n    }\n  }\n  for(i=n1;i<n2;i++) {\n    bt_pi[i].i = -1;\n    bt_pi[i].j = -1;\n    for(j=0;j<3;j++) {\n      bt_pi[i].dAA[j] = 0.0;\n      bt_pi[i].dBB[j] = 0.0;\n      bt_pi[i].dPiB[j] = 0.0;\n    }\n  }\n  memory->destroy(bt_temp);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairBOP::grow_sigma(int n1,int n2)\n{\n  int i,j;\n  B_SG *bt_temp;\n  bt_temp = (B_SG *) memory->smalloc(n1*sizeof(B_SG),\"BOP:bt_temp\");\n  for(i=0;i<n1;i++) {\n    bt_temp[i].temp = bt_sg[i].temp;\n    bt_temp[i].i = bt_sg[i].i;\n    bt_temp[i].j = bt_sg[i].j;\n    for(j=0;j<3;j++) {\n      bt_temp[i].dAA[j] = bt_sg[i].dAA[j];\n      bt_temp[i].dBB[j] = bt_sg[i].dBB[j];\n      bt_temp[i].dCC[j] = bt_sg[i].dCC[j];\n      bt_temp[i].dDD[j] = bt_sg[i].dDD[j];\n      bt_temp[i].dEE[j] = bt_sg[i].dEE[j];\n      bt_temp[i].dEE1[j] = bt_sg[i].dEE1[j];\n      bt_temp[i].dFF[j] = bt_sg[i].dFF[j];\n      bt_temp[i].dAAC[j] = bt_sg[i].dAAC[j];\n      bt_temp[i].dBBC[j] = bt_sg[i].dBBC[j];\n      bt_temp[i].dCCC[j] = bt_sg[i].dCCC[j];\n      bt_temp[i].dDDC[j] = bt_sg[i].dDDC[j];\n      bt_temp[i].dEEC[j] = bt_sg[i].dEEC[j];\n      bt_temp[i].dFFC[j] = bt_sg[i].dFFC[j];\n      bt_temp[i].dGGC[j] = bt_sg[i].dGGC[j];\n      bt_temp[i].dUT[j] = bt_sg[i].dUT[j];\n      bt_temp[i].dSigB1[j] = bt_sg[i].dSigB1[j];\n      bt_temp[i].dSigB[j] = bt_sg[i].dSigB[j];\n    }\n  }\n  memory->destroy(bt_sg);\n  bt_sg=NULL;\n  bt_sg = (B_SG *) memory->smalloc(n2*sizeof(B_SG),\"BOP:bt_sg\");\n  for(i=0;i<n1;i++) {\n    bt_sg[i].temp = bt_temp[i].temp;\n    bt_sg[i].i = bt_temp[i].i;\n    bt_sg[i].j = bt_temp[i].j;\n    for(j=0;j<3;j++) {\n      bt_sg[i].dAA[j] = bt_temp[i].dAA[j];\n      bt_sg[i].dBB[j] = bt_temp[i].dBB[j];\n      bt_sg[i].dCC[j] = bt_temp[i].dCC[j];\n      bt_sg[i].dDD[j] = bt_temp[i].dDD[j];\n      bt_sg[i].dEE[j] = bt_temp[i].dEE[j];\n      bt_sg[i].dEE1[j] = bt_temp[i].dEE1[j];\n      bt_sg[i].dFF[j] = bt_temp[i].dFF[j];\n      bt_sg[i].dAAC[j] = bt_temp[i].dAAC[j];\n      bt_sg[i].dBBC[j] = bt_temp[i].dBBC[j];\n      bt_sg[i].dCCC[j] = bt_temp[i].dCCC[j];\n      bt_sg[i].dDDC[j] = bt_temp[i].dDDC[j];\n      bt_sg[i].dEEC[j] = bt_temp[i].dEEC[j];\n      bt_sg[i].dFFC[j] = bt_temp[i].dFFC[j];\n      bt_sg[i].dGGC[j] = bt_temp[i].dGGC[j];\n      bt_sg[i].dUT[j] = bt_temp[i].dUT[j];\n      bt_sg[i].dSigB1[j] = bt_temp[i].dSigB1[j];\n      bt_sg[i].dSigB[j] = bt_temp[i].dSigB[j];\n    }\n  }\n  for(i=n1;i<n2;i++) {\n    bt_sg[i].i = -1;\n    bt_sg[i].j = -1;\n    for(j=0;j<3;j++) {\n      bt_sg[i].dAA[j] = 0.0;\n      bt_sg[i].dBB[j] = 0.0;\n      bt_sg[i].dCC[j] = 0.0;\n      bt_sg[i].dDD[j] = 0.0;\n      bt_sg[i].dEE[j] = 0.0;\n      bt_sg[i].dEE1[j] = 0.0;\n      bt_sg[i].dFF[j] = 0.0;\n      bt_sg[i].dAAC[j] = 0.0;\n      bt_sg[i].dBBC[j] = 0.0;\n      bt_sg[i].dCCC[j] = 0.0;\n      bt_sg[i].dDDC[j] = 0.0;\n      bt_sg[i].dEEC[j] = 0.0;\n      bt_sg[i].dFFC[j] = 0.0;\n      bt_sg[i].dGGC[j] = 0.0;\n      bt_sg[i].dUT[j] = 0.0;\n      bt_sg[i].dSigB1[j] = 0.0;\n      bt_sg[i].dSigB[j] = 0.0;\n    }\n  }\n  memory->destroy(bt_temp);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_PAIR_H\n#define LMP_PAIR_H\n\n#include \"pointers.h\"\n#include \"accelerator_kokkos.h\"\n\nnamespace LAMMPS_NS {\n\nclass Pair : protected Pointers {\n  friend class AngleSDK;\n  friend class AngleSDKOMP;\n  friend class BondQuartic;\n  friend class BondQuarticOMP;\n  friend class DihedralCharmm;\n  friend class DihedralCharmmOMP;\n  friend class FixGPU;\n  friend class FixOMP;\n  friend class ThrOMP;\n  friend class Info;\n\n public:\n  static int instance_total;     // # of Pair classes ever instantiated\n\n  double eng_vdwl,eng_coul;      // accumulated energies\n  double virial[6];              // accumulated virial\n  double *eatom,**vatom;         // accumulated per-atom energy/virial\n\n  double cutforce;               // max cutoff for all atom pairs\n  double **cutsq;                // cutoff sq for each atom pair\n  int **setflag;                 // 0/1 = whether each i,j has been set\n\n  int comm_forward;              // size of forward communication (0 if none)\n  int comm_reverse;              // size of reverse communication (0 if none)\n  int comm_reverse_off;          // size of reverse comm even if newton off\n\n  int single_enable;             // 1 if single() routine exists\n  int restartinfo;               // 1 if pair style writes restart info\n  int respa_enable;              // 1 if inner/middle/outer rRESPA routines\n  int one_coeff;                 // 1 if allows only one coeff * * call\n  int manybody_flag;             // 1 if a manybody potential\n  int no_virial_fdotr_compute;   // 1 if does not invoke virial_fdotr_compute()\n  int writedata;                 // 1 if writes coeffs to data file\n  int ghostneigh;                // 1 if pair style needs neighbors of ghosts\n  double **cutghost;             // cutoff for each ghost pair\n\n  int ewaldflag;                 // 1 if compatible with Ewald solver\n  int pppmflag;                  // 1 if compatible with PPPM solver\n  int msmflag;                   // 1 if compatible with MSM solver\n  int dispersionflag;            // 1 if compatible with LJ/dispersion solver\n  int tip4pflag;                 // 1 if compatible with TIP4P solver\n  int dipoleflag;                // 1 if compatible with dipole solver\n  int reinitflag;                // 1 if compatible with fix adapt and alike\n\n  int tail_flag;                 // pair_modify flag for LJ tail correction\n  double etail,ptail;            // energy/pressure tail corrections\n  double etail_ij,ptail_ij;\n\n  int evflag;                    // energy,virial settings\n  int eflag_either,eflag_global,eflag_atom;\n  int vflag_either,vflag_global,vflag_atom;\n\n  int ncoultablebits;            // size of Coulomb table, accessed by KSpace\n  int ndisptablebits;            // size of dispersion table\n  double tabinnersq;\n  double tabinnerdispsq;\n  double *rtable,*drtable,*ftable,*dftable,*ctable,*dctable;\n  double *etable,*detable,*ptable,*dptable,*vtable,*dvtable;\n  double *rdisptable, *drdisptable, *fdisptable, *dfdisptable;\n  double *edisptable, *dedisptable;\n  int ncoulshiftbits,ncoulmask;\n  int ndispshiftbits, ndispmask;\n\n  int nextra;                    // # of extra quantities pair style calculates\n  double *pvector;               // vector of extra pair quantities\n\n  int single_extra;              // number of extra single values calculated\n  double *svector;               // vector of extra single quantities\n\n  class NeighList *list;         // standard neighbor list used by most pairs\n  class NeighList *listhalf;     // half list used by some pairs\n  class NeighList *listfull;     // full list used by some pairs\n  class NeighList *listhistory;  // neighbor history list used by some pairs\n  class NeighList *listinner;    // rRESPA lists used by some pairs\n  class NeighList *listmiddle;\n  class NeighList *listouter;\n\n  int allocated;                 // 0/1 = whether arrays are allocated\n                                 //       public so external driver can check\n  int compute_flag;              // 0 if skip compute()\n\n  // KOKKOS host/device flag and data masks\n\n  ExecutionSpace execution_space;\n  unsigned int datamask_read,datamask_modify;\n\n  Pair(class LAMMPS *);\n  virtual ~Pair();\n\n  // top-level Pair methods\n\n  void init();\n  virtual void reinit();\n  virtual void setup() {}\n  double mix_energy(double, double, double, double);\n  double mix_distance(double, double);\n  void write_file(int, char **);\n  void init_bitmap(double, double, int, int &, int &, int &, int &);\n  virtual void modify_params(int, char **);\n  void compute_dummy(int, int);\n\n  // need to be public, so can be called by pair_style reaxc\n\n  void v_tally(int, double *, double *);\n  void ev_tally(int, int, int, int, double, double, double,\n                double, double, double);\n  void ev_tally3(int, int, int, double, double,\n                 double *, double *, double *, double *);\n  void v_tally3(int, int, int, double *, double *, double *, double *);\n  void v_tally4(int, int, int, int, double *, double *, double *,\n                double *, double *, double *);\n  void ev_tally_xyz(int, int, int, int, double, double,\n                    double, double, double, double, double, double);\n\n  // general child-class methods\n\n  virtual void compute(int, int) = 0;\n  virtual void compute_inner() {}\n  virtual void compute_middle() {}\n  virtual void compute_outer(int, int) {}\n\n  virtual double single(int, int, int, int,\n                        double, double, double,\n\t\t\tdouble& fforce) {\n    fforce = 0.0;\n    return 0.0;\n  }\n\n  virtual void settings(int, char **) = 0;\n  virtual void coeff(int, char **) = 0;\n\n  virtual void init_style();\n  virtual void init_list(int, class NeighList *);\n  virtual double init_one(int, int) {return 0.0;}\n\n  virtual void init_tables(double, double *);\n  virtual void init_tables_disp(double);\n  virtual void free_tables();\n  virtual void free_disp_tables();\n\n  virtual void write_restart(FILE *) {}\n  virtual void read_restart(FILE *) {}\n  virtual void write_restart_settings(FILE *) {}\n  virtual void read_restart_settings(FILE *) {}\n  virtual void write_data(FILE *) {}\n  virtual void write_data_all(FILE *) {}\n\n  virtual int pack_forward_comm(int, int *, double *, int, int *) {return 0;}\n  virtual void unpack_forward_comm(int, int, double *) {}\n  virtual int pack_forward_comm_kokkos(int, DAT::tdual_int_2d, \n                                       int, DAT::tdual_xfloat_1d &, \n                                       int, int *) {return 0;};\n  virtual void unpack_forward_comm_kokkos(int, int, DAT::tdual_xfloat_1d &) {}\n  virtual int pack_reverse_comm(int, int, double *) {return 0;}\n  virtual void unpack_reverse_comm(int, int *, double *) {}\n  virtual double memory_usage();\n\n  void set_copymode(int value) {copymode = value;}\n\n  // specific child-class methods for certain Pair styles\n\n  virtual void *extract(const char *, int &) {return NULL;}\n  virtual void swap_eam(double *, double **) {}\n  virtual void reset_dt() {}\n  virtual void min_xf_pointers(int, double **, double **) {}\n  virtual void min_xf_get(int) {}\n  virtual void min_x_set(int) {}\n\n  // management of callbacks to be run from ev_tally()\n\n protected:\n  int num_tally_compute;\n  class Compute **list_tally_compute;\n public:\n  virtual void add_tally_callback(class Compute *);\n  virtual void del_tally_callback(class Compute *);\n\n protected:\n  int instance_me;        // which Pair class instantiation I am\n\n  enum{GEOMETRIC,ARITHMETIC,SIXTHPOWER};   // mixing options\n\n  int special_lj[4];           // copied from force->special_lj for Kokkos\n\n  int suffix_flag;             // suffix compatibility flag\n\n                                       // pair_modify settings\n  int offset_flag,mix_flag;            // flags for offset and mixing\n  double tabinner;                     // inner cutoff for Coulomb table\n  double tabinner_disp;                 // inner cutoff for dispersion table\n\n public:\n  // custom data type for accessing Coulomb tables\n\n  typedef union {int i; float f;} union_int_float_t;\n\n protected:\n  int vflag_fdotr;\n  int maxeatom,maxvatom;\n\n  int copymode;   // if set, do not deallocate during destruction\n                  // required when classes are used as functors by Kokkos\n\n  virtual void ev_setup(int, int, int alloc = 1);\n  void ev_unset();\n  void ev_tally_full(int, double, double, double, double, double, double);\n  void ev_tally_xyz_full(int, double, double,\n                         double, double, double, double, double, double);\n  void ev_tally4(int, int, int, int, double,\n                 double *, double *, double *, double *, double *, double *);\n  void ev_tally_tip4p(int, int *, double *, double, double);\n  void v_tally2(int, int, double, double *);\n  void v_tally_tensor(int, int, int, int,\n                      double, double, double, double, double, double);\n  void virial_fdotr_compute();\n\n  // union data struct for packing 32-bit and 64-bit ints into double bufs\n  // see atom_vec.h for documentation\n\n  union ubuf {\n    double d;\n    int64_t i;\n    ubuf(double arg) : d(arg) {}\n    ubuf(int64_t arg) : i(arg) {}\n    ubuf(int arg) : i(arg) {}\n  };\n\n  inline int sbmask(int j) const {\n    return j >> SBBITS & 3;\n  }\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Too many total bits for bitmapped lookup table\n\nTable size specified via pair_modify command is too large.  Note that\na value of N generates a 2^N size table.\n\nE: Cannot have both pair_modify shift and tail set to yes\n\nThese 2 options are contradictory.\n\nE: Cannot use pair tail corrections with 2d simulations\n\nThe correction factors are only currently defined for 3d systems.\n\nW: Using pair tail corrections with nonperiodic system\n\nThis is probably a bogus thing to do, since tail corrections are\ncomputed by integrating the density of a periodic system out to\ninfinity.\n\nW: Using pair tail corrections with pair_modify compute no\n\nThe tail corrections will thus not be computed.\n\nW: Using pair potential shift with pair_modify compute no\n\nThe shift effects will thus not be computed.\n\nW: Using a manybody potential with bonds/angles/dihedrals and special_bond exclusions\n\nThis is likely not what you want to do.  The exclusion settings will\neliminate neighbors in the neighbor list, which the manybody potential\nneeds to calculated its terms correctly.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Fix adapt interface to this pair style not supported\n\nNew coding for the pair style would need to be done.\n\nE: Pair style requires a KSpace style\n\nNo kspace style is defined.\n\nE: Cannot yet use compute tally with Kokkos\n\nThis feature is not yet supported.\n\nE: Pair style does not support pair_write\n\nThe pair style does not have a single() function, so it can\nnot be invoked by pair write.\n\nE: Invalid atom types in pair_write command\n\nAtom types must range from 1 to Ntypes inclusive.\n\nE: Invalid style in pair_write command\n\nSelf-explanatory.  Check the input script.\n\nE: Invalid cutoffs in pair_write command\n\nInner cutoff must be larger than 0.0 and less than outer cutoff.\n\nE: Cannot open pair_write file\n\nThe specified output file for pair energies and forces cannot be\nopened.  Check that the path and name are correct.\n\nE: Bitmapped lookup tables require int/float be same size\n\nCannot use pair tables on this machine, because of word sizes.  Use\nthe pair_modify command with table 0 instead.\n\nW: Table inner cutoff >= outer cutoff\n\nYou specified an inner cutoff for a Coulombic table that is longer\nthan the global cutoff.  Probably not what you wanted.\n\nE: Too many exponent bits for lookup table\n\nTable size specified via pair_modify command does not work with your\nmachine's floating point representation.\n\nE: Too many mantissa bits for lookup table\n\nTable size specified via pair_modify command does not work with your\nmachine's floating point representation.\n\nE: Too few bits for lookup table\n\nTable size specified via pair_modify command does not work with your\nmachine's floating point representation.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_MEMORY_H\n#define LMP_MEMORY_H\n\n#include \"lmptype.h\"\n#include \"pointers.h\"\n#ifdef LMP_KOKKOS\n#include \"kokkos_type.h\"\n#endif\n\nnamespace LAMMPS_NS {\n\nclass Memory : protected Pointers {\n public:\n  Memory(class LAMMPS *);\n\n  void *smalloc(bigint n, const char *);\n  void *srealloc(void *, bigint n, const char *);\n  void sfree(void *);\n  void fail(const char *);\n\n  // Kokkos memory allocation functions\n  // provide a dummy prototpye for any Kokkos memory function\n  //   called in main LAMMPS even when not built with KOKKOS package\n\n#ifdef LMP_KOKKOS\n#include \"memory_kokkos.h\"\n#else\n  void grow_kokkos(tagint **, tagint **, int, int, const char*) {}\n#endif\n\n/* ----------------------------------------------------------------------\n   create/grow/destroy vecs and multidim arrays with contiguous memory blocks\n   only use with primitive data types, e.g. 1d vec of ints, 2d array of doubles\n   fail() prevents use with pointers,\n     e.g. 1d vec of int*, due to mismatched destroy\n   avoid use with non-primitive data types to avoid code bloat\n   for these other cases, use smalloc/srealloc/sfree directly\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   create a 1d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE *create(TYPE *&array, int n, const char *name)\n  {\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n;\n    array = (TYPE *) smalloc(nbytes,name);\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE **create(TYPE **&array, int n, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   grow or shrink 1d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE *grow(TYPE *&array, int n, const char *name)\n  {\n    if (array == NULL) return create(array,n,name);\n\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n;\n    array = (TYPE *) srealloc(array,nbytes,name);\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE **grow(TYPE **&array, int n, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 1d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy(TYPE *&array) {\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 1d array with index from nlo to nhi inclusive\n   cannot grow it\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE *create1d_offset(TYPE *&array, int nlo, int nhi, const char *name)\n  {\n    bigint nbytes = ((bigint) sizeof(TYPE)) * (nhi-nlo+1);\n    array = (TYPE *) smalloc(nbytes,name);\n    array -= nlo;\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE **create1d_offset(TYPE **&array, int nlo, int nhi, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 1d array with index offset\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy1d_offset(TYPE *&array, int offset)\n  {\n    if (array) sfree(&array[offset]);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 2d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE **create(TYPE **&array, int n1, int n2, const char *name)\n  {\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n1*n2;\n    TYPE *data = (TYPE *) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1;\n    array = (TYPE **) smalloc(nbytes,name);\n\n    bigint n = 0;\n    for (int i = 0; i < n1; i++) {\n      array[i] = &data[n];\n      n += n2;\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ***create(TYPE ***&array, int n1, int n2, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   grow or shrink 1st dim of a 2d array\n   last dim must stay the same\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE **grow(TYPE **&array, int n1, int n2, const char *name)\n  {\n    if (array == NULL) return create(array,n1,n2,name);\n\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n1*n2;\n    TYPE *data = (TYPE *) srealloc(array[0],nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1;\n    array = (TYPE **) srealloc(array,nbytes,name);\n\n    bigint n = 0;\n    for (int i = 0; i < n1; i++) {\n      array[i] = &data[n];\n      n += n2;\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ***grow(TYPE ***&array, int n1, int n2, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 2d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy(TYPE **&array)\n  {\n    if (array == NULL) return;\n    sfree(array[0]);\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 2d array with a ragged 2nd dimension\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE **create_ragged(TYPE **&array, int n1, int *n2, const char *name)\n  {\n    bigint n2sum = 0;\n    for (int i = 0; i < n1; i++) n2sum += n2[i];\n\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n2sum;\n    TYPE *data = (TYPE *) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1;\n    array = (TYPE **) smalloc(nbytes,name);\n\n    bigint n = 0;\n    for (int i = 0; i < n1; i++) {\n      array[i] = &data[n];\n      n += n2[i];\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ***create_ragged(TYPE ***&array, int n1, int *n2, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   create a 2d array with 2nd index from n2lo to n2hi inclusive\n   cannot grow it\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE **create2d_offset(TYPE **&array, int n1, int n2lo, int n2hi,\n                         const char *name)\n  {\n    int n2 = n2hi - n2lo + 1;\n    create(array,n1,n2,name);\n    for (int i = 0; i < n1; i++) array[i] -= n2lo;\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ***create2d_offset(TYPE ***&array, int n1, int n2lo, int n2hi,\n                          const char *name) {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 2d array with 2nd index offset\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy2d_offset(TYPE **&array, int offset)\n  {\n    if (array == NULL) return;\n    sfree(&array[0][offset]);\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 3d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE ***create(TYPE ***&array, int n1, int n2, int n3, const char *name)\n  {\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n1*n2*n3;\n    TYPE *data = (TYPE *) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1*n2;\n    TYPE **plane = (TYPE **) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE **)) * n1;\n    array = (TYPE ***) smalloc(nbytes,name);\n\n    int i,j;\n    bigint m;\n    bigint n = 0;\n    for (i = 0; i < n1; i++) {\n      m = ((bigint) i) * n2;\n      array[i] = &plane[m];\n      for (j = 0; j < n2; j++) {\n        plane[m+j] = &data[n];\n        n += n3;\n      }\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ****create(TYPE ****&array, int n1, int n2, int n3, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   grow or shrink 1st dim of a 3d array\n   last 2 dims must stay the same\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE ***grow(TYPE ***&array, int n1, int n2, int n3, const char *name)\n  {\n    if (array == NULL) return create(array,n1,n2,n3,name);\n\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n1*n2*n3;\n    TYPE *data = (TYPE *) srealloc(array[0][0],nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1*n2;\n    TYPE **plane = (TYPE **) srealloc(array[0],nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE **)) * n1;\n    array = (TYPE ***) srealloc(array,nbytes,name);\n\n    int i,j;\n    bigint m;\n    bigint n = 0;\n    for (i = 0; i < n1; i++) {\n      m = ((bigint) i) * n2;\n      array[i] = &plane[m];\n      for (j = 0; j < n2; j++) {\n        plane[m+j] = &data[n];\n        n += n3;\n      }\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ****grow(TYPE ****&array, int n1, int n2, int n3, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 3d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy(TYPE ***&array)\n  {\n    if (array == NULL) return;\n    sfree(array[0][0]);\n    sfree(array[0]);\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 3d array with 1st index from n1lo to n1hi inclusive\n   cannot grow it\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE ***create3d_offset(TYPE ***&array, int n1lo, int n1hi,\n                          int n2, int n3, const char *name)\n  {\n    int n1 = n1hi - n1lo + 1;\n    create(array,n1,n2,n3,name);\n    array -= n1lo;\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ****create3d_offset(TYPE ****&array, int n1lo, int n1hi,\n                           int n2, int n3, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   free a 3d array with 1st index offset\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy3d_offset(TYPE ***&array, int offset)\n  {\n    if (array == NULL) return;\n    sfree(&array[offset][0][0]);\n    sfree(&array[offset][0]);\n    sfree(&array[offset]);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 3d array with\n   1st index from n1lo to n1hi inclusive,\n   2nd index from n2lo to n2hi inclusive,\n   3rd index from n3lo to n3hi inclusive\n   cannot grow it\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE ***create3d_offset(TYPE ***&array, int n1lo, int n1hi,\n                          int n2lo, int n2hi, int n3lo, int n3hi,\n                          const char *name)\n  {\n    int n1 = n1hi - n1lo + 1;\n    int n2 = n2hi - n2lo + 1;\n    int n3 = n3hi - n3lo + 1;\n    create(array,n1,n2,n3,name);\n\n    bigint m = ((bigint) n1) * n2;\n    for (bigint i = 0; i < m; i++) array[0][i] -= n3lo;\n    for (int i = 0; i < n1; i++) array[i] -= n2lo;\n    array -= n1lo;\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ****create3d_offset(TYPE ****&array, int n1lo, int n1hi,\n                           int n2lo, int n2hi, int n3lo, int n3hi,\n                           const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   free a 3d array with all 3 indices offset\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy3d_offset(TYPE ***&array,\n                        int n1_offset, int n2_offset, int n3_offset)\n  {\n    if (array == NULL) return;\n    sfree(&array[n1_offset][n2_offset][n3_offset]);\n    sfree(&array[n1_offset][n2_offset]);\n    sfree(&array[n1_offset]);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 4d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE ****create(TYPE ****&array, int n1, int n2, int n3, int n4,\n                  const char *name)\n  {\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n1*n2*n3*n4;\n    TYPE *data = (TYPE *) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1*n2*n3;\n    TYPE **cube = (TYPE **) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE **)) * n1*n2;\n    TYPE ***plane = (TYPE ***) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE ***)) * n1;\n    array = (TYPE ****) smalloc(nbytes,name);\n\n    int i,j,k;\n    bigint m1,m2;\n    bigint n = 0;\n    for (i = 0; i < n1; i++) {\n      m2 = ((bigint) i) * n2;\n      array[i] = &plane[m2];\n      for (j = 0; j < n2; j++) {\n        m1 = ((bigint) i) * n2 + j;\n        m2 = ((bigint) i) * n2*n3 + j*n3;\n        plane[m1] = &cube[m2];\n        for (k = 0; k < n3; k++) {\n          m1 = ((bigint) i) * n2*n3 + j*n3 + k;\n          cube[m1] = &data[n];\n          n += n4;\n        }\n      }\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE *****create(TYPE *****&array, int n1, int n2, int n3, int n4,\n                   const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 4d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy(TYPE ****&array)\n  {\n    if (array == NULL) return;\n    sfree(array[0][0][0]);\n    sfree(array[0][0]);\n    sfree(array[0]);\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 4d array with indices\n   2nd index from n2lo to n2hi inclusive\n   3rd index from n3lo to n3hi inclusive\n   4th index from n4lo to n4hi inclusive\n   cannot grow it\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE ****create4d_offset(TYPE ****&array, int n1, int n2lo, int n2hi,\n                           int n3lo, int n3hi, int n4lo, int n4hi,\n                           const char *name)\n  {\n    int n2 = n2hi - n2lo + 1;\n    int n3 = n3hi - n3lo + 1;\n    int n4 = n4hi - n4lo + 1;\n    create(array,n1,n2,n3,n4,name);\n\n    bigint m = ((bigint) n1) * n2 * n3;\n    for (bigint i = 0; i < m; i++) array[0][0][i] -= n4lo;\n    m = ((bigint) n1) * n2;\n    for (bigint i = 0; i < m; i++) array [0][i] -= n3lo;\n    for (int i = 0; i < n1; i++) array[i] -= n2lo;\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ****create4d_offset(TYPE *****&array, int n1, int n2lo, int n2hi,\n                           int n3lo, int n3hi, int n4lo, int n4hi,\n                           const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   free a 4d array with indices 2,3, and 4 offset\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy4d_offset(TYPE ****&array,\n                        int n2_offset, int n3_offset, int n4_offset)\n  {\n    if (array == NULL) return;\n    sfree(&array[0][n2_offset][n3_offset][n4_offset]);\n    sfree(&array[0][n2_offset][n3_offset]);\n    sfree(&array[0][n2_offset]);\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   create a 5d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  TYPE *****create(TYPE *****&array, int n1, int n2, int n3, int n4,\n                   int n5, const char *name)\n  {\n    bigint nbytes = ((bigint) sizeof(TYPE)) * n1*n2*n3*n4*n5;\n    TYPE *data = (TYPE *) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE *)) * n1*n2*n3*n4;\n    TYPE **level4 = (TYPE **) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE **)) * n1*n2*n3;\n    TYPE ***level3 = (TYPE ***) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE ***)) * n1*n2;\n    TYPE ****level2 = (TYPE ****) smalloc(nbytes,name);\n    nbytes = ((bigint) sizeof(TYPE ****)) * n1;\n    array = (TYPE *****) smalloc(nbytes,name);\n\n    int i,j,k,l;\n    bigint m1,m2;\n    bigint n = 0;\n    for (i = 0; i < n1; i++) {\n      m2 = ((bigint) i) * n2;\n      array[i] = &level2[m2];\n      for (j = 0; j < n2; j++) {\n        m1 = ((bigint) i) * n2 + j;\n        m2 = ((bigint) i) * n2*n3 +  ((bigint) j) * n3;\n        level2[m1] = &level3[m2];\n        for (k = 0; k < n3; k++) {\n          m1 = ((bigint) i) * n2*n3 +  ((bigint) j) * n3 + k;\n          m2 = ((bigint) i) * n2*n3*n4 +\n            ((bigint) j) * n3*n4 + ((bigint) k) * n4;\n          level3[m1] = &level4[m2];\n          for (l = 0; l < n4; l++) {\n            m1 = ((bigint) i) * n2*n3*n4 +\n              ((bigint) j) * n3*n4 + ((bigint) k) * n4 + l;\n            level4[m1] = &data[n];\n            n += n5;\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  template <typename TYPE>\n  TYPE ******create(TYPE ******&array, int n1, int n2, int n3, int n4,\n                    int n5, const char *name)\n  {fail(name); return NULL;}\n\n/* ----------------------------------------------------------------------\n   destroy a 5d array\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  void destroy(TYPE *****&array)\n  {\n    if (array == NULL) return;\n    sfree(array[0][0][0][0]);\n    sfree(array[0][0][0]);\n    sfree(array[0][0]);\n    sfree(array[0]);\n    sfree(array);\n    array = NULL;\n  }\n\n/* ----------------------------------------------------------------------\n   memory usage of arrays, including pointers\n------------------------------------------------------------------------- */\n\n  template <typename TYPE>\n  bigint usage(TYPE *array, int n)\n  {\n    (void) array;\n    bigint bytes = ((bigint) sizeof(TYPE)) * n;\n    return bytes;\n  }\n\n  template <typename TYPE>\n  bigint usage(TYPE **array, int n1, int n2)\n  {\n    (void) array;\n    bigint bytes = ((bigint) sizeof(TYPE)) * n1*n2;\n    bytes += ((bigint) sizeof(TYPE *)) * n1;\n    return bytes;\n  }\n\n  template <typename TYPE>\n  bigint usage(TYPE ***array, int n1, int n2, int n3)\n  {\n    (void) array;\n    bigint bytes = ((bigint) sizeof(TYPE)) * n1*n2*n3;\n    bytes += ((bigint) sizeof(TYPE *)) * n1*n2;\n    bytes += ((bigint) sizeof(TYPE **)) * n1;\n    return bytes;\n  }\n\n  template <typename TYPE>\n  bigint usage(TYPE ****array, int n1, int n2, int n3, int n4)\n  {\n    (void) array;\n    bigint bytes = ((bigint) sizeof(TYPE)) * n1*n2*n3*n4;\n    bytes += ((bigint) sizeof(TYPE *)) * n1*n2*n3;\n    bytes += ((bigint) sizeof(TYPE **)) * n1*n2;\n    bytes += ((bigint) sizeof(TYPE ***)) * n1;\n    return bytes;\n  }\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Failed to allocate %ld bytes for array %s\n\nYour LAMMPS simulation has run out of memory.  You need to run a\nsmaller simulation or on more processors.\n\nE: Failed to reallocate %ld bytes for array %s\n\nYour LAMMPS simulation has run out of memory.  You need to run a\nsmaller simulation or on more processors.\n\nE: Cannot create/grow a vector/array of pointers for %s\n\nLAMMPS code is making an illegal call to the templated memory\nallocaters, to create a vector or array of pointers.\n\n*/\n","// -*- C++ -*-\n//===---------------------------- math.h ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_MATH_H\n#define _LIBCPP_MATH_H\n\n/*\n    math.h synopsis\n\nMacros:\n\n    HUGE_VAL\n    HUGE_VALF               // C99\n    HUGE_VALL               // C99\n    INFINITY                // C99\n    NAN                     // C99\n    FP_INFINITE             // C99\n    FP_NAN                  // C99\n    FP_NORMAL               // C99\n    FP_SUBNORMAL            // C99\n    FP_ZERO                 // C99\n    FP_FAST_FMA             // C99\n    FP_FAST_FMAF            // C99\n    FP_FAST_FMAL            // C99\n    FP_ILOGB0               // C99\n    FP_ILOGBNAN             // C99\n    MATH_ERRNO              // C99\n    MATH_ERREXCEPT          // C99\n    math_errhandling        // C99\n\nTypes:\n\n    float_t                 // C99\n    double_t                // C99\n\n// C90\n\nfloating_point abs(floating_point x);\n\nfloating_point acos (arithmetic x);\nfloat          acosf(float x);\nlong double    acosl(long double x);\n\nfloating_point asin (arithmetic x);\nfloat          asinf(float x);\nlong double    asinl(long double x);\n\nfloating_point atan (arithmetic x);\nfloat          atanf(float x);\nlong double    atanl(long double x);\n\nfloating_point atan2 (arithmetic y, arithmetic x);\nfloat          atan2f(float y, float x);\nlong double    atan2l(long double y, long double x);\n\nfloating_point ceil (arithmetic x);\nfloat          ceilf(float x);\nlong double    ceill(long double x);\n\nfloating_point cos (arithmetic x);\nfloat          cosf(float x);\nlong double    cosl(long double x);\n\nfloating_point cosh (arithmetic x);\nfloat          coshf(float x);\nlong double    coshl(long double x);\n\nfloating_point exp (arithmetic x);\nfloat          expf(float x);\nlong double    expl(long double x);\n\nfloating_point fabs (arithmetic x);\nfloat          fabsf(float x);\nlong double    fabsl(long double x);\n\nfloating_point floor (arithmetic x);\nfloat          floorf(float x);\nlong double    floorl(long double x);\n\nfloating_point fmod (arithmetic x, arithmetic y);\nfloat          fmodf(float x, float y);\nlong double    fmodl(long double x, long double y);\n\nfloating_point frexp (arithmetic value, int* exp);\nfloat          frexpf(float value, int* exp);\nlong double    frexpl(long double value, int* exp);\n\nfloating_point ldexp (arithmetic value, int exp);\nfloat          ldexpf(float value, int exp);\nlong double    ldexpl(long double value, int exp);\n\nfloating_point log (arithmetic x);\nfloat          logf(float x);\nlong double    logl(long double x);\n\nfloating_point log10 (arithmetic x);\nfloat          log10f(float x);\nlong double    log10l(long double x);\n\nfloating_point modf (floating_point value, floating_point* iptr);\nfloat          modff(float value, float* iptr);\nlong double    modfl(long double value, long double* iptr);\n\nfloating_point pow (arithmetic x, arithmetic y);\nfloat          powf(float x, float y);\nlong double    powl(long double x, long double y);\n\nfloating_point sin (arithmetic x);\nfloat          sinf(float x);\nlong double    sinl(long double x);\n\nfloating_point sinh (arithmetic x);\nfloat          sinhf(float x);\nlong double    sinhl(long double x);\n\nfloating_point sqrt (arithmetic x);\nfloat          sqrtf(float x);\nlong double    sqrtl(long double x);\n\nfloating_point tan (arithmetic x);\nfloat          tanf(float x);\nlong double    tanl(long double x);\n\nfloating_point tanh (arithmetic x);\nfloat          tanhf(float x);\nlong double    tanhl(long double x);\n\n//  C99\n\nbool signbit(arithmetic x);\n\nint fpclassify(arithmetic x);\n\nbool isfinite(arithmetic x);\nbool isinf(arithmetic x);\nbool isnan(arithmetic x);\nbool isnormal(arithmetic x);\n\nbool isgreater(arithmetic x, arithmetic y);\nbool isgreaterequal(arithmetic x, arithmetic y);\nbool isless(arithmetic x, arithmetic y);\nbool islessequal(arithmetic x, arithmetic y);\nbool islessgreater(arithmetic x, arithmetic y);\nbool isunordered(arithmetic x, arithmetic y);\n\nfloating_point acosh (arithmetic x);\nfloat          acoshf(float x);\nlong double    acoshl(long double x);\n\nfloating_point asinh (arithmetic x);\nfloat          asinhf(float x);\nlong double    asinhl(long double x);\n\nfloating_point atanh (arithmetic x);\nfloat          atanhf(float x);\nlong double    atanhl(long double x);\n\nfloating_point cbrt (arithmetic x);\nfloat          cbrtf(float x);\nlong double    cbrtl(long double x);\n\nfloating_point copysign (arithmetic x, arithmetic y);\nfloat          copysignf(float x, float y);\nlong double    copysignl(long double x, long double y);\n\nfloating_point erf (arithmetic x);\nfloat          erff(float x);\nlong double    erfl(long double x);\n\nfloating_point erfc (arithmetic x);\nfloat          erfcf(float x);\nlong double    erfcl(long double x);\n\nfloating_point exp2 (arithmetic x);\nfloat          exp2f(float x);\nlong double    exp2l(long double x);\n\nfloating_point expm1 (arithmetic x);\nfloat          expm1f(float x);\nlong double    expm1l(long double x);\n\nfloating_point fdim (arithmetic x, arithmetic y);\nfloat          fdimf(float x, float y);\nlong double    fdiml(long double x, long double y);\n\nfloating_point fma (arithmetic x, arithmetic y, arithmetic z);\nfloat          fmaf(float x, float y, float z);\nlong double    fmal(long double x, long double y, long double z);\n\nfloating_point fmax (arithmetic x, arithmetic y);\nfloat          fmaxf(float x, float y);\nlong double    fmaxl(long double x, long double y);\n\nfloating_point fmin (arithmetic x, arithmetic y);\nfloat          fminf(float x, float y);\nlong double    fminl(long double x, long double y);\n\nfloating_point hypot (arithmetic x, arithmetic y);\nfloat          hypotf(float x, float y);\nlong double    hypotl(long double x, long double y);\n\nint ilogb (arithmetic x);\nint ilogbf(float x);\nint ilogbl(long double x);\n\nfloating_point lgamma (arithmetic x);\nfloat          lgammaf(float x);\nlong double    lgammal(long double x);\n\nlong long llrint (arithmetic x);\nlong long llrintf(float x);\nlong long llrintl(long double x);\n\nlong long llround (arithmetic x);\nlong long llroundf(float x);\nlong long llroundl(long double x);\n\nfloating_point log1p (arithmetic x);\nfloat          log1pf(float x);\nlong double    log1pl(long double x);\n\nfloating_point log2 (arithmetic x);\nfloat          log2f(float x);\nlong double    log2l(long double x);\n\nfloating_point logb (arithmetic x);\nfloat          logbf(float x);\nlong double    logbl(long double x);\n\nlong lrint (arithmetic x);\nlong lrintf(float x);\nlong lrintl(long double x);\n\nlong lround (arithmetic x);\nlong lroundf(float x);\nlong lroundl(long double x);\n\ndouble      nan (const char* str);\nfloat       nanf(const char* str);\nlong double nanl(const char* str);\n\nfloating_point nearbyint (arithmetic x);\nfloat          nearbyintf(float x);\nlong double    nearbyintl(long double x);\n\nfloating_point nextafter (arithmetic x, arithmetic y);\nfloat          nextafterf(float x, float y);\nlong double    nextafterl(long double x, long double y);\n\nfloating_point nexttoward (arithmetic x, long double y);\nfloat          nexttowardf(float x, long double y);\nlong double    nexttowardl(long double x, long double y);\n\nfloating_point remainder (arithmetic x, arithmetic y);\nfloat          remainderf(float x, float y);\nlong double    remainderl(long double x, long double y);\n\nfloating_point remquo (arithmetic x, arithmetic y, int* pquo);\nfloat          remquof(float x, float y, int* pquo);\nlong double    remquol(long double x, long double y, int* pquo);\n\nfloating_point rint (arithmetic x);\nfloat          rintf(float x);\nlong double    rintl(long double x);\n\nfloating_point round (arithmetic x);\nfloat          roundf(float x);\nlong double    roundl(long double x);\n\nfloating_point scalbln (arithmetic x, long ex);\nfloat          scalblnf(float x, long ex);\nlong double    scalblnl(long double x, long ex);\n\nfloating_point scalbn (arithmetic x, int ex);\nfloat          scalbnf(float x, int ex);\nlong double    scalbnl(long double x, int ex);\n\nfloating_point tgamma (arithmetic x);\nfloat          tgammaf(float x);\nlong double    tgammal(long double x);\n\nfloating_point trunc (arithmetic x);\nfloat          truncf(float x);\nlong double    truncl(long double x);\n\n*/\n\n#include <__config>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n#include_next <math.h>\n\n#ifdef __cplusplus\n\n// We support including .h headers inside 'extern \"C\"' contexts, so switch\n// back to C++ linkage before including these C++ headers.\nextern \"C++\" {\n\n#include <type_traits>\n\n// signbit\n\n#ifdef signbit\n\ntemplate <class _A1>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_signbit(_A1 __lcpp_x) _NOEXCEPT\n{\n    return signbit(__lcpp_x);\n}\n\n#undef signbit\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_arithmetic<_A1>::value, bool>::type\nsignbit(_A1 __lcpp_x) _NOEXCEPT\n{\n    return __libcpp_signbit((typename std::__promote<_A1>::type)__lcpp_x);\n}\n\n#endif  // signbit\n\n// fpclassify\n\n#ifdef fpclassify\n\ntemplate <class _A1>\n_LIBCPP_ALWAYS_INLINE\nint\n__libcpp_fpclassify(_A1 __lcpp_x) _NOEXCEPT\n{\n    return fpclassify(__lcpp_x);\n}\n\n#undef fpclassify\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_arithmetic<_A1>::value, int>::type\nfpclassify(_A1 __lcpp_x) _NOEXCEPT\n{\n    return __libcpp_fpclassify((typename std::__promote<_A1>::type)__lcpp_x);\n}\n\n#endif  // fpclassify\n\n// isfinite\n\n#ifdef isfinite\n\ntemplate <class _A1>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isfinite(_A1 __lcpp_x) _NOEXCEPT\n{\n    return isfinite(__lcpp_x);\n}\n\n#undef isfinite\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_arithmetic<_A1>::value, bool>::type\nisfinite(_A1 __lcpp_x) _NOEXCEPT\n{\n    return __libcpp_isfinite((typename std::__promote<_A1>::type)__lcpp_x);\n}\n\n#endif  // isfinite\n\n// isinf\n\n#ifdef isinf\n\ntemplate <class _A1>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isinf(_A1 __lcpp_x) _NOEXCEPT\n{\n    return isinf(__lcpp_x);\n}\n\n#undef isinf\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_arithmetic<_A1>::value, bool>::type\nisinf(_A1 __lcpp_x) _NOEXCEPT\n{\n    return __libcpp_isinf((typename std::__promote<_A1>::type)__lcpp_x);\n}\n\n#endif  // isinf\n\n// isnan\n\n#ifdef isnan\n\ntemplate <class _A1>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isnan(_A1 __lcpp_x) _NOEXCEPT\n{\n    return isnan(__lcpp_x);\n}\n\n#undef isnan\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_arithmetic<_A1>::value, bool>::type\nisnan(_A1 __lcpp_x) _NOEXCEPT\n{\n    return __libcpp_isnan((typename std::__promote<_A1>::type)__lcpp_x);\n}\n\n#endif  // isnan\n\n// isnormal\n\n#ifdef isnormal\n\ntemplate <class _A1>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isnormal(_A1 __lcpp_x) _NOEXCEPT\n{\n    return isnormal(__lcpp_x);\n}\n\n#undef isnormal\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_arithmetic<_A1>::value, bool>::type\nisnormal(_A1 __lcpp_x) _NOEXCEPT\n{\n    return __libcpp_isnormal((typename std::__promote<_A1>::type)__lcpp_x);\n}\n\n#endif  // isnormal\n\n// isgreater\n\n#ifdef isgreater\n\ntemplate <class _A1, class _A2>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isgreater(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    return isgreater(__lcpp_x, __lcpp_y);\n}\n\n#undef isgreater\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    bool\n>::type\nisgreater(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type type;\n    return __libcpp_isgreater((type)__lcpp_x, (type)__lcpp_y);\n}\n\n#endif  // isgreater\n\n// isgreaterequal\n\n#ifdef isgreaterequal\n\ntemplate <class _A1, class _A2>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isgreaterequal(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    return isgreaterequal(__lcpp_x, __lcpp_y);\n}\n\n#undef isgreaterequal\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    bool\n>::type\nisgreaterequal(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type type;\n    return __libcpp_isgreaterequal((type)__lcpp_x, (type)__lcpp_y);\n}\n\n#endif  // isgreaterequal\n\n// isless\n\n#ifdef isless\n\ntemplate <class _A1, class _A2>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isless(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    return isless(__lcpp_x, __lcpp_y);\n}\n\n#undef isless\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    bool\n>::type\nisless(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type type;\n    return __libcpp_isless((type)__lcpp_x, (type)__lcpp_y);\n}\n\n#endif  // isless\n\n// islessequal\n\n#ifdef islessequal\n\ntemplate <class _A1, class _A2>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_islessequal(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    return islessequal(__lcpp_x, __lcpp_y);\n}\n\n#undef islessequal\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    bool\n>::type\nislessequal(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type type;\n    return __libcpp_islessequal((type)__lcpp_x, (type)__lcpp_y);\n}\n\n#endif  // islessequal\n\n// islessgreater\n\n#ifdef islessgreater\n\ntemplate <class _A1, class _A2>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_islessgreater(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    return islessgreater(__lcpp_x, __lcpp_y);\n}\n\n#undef islessgreater\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    bool\n>::type\nislessgreater(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type type;\n    return __libcpp_islessgreater((type)__lcpp_x, (type)__lcpp_y);\n}\n\n#endif  // islessgreater\n\n// isunordered\n\n#ifdef isunordered\n\ntemplate <class _A1, class _A2>\n_LIBCPP_ALWAYS_INLINE\nbool\n__libcpp_isunordered(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    return isunordered(__lcpp_x, __lcpp_y);\n}\n\n#undef isunordered\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    bool\n>::type\nisunordered(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type type;\n    return __libcpp_isunordered((type)__lcpp_x, (type)__lcpp_y);\n}\n\n#endif  // isunordered\n\n// abs\n\n#if !(defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY\nfloat\nabs(float __lcpp_x) _NOEXCEPT {return fabsf(__lcpp_x);}\n\ninline _LIBCPP_INLINE_VISIBILITY\ndouble\nabs(double __lcpp_x) _NOEXCEPT {return fabs(__lcpp_x);}\n\ninline _LIBCPP_INLINE_VISIBILITY\nlong double\nabs(long double __lcpp_x) _NOEXCEPT {return fabsl(__lcpp_x);}\n#endif // !(defined(_AIX) || defined(__sun__))\n\n// acos\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       acos(float __lcpp_x) _NOEXCEPT       {return acosf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double acos(long double __lcpp_x) _NOEXCEPT {return acosl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nacos(_A1 __lcpp_x) _NOEXCEPT {return acos((double)__lcpp_x);}\n\n// asin\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       asin(float __lcpp_x) _NOEXCEPT       {return asinf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double asin(long double __lcpp_x) _NOEXCEPT {return asinl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nasin(_A1 __lcpp_x) _NOEXCEPT {return asin((double)__lcpp_x);}\n\n// atan\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       atan(float __lcpp_x) _NOEXCEPT       {return atanf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double atan(long double __lcpp_x) _NOEXCEPT {return atanl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\natan(_A1 __lcpp_x) _NOEXCEPT {return atan((double)__lcpp_x);}\n\n// atan2\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       atan2(float __lcpp_y, float __lcpp_x) _NOEXCEPT             {return atan2f(__lcpp_y, __lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double atan2(long double __lcpp_y, long double __lcpp_x) _NOEXCEPT {return atan2l(__lcpp_y, __lcpp_x);}\n#endif\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\natan2(_A1 __lcpp_y, _A2 __lcpp_x) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return atan2((__result_type)__lcpp_y, (__result_type)__lcpp_x);\n}\n\n// ceil\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       ceil(float __lcpp_x) _NOEXCEPT       {return ceilf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double ceil(long double __lcpp_x) _NOEXCEPT {return ceill(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nceil(_A1 __lcpp_x) _NOEXCEPT {return ceil((double)__lcpp_x);}\n\n// cos\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       cos(float __lcpp_x) _NOEXCEPT       {return cosf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double cos(long double __lcpp_x) _NOEXCEPT {return cosl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ncos(_A1 __lcpp_x) _NOEXCEPT {return cos((double)__lcpp_x);}\n\n// cosh\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       cosh(float __lcpp_x) _NOEXCEPT       {return coshf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double cosh(long double __lcpp_x) _NOEXCEPT {return coshl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ncosh(_A1 __lcpp_x) _NOEXCEPT {return cosh((double)__lcpp_x);}\n\n// exp\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       exp(float __lcpp_x) _NOEXCEPT       {return expf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double exp(long double __lcpp_x) _NOEXCEPT {return expl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nexp(_A1 __lcpp_x) _NOEXCEPT {return exp((double)__lcpp_x);}\n\n// fabs\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       fabs(float __lcpp_x) _NOEXCEPT       {return fabsf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double fabs(long double __lcpp_x) _NOEXCEPT {return fabsl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nfabs(_A1 __lcpp_x) _NOEXCEPT {return fabs((double)__lcpp_x);}\n\n// floor\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       floor(float __lcpp_x) _NOEXCEPT       {return floorf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double floor(long double __lcpp_x) _NOEXCEPT {return floorl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nfloor(_A1 __lcpp_x) _NOEXCEPT {return floor((double)__lcpp_x);}\n\n// fmod\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       fmod(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return fmodf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double fmod(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return fmodl(__lcpp_x, __lcpp_y);}\n#endif\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nfmod(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return fmod((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// frexp\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       frexp(float __lcpp_x, int* __lcpp_e) _NOEXCEPT       {return frexpf(__lcpp_x, __lcpp_e);}\ninline _LIBCPP_INLINE_VISIBILITY long double frexp(long double __lcpp_x, int* __lcpp_e) _NOEXCEPT {return frexpl(__lcpp_x, __lcpp_e);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nfrexp(_A1 __lcpp_x, int* __lcpp_e) _NOEXCEPT {return frexp((double)__lcpp_x, __lcpp_e);}\n\n// ldexp\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       ldexp(float __lcpp_x, int __lcpp_e) _NOEXCEPT       {return ldexpf(__lcpp_x, __lcpp_e);}\ninline _LIBCPP_INLINE_VISIBILITY long double ldexp(long double __lcpp_x, int __lcpp_e) _NOEXCEPT {return ldexpl(__lcpp_x, __lcpp_e);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nldexp(_A1 __lcpp_x, int __lcpp_e) _NOEXCEPT {return ldexp((double)__lcpp_x, __lcpp_e);}\n\n// log\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       log(float __lcpp_x) _NOEXCEPT       {return logf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double log(long double __lcpp_x) _NOEXCEPT {return logl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nlog(_A1 __lcpp_x) _NOEXCEPT {return log((double)__lcpp_x);}\n\n// log10\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       log10(float __lcpp_x) _NOEXCEPT       {return log10f(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double log10(long double __lcpp_x) _NOEXCEPT {return log10l(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nlog10(_A1 __lcpp_x) _NOEXCEPT {return log10((double)__lcpp_x);}\n\n// modf\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       modf(float __lcpp_x, float* __lcpp_y) _NOEXCEPT             {return modff(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double modf(long double __lcpp_x, long double* __lcpp_y) _NOEXCEPT {return modfl(__lcpp_x, __lcpp_y);}\n#endif\n\n// pow\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       pow(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return powf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double pow(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return powl(__lcpp_x, __lcpp_y);}\n#endif\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\npow(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return pow((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// sin\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       sin(float __lcpp_x) _NOEXCEPT       {return sinf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double sin(long double __lcpp_x) _NOEXCEPT {return sinl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nsin(_A1 __lcpp_x) _NOEXCEPT {return sin((double)__lcpp_x);}\n\n// sinh\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       sinh(float __lcpp_x) _NOEXCEPT       {return sinhf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double sinh(long double __lcpp_x) _NOEXCEPT {return sinhl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nsinh(_A1 __lcpp_x) _NOEXCEPT {return sinh((double)__lcpp_x);}\n\n// sqrt\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       sqrt(float __lcpp_x) _NOEXCEPT       {return sqrtf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double sqrt(long double __lcpp_x) _NOEXCEPT {return sqrtl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nsqrt(_A1 __lcpp_x) _NOEXCEPT {return sqrt((double)__lcpp_x);}\n\n// tan\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       tan(float __lcpp_x) _NOEXCEPT       {return tanf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double tan(long double __lcpp_x) _NOEXCEPT {return tanl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ntan(_A1 __lcpp_x) _NOEXCEPT {return tan((double)__lcpp_x);}\n\n// tanh\n\n#if !(defined(_LIBCPP_MSVCRT) || defined(_AIX) || defined(__sun__))\ninline _LIBCPP_INLINE_VISIBILITY float       tanh(float __lcpp_x) _NOEXCEPT       {return tanhf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double tanh(long double __lcpp_x) _NOEXCEPT {return tanhl(__lcpp_x);}\n#endif\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ntanh(_A1 __lcpp_x) _NOEXCEPT {return tanh((double)__lcpp_x);}\n\n// acosh\n\n#ifndef _LIBCPP_MSVCRT\ninline _LIBCPP_INLINE_VISIBILITY float       acosh(float __lcpp_x) _NOEXCEPT       {return acoshf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double acosh(long double __lcpp_x) _NOEXCEPT {return acoshl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nacosh(_A1 __lcpp_x) _NOEXCEPT {return acosh((double)__lcpp_x);}\n#endif\n\n// asinh\n\n#ifndef _LIBCPP_MSVCRT\ninline _LIBCPP_INLINE_VISIBILITY float       asinh(float __lcpp_x) _NOEXCEPT       {return asinhf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double asinh(long double __lcpp_x) _NOEXCEPT {return asinhl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nasinh(_A1 __lcpp_x) _NOEXCEPT {return asinh((double)__lcpp_x);}\n#endif\n\n// atanh\n\n#ifndef _LIBCPP_MSVCRT\ninline _LIBCPP_INLINE_VISIBILITY float       atanh(float __lcpp_x) _NOEXCEPT       {return atanhf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double atanh(long double __lcpp_x) _NOEXCEPT {return atanhl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\natanh(_A1 __lcpp_x) _NOEXCEPT {return atanh((double)__lcpp_x);}\n#endif\n\n// cbrt\n\n#ifndef _LIBCPP_MSVCRT\ninline _LIBCPP_INLINE_VISIBILITY float       cbrt(float __lcpp_x) _NOEXCEPT       {return cbrtf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double cbrt(long double __lcpp_x) _NOEXCEPT {return cbrtl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ncbrt(_A1 __lcpp_x) _NOEXCEPT {return cbrt((double)__lcpp_x);}\n#endif\n\n// copysign\n\n#if !defined(_VC_CRT_MAJOR_VERSION) || (_VC_CRT_MAJOR_VERSION < 12)\ninline _LIBCPP_INLINE_VISIBILITY float copysign(float __lcpp_x,\n                                                float __lcpp_y) _NOEXCEPT {\n  return copysignf(__lcpp_x, __lcpp_y);\n}\ninline _LIBCPP_INLINE_VISIBILITY long double\ncopysign(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {\n  return copysignl(__lcpp_x, __lcpp_y);\n}\n#endif\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\ncopysign(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return copysign((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n#ifndef _LIBCPP_MSVCRT\n\n// erf\n\ninline _LIBCPP_INLINE_VISIBILITY float       erf(float __lcpp_x) _NOEXCEPT       {return erff(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double erf(long double __lcpp_x) _NOEXCEPT {return erfl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nerf(_A1 __lcpp_x) _NOEXCEPT {return erf((double)__lcpp_x);}\n\n// erfc\n\ninline _LIBCPP_INLINE_VISIBILITY float       erfc(float __lcpp_x) _NOEXCEPT       {return erfcf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double erfc(long double __lcpp_x) _NOEXCEPT {return erfcl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nerfc(_A1 __lcpp_x) _NOEXCEPT {return erfc((double)__lcpp_x);}\n\n// exp2\n\ninline _LIBCPP_INLINE_VISIBILITY float       exp2(float __lcpp_x) _NOEXCEPT       {return exp2f(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double exp2(long double __lcpp_x) _NOEXCEPT {return exp2l(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nexp2(_A1 __lcpp_x) _NOEXCEPT {return exp2((double)__lcpp_x);}\n\n// expm1\n\ninline _LIBCPP_INLINE_VISIBILITY float       expm1(float __lcpp_x) _NOEXCEPT       {return expm1f(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double expm1(long double __lcpp_x) _NOEXCEPT {return expm1l(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nexpm1(_A1 __lcpp_x) _NOEXCEPT {return expm1((double)__lcpp_x);}\n\n// fdim\n\ninline _LIBCPP_INLINE_VISIBILITY float       fdim(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return fdimf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double fdim(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return fdiml(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nfdim(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return fdim((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// fma\n\ninline _LIBCPP_INLINE_VISIBILITY float       fma(float __lcpp_x, float __lcpp_y, float __lcpp_z) _NOEXCEPT                   {return fmaf(__lcpp_x, __lcpp_y, __lcpp_z);}\ninline _LIBCPP_INLINE_VISIBILITY long double fma(long double __lcpp_x, long double __lcpp_y, long double __lcpp_z) _NOEXCEPT {return fmal(__lcpp_x, __lcpp_y, __lcpp_z);}\n\ntemplate <class _A1, class _A2, class _A3>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value &&\n    std::is_arithmetic<_A3>::value,\n    std::__promote<_A1, _A2, _A3>\n>::type\nfma(_A1 __lcpp_x, _A2 __lcpp_y, _A3 __lcpp_z) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2, _A3>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value &&\n                     std::is_same<_A3, __result_type>::value)), \"\");\n    return fma((__result_type)__lcpp_x, (__result_type)__lcpp_y, (__result_type)__lcpp_z);\n}\n\n// fmax\n\ninline _LIBCPP_INLINE_VISIBILITY float       fmax(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return fmaxf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double fmax(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return fmaxl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nfmax(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return fmax((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// fmin\n\ninline _LIBCPP_INLINE_VISIBILITY float       fmin(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return fminf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double fmin(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return fminl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nfmin(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return fmin((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// hypot\n\ninline _LIBCPP_INLINE_VISIBILITY float       hypot(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return hypotf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double hypot(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return hypotl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nhypot(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return hypot((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// ilogb\n\ninline _LIBCPP_INLINE_VISIBILITY int ilogb(float __lcpp_x) _NOEXCEPT       {return ilogbf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY int ilogb(long double __lcpp_x) _NOEXCEPT {return ilogbl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, int>::type\nilogb(_A1 __lcpp_x) _NOEXCEPT {return ilogb((double)__lcpp_x);}\n\n// lgamma\n\ninline _LIBCPP_INLINE_VISIBILITY float       lgamma(float __lcpp_x) _NOEXCEPT       {return lgammaf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double lgamma(long double __lcpp_x) _NOEXCEPT {return lgammal(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nlgamma(_A1 __lcpp_x) _NOEXCEPT {return lgamma((double)__lcpp_x);}\n\n// llrint\n\ninline _LIBCPP_INLINE_VISIBILITY long long llrint(float __lcpp_x) _NOEXCEPT       {return llrintf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long long llrint(long double __lcpp_x) _NOEXCEPT {return llrintl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, long long>::type\nllrint(_A1 __lcpp_x) _NOEXCEPT {return llrint((double)__lcpp_x);}\n\n// llround\n\ninline _LIBCPP_INLINE_VISIBILITY long long llround(float __lcpp_x) _NOEXCEPT       {return llroundf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long long llround(long double __lcpp_x) _NOEXCEPT {return llroundl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, long long>::type\nllround(_A1 __lcpp_x) _NOEXCEPT {return llround((double)__lcpp_x);}\n\n// log1p\n\ninline _LIBCPP_INLINE_VISIBILITY float       log1p(float __lcpp_x) _NOEXCEPT       {return log1pf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double log1p(long double __lcpp_x) _NOEXCEPT {return log1pl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nlog1p(_A1 __lcpp_x) _NOEXCEPT {return log1p((double)__lcpp_x);}\n\n// log2\n\ninline _LIBCPP_INLINE_VISIBILITY float       log2(float __lcpp_x) _NOEXCEPT       {return log2f(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double log2(long double __lcpp_x) _NOEXCEPT {return log2l(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nlog2(_A1 __lcpp_x) _NOEXCEPT {return log2((double)__lcpp_x);}\n\n// logb\n\ninline _LIBCPP_INLINE_VISIBILITY float       logb(float __lcpp_x) _NOEXCEPT       {return logbf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double logb(long double __lcpp_x) _NOEXCEPT {return logbl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nlogb(_A1 __lcpp_x) _NOEXCEPT {return logb((double)__lcpp_x);}\n\n// lrint\n\ninline _LIBCPP_INLINE_VISIBILITY long lrint(float __lcpp_x) _NOEXCEPT       {return lrintf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long lrint(long double __lcpp_x) _NOEXCEPT {return lrintl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, long>::type\nlrint(_A1 __lcpp_x) _NOEXCEPT {return lrint((double)__lcpp_x);}\n\n// lround\n\ninline _LIBCPP_INLINE_VISIBILITY long lround(float __lcpp_x) _NOEXCEPT       {return lroundf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long lround(long double __lcpp_x) _NOEXCEPT {return lroundl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, long>::type\nlround(_A1 __lcpp_x) _NOEXCEPT {return lround((double)__lcpp_x);}\n\n// nan\n\n// nearbyint\n\ninline _LIBCPP_INLINE_VISIBILITY float       nearbyint(float __lcpp_x) _NOEXCEPT       {return nearbyintf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double nearbyint(long double __lcpp_x) _NOEXCEPT {return nearbyintl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nnearbyint(_A1 __lcpp_x) _NOEXCEPT {return nearbyint((double)__lcpp_x);}\n\n// nextafter\n\ninline _LIBCPP_INLINE_VISIBILITY float       nextafter(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return nextafterf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double nextafter(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return nextafterl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nnextafter(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return nextafter((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// nexttoward\n\ninline _LIBCPP_INLINE_VISIBILITY float       nexttoward(float __lcpp_x, long double __lcpp_y) _NOEXCEPT       {return nexttowardf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double nexttoward(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return nexttowardl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nnexttoward(_A1 __lcpp_x, long double __lcpp_y) _NOEXCEPT {return nexttoward((double)__lcpp_x, __lcpp_y);}\n\n// remainder\n\ninline _LIBCPP_INLINE_VISIBILITY float       remainder(float __lcpp_x, float __lcpp_y) _NOEXCEPT             {return remainderf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double remainder(long double __lcpp_x, long double __lcpp_y) _NOEXCEPT {return remainderl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nremainder(_A1 __lcpp_x, _A2 __lcpp_y) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return remainder((__result_type)__lcpp_x, (__result_type)__lcpp_y);\n}\n\n// remquo\n\ninline _LIBCPP_INLINE_VISIBILITY float       remquo(float __lcpp_x, float __lcpp_y, int* __lcpp_z) _NOEXCEPT             {return remquof(__lcpp_x, __lcpp_y, __lcpp_z);}\ninline _LIBCPP_INLINE_VISIBILITY long double remquo(long double __lcpp_x, long double __lcpp_y, int* __lcpp_z) _NOEXCEPT {return remquol(__lcpp_x, __lcpp_y, __lcpp_z);}\n\ntemplate <class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::__lazy_enable_if\n<\n    std::is_arithmetic<_A1>::value &&\n    std::is_arithmetic<_A2>::value,\n    std::__promote<_A1, _A2>\n>::type\nremquo(_A1 __lcpp_x, _A2 __lcpp_y, int* __lcpp_z) _NOEXCEPT\n{\n    typedef typename std::__promote<_A1, _A2>::type __result_type;\n    static_assert((!(std::is_same<_A1, __result_type>::value &&\n                     std::is_same<_A2, __result_type>::value)), \"\");\n    return remquo((__result_type)__lcpp_x, (__result_type)__lcpp_y, __lcpp_z);\n}\n\n// rint\n\ninline _LIBCPP_INLINE_VISIBILITY float       rint(float __lcpp_x) _NOEXCEPT       {return rintf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double rint(long double __lcpp_x) _NOEXCEPT {return rintl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nrint(_A1 __lcpp_x) _NOEXCEPT {return rint((double)__lcpp_x);}\n\n// round\n\ninline _LIBCPP_INLINE_VISIBILITY float       round(float __lcpp_x) _NOEXCEPT       {return roundf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double round(long double __lcpp_x) _NOEXCEPT {return roundl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nround(_A1 __lcpp_x) _NOEXCEPT {return round((double)__lcpp_x);}\n\n// scalbln\n\ninline _LIBCPP_INLINE_VISIBILITY float       scalbln(float __lcpp_x, long __lcpp_y) _NOEXCEPT       {return scalblnf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double scalbln(long double __lcpp_x, long __lcpp_y) _NOEXCEPT {return scalblnl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nscalbln(_A1 __lcpp_x, long __lcpp_y) _NOEXCEPT {return scalbln((double)__lcpp_x, __lcpp_y);}\n\n// scalbn\n\ninline _LIBCPP_INLINE_VISIBILITY float       scalbn(float __lcpp_x, int __lcpp_y) _NOEXCEPT       {return scalbnf(__lcpp_x, __lcpp_y);}\ninline _LIBCPP_INLINE_VISIBILITY long double scalbn(long double __lcpp_x, int __lcpp_y) _NOEXCEPT {return scalbnl(__lcpp_x, __lcpp_y);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\nscalbn(_A1 __lcpp_x, int __lcpp_y) _NOEXCEPT {return scalbn((double)__lcpp_x, __lcpp_y);}\n\n// tgamma\n\ninline _LIBCPP_INLINE_VISIBILITY float       tgamma(float __lcpp_x) _NOEXCEPT       {return tgammaf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double tgamma(long double __lcpp_x) _NOEXCEPT {return tgammal(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ntgamma(_A1 __lcpp_x) _NOEXCEPT {return tgamma((double)__lcpp_x);}\n\n// trunc\n\ninline _LIBCPP_INLINE_VISIBILITY float       trunc(float __lcpp_x) _NOEXCEPT       {return truncf(__lcpp_x);}\ninline _LIBCPP_INLINE_VISIBILITY long double trunc(long double __lcpp_x) _NOEXCEPT {return truncl(__lcpp_x);}\n\ntemplate <class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename std::enable_if<std::is_integral<_A1>::value, double>::type\ntrunc(_A1 __lcpp_x) _NOEXCEPT {return trunc((double)__lcpp_x);}\n\n#endif // !_LIBCPP_MSVCRT\n\n} // extern \"C++\"\n\n#endif // __cplusplus\n\n#endif  // _LIBCPP_MATH_H\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"bond_fene.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"update.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nBondFENE::BondFENE(LAMMPS *lmp) : Bond(lmp)\n{\n  TWO_1_3 = pow(2.0,(1.0/3.0));\n}\n\n/* ---------------------------------------------------------------------- */\n\nBondFENE::~BondFENE()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(r0);\n    memory->destroy(epsilon);\n    memory->destroy(sigma);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondFENE::compute(int eflag, int vflag)\n{\n  int i1,i2,n,type;\n  double delx,dely,delz,ebond,fbond;\n  double rsq,r0sq,rlogarg,sr2,sr6;\n\n  ebond = sr6 = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    // force from log term\n\n    rsq = delx*delx + dely*dely + delz*delz;\n    r0sq = r0[type] * r0[type];\n    rlogarg = 1.0 - rsq/r0sq;\n\n    // if r -> r0, then rlogarg < 0.0 which is an error\n    // issue a warning and reset rlogarg = epsilon\n    // if r > 2*r0 something serious is wrong, abort\n\n    if (rlogarg < 0.1) {\n      char str[128];\n      sprintf(str,\"FENE bond too long: \" BIGINT_FORMAT \" \"\n              TAGINT_FORMAT \" \" TAGINT_FORMAT \" %g\",\n              update->ntimestep,atom->tag[i1],atom->tag[i2],sqrt(rsq));\n      error->warning(FLERR,str,0);\n      if (rlogarg <= -3.0) error->one(FLERR,\"Bad FENE bond\");\n      rlogarg = 0.1;\n    }\n\n    fbond = -k[type]/rlogarg;\n\n    // force from LJ term\n\n    if (rsq < TWO_1_3*sigma[type]*sigma[type]) {\n      sr2 = sigma[type]*sigma[type]/rsq;\n      sr6 = sr2*sr2*sr2;\n      fbond += 48.0*epsilon[type]*sr6*(sr6-0.5)/rsq;\n    }\n\n    // energy\n\n    if (eflag) {\n      ebond = -0.5 * k[type]*r0sq*log(rlogarg);\n      if (rsq < TWO_1_3*sigma[type]*sigma[type])\n        ebond += 4.0*epsilon[type]*sr6*(sr6-1.0) + epsilon[type];\n    }\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondFENE::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(k,n+1,\"bond:k\");\n  memory->create(r0,n+1,\"bond:r0\");\n  memory->create(epsilon,n+1,\"bond:epsilon\");\n  memory->create(sigma,n+1,\"bond:sigma\");\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid BondFENE::coeff(int narg, char **arg)\n{\n  if (narg != 5) error->all(FLERR,\"Incorrect args for bond coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double r0_one = force->numeric(FLERR,arg[2]);\n  double epsilon_one = force->numeric(FLERR,arg[3]);\n  double sigma_one = force->numeric(FLERR,arg[4]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    r0[i] = r0_one;\n    epsilon[i] = epsilon_one;\n    sigma[i] = sigma_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for bond coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   check if special_bond settings are valid\n------------------------------------------------------------------------- */\n\nvoid BondFENE::init_style()\n{\n  // special bonds should be 0 1 1\n\n  if (force->special_lj[1] != 0.0 || force->special_lj[2] != 1.0 ||\n      force->special_lj[3] != 1.0) {\n    if (comm->me == 0)\n      error->warning(FLERR,\"Use special bonds = 0,1,1 with bond style fene\");\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondFENE::equilibrium_distance(int i)\n{\n  return 0.97*sigma[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid BondFENE::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&r0[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&epsilon[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&sigma[1],sizeof(double),atom->nbondtypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid BondFENE::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&r0[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&epsilon[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&sigma[1],sizeof(double),atom->nbondtypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&epsilon[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nbondtypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid BondFENE::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nbondtypes; i++)\n    fprintf(fp,\"%d %g %g %g %g\\n\",i,k[i],r0[i],epsilon[i],sigma[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondFENE::single(int type, double rsq, int i, int j,\n                        double &fforce)\n{\n  double r0sq = r0[type] * r0[type];\n  double rlogarg = 1.0 - rsq/r0sq;\n\n  // if r -> r0, then rlogarg < 0.0 which is an error\n  // issue a warning and reset rlogarg = epsilon\n  // if r > 2*r0 something serious is wrong, abort\n\n  if (rlogarg < 0.1) {\n    char str[128];\n    sprintf(str,\"FENE bond too long: \" BIGINT_FORMAT \" %g\",\n            update->ntimestep,sqrt(rsq));\n    error->warning(FLERR,str,0);\n    if (rlogarg <= -3.0) error->one(FLERR,\"Bad FENE bond\");\n    rlogarg = 0.1;\n  }\n\n  double eng = -0.5 * k[type]*r0sq*log(rlogarg);\n  fforce = -k[type]/rlogarg;\n  if (rsq < TWO_1_3*sigma[type]*sigma[type]) {\n    double sr2,sr6;\n    sr2 = sigma[type]*sigma[type]/rsq;\n    sr6 = sr2*sr2*sr2;\n    eng += 4.0*epsilon[type]*sr6*(sr6-1.0) + epsilon[type];\n    fforce += 48.0*epsilon[type]*sr6*(sr6-0.5)/rsq;\n  }\n\n  return eng;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_BOND_H\n#define LMP_BOND_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass Bond : protected Pointers {\n  friend class ThrOMP;\n  friend class FixOMP;\n public:\n  int allocated;\n  int *setflag;\n  int writedata;                  // 1 if writes coeffs to data file\n  double energy;                  // accumulated energies\n  double virial[6];               // accumulated virial\n  double *eatom,**vatom;          // accumulated per-atom energy/virial\n\n  int reinitflag;                // 1 if compatible with fix adapt and alike\n\n  // KOKKOS host/device flag and data masks\n\n  ExecutionSpace execution_space;\n  unsigned int datamask_read,datamask_modify;\n  int copymode;\n\n  Bond(class LAMMPS *);\n  virtual ~Bond();\n  virtual void init();\n  virtual void init_style() {}\n  virtual void compute(int, int) = 0;\n  virtual void settings(int, char **) {}\n  virtual void coeff(int, char **) = 0;\n  virtual double equilibrium_distance(int) = 0;\n  virtual void write_restart(FILE *) = 0;\n  virtual void read_restart(FILE *) = 0;\n  virtual void write_data(FILE *) {}\n  virtual double single(int, double, int, int, double &) = 0;\n  virtual double memory_usage();\n  virtual void *extract(char *, int &) {return NULL;}\n  virtual void reinit();\n\n  void write_file(int, char**);\n\n protected:\n  int suffix_flag;             // suffix compatibility flag\n\n  int evflag;\n  int eflag_either,eflag_global,eflag_atom;\n  int vflag_either,vflag_global,vflag_atom;\n  int maxeatom,maxvatom;\n\n  void ev_setup(int, int, int alloc = 1);\n  void ev_tally(int, int, int, int, double, double, double, double, double);\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Bond coeffs are not set\n\nNo bond coefficients have been assigned in the data file or via the\nbond_coeff command.\n\nE: All bond coeffs are not set\n\nAll bond coefficients must be set in the data file or by the\nbond_coeff command before running a simulation.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Ase Henry (MIT)\n   Bugfixes and optimizations:\n     Marcel Fallet & Steve Stuart (Clemson), Axel Kohlmeyer (Temple U),\n     Markus Hoehnerbach (RWTH Aachen), Cyril Falvo (Universite Paris Sud)\n   AIREBO-M modification to optionally replace LJ with Morse potentials.\n     Thomas C. O'Connor (JHU) 2014\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <mpi.h>\n#include \"pair_airebo.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"my_page.h\"\n#include \"math_const.h\"\n#include \"math_special.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\nusing namespace MathSpecial;\n\n#define MAXLINE 1024\n#define TOL 1.0e-9\n#define PGDELTA 1\n\n/* ---------------------------------------------------------------------- */\n\nPairAIREBO::PairAIREBO(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  one_coeff = 1;\n  ghostneigh = 1;\n  ljflag = torflag = 1;\n  morseflag = 0;\n\n  nextra = 3;\n  pvector = new double[nextra];\n\n  maxlocal = 0;\n  REBO_numneigh = NULL;\n  REBO_firstneigh = NULL;\n  ipage = NULL;\n  pgsize = oneatom = 0;\n\n  nC = nH = NULL;\n  map = NULL;\n  manybody_flag = 1;\n\n  sigwid = 0.84;\n  sigcut = 3.0;\n  sigmin = sigcut - sigwid;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairAIREBO::~PairAIREBO()\n{\n  memory->destroy(REBO_numneigh);\n  memory->sfree(REBO_firstneigh);\n  delete [] ipage;\n  memory->destroy(nC);\n  memory->destroy(nH);\n  delete [] pvector;\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(cutghost);\n\n    memory->destroy(cutljsq);\n    memory->destroy(lj1);\n    memory->destroy(lj2);\n    memory->destroy(lj3);\n    memory->destroy(lj4);\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairAIREBO::compute(int eflag, int vflag)\n{\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n  pvector[0] = pvector[1] = pvector[2] = 0.0;\n\n  REBO_neigh();\n  FREBO(eflag,vflag);\n  if (ljflag) FLJ(eflag,vflag);\n  if (torflag) TORSION(eflag,vflag);\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n  memory->create(cutghost,n+1,n+1,\"pair:cutghost\");\n\n  // only sized by C,H = 2 types\n\n  memory->create(cutljsq,2,2,\"pair:cutljsq\");\n  memory->create(lj1,2,2,\"pair:lj1\");\n  memory->create(lj2,2,2,\"pair:lj2\");\n  memory->create(lj3,2,2,\"pair:lj3\");\n  memory->create(lj4,2,2,\"pair:lj4\");\n\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::settings(int narg, char **arg)\n{\n  if (narg != 1 && narg != 3 && narg != 4)\n    error->all(FLERR,\"Illegal pair_style command\");\n\n  cutlj = force->numeric(FLERR,arg[0]);\n\n  if (narg >= 3) {\n    ljflag = force->inumeric(FLERR,arg[1]);\n    torflag = force->inumeric(FLERR,arg[2]);\n  }\n  if (narg == 4) {\n    sigcut = cutlj;\n    sigmin = force->numeric(FLERR,arg[3]);\n    sigwid = sigcut - sigmin;\n  }\n\n  // this one parameter for C-C interactions is different in AIREBO vs REBO\n  // see Favata, Micheletti, Ryu, Pugno, Comp Phys Comm (2016)\n\n  PCCf_2_0 = -0.0276030;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::coeff(int narg, char **arg)\n{\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to C and H\n  // map[i] = which element (0,1) the Ith atom type is, -1 if NULL\n\n  for (int i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    } else if (strcmp(arg[i],\"C\") == 0) {\n      map[i-2] = 0;\n    } else if (strcmp(arg[i],\"H\") == 0) {\n      map[i-2] = 1;\n    } else error->all(FLERR,\"Incorrect args for pair coefficients\");\n  }\n\n  // read potential file and initialize fitting splines\n\n  read_file(arg[2]);\n  spline_init();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  int n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style AIREBO requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style AIREBO requires newton pair on\");\n\n  // need a full neighbor list, including neighbors of ghosts\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n  neighbor->requests[irequest]->ghost = 1;\n\n  // local REBO neighbor list\n  // create pages if first time or if neighbor pgsize/oneatom has changed\n\n  int create = 0;\n  if (ipage == NULL) create = 1;\n  if (pgsize != neighbor->pgsize) create = 1;\n  if (oneatom != neighbor->oneatom) create = 1;\n\n  if (create) {\n    delete [] ipage;\n    pgsize = neighbor->pgsize;\n    oneatom = neighbor->oneatom;\n\n    int nmypage= comm->nthreads;\n    ipage = new MyPage<int>[nmypage];\n    for (int i = 0; i < nmypage; i++)\n      ipage[i].init(oneatom,pgsize,PGDELTA);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  // convert to C,H types\n\n  int ii = map[i];\n  int jj = map[j];\n\n  // use C-C values for these cutoffs since C atoms are biggest\n\n  // cut3rebo = 3 REBO distances\n\n  cut3rebo = 3.0 * rcmax[0][0];\n\n  // cutljrebosq = furthest distance from an owned atom a ghost atom can be\n  //               to need its REBO neighs computed\n  // interaction = M-K-I-J-L-N with I = owned and J = ghost\n  //   this insures N is in the REBO neigh list of L\n  //   since I-J < rcLJmax and J-L < rmax\n\n  double cutljrebo = rcLJmax[0][0] + rcmax[0][0];\n  cutljrebosq = cutljrebo * cutljrebo;\n\n  // cutmax = furthest distance from an owned atom\n  //          at which another atom will feel force, i.e. the ghost cutoff\n  // for REBO term in potential:\n  //   interaction = M-K-I-J-L-N with I = owned and J = ghost\n  //   I to N is max distance = 3 REBO distances\n  // for LJ term in potential:\n  //   short interaction = M-K-I-J-L-N with I = owned, J = ghost, I-J < rcLJmax\n  //   rcLJmax + 2*rcmax, since I-J < rcLJmax and J-L,L-N = REBO distances\n  //   long interaction = I-J with I = owned and J = ghost\n  //   cutlj*sigma, since I-J < LJ cutoff\n  // cutghost = REBO cutoff used in REBO_neigh() for neighbors of ghosts\n\n  double cutmax = cut3rebo;\n  if (ljflag) {\n    cutmax = MAX(cutmax,rcLJmax[0][0] + 2.0*rcmax[0][0]);\n    cutmax = MAX(cutmax,cutlj*sigma[0][0]);\n  }\n\n  cutghost[i][j] = rcmax[ii][jj];\n  cutljsq[ii][jj] = cutlj*sigma[ii][jj] * cutlj*sigma[ii][jj];\n\n  if (morseflag) {\n\n    // using LJ precomputed parameter arrays to store values for Morse potential\n\n    lj1[ii][jj] = epsilonM[ii][jj] * exp(alphaM[ii][jj]*reqM[ii][jj]);\n    lj2[ii][jj] = exp(alphaM[ii][jj]*reqM[ii][jj]);\n    lj3[ii][jj] = 2*epsilonM[ii][jj]*alphaM[ii][jj]*exp(alphaM[ii][jj]*reqM[ii][jj]);\n    lj4[ii][jj] = alphaM[ii][jj];\n\n  } else {\n\n    lj1[ii][jj] = 48.0 * epsilon[ii][jj] * pow(sigma[ii][jj],12.0);\n    lj2[ii][jj] = 24.0 * epsilon[ii][jj] * pow(sigma[ii][jj],6.0);\n    lj3[ii][jj] = 4.0 * epsilon[ii][jj] * pow(sigma[ii][jj],12.0);\n    lj4[ii][jj] = 4.0 * epsilon[ii][jj] * pow(sigma[ii][jj],6.0);\n  }\n\n  cutghost[j][i] = cutghost[i][j];\n  cutljsq[jj][ii] = cutljsq[ii][jj];\n  lj1[jj][ii] = lj1[ii][jj];\n  lj2[jj][ii] = lj2[ii][jj];\n  lj3[jj][ii] = lj3[ii][jj];\n  lj4[jj][ii] = lj4[ii][jj];\n\n  return cutmax;\n}\n\n/* ----------------------------------------------------------------------\n   create REBO neighbor list from main neighbor list\n   REBO neighbor list stores neighbors of ghost atoms\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::REBO_neigh()\n{\n  int i,j,ii,jj,n,allnum,jnum,itype,jtype;\n  double xtmp,ytmp,ztmp,delx,dely,delz,rsq,dS;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  int *neighptr;\n\n  double **x = atom->x;\n  int *type = atom->type;\n\n  if (atom->nmax > maxlocal) {\n    maxlocal = atom->nmax;\n    memory->destroy(REBO_numneigh);\n    memory->sfree(REBO_firstneigh);\n    memory->destroy(nC);\n    memory->destroy(nH);\n    memory->create(REBO_numneigh,maxlocal,\"AIREBO:numneigh\");\n    REBO_firstneigh = (int **) memory->smalloc(maxlocal*sizeof(int *),\n                                               \"AIREBO:firstneigh\");\n    memory->create(nC,maxlocal,\"AIREBO:nC\");\n    memory->create(nH,maxlocal,\"AIREBO:nH\");\n  }\n\n  allnum = list->inum + list->gnum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // store all REBO neighs of owned and ghost atoms\n  // scan full neighbor list of I\n\n  ipage->reset();\n\n  for (ii = 0; ii < allnum; ii++) {\n    i = ilist[ii];\n\n    n = 0;\n    neighptr = ipage->vget();\n\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = map[type[i]];\n    nC[i] = nH[i] = 0.0;\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = map[type[j]];\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < rcmaxsq[itype][jtype]) {\n        neighptr[n++] = j;\n        if (jtype == 0)\n          nC[i] += Sp(sqrt(rsq),rcmin[itype][jtype],rcmax[itype][jtype],dS);\n        else\n          nH[i] += Sp(sqrt(rsq),rcmin[itype][jtype],rcmax[itype][jtype],dS);\n      }\n    }\n\n    REBO_firstneigh[i] = neighptr;\n    REBO_numneigh[i] = n;\n    ipage->vgot(n);\n    if (ipage->status())\n      error->one(FLERR,\"Neighbor list overflow, boost neigh_modify one\");\n  }\n}\n\n/* ----------------------------------------------------------------------\n   REBO forces and energy\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::FREBO(int eflag, int vflag)\n{\n  int i,j,k,m,ii,inum,itype,jtype;\n  tagint itag,jtag;\n  double delx,dely,delz,evdwl,fpair,xtmp,ytmp,ztmp;\n  double rsq,rij,wij;\n  double Qij,Aij,alphaij,VR,pre,dVRdi,VA,term,bij,dVAdi,dVA;\n  double dwij,del[3];\n  int *ilist,*REBO_neighs;\n\n  evdwl = 0.0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int *type = atom->type;\n  tagint *tag = atom->tag;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n\n  // two-body interactions from REBO neighbor list, skip half of them\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    REBO_neighs = REBO_firstneigh[i];\n\n    for (k = 0; k < REBO_numneigh[i]; k++) {\n      j = REBO_neighs[k];\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n\n      delx = x[i][0] - x[j][0];\n      dely = x[i][1] - x[j][1];\n      delz = x[i][2] - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      rij = sqrt(rsq);\n      wij = Sp(rij,rcmin[itype][jtype],rcmax[itype][jtype],dwij);\n      if (wij <= TOL) continue;\n\n      Qij = Q[itype][jtype];\n      Aij = A[itype][jtype];\n      alphaij = alpha[itype][jtype];\n\n      VR = wij*(1.0+(Qij/rij)) * Aij*exp(-alphaij*rij);\n      pre = wij*Aij * exp(-alphaij*rij);\n      dVRdi = pre * ((-alphaij)-(Qij/rsq)-(Qij*alphaij/rij));\n      dVRdi += VR/wij * dwij;\n\n      VA = dVA = 0.0;\n      for (m = 0; m < 3; m++) {\n        term = -wij * BIJc[itype][jtype][m] * exp(-Beta[itype][jtype][m]*rij);\n        VA += term;\n        dVA += -Beta[itype][jtype][m] * term;\n      }\n      dVA += VA/wij * dwij;\n      del[0] = delx;\n      del[1] = dely;\n      del[2] = delz;\n      bij = bondorder(i,j,del,rij,VA,f,vflag_atom);\n      dVAdi = bij*dVA;\n\n      fpair = -(dVRdi+dVAdi) / rij;\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (eflag) pvector[0] += evdwl = VR + bij*VA;\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,fpair,delx,dely,delz);\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   compute LJ forces and energy\n   find 3- and 4-step paths between atoms I,J via REBO neighbor lists\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::FLJ(int eflag, int vflag)\n{\n  int i,j,k,m,ii,jj,kk,mm,inum,jnum,itype,jtype,ktype,mtype;\n  int atomi,atomj,atomk,atomm;\n  int testpath,npath,done;\n  tagint itag,jtag;\n  double evdwl,fpair,xtmp,ytmp,ztmp;\n  double rsq,best,wik,wkm,cij,rij,dwij,dwik,dwkj,dwkm,dwmj;\n  double delij[3],rijsq,delik[3],rik,deljk[3];\n  double rkj,wkj,dC,VLJ,dVLJ,VA,Str,dStr,Stb;\n  double vdw,slw,dvdw,dslw,drij,swidth,tee,tee2;\n  double rljmin,rljmax;\n  double delkm[3],rkm,deljm[3],rmj,wmj,r2inv,r6inv,scale,delscale[3];\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  int *REBO_neighs_i,*REBO_neighs_k;\n  double delikS[3],deljkS[3],delkmS[3],deljmS[3],delimS[3];\n  double rikS,rkjS,rkmS,rmjS,wikS,dwikS;\n  double wkjS,dwkjS,wkmS,dwkmS,wmjS,dwmjS;\n  double fpair1,fpair2,fpair3;\n  double fi[3],fj[3],fk[3],fm[3];\n\n  // I-J interaction from full neighbor list\n  // skip 1/2 of interactions since only consider each pair once\n\n  evdwl = 0.0;\n  rljmin = 0.0;\n  rljmax = 0.0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    atomi = i;\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n      atomj = j;\n\n      delij[0] = xtmp - x[j][0];\n      delij[1] = ytmp - x[j][1];\n      delij[2] = ztmp - x[j][2];\n      rijsq = delij[0]*delij[0] + delij[1]*delij[1] + delij[2]*delij[2];\n\n      // if outside of LJ cutoff, skip\n      // if outside of 4-path cutoff, best = 0.0, no need to test paths\n      // if outside of 2-path cutoff but inside 4-path cutoff,\n      //   best = 0.0, test 3-,4-paths\n      // if inside 2-path cutoff, best = wij, only test 3-,4-paths if best < 1\n      npath = testpath = done = 0;\n      best = 0.0;\n\n      if (rijsq >= cutljsq[itype][jtype]) continue;\n      rij = sqrt(rijsq);\n      if (rij >= cut3rebo) {\n        best = 0.0;\n        testpath = 0;\n      } else if (rij >= rcmax[itype][jtype]) {\n        best = 0.0;\n        testpath = 1;\n      } else {\n        best = Sp(rij,rcmin[itype][jtype],rcmax[itype][jtype],dwij);\n        npath = 2;\n        if (best < 1.0) testpath = 1;\n        else testpath = 0;\n      }\n\n      if (testpath) {\n\n        // test all 3-body paths = I-K-J\n        // I-K interactions come from atom I's REBO neighbors\n        // if wik > current best, compute wkj\n        // if best = 1.0, done\n\n        REBO_neighs_i = REBO_firstneigh[i];\n        for (kk = 0; kk < REBO_numneigh[i] && done==0; kk++) {\n          k = REBO_neighs_i[kk];\n          if (k == j) continue;\n          ktype = map[type[k]];\n\n          delik[0] = x[i][0] - x[k][0];\n          delik[1] = x[i][1] - x[k][1];\n          delik[2] = x[i][2] - x[k][2];\n          rsq = delik[0]*delik[0] + delik[1]*delik[1] + delik[2]*delik[2];\n          if (rsq < rcmaxsq[itype][ktype]) {\n            rik = sqrt(rsq);\n            wik = Sp(rik,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n          } else { dwik = wik = 0.0; rikS = rik = 1.0; }\n\n          if (wik > best) {\n            deljk[0] = x[j][0] - x[k][0];\n            deljk[1] = x[j][1] - x[k][1];\n            deljk[2] = x[j][2] - x[k][2];\n            rsq = deljk[0]*deljk[0] + deljk[1]*deljk[1] + deljk[2]*deljk[2];\n            if (rsq < rcmaxsq[ktype][jtype]) {\n              rkj = sqrt(rsq);\n              wkj = Sp(rkj,rcmin[ktype][jtype],rcmax[ktype][jtype],dwkj);\n              if (wik*wkj > best) {\n                best = wik*wkj;\n                npath = 3;\n                atomk = k;\n                delikS[0] = delik[0];\n                delikS[1] = delik[1];\n                delikS[2] = delik[2];\n                rikS = rik;\n                wikS = wik;\n                dwikS = dwik;\n                deljkS[0] = deljk[0];\n                deljkS[1] = deljk[1];\n                deljkS[2] = deljk[2];\n                rkjS = rkj;\n                wkjS = wkj;\n                dwkjS = dwkj;\n                if (best == 1.0) {\n                  done = 1;\n                  break;\n                }\n              }\n            }\n\n            // test all 4-body paths = I-K-M-J\n            // K-M interactions come from atom K's REBO neighbors\n            // if wik*wkm > current best, compute wmj\n            // if best = 1.0, done\n\n            REBO_neighs_k = REBO_firstneigh[k];\n            for (mm = 0; mm < REBO_numneigh[k] && done==0; mm++) {\n              m = REBO_neighs_k[mm];\n              if (m == i || m == j) continue;\n              mtype = map[type[m]];\n              delkm[0] = x[k][0] - x[m][0];\n              delkm[1] = x[k][1] - x[m][1];\n              delkm[2] = x[k][2] - x[m][2];\n              rsq = delkm[0]*delkm[0] + delkm[1]*delkm[1] + delkm[2]*delkm[2];\n              if (rsq < rcmaxsq[ktype][mtype]) {\n                rkm = sqrt(rsq);\n                wkm = Sp(rkm,rcmin[ktype][mtype],rcmax[ktype][mtype],dwkm);\n              } else { dwkm = wkm = 0.0; rkmS = rkm = 1.0; }\n\n              if (wik*wkm > best) {\n                deljm[0] = x[j][0] - x[m][0];\n                deljm[1] = x[j][1] - x[m][1];\n                deljm[2] = x[j][2] - x[m][2];\n                rsq = deljm[0]*deljm[0] + deljm[1]*deljm[1] +\n                  deljm[2]*deljm[2];\n                if (rsq < rcmaxsq[mtype][jtype]) {\n                  rmj = sqrt(rsq);\n                  wmj = Sp(rmj,rcmin[mtype][jtype],rcmax[mtype][jtype],dwmj);\n                  if (wik*wkm*wmj > best) {\n                    best = wik*wkm*wmj;\n                    npath = 4;\n                    atomk = k;\n                    delikS[0] = delik[0];\n                    delikS[1] = delik[1];\n                    delikS[2] = delik[2];\n                    rikS = rik;\n                    wikS = wik;\n                    dwikS = dwik;\n                    atomm = m;\n                    delkmS[0] = delkm[0];\n                    delkmS[1] = delkm[1];\n                    delkmS[2] = delkm[2];\n                    rkmS = rkm;\n                    wkmS = wkm;\n                    dwkmS = dwkm;\n                    deljmS[0] = deljm[0];\n                    deljmS[1] = deljm[1];\n                    deljmS[2] = deljm[2];\n                    rmjS = rmj;\n                    wmjS = wmj;\n                    dwmjS = dwmj;\n                    if (best == 1.0) {\n                      done = 1;\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      cij = 1.0 - best;\n      if (cij == 0.0) continue;\n\n      // compute LJ forces and energy\n\n      rljmin = sigma[itype][jtype];\n      rljmax = sigcut * rljmin;\n      rljmin = sigmin * rljmin;\n\n      if (rij > rljmax) {\n        slw = 0.0;\n        dslw = 0.0;\n      } else if (rij > rljmin) {\n        drij = rij - rljmin;\n        swidth = rljmax - rljmin;\n        tee = drij / swidth;\n        tee2 = tee*tee;\n        slw = 1.0 - tee2 * (3.0 - 2.0 * tee);\n        dslw = -6.0 * tee * (1.0 - tee) / swidth;\n      } else {\n        slw = 1.0;\n        dslw = 0.0;\n      }\n\n      if (morseflag) {\n\n        const double exr = exp(-rij*lj4[itype][jtype]);\n        vdw = lj1[itype][jtype]*exr*(lj2[itype][jtype]*exr - 2);\n        dvdw = lj3[itype][jtype]*exr*(1-lj2[itype][jtype]*exr);\n\n      } else {\n\n        r2inv = 1.0/rijsq;\n        r6inv = r2inv*r2inv*r2inv;\n\n        vdw = r6inv*(lj3[itype][jtype]*r6inv-lj4[itype][jtype]);\n        dvdw = -r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]) / rij;\n      }\n\n      // VLJ now becomes vdw * slw, derivaties, etc.\n\n      VLJ = vdw * slw;\n      dVLJ = dvdw * slw + vdw * dslw;\n\n      Str = Sp2(rij,rcLJmin[itype][jtype],rcLJmax[itype][jtype],dStr);\n      VA = Str*cij*VLJ;\n      if (Str > 0.0) {\n        scale = rcmin[itype][jtype] / rij;\n        delscale[0] = scale * delij[0];\n        delscale[1] = scale * delij[1];\n        delscale[2] = scale * delij[2];\n        Stb = bondorderLJ(i,j,delscale,rcmin[itype][jtype],VA,\n                          delij,rij,f,vflag_atom);\n      } else Stb = 0.0;\n\n      fpair = -(dStr * (Stb*cij*VLJ - cij*VLJ) +\n                dVLJ * (Str*Stb*cij + cij - Str*cij)) / rij;\n\n      f[i][0] += delij[0]*fpair;\n      f[i][1] += delij[1]*fpair;\n      f[i][2] += delij[2]*fpair;\n      f[j][0] -= delij[0]*fpair;\n      f[j][1] -= delij[1]*fpair;\n      f[j][2] -= delij[2]*fpair;\n\n      if (eflag) pvector[1] += evdwl = VA*Stb + (1.0-Str)*cij*VLJ;\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,fpair,delij[0],delij[1],delij[2]);\n\n      if (cij < 1.0) {\n        dC = Str*Stb*VLJ + (1.0-Str)*VLJ;\n        if (npath == 2) {\n          fpair = dC*dwij / rij;\n          f[atomi][0] += delij[0]*fpair;\n          f[atomi][1] += delij[1]*fpair;\n          f[atomi][2] += delij[2]*fpair;\n          f[atomj][0] -= delij[0]*fpair;\n          f[atomj][1] -= delij[1]*fpair;\n          f[atomj][2] -= delij[2]*fpair;\n\n          if (vflag_atom) v_tally2(atomi,atomj,fpair,delij);\n\n        } else if (npath == 3) {\n          fpair1 = dC*dwikS*wkjS / rikS;\n          fi[0] = delikS[0]*fpair1;\n          fi[1] = delikS[1]*fpair1;\n          fi[2] = delikS[2]*fpair1;\n          fpair2 = dC*wikS*dwkjS / rkjS;\n          fj[0] = deljkS[0]*fpair2;\n          fj[1] = deljkS[1]*fpair2;\n          fj[2] = deljkS[2]*fpair2;\n\n          f[atomi][0] += fi[0];\n          f[atomi][1] += fi[1];\n          f[atomi][2] += fi[2];\n          f[atomj][0] += fj[0];\n          f[atomj][1] += fj[1];\n          f[atomj][2] += fj[2];\n          f[atomk][0] -= fi[0] + fj[0];\n          f[atomk][1] -= fi[1] + fj[1];\n          f[atomk][2] -= fi[2] + fj[2];\n\n          if (vflag_atom)\n            v_tally3(atomi,atomj,atomk,fi,fj,delikS,deljkS);\n\n        } else if (npath == 4) {\n          fpair1 = dC*dwikS*wkmS*wmjS / rikS;\n          fi[0] = delikS[0]*fpair1;\n          fi[1] = delikS[1]*fpair1;\n          fi[2] = delikS[2]*fpair1;\n\n          fpair2 = dC*wikS*dwkmS*wmjS / rkmS;\n          fk[0] = delkmS[0]*fpair2 - fi[0];\n          fk[1] = delkmS[1]*fpair2 - fi[1];\n          fk[2] = delkmS[2]*fpair2 - fi[2];\n\n          fpair3 = dC*wikS*wkmS*dwmjS / rmjS;\n          fj[0] = deljmS[0]*fpair3;\n          fj[1] = deljmS[1]*fpair3;\n          fj[2] = deljmS[2]*fpair3;\n\n          fm[0] = -delkmS[0]*fpair2 - fj[0];\n          fm[1] = -delkmS[1]*fpair2 - fj[1];\n          fm[2] = -delkmS[2]*fpair2 - fj[2];\n\n          f[atomi][0] += fi[0];\n          f[atomi][1] += fi[1];\n          f[atomi][2] += fi[2];\n          f[atomj][0] += fj[0];\n          f[atomj][1] += fj[1];\n          f[atomj][2] += fj[2];\n          f[atomk][0] += fk[0];\n          f[atomk][1] += fk[1];\n          f[atomk][2] += fk[2];\n          f[atomm][0] += fm[0];\n          f[atomm][1] += fm[1];\n          f[atomm][2] += fm[2];\n\n          if (vflag_atom) {\n            delimS[0] = delikS[0] + delkmS[0];\n            delimS[1] = delikS[1] + delkmS[1];\n            delimS[2] = delikS[2] + delkmS[2];\n            v_tally4(atomi,atomj,atomk,atomm,fi,fj,fk,delimS,deljmS,delkmS);\n          }\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   torsional forces and energy\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::TORSION(int eflag, int vflag)\n{\n  int i,j,k,l,ii,inum;\n  tagint itag,jtag;\n  double evdwl,fpair,xtmp,ytmp,ztmp;\n  double cos321;\n  double w21,dw21,cos234,w34,dw34;\n  double cross321[3],cross321mag,cross234[3],cross234mag;\n  double w23,dw23,cw2,ekijl,Ec;\n  double cw,cwnum,cwnom;\n  double rij,rij2,rik,rjl,tspjik,dtsjik,tspijl,dtsijl,costmp,fcpc;\n  double sin321,sin234,rjk2,rik2,ril2,rjl2;\n  double rjk,ril;\n  double Vtors;\n  double dndij[3],tmpvec[3],dndik[3],dndjl[3];\n  double dcidij,dcidik,dcidjk,dcjdji,dcjdjl,dcjdil;\n  double dsidij,dsidik,dsidjk,dsjdji,dsjdjl,dsjdil;\n  double dxidij,dxidik,dxidjk,dxjdji,dxjdjl,dxjdil;\n  double ddndij,ddndik,ddndjk,ddndjl,ddndil,dcwddn,dcwdn,dvpdcw,Ftmp[3];\n  double del32[3],rsq,r32,del23[3],del21[3],r21;\n  double deljk[3],del34[3],delil[3],delkl[3],r23,r34;\n  double fi[3],fj[3],fk[3],fl[3];\n  int itype,jtype,ktype,ltype,kk,ll,jj;\n  int *ilist,*REBO_neighs_i,*REBO_neighs_j;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int *type = atom->type;\n  tagint *tag = atom->tag;\n\n  inum = list->inum;\n  ilist = list->ilist;\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    if (itype != 0) continue;\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    REBO_neighs_i = REBO_firstneigh[i];\n\n    for (jj = 0; jj < REBO_numneigh[i]; jj++) {\n      j = REBO_neighs_i[jj];\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n      if (jtype != 0) continue;\n\n      del32[0] = x[j][0]-x[i][0];\n      del32[1] = x[j][1]-x[i][1];\n      del32[2] = x[j][2]-x[i][2];\n      rsq = del32[0]*del32[0] + del32[1]*del32[1] + del32[2]*del32[2];\n      r32 = sqrt(rsq);\n      del23[0] = -del32[0];\n      del23[1] = -del32[1];\n      del23[2] = -del32[2];\n      r23 = r32;\n      w23 = Sp(r23,rcmin[itype][jtype],rcmax[itype][jtype],dw23);\n\n      for (kk = 0; kk < REBO_numneigh[i]; kk++) {\n        k = REBO_neighs_i[kk];\n        ktype = map[type[k]];\n        if (k == j) continue;\n        del21[0] = x[i][0]-x[k][0];\n        del21[1] = x[i][1]-x[k][1];\n        del21[2] = x[i][2]-x[k][2];\n        rsq = del21[0]*del21[0] + del21[1]*del21[1] + del21[2]*del21[2];\n        r21 = sqrt(rsq);\n        cos321 = - ((del21[0]*del32[0]) + (del21[1]*del32[1]) +\n                    (del21[2]*del32[2])) / (r21*r32);\n        cos321 = MIN(cos321,1.0);\n        cos321 = MAX(cos321,-1.0);\n        sin321 = sqrt(1.0 - cos321*cos321);\n        if (sin321 < TOL) continue;\n\n        deljk[0] = del21[0]-del23[0];\n        deljk[1] = del21[1]-del23[1];\n        deljk[2] = del21[2]-del23[2];\n        rjk2 = deljk[0]*deljk[0] + deljk[1]*deljk[1] + deljk[2]*deljk[2];\n        rjk=sqrt(rjk2);\n        rik2 = r21*r21;\n        w21 = Sp(r21,rcmin[itype][ktype],rcmax[itype][ktype],dw21);\n\n        rij = r32;\n        rik = r21;\n        rij2 = r32*r32;\n        rik2 = r21*r21;\n        costmp = 0.5*(rij2+rik2-rjk2)/rij/rik;\n        tspjik = Sp2(costmp,thmin,thmax,dtsjik);\n        dtsjik = -dtsjik;\n\n        REBO_neighs_j = REBO_firstneigh[j];\n        for (ll = 0; ll < REBO_numneigh[j]; ll++) {\n          l = REBO_neighs_j[ll];\n          ltype = map[type[l]];\n          if (l == i || l == k) continue;\n          del34[0] = x[j][0]-x[l][0];\n          del34[1] = x[j][1]-x[l][1];\n          del34[2] = x[j][2]-x[l][2];\n          rsq = del34[0]*del34[0] + del34[1]*del34[1] + del34[2]*del34[2];\n          r34 = sqrt(rsq);\n          cos234 = (del32[0]*del34[0] + del32[1]*del34[1] +\n                    del32[2]*del34[2]) / (r32*r34);\n          cos234 = MIN(cos234,1.0);\n          cos234 = MAX(cos234,-1.0);\n          sin234 = sqrt(1.0 - cos234*cos234);\n          if (sin234 < TOL) continue;\n          w34 = Sp(r34,rcmin[jtype][ltype],rcmax[jtype][ltype],dw34);\n          delil[0] = del23[0] + del34[0];\n          delil[1] = del23[1] + del34[1];\n          delil[2] = del23[2] + del34[2];\n          ril2 = delil[0]*delil[0] + delil[1]*delil[1] + delil[2]*delil[2];\n          ril=sqrt(ril2);\n          rjl2 = r34*r34;\n\n          rjl = r34;\n          rjl2 = r34*r34;\n          costmp = 0.5*(rij2+rjl2-ril2)/rij/rjl;\n          tspijl = Sp2(costmp,thmin,thmax,dtsijl);\n          dtsijl = -dtsijl; //need minus sign\n          cross321[0] = (del32[1]*del21[2])-(del32[2]*del21[1]);\n          cross321[1] = (del32[2]*del21[0])-(del32[0]*del21[2]);\n          cross321[2] = (del32[0]*del21[1])-(del32[1]*del21[0]);\n          cross321mag = sqrt(cross321[0]*cross321[0]+\n                             cross321[1]*cross321[1]+\n                             cross321[2]*cross321[2]);\n          cross234[0] = (del23[1]*del34[2])-(del23[2]*del34[1]);\n          cross234[1] = (del23[2]*del34[0])-(del23[0]*del34[2]);\n          cross234[2] = (del23[0]*del34[1])-(del23[1]*del34[0]);\n          cross234mag = sqrt(cross234[0]*cross234[0]+\n                             cross234[1]*cross234[1]+\n                             cross234[2]*cross234[2]);\n          cwnum = (cross321[0]*cross234[0]) +\n            (cross321[1]*cross234[1])+(cross321[2]*cross234[2]);\n          cwnom = r21*r34*r32*r32*sin321*sin234;\n          cw = cwnum/cwnom;\n\n          cw2 = (.5*(1.0-cw));\n          ekijl = epsilonT[ktype][ltype];\n          Ec = 256.0*ekijl/405.0;\n          Vtors = (Ec*(powint(cw2,5)))-(ekijl/10.0);\n\n          if (eflag) pvector[2] += evdwl = Vtors*w21*w23*w34*(1.0-tspjik)*(1.0-tspijl);\n\n          dndij[0] = (cross234[1]*del21[2])-(cross234[2]*del21[1]);\n          dndij[1] = (cross234[2]*del21[0])-(cross234[0]*del21[2]);\n          dndij[2] = (cross234[0]*del21[1])-(cross234[1]*del21[0]);\n\n          tmpvec[0] = (del34[1]*cross321[2])-(del34[2]*cross321[1]);\n          tmpvec[1] = (del34[2]*cross321[0])-(del34[0]*cross321[2]);\n          tmpvec[2] = (del34[0]*cross321[1])-(del34[1]*cross321[0]);\n\n          dndij[0] = dndij[0]+tmpvec[0];\n          dndij[1] = dndij[1]+tmpvec[1];\n          dndij[2] = dndij[2]+tmpvec[2];\n\n          dndik[0] = (del23[1]*cross234[2])-(del23[2]*cross234[1]);\n          dndik[1] = (del23[2]*cross234[0])-(del23[0]*cross234[2]);\n          dndik[2] = (del23[0]*cross234[1])-(del23[1]*cross234[0]);\n\n          dndjl[0] = (cross321[1]*del23[2])-(cross321[2]*del23[1]);\n          dndjl[1] = (cross321[2]*del23[0])-(cross321[0]*del23[2]);\n          dndjl[2] = (cross321[0]*del23[1])-(cross321[1]*del23[0]);\n\n          dcidij = ((r23*r23)-(r21*r21)+(rjk*rjk))/(2.0*r23*r23*r21);\n          dcidik = ((r21*r21)-(r23*r23)+(rjk*rjk))/(2.0*r23*r21*r21);\n          dcidjk = (-rjk)/(r23*r21);\n          dcjdji = ((r23*r23)-(r34*r34)+(ril*ril))/(2.0*r23*r23*r34);\n          dcjdjl = ((r34*r34)-(r23*r23)+(ril*ril))/(2.0*r23*r34*r34);\n          dcjdil = (-ril)/(r23*r34);\n\n          dsidij = (-cos321/sin321)*dcidij;\n          dsidik = (-cos321/sin321)*dcidik;\n          dsidjk = (-cos321/sin321)*dcidjk;\n\n          dsjdji = (-cos234/sin234)*dcjdji;\n          dsjdjl = (-cos234/sin234)*dcjdjl;\n          dsjdil = (-cos234/sin234)*dcjdil;\n\n          dxidij = (r21*sin321)+(r23*r21*dsidij);\n          dxidik = (r23*sin321)+(r23*r21*dsidik);\n          dxidjk = (r23*r21*dsidjk);\n\n          dxjdji = (r34*sin234)+(r23*r34*dsjdji);\n          dxjdjl = (r23*sin234)+(r23*r34*dsjdjl);\n          dxjdil = (r23*r34*dsjdil);\n\n          ddndij = (dxidij*cross234mag)+(cross321mag*dxjdji);\n          ddndik = dxidik*cross234mag;\n          ddndjk = dxidjk*cross234mag;\n          ddndjl = cross321mag*dxjdjl;\n          ddndil = cross321mag*dxjdil;\n          dcwddn = -cwnum/(cwnom*cwnom);\n          dcwdn = 1.0/cwnom;\n          dvpdcw = (-1.0)*Ec*(-.5)*5.0*powint(cw2,4) *\n            w23*w21*w34*(1.0-tspjik)*(1.0-tspijl);\n\n          Ftmp[0] = dvpdcw*((dcwdn*dndij[0])+(dcwddn*ddndij*del23[0]/r23));\n          Ftmp[1] = dvpdcw*((dcwdn*dndij[1])+(dcwddn*ddndij*del23[1]/r23));\n          Ftmp[2] = dvpdcw*((dcwdn*dndij[2])+(dcwddn*ddndij*del23[2]/r23));\n          fi[0] = Ftmp[0];\n          fi[1] = Ftmp[1];\n          fi[2] = Ftmp[2];\n          fj[0] = -Ftmp[0];\n          fj[1] = -Ftmp[1];\n          fj[2] = -Ftmp[2];\n\n          Ftmp[0] = dvpdcw*((dcwdn*dndik[0])+(dcwddn*ddndik*del21[0]/r21));\n          Ftmp[1] = dvpdcw*((dcwdn*dndik[1])+(dcwddn*ddndik*del21[1]/r21));\n          Ftmp[2] = dvpdcw*((dcwdn*dndik[2])+(dcwddn*ddndik*del21[2]/r21));\n          fi[0] += Ftmp[0];\n          fi[1] += Ftmp[1];\n          fi[2] += Ftmp[2];\n          fk[0] = -Ftmp[0];\n          fk[1] = -Ftmp[1];\n          fk[2] = -Ftmp[2];\n\n          Ftmp[0] = (dvpdcw*dcwddn*ddndjk*deljk[0])/rjk;\n          Ftmp[1] = (dvpdcw*dcwddn*ddndjk*deljk[1])/rjk;\n          Ftmp[2] = (dvpdcw*dcwddn*ddndjk*deljk[2])/rjk;\n          fj[0] += Ftmp[0];\n          fj[1] += Ftmp[1];\n          fj[2] += Ftmp[2];\n          fk[0] -= Ftmp[0];\n          fk[1] -= Ftmp[1];\n          fk[2] -= Ftmp[2];\n\n          Ftmp[0] = dvpdcw*((dcwdn*dndjl[0])+(dcwddn*ddndjl*del34[0]/r34));\n          Ftmp[1] = dvpdcw*((dcwdn*dndjl[1])+(dcwddn*ddndjl*del34[1]/r34));\n          Ftmp[2] = dvpdcw*((dcwdn*dndjl[2])+(dcwddn*ddndjl*del34[2]/r34));\n          fj[0] += Ftmp[0];\n          fj[1] += Ftmp[1];\n          fj[2] += Ftmp[2];\n          fl[0] = -Ftmp[0];\n          fl[1] = -Ftmp[1];\n          fl[2] = -Ftmp[2];\n\n          Ftmp[0] = (dvpdcw*dcwddn*ddndil*delil[0])/ril;\n          Ftmp[1] = (dvpdcw*dcwddn*ddndil*delil[1])/ril;\n          Ftmp[2] = (dvpdcw*dcwddn*ddndil*delil[2])/ril;\n          fi[0] += Ftmp[0];\n          fi[1] += Ftmp[1];\n          fi[2] += Ftmp[2];\n          fl[0] -= Ftmp[0];\n          fl[1] -= Ftmp[1];\n          fl[2] -= Ftmp[2];\n\n          // coordination forces\n\n          fpair = Vtors*dw21*w23*w34*(1.0-tspjik)*(1.0-tspijl) / r21;\n          fi[0] -= del21[0]*fpair;\n          fi[1] -= del21[1]*fpair;\n          fi[2] -= del21[2]*fpair;\n          fk[0] += del21[0]*fpair;\n          fk[1] += del21[1]*fpair;\n          fk[2] += del21[2]*fpair;\n\n          fpair = Vtors*w21*dw23*w34*(1.0-tspjik)*(1.0-tspijl) / r23;\n          fi[0] -= del23[0]*fpair;\n          fi[1] -= del23[1]*fpair;\n          fi[2] -= del23[2]*fpair;\n          fj[0] += del23[0]*fpair;\n          fj[1] += del23[1]*fpair;\n          fj[2] += del23[2]*fpair;\n\n          fpair = Vtors*w21*w23*dw34*(1.0-tspjik)*(1.0-tspijl) / r34;\n          fj[0] -= del34[0]*fpair;\n          fj[1] -= del34[1]*fpair;\n          fj[2] -= del34[2]*fpair;\n          fl[0] += del34[0]*fpair;\n          fl[1] += del34[1]*fpair;\n          fl[2] += del34[2]*fpair;\n\n          // additional cut off function forces\n\n          fcpc = -Vtors*w21*w23*w34*dtsjik*(1.0-tspijl);\n          fpair = fcpc*dcidij/rij;\n          fi[0] += fpair*del23[0];\n          fi[1] += fpair*del23[1];\n          fi[2] += fpair*del23[2];\n          fj[0] -= fpair*del23[0];\n          fj[1] -= fpair*del23[1];\n          fj[2] -= fpair*del23[2];\n\n          fpair = fcpc*dcidik/rik;\n          fi[0] += fpair*del21[0];\n          fi[1] += fpair*del21[1];\n          fi[2] += fpair*del21[2];\n          fk[0] -= fpair*del21[0];\n          fk[1] -= fpair*del21[1];\n          fk[2] -= fpair*del21[2];\n\n          fpair = fcpc*dcidjk/rjk;\n          fj[0] += fpair*deljk[0];\n          fj[1] += fpair*deljk[1];\n          fj[2] += fpair*deljk[2];\n          fk[0] -= fpair*deljk[0];\n          fk[1] -= fpair*deljk[1];\n          fk[2] -= fpair*deljk[2];\n\n          fcpc = -Vtors*w21*w23*w34*(1.0-tspjik)*dtsijl;\n          fpair = fcpc*dcjdji/rij;\n          fi[0] += fpair*del23[0];\n          fi[1] += fpair*del23[1];\n          fi[2] += fpair*del23[2];\n          fj[0] -= fpair*del23[0];\n          fj[1] -= fpair*del23[1];\n          fj[2] -= fpair*del23[2];\n\n          fpair = fcpc*dcjdjl/rjl;\n          fj[0] += fpair*del34[0];\n          fj[1] += fpair*del34[1];\n          fj[2] += fpair*del34[2];\n          fl[0] -= fpair*del34[0];\n          fl[1] -= fpair*del34[1];\n          fl[2] -= fpair*del34[2];\n\n          fpair = fcpc*dcjdil/ril;\n          fi[0] += fpair*delil[0];\n          fi[1] += fpair*delil[1];\n          fi[2] += fpair*delil[2];\n          fl[0] -= fpair*delil[0];\n          fl[1] -= fpair*delil[1];\n          fl[2] -= fpair*delil[2];\n\n          // sum per-atom forces into atom force array\n\n          f[i][0] += fi[0]; f[i][1] += fi[1]; f[i][2] += fi[2];\n          f[j][0] += fj[0]; f[j][1] += fj[1]; f[j][2] += fj[2];\n          f[k][0] += fk[0]; f[k][1] += fk[1]; f[k][2] += fk[2];\n          f[l][0] += fl[0]; f[l][1] += fl[1]; f[l][2] += fl[2];\n\n          if (evflag) {\n            delkl[0] = delil[0] - del21[0];\n            delkl[1] = delil[1] - del21[1];\n            delkl[2] = delil[2] - del21[2];\n            ev_tally4(i,j,k,l,evdwl,fi,fj,fk,delil,del34,delkl);\n          }\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   Bij function\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::bondorder(int i, int j, double rij[3],\n                             double rijmag, double VA,\n                             double **f, int vflag_atom)\n{\n  int atomi,atomj,k,n,l,atomk,atoml,atomn,atom1,atom2,atom3,atom4;\n  int itype,jtype,ktype,ltype,ntype;\n  double rik[3],rjl[3],rkn[3],rji[3],rki[3],rlj[3],rknmag,dNki,dwjl,bij;\n  double NijC,NijH,NjiC,NjiH,wik,dwik,dwkn,wjl;\n  double rikmag,rjlmag,cosjik,cosijl,g,tmp2,tmp3;\n  double Etmp,pij,tmp,wij,dwij,NconjtmpI,NconjtmpJ,Nki,Nlj,dS;\n  double lamdajik,lamdaijl,dgdc,dgdN,pji,Nijconj,piRC;\n  double dcosjikdri[3],dcosijldri[3],dcosjikdrk[3];\n  double dN2[2],dN3[3];\n  double dcosjikdrj[3],dcosijldrj[3],dcosijldrl[3];\n  double Tij;\n  double r32[3],r32mag,cos321,r43[3],r13[3];\n  double dNlj;\n  double om1234,rln[3];\n  double rlnmag,dwln,r23[3],r23mag,r21[3],r21mag;\n  double w21,dw21,r34[3],r34mag,cos234,w34,dw34;\n  double cross321[3],cross234[3],prefactor,SpN;\n  double fcijpc,fcikpc,fcjlpc,fcjkpc,fcilpc;\n  double dt2dik[3],dt2djl[3],dt2dij[3],aa,aaa2,at2,cw,cwnum,cwnom;\n  double sin321,sin234,rr,rijrik,rijrjl,rjk2,rik2,ril2,rjl2;\n  double dctik,dctjk,dctjl,dctij,dctji,dctil,rik2i,rjl2i,sink2i,sinl2i;\n  double rjk[3],ril[3],dt1dik,dt1djk,dt1djl,dt1dil,dt1dij;\n  double F23[3],F12[3],F34[3],F31[3],F24[3],fi[3],fj[3],fk[3],fl[3];\n  double f1[3],f2[3],f3[3],f4[4];\n  double dcut321,PijS,PjiS;\n  double rij2,tspjik,dtsjik,tspijl,dtsijl,costmp;\n  int *REBO_neighs,*REBO_neighs_i,*REBO_neighs_j,*REBO_neighs_k,*REBO_neighs_l;\n\n  double **x = atom->x;\n  int *type = atom->type;\n\n  atomi = i;\n  atomj = j;\n  itype = map[type[i]];\n  jtype = map[type[j]];\n  wij = Sp(rijmag,rcmin[itype][jtype],rcmax[itype][jtype],dwij);\n  NijC = nC[i]-(wij*kronecker(jtype,0));\n  NijH = nH[i]-(wij*kronecker(jtype,1));\n  NjiC = nC[j]-(wij*kronecker(itype,0));\n  NjiH = nH[j]-(wij*kronecker(itype,1));\n  bij = 0.0;\n  tmp = 0.0;\n  tmp2 = 0.0;\n  tmp3 = 0.0;\n  dgdc = 0.0;\n  dgdN = 0.0;\n  NconjtmpI = 0.0;\n  NconjtmpJ = 0.0;\n  Etmp = 0.0;\n\n  REBO_neighs = REBO_firstneigh[i];\n  for (k = 0; k < REBO_numneigh[i]; k++) {\n    atomk = REBO_neighs[k];\n    if (atomk != atomj) {\n      ktype = map[type[atomk]];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      lamdajik = 4.0*kronecker(itype,1) *\n        ((rho[ktype][1]-rikmag)-(rho[jtype][1]-rijmag));\n      wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dS);\n      Nki = nC[atomk]-(wik*kronecker(itype,0))+nH[atomk] -\n        (wik*kronecker(itype,1));\n      cosjik = ((rij[0]*rik[0])+(rij[1]*rik[1])+(rij[2]*rik[2])) /\n        (rijmag*rikmag);\n      cosjik = MIN(cosjik,1.0);\n      cosjik = MAX(cosjik,-1.0);\n\n      // evaluate splines g and derivatives dg\n\n      g = gSpline(cosjik,(NijC+NijH),itype,&dgdc,&dgdN);\n      Etmp = Etmp+(wik*g*exp(lamdajik));\n      tmp3 = tmp3+(wik*dgdN*exp(lamdajik));\n      NconjtmpI = NconjtmpI+(kronecker(ktype,0)*wik*Sp(Nki,Nmin,Nmax,dS));\n    }\n  }\n\n  PijS = 0.0;\n  dN2[0] = 0.0;\n  dN2[1] = 0.0;\n  PijS = PijSpline(NijC,NijH,itype,jtype,dN2);\n  pij = 1.0/sqrt(1.0+Etmp+PijS);\n  tmp = -0.5*cube(pij);\n\n  // pij forces\n\n  REBO_neighs = REBO_firstneigh[i];\n  for (k = 0; k < REBO_numneigh[i]; k++) {\n    atomk = REBO_neighs[k];\n    if (atomk != atomj) {\n      ktype = map[type[atomk]];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      lamdajik = 4.0*kronecker(itype,1) *\n        ((rho[ktype][1]-rikmag)-(rho[jtype][1]-rijmag));\n      wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n      cosjik = (rij[0]*rik[0] + rij[1]*rik[1] + rij[2]*rik[2]) /\n        (rijmag*rikmag);\n      cosjik = MIN(cosjik,1.0);\n      cosjik = MAX(cosjik,-1.0);\n\n      dcosjikdri[0] = ((rij[0]+rik[0])/(rijmag*rikmag)) -\n        (cosjik*((rij[0]/(rijmag*rijmag))+(rik[0]/(rikmag*rikmag))));\n      dcosjikdri[1] = ((rij[1]+rik[1])/(rijmag*rikmag)) -\n        (cosjik*((rij[1]/(rijmag*rijmag))+(rik[1]/(rikmag*rikmag))));\n      dcosjikdri[2] = ((rij[2]+rik[2])/(rijmag*rikmag)) -\n        (cosjik*((rij[2]/(rijmag*rijmag))+(rik[2]/(rikmag*rikmag))));\n      dcosjikdrk[0] = (-rij[0]/(rijmag*rikmag)) +\n        (cosjik*(rik[0]/(rikmag*rikmag)));\n      dcosjikdrk[1] = (-rij[1]/(rijmag*rikmag)) +\n        (cosjik*(rik[1]/(rikmag*rikmag)));\n      dcosjikdrk[2] = (-rij[2]/(rijmag*rikmag)) +\n        (cosjik*(rik[2]/(rikmag*rikmag)));\n      dcosjikdrj[0] = (-rik[0]/(rijmag*rikmag)) +\n        (cosjik*(rij[0]/(rijmag*rijmag)));\n      dcosjikdrj[1] = (-rik[1]/(rijmag*rikmag)) +\n        (cosjik*(rij[1]/(rijmag*rijmag)));\n      dcosjikdrj[2] = (-rik[2]/(rijmag*rikmag)) +\n        (cosjik*(rij[2]/(rijmag*rijmag)));\n\n      g = gSpline(cosjik,(NijC+NijH),itype,&dgdc,&dgdN);\n      tmp2 = VA*.5*(tmp*wik*dgdc*exp(lamdajik));\n      fj[0] = -tmp2*dcosjikdrj[0];\n      fj[1] = -tmp2*dcosjikdrj[1];\n      fj[2] = -tmp2*dcosjikdrj[2];\n      fi[0] = -tmp2*dcosjikdri[0];\n      fi[1] = -tmp2*dcosjikdri[1];\n      fi[2] = -tmp2*dcosjikdri[2];\n      fk[0] = -tmp2*dcosjikdrk[0];\n      fk[1] = -tmp2*dcosjikdrk[1];\n      fk[2] = -tmp2*dcosjikdrk[2];\n\n      tmp2 = VA*.5*(tmp*wik*g*exp(lamdajik)*4.0*kronecker(itype,1));\n      fj[0] -= tmp2*(-rij[0]/rijmag);\n      fj[1] -= tmp2*(-rij[1]/rijmag);\n      fj[2] -= tmp2*(-rij[2]/rijmag);\n      fi[0] -= tmp2*((-rik[0]/rikmag)+(rij[0]/rijmag));\n      fi[1] -= tmp2*((-rik[1]/rikmag)+(rij[1]/rijmag));\n      fi[2] -= tmp2*((-rik[2]/rikmag)+(rij[2]/rijmag));\n      fk[0] -= tmp2*(rik[0]/rikmag);\n      fk[1] -= tmp2*(rik[1]/rikmag);\n      fk[2] -= tmp2*(rik[2]/rikmag);\n\n      // coordination forces\n\n      // dwik forces\n\n      tmp2 = VA*.5*(tmp*dwik*g*exp(lamdajik))/rikmag;\n      fi[0] -= tmp2*rik[0];\n      fi[1] -= tmp2*rik[1];\n      fi[2] -= tmp2*rik[2];\n      fk[0] += tmp2*rik[0];\n      fk[1] += tmp2*rik[1];\n      fk[2] += tmp2*rik[2];\n\n      // PIJ forces\n\n      tmp2 = VA*.5*(tmp*dN2[ktype]*dwik)/rikmag;\n      fi[0] -= tmp2*rik[0];\n      fi[1] -= tmp2*rik[1];\n      fi[2] -= tmp2*rik[2];\n      fk[0] += tmp2*rik[0];\n      fk[1] += tmp2*rik[1];\n      fk[2] += tmp2*rik[2];\n\n      // dgdN forces\n\n      tmp2 = VA*.5*(tmp*tmp3*dwik)/rikmag;\n      fi[0] -= tmp2*rik[0];\n      fi[1] -= tmp2*rik[1];\n      fi[2] -= tmp2*rik[2];\n      fk[0] += tmp2*rik[0];\n      fk[1] += tmp2*rik[1];\n      fk[2] += tmp2*rik[2];\n\n      f[atomi][0] += fi[0]; f[atomi][1] += fi[1]; f[atomi][2] += fi[2];\n      f[atomj][0] += fj[0]; f[atomj][1] += fj[1]; f[atomj][2] += fj[2];\n      f[atomk][0] += fk[0]; f[atomk][1] += fk[1]; f[atomk][2] += fk[2];\n\n      if (vflag_atom) {\n        rji[0] = -rij[0]; rji[1] = -rij[1]; rji[2] = -rij[2];\n        rki[0] = -rik[0]; rki[1] = -rik[1]; rki[2] = -rik[2];\n        v_tally3(atomi,atomj,atomk,fj,fk,rji,rki);\n      }\n    }\n  }\n\n  tmp = 0.0;\n  tmp2 = 0.0;\n  tmp3 = 0.0;\n  Etmp = 0.0;\n\n  REBO_neighs = REBO_firstneigh[j];\n  for (l = 0; l < REBO_numneigh[j]; l++) {\n    atoml = REBO_neighs[l];\n    if (atoml != atomi) {\n      ltype = map[type[atoml]];\n      rjl[0] = x[atomj][0]-x[atoml][0];\n      rjl[1] = x[atomj][1]-x[atoml][1];\n      rjl[2] = x[atomj][2]-x[atoml][2];\n      rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n      lamdaijl = 4.0*kronecker(jtype,1) *\n        ((rho[ltype][1]-rjlmag)-(rho[itype][1]-rijmag));\n      wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dS);\n      Nlj = nC[atoml]-(wjl*kronecker(jtype,0)) +\n        nH[atoml]-(wjl*kronecker(jtype,1));\n      cosijl = -1.0*((rij[0]*rjl[0])+(rij[1]*rjl[1])+(rij[2]*rjl[2])) /\n        (rijmag*rjlmag);\n      cosijl = MIN(cosijl,1.0);\n      cosijl = MAX(cosijl,-1.0);\n\n      // evaluate splines g and derivatives dg\n\n      g = gSpline(cosijl,NjiC+NjiH,jtype,&dgdc,&dgdN);\n      Etmp = Etmp+(wjl*g*exp(lamdaijl));\n      tmp3 = tmp3+(wjl*dgdN*exp(lamdaijl));\n      NconjtmpJ = NconjtmpJ+(kronecker(ltype,0)*wjl*Sp(Nlj,Nmin,Nmax,dS));\n    }\n  }\n\n  PjiS = 0.0;\n  dN2[0] = 0.0;\n  dN2[1] = 0.0;\n  PjiS = PijSpline(NjiC,NjiH,jtype,itype,dN2);\n  pji = 1.0/sqrt(1.0+Etmp+PjiS);\n  tmp = -0.5*cube(pji);\n\n  REBO_neighs = REBO_firstneigh[j];\n  for (l = 0; l < REBO_numneigh[j]; l++) {\n    atoml = REBO_neighs[l];\n    if (atoml != atomi) {\n      ltype = map[type[atoml]];\n      rjl[0] = x[atomj][0]-x[atoml][0];\n      rjl[1] = x[atomj][1]-x[atoml][1];\n      rjl[2] = x[atomj][2]-x[atoml][2];\n      rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n      lamdaijl = 4.0*kronecker(jtype,1) *\n        ((rho[ltype][1]-rjlmag)-(rho[itype][1]-rijmag));\n      wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dwjl);\n      cosijl = (-1.0*((rij[0]*rjl[0])+(rij[1]*rjl[1])+(rij[2]*rjl[2]))) /\n        (rijmag*rjlmag);\n      cosijl = MIN(cosijl,1.0);\n      cosijl = MAX(cosijl,-1.0);\n\n      dcosijldri[0] = (-rjl[0]/(rijmag*rjlmag)) -\n        (cosijl*rij[0]/(rijmag*rijmag));\n      dcosijldri[1] = (-rjl[1]/(rijmag*rjlmag)) -\n        (cosijl*rij[1]/(rijmag*rijmag));\n      dcosijldri[2] = (-rjl[2]/(rijmag*rjlmag)) -\n        (cosijl*rij[2]/(rijmag*rijmag));\n      dcosijldrj[0] = ((-rij[0]+rjl[0])/(rijmag*rjlmag)) +\n        (cosijl*((rij[0]/square(rijmag))-(rjl[0]/(rjlmag*rjlmag))));\n      dcosijldrj[1] = ((-rij[1]+rjl[1])/(rijmag*rjlmag)) +\n        (cosijl*((rij[1]/square(rijmag))-(rjl[1]/(rjlmag*rjlmag))));\n      dcosijldrj[2] = ((-rij[2]+rjl[2])/(rijmag*rjlmag)) +\n        (cosijl*((rij[2]/square(rijmag))-(rjl[2]/(rjlmag*rjlmag))));\n      dcosijldrl[0] = (rij[0]/(rijmag*rjlmag))+(cosijl*rjl[0]/(rjlmag*rjlmag));\n      dcosijldrl[1] = (rij[1]/(rijmag*rjlmag))+(cosijl*rjl[1]/(rjlmag*rjlmag));\n      dcosijldrl[2] = (rij[2]/(rijmag*rjlmag))+(cosijl*rjl[2]/(rjlmag*rjlmag));\n\n      // evaluate splines g and derivatives dg\n\n      g = gSpline(cosijl,NjiC+NjiH,jtype,&dgdc,&dgdN);\n      tmp2 = VA*.5*(tmp*wjl*dgdc*exp(lamdaijl));\n      fi[0] = -tmp2*dcosijldri[0];\n      fi[1] = -tmp2*dcosijldri[1];\n      fi[2] = -tmp2*dcosijldri[2];\n      fj[0] = -tmp2*dcosijldrj[0];\n      fj[1] = -tmp2*dcosijldrj[1];\n      fj[2] = -tmp2*dcosijldrj[2];\n      fl[0] = -tmp2*dcosijldrl[0];\n      fl[1] = -tmp2*dcosijldrl[1];\n      fl[2] = -tmp2*dcosijldrl[2];\n\n      tmp2 = VA*.5*(tmp*wjl*g*exp(lamdaijl)*4.0*kronecker(jtype,1));\n      fi[0] -= tmp2*(rij[0]/rijmag);\n      fi[1] -= tmp2*(rij[1]/rijmag);\n      fi[2] -= tmp2*(rij[2]/rijmag);\n      fj[0] -= tmp2*((-rjl[0]/rjlmag)-(rij[0]/rijmag));\n      fj[1] -= tmp2*((-rjl[1]/rjlmag)-(rij[1]/rijmag));\n      fj[2] -= tmp2*((-rjl[2]/rjlmag)-(rij[2]/rijmag));\n      fl[0] -= tmp2*(rjl[0]/rjlmag);\n      fl[1] -= tmp2*(rjl[1]/rjlmag);\n      fl[2] -= tmp2*(rjl[2]/rjlmag);\n\n      // coordination forces\n\n      // dwik forces\n\n      tmp2 = VA*.5*(tmp*dwjl*g*exp(lamdaijl))/rjlmag;\n      fj[0] -= tmp2*rjl[0];\n      fj[1] -= tmp2*rjl[1];\n      fj[2] -= tmp2*rjl[2];\n      fl[0] += tmp2*rjl[0];\n      fl[1] += tmp2*rjl[1];\n      fl[2] += tmp2*rjl[2];\n\n      // PIJ forces\n\n      tmp2 = VA*.5*(tmp*dN2[ltype]*dwjl)/rjlmag;\n      fj[0] -= tmp2*rjl[0];\n      fj[1] -= tmp2*rjl[1];\n      fj[2] -= tmp2*rjl[2];\n      fl[0] += tmp2*rjl[0];\n      fl[1] += tmp2*rjl[1];\n      fl[2] += tmp2*rjl[2];\n\n      // dgdN forces\n\n      tmp2 = VA*.5*(tmp*tmp3*dwjl)/rjlmag;\n      fj[0] -= tmp2*rjl[0];\n      fj[1] -= tmp2*rjl[1];\n      fj[2] -= tmp2*rjl[2];\n      fl[0] += tmp2*rjl[0];\n      fl[1] += tmp2*rjl[1];\n      fl[2] += tmp2*rjl[2];\n\n      f[atomi][0] += fi[0]; f[atomi][1] += fi[1]; f[atomi][2] += fi[2];\n      f[atomj][0] += fj[0]; f[atomj][1] += fj[1]; f[atomj][2] += fj[2];\n      f[atoml][0] += fl[0]; f[atoml][1] += fl[1]; f[atoml][2] += fl[2];\n\n      if (vflag_atom) {\n        rlj[0] = -rjl[0]; rlj[1] = -rjl[1]; rlj[2] = -rjl[2];\n        v_tally3(atomi,atomj,atoml,fi,fl,rij,rlj);\n      }\n    }\n  }\n\n  // evaluate Nij conj\n\n  Nijconj = 1.0+(NconjtmpI*NconjtmpI)+(NconjtmpJ*NconjtmpJ);\n  piRC = piRCSpline(NijC+NijH,NjiC+NjiH,Nijconj,itype,jtype,dN3);\n\n  // piRC forces\n\n  REBO_neighs_i = REBO_firstneigh[i];\n  for (k = 0; k < REBO_numneigh[i]; k++) {\n    atomk = REBO_neighs_i[k];\n    if (atomk !=atomj) {\n      ktype = map[type[atomk]];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n      Nki = nC[atomk]-(wik*kronecker(itype,0))+nH[atomk] -\n        (wik*kronecker(itype,1));\n      SpN = Sp(Nki,Nmin,Nmax,dNki);\n\n      tmp2 = VA*dN3[0]*dwik/rikmag;\n      f[atomi][0] -= tmp2*rik[0];\n      f[atomi][1] -= tmp2*rik[1];\n      f[atomi][2] -= tmp2*rik[2];\n      f[atomk][0] += tmp2*rik[0];\n      f[atomk][1] += tmp2*rik[1];\n      f[atomk][2] += tmp2*rik[2];\n\n      if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n      // due to kronecker(ktype, 0) term in contribution\n      // to NconjtmpI and later Nijconj\n      if (ktype != 0) continue;\n\n      tmp2 = VA*dN3[2]*(2.0*NconjtmpI*dwik*SpN)/rikmag;\n      f[atomi][0] -= tmp2*rik[0];\n      f[atomi][1] -= tmp2*rik[1];\n      f[atomi][2] -= tmp2*rik[2];\n      f[atomk][0] += tmp2*rik[0];\n      f[atomk][1] += tmp2*rik[1];\n      f[atomk][2] += tmp2*rik[2];\n\n      if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n      if (fabs(dNki) > TOL) {\n        REBO_neighs_k = REBO_firstneigh[atomk];\n        for (n = 0; n < REBO_numneigh[atomk]; n++) {\n          atomn = REBO_neighs_k[n];\n          if (atomn != atomi) {\n            ntype = map[type[atomn]];\n            rkn[0] = x[atomk][0]-x[atomn][0];\n            rkn[1] = x[atomk][1]-x[atomn][1];\n            rkn[2] = x[atomk][2]-x[atomn][2];\n            rknmag = sqrt((rkn[0]*rkn[0])+(rkn[1]*rkn[1])+(rkn[2]*rkn[2]));\n            Sp(rknmag,rcmin[ktype][ntype],rcmax[ktype][ntype],dwkn);\n\n            tmp2 = VA*dN3[2]*(2.0*NconjtmpI*wik*dNki*dwkn)/rknmag;\n            f[atomk][0] -= tmp2*rkn[0];\n            f[atomk][1] -= tmp2*rkn[1];\n            f[atomk][2] -= tmp2*rkn[2];\n            f[atomn][0] += tmp2*rkn[0];\n            f[atomn][1] += tmp2*rkn[1];\n            f[atomn][2] += tmp2*rkn[2];\n\n            if (vflag_atom) v_tally2(atomk,atomn,-tmp2,rkn);\n          }\n        }\n      }\n    }\n  }\n\n  // piRC forces\n\n  REBO_neighs = REBO_firstneigh[atomj];\n  for (l = 0; l < REBO_numneigh[atomj]; l++) {\n    atoml = REBO_neighs[l];\n    if (atoml !=atomi) {\n      ltype = map[type[atoml]];\n      rjl[0] = x[atomj][0]-x[atoml][0];\n      rjl[1] = x[atomj][1]-x[atoml][1];\n      rjl[2] = x[atomj][2]-x[atoml][2];\n      rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n      wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dwjl);\n      Nlj = nC[atoml]-(wjl*kronecker(jtype,0))+nH[atoml] -\n        (wjl*kronecker(jtype,1));\n      SpN = Sp(Nlj,Nmin,Nmax,dNlj);\n\n      tmp2 = VA*dN3[1]*dwjl/rjlmag;\n      f[atomj][0] -= tmp2*rjl[0];\n      f[atomj][1] -= tmp2*rjl[1];\n      f[atomj][2] -= tmp2*rjl[2];\n      f[atoml][0] += tmp2*rjl[0];\n      f[atoml][1] += tmp2*rjl[1];\n      f[atoml][2] += tmp2*rjl[2];\n\n      if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n      // due to kronecker(ltype, 0) term in contribution\n      // to NconjtmpJ and later Nijconj\n      if (ltype != 0) continue;\n\n      tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*dwjl*SpN)/rjlmag;\n      f[atomj][0] -= tmp2*rjl[0];\n      f[atomj][1] -= tmp2*rjl[1];\n      f[atomj][2] -= tmp2*rjl[2];\n      f[atoml][0] += tmp2*rjl[0];\n      f[atoml][1] += tmp2*rjl[1];\n      f[atoml][2] += tmp2*rjl[2];\n\n      if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n      if (fabs(dNlj) > TOL) {\n        REBO_neighs_l = REBO_firstneigh[atoml];\n        for (n = 0; n < REBO_numneigh[atoml]; n++) {\n          atomn = REBO_neighs_l[n];\n          if (atomn != atomj) {\n            ntype = map[type[atomn]];\n            rln[0] = x[atoml][0]-x[atomn][0];\n            rln[1] = x[atoml][1]-x[atomn][1];\n            rln[2] = x[atoml][2]-x[atomn][2];\n            rlnmag = sqrt((rln[0]*rln[0])+(rln[1]*rln[1])+(rln[2]*rln[2]));\n            Sp(rlnmag,rcmin[ltype][ntype],rcmax[ltype][ntype],dwln);\n\n            tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*wjl*dNlj*dwln)/rlnmag;\n            f[atoml][0] -= tmp2*rln[0];\n            f[atoml][1] -= tmp2*rln[1];\n            f[atoml][2] -= tmp2*rln[2];\n            f[atomn][0] += tmp2*rln[0];\n            f[atomn][1] += tmp2*rln[1];\n            f[atomn][2] += tmp2*rln[2];\n\n            if (vflag_atom) v_tally2(atoml,atomn,-tmp2,rln);\n          }\n        }\n      }\n    }\n  }\n\n  Tij = 0.0;\n  dN3[0] = 0.0;\n  dN3[1] = 0.0;\n  dN3[2] = 0.0;\n  if (itype == 0 && jtype == 0)\n    Tij=TijSpline((NijC+NijH),(NjiC+NjiH),Nijconj,dN3);\n  Etmp = 0.0;\n\n  if (fabs(Tij) > TOL) {\n    atom2 = atomi;\n    atom3 = atomj;\n    r32[0] = x[atom3][0]-x[atom2][0];\n    r32[1] = x[atom3][1]-x[atom2][1];\n    r32[2] = x[atom3][2]-x[atom2][2];\n    r32mag = sqrt((r32[0]*r32[0])+(r32[1]*r32[1])+(r32[2]*r32[2]));\n    r23[0] = -r32[0];\n    r23[1] = -r32[1];\n    r23[2] = -r32[2];\n    r23mag = r32mag;\n    REBO_neighs_i = REBO_firstneigh[i];\n    for (k = 0; k < REBO_numneigh[i]; k++) {\n      atomk = REBO_neighs_i[k];\n      atom1 = atomk;\n      ktype = map[type[atomk]];\n      if (atomk != atomj) {\n        r21[0] = x[atom2][0]-x[atom1][0];\n        r21[1] = x[atom2][1]-x[atom1][1];\n        r21[2] = x[atom2][2]-x[atom1][2];\n        r21mag = sqrt(r21[0]*r21[0] + r21[1]*r21[1] + r21[2]*r21[2]);\n        cos321 = -1.0*((r21[0]*r32[0])+(r21[1]*r32[1])+(r21[2]*r32[2])) /\n          (r21mag*r32mag);\n        cos321 = MIN(cos321,1.0);\n        cos321 = MAX(cos321,-1.0);\n        Sp2(cos321,thmin,thmax,dcut321);\n        sin321 = sqrt(1.0 - cos321*cos321);\n        if ((sin321 > TOL) && (r21mag > TOL)) { // XXX was sin321 != 0.0\n          sink2i = 1.0/(sin321*sin321);\n          rik2i = 1.0/(r21mag*r21mag);\n          rr = (r23mag*r23mag)-(r21mag*r21mag);\n          rjk[0] = r21[0]-r23[0];\n          rjk[1] = r21[1]-r23[1];\n          rjk[2] = r21[2]-r23[2];\n          rjk2 = (rjk[0]*rjk[0])+(rjk[1]*rjk[1])+(rjk[2]*rjk[2]);\n          rijrik = 2.0*r23mag*r21mag;\n          rik2 = r21mag*r21mag;\n          dctik = (-rr+rjk2)/(rijrik*rik2);\n          dctij = (rr+rjk2)/(rijrik*r23mag*r23mag);\n          dctjk = -2.0/rijrik;\n          w21 = Sp(r21mag,rcmin[itype][ktype],rcmaxp[itype][ktype],dw21);\n          rijmag = r32mag;\n          rikmag = r21mag;\n          rij2 = r32mag*r32mag;\n          rik2 = r21mag*r21mag;\n          costmp = 0.5*(rij2+rik2-rjk2)/rijmag/rikmag;\n          tspjik = Sp2(costmp,thmin,thmax,dtsjik);\n          dtsjik = -dtsjik;\n\n          REBO_neighs_j = REBO_firstneigh[j];\n          for (l = 0; l < REBO_numneigh[j]; l++) {\n            atoml = REBO_neighs_j[l];\n            atom4 = atoml;\n            ltype = map[type[atoml]];\n            if (!(atoml == atomi || atoml == atomk)) {\n              r34[0] = x[atom3][0]-x[atom4][0];\n              r34[1] = x[atom3][1]-x[atom4][1];\n              r34[2] = x[atom3][2]-x[atom4][2];\n              r34mag = sqrt((r34[0]*r34[0])+(r34[1]*r34[1])+(r34[2]*r34[2]));\n              cos234 = (r32[0]*r34[0] + r32[1]*r34[1] + r32[2]*r34[2]) /\n                (r32mag*r34mag);\n              cos234 = MIN(cos234,1.0);\n              cos234 = MAX(cos234,-1.0);\n              sin234 = sqrt(1.0 - cos234*cos234);\n\n              if ((sin234 > TOL) && (r34mag > TOL)) {  // XXX was sin234 != 0.0\n                sinl2i = 1.0/(sin234*sin234);\n                rjl2i = 1.0/(r34mag*r34mag);\n                w34 = Sp(r34mag,rcmin[jtype][ltype],rcmaxp[jtype][ltype],dw34);\n                rr = (r23mag*r23mag)-(r34mag*r34mag);\n                ril[0] = r23[0]+r34[0];\n                ril[1] = r23[1]+r34[1];\n                ril[2] = r23[2]+r34[2];\n                ril2 = (ril[0]*ril[0])+(ril[1]*ril[1])+(ril[2]*ril[2]);\n                rijrjl = 2.0*r23mag*r34mag;\n                rjl2 = r34mag*r34mag;\n                dctjl = (-rr+ril2)/(rijrjl*rjl2);\n                dctji = (rr+ril2)/(rijrjl*r23mag*r23mag);\n                dctil = -2.0/rijrjl;\n                rjlmag = r34mag;\n                rjl2 = r34mag*r34mag;\n                costmp = 0.5*(rij2+rjl2-ril2)/rijmag/rjlmag;\n                tspijl = Sp2(costmp,thmin,thmax,dtsijl);\n                dtsijl = -dtsijl;\n                prefactor = VA*Tij;\n\n                cross321[0] = (r32[1]*r21[2])-(r32[2]*r21[1]);\n                cross321[1] = (r32[2]*r21[0])-(r32[0]*r21[2]);\n                cross321[2] = (r32[0]*r21[1])-(r32[1]*r21[0]);\n                cross234[0] = (r23[1]*r34[2])-(r23[2]*r34[1]);\n                cross234[1] = (r23[2]*r34[0])-(r23[0]*r34[2]);\n                cross234[2] = (r23[0]*r34[1])-(r23[1]*r34[0]);\n\n                cwnum = (cross321[0]*cross234[0]) +\n                  (cross321[1]*cross234[1]) + (cross321[2]*cross234[2]);\n                cwnom = r21mag*r34mag*r23mag*r23mag*sin321*sin234;\n                om1234 = cwnum/cwnom;\n                cw = om1234;\n                Etmp += ((1.0-square(om1234))*w21*w34) *\n                  (1.0-tspjik)*(1.0-tspijl);\n\n                dt1dik = (rik2i)-(dctik*sink2i*cos321);\n                dt1djk = (-dctjk*sink2i*cos321);\n                dt1djl = (rjl2i)-(dctjl*sinl2i*cos234);\n                dt1dil = (-dctil*sinl2i*cos234);\n                dt1dij = (2.0/(r23mag*r23mag))-(dctij*sink2i*cos321) -\n                  (dctji*sinl2i*cos234);\n\n                dt2dik[0] = (-r23[2]*cross234[1])+(r23[1]*cross234[2]);\n                dt2dik[1] = (-r23[0]*cross234[2])+(r23[2]*cross234[0]);\n                dt2dik[2] = (-r23[1]*cross234[0])+(r23[0]*cross234[1]);\n\n                dt2djl[0] = (-r23[1]*cross321[2])+(r23[2]*cross321[1]);\n                dt2djl[1] = (-r23[2]*cross321[0])+(r23[0]*cross321[2]);\n                dt2djl[2] = (-r23[0]*cross321[1])+(r23[1]*cross321[0]);\n\n                dt2dij[0] = (r21[2]*cross234[1])-(r34[2]*cross321[1]) -\n                  (r21[1]*cross234[2])+(r34[1]*cross321[2]);\n                dt2dij[1] = (r21[0]*cross234[2])-(r34[0]*cross321[2]) -\n                  (r21[2]*cross234[0])+(r34[2]*cross321[0]);\n                dt2dij[2] = (r21[1]*cross234[0])-(r34[1]*cross321[0]) -\n                  (r21[0]*cross234[1])+(r34[0]*cross321[1]);\n\n                aa = (prefactor*2.0*cw/cwnom)*w21*w34 *\n                  (1.0-tspjik)*(1.0-tspijl);\n                aaa2 = -prefactor*(1.0-square(om1234)) * w21*w34;\n                at2 = aa*cwnum;\n\n                fcijpc = (-dt1dij*at2)+(aaa2*dtsjik*dctij*(1.0-tspijl)) +\n                  (aaa2*dtsijl*dctji*(1.0-tspjik));\n                fcikpc = (-dt1dik*at2)+(aaa2*dtsjik*dctik*(1.0-tspijl));\n                fcjlpc = (-dt1djl*at2)+(aaa2*dtsijl*dctjl*(1.0-tspjik));\n                fcjkpc = (-dt1djk*at2)+(aaa2*dtsjik*dctjk*(1.0-tspijl));\n                fcilpc = (-dt1dil*at2)+(aaa2*dtsijl*dctil*(1.0-tspjik));\n\n                F23[0] = (fcijpc*r23[0])+(aa*dt2dij[0]);\n                F23[1] = (fcijpc*r23[1])+(aa*dt2dij[1]);\n                F23[2] = (fcijpc*r23[2])+(aa*dt2dij[2]);\n\n                F12[0] = (fcikpc*r21[0])+(aa*dt2dik[0]);\n                F12[1] = (fcikpc*r21[1])+(aa*dt2dik[1]);\n                F12[2] = (fcikpc*r21[2])+(aa*dt2dik[2]);\n\n                F34[0] = (fcjlpc*r34[0])+(aa*dt2djl[0]);\n                F34[1] = (fcjlpc*r34[1])+(aa*dt2djl[1]);\n                F34[2] = (fcjlpc*r34[2])+(aa*dt2djl[2]);\n\n                F31[0] = (fcjkpc*rjk[0]);\n                F31[1] = (fcjkpc*rjk[1]);\n                F31[2] = (fcjkpc*rjk[2]);\n\n                F24[0] = (fcilpc*ril[0]);\n                F24[1] = (fcilpc*ril[1]);\n                F24[2] = (fcilpc*ril[2]);\n\n                f1[0] = -F12[0]-F31[0];\n                f1[1] = -F12[1]-F31[1];\n                f1[2] = -F12[2]-F31[2];\n                f2[0] = F23[0]+F12[0]+F24[0];\n                f2[1] = F23[1]+F12[1]+F24[1];\n                f2[2] = F23[2]+F12[2]+F24[2];\n                f3[0] = -F23[0]+F34[0]+F31[0];\n                f3[1] = -F23[1]+F34[1]+F31[1];\n                f3[2] = -F23[2]+F34[2]+F31[2];\n                f4[0] = -F34[0]-F24[0];\n                f4[1] = -F34[1]-F24[1];\n                f4[2] = -F34[2]-F24[2];\n\n                // coordination forces\n\n                tmp2 = VA*Tij*((1.0-(om1234*om1234))) *\n                  (1.0-tspjik)*(1.0-tspijl)*dw21*w34/r21mag;\n                f2[0] -= tmp2*r21[0];\n                f2[1] -= tmp2*r21[1];\n                f2[2] -= tmp2*r21[2];\n                f1[0] += tmp2*r21[0];\n                f1[1] += tmp2*r21[1];\n                f1[2] += tmp2*r21[2];\n\n                tmp2 = VA*Tij*((1.0-(om1234*om1234))) *\n                  (1.0-tspjik)*(1.0-tspijl)*w21*dw34/r34mag;\n                f3[0] -= tmp2*r34[0];\n                f3[1] -= tmp2*r34[1];\n                f3[2] -= tmp2*r34[2];\n                f4[0] += tmp2*r34[0];\n                f4[1] += tmp2*r34[1];\n                f4[2] += tmp2*r34[2];\n\n                f[atom1][0] += f1[0]; f[atom1][1] += f1[1];\n                f[atom1][2] += f1[2];\n                f[atom2][0] += f2[0]; f[atom2][1] += f2[1];\n                f[atom2][2] += f2[2];\n                f[atom3][0] += f3[0]; f[atom3][1] += f3[1];\n                f[atom3][2] += f3[2];\n                f[atom4][0] += f4[0]; f[atom4][1] += f4[1];\n                f[atom4][2] += f4[2];\n\n                if (vflag_atom) {\n                  r13[0] = -rjk[0]; r13[1] = -rjk[1]; r13[2] = -rjk[2];\n                  r43[0] = -r34[0]; r43[1] = -r34[1]; r43[2] = -r34[2];\n                  v_tally4(atom1,atom2,atom3,atom4,f1,f2,f4,r13,r23,r43);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Tij forces now that we have Etmp\n\n    REBO_neighs = REBO_firstneigh[i];\n    for (k = 0; k < REBO_numneigh[i]; k++) {\n      atomk = REBO_neighs[k];\n      if (atomk != atomj) {\n        ktype = map[type[atomk]];\n        rik[0] = x[atomi][0]-x[atomk][0];\n        rik[1] = x[atomi][1]-x[atomk][1];\n        rik[2] = x[atomi][2]-x[atomk][2];\n        rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n        wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n        Nki = nC[atomk]-(wik*kronecker(itype,0))+nH[atomk] -\n          (wik*kronecker(itype,1));\n        SpN = Sp(Nki,Nmin,Nmax,dNki);\n\n        tmp2 = VA*dN3[0]*dwik*Etmp/rikmag;\n        f[atomi][0] -= tmp2*rik[0];\n        f[atomi][1] -= tmp2*rik[1];\n        f[atomi][2] -= tmp2*rik[2];\n        f[atomk][0] += tmp2*rik[0];\n        f[atomk][1] += tmp2*rik[1];\n        f[atomk][2] += tmp2*rik[2];\n\n        if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n        // due to kronecker(ktype, 0) term in contribution\n        // to NconjtmpI and later Nijconj\n        if (ktype != 0) continue;\n\n        tmp2 = VA*dN3[2]*(2.0*NconjtmpI*dwik*SpN)*Etmp/rikmag;\n        f[atomi][0] -= tmp2*rik[0];\n        f[atomi][1] -= tmp2*rik[1];\n        f[atomi][2] -= tmp2*rik[2];\n        f[atomk][0] += tmp2*rik[0];\n        f[atomk][1] += tmp2*rik[1];\n        f[atomk][2] += tmp2*rik[2];\n\n        if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n        if (fabs(dNki) > TOL) {\n          REBO_neighs_k = REBO_firstneigh[atomk];\n          for (n = 0; n < REBO_numneigh[atomk]; n++) {\n            atomn = REBO_neighs_k[n];\n            ntype = map[type[atomn]];\n            if (atomn != atomi) {\n              rkn[0] = x[atomk][0]-x[atomn][0];\n              rkn[1] = x[atomk][1]-x[atomn][1];\n              rkn[2] = x[atomk][2]-x[atomn][2];\n              rknmag = sqrt((rkn[0]*rkn[0])+(rkn[1]*rkn[1])+(rkn[2]*rkn[2]));\n              Sp(rknmag,rcmin[ktype][ntype],rcmax[ktype][ntype],dwkn);\n\n              tmp2 = VA*dN3[2]*(2.0*NconjtmpI*wik*dNki*dwkn)*Etmp/rknmag;\n              f[atomk][0] -= tmp2*rkn[0];\n              f[atomk][1] -= tmp2*rkn[1];\n              f[atomk][2] -= tmp2*rkn[2];\n              f[atomn][0] += tmp2*rkn[0];\n              f[atomn][1] += tmp2*rkn[1];\n              f[atomn][2] += tmp2*rkn[2];\n\n              if (vflag_atom) v_tally2(atomk,atomn,-tmp2,rkn);\n            }\n          }\n        }\n      }\n    }\n\n    // Tij forces\n\n    REBO_neighs = REBO_firstneigh[j];\n    for (l = 0; l < REBO_numneigh[j]; l++) {\n      atoml = REBO_neighs[l];\n      if (atoml != atomi) {\n        ltype = map[type[atoml]];\n        rjl[0] = x[atomj][0]-x[atoml][0];\n        rjl[1] = x[atomj][1]-x[atoml][1];\n        rjl[2] = x[atomj][2]-x[atoml][2];\n        rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n        wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dwjl);\n        Nlj = nC[atoml]-(wjl*kronecker(jtype,0))+nH[atoml] -\n          (wjl*kronecker(jtype,1));\n        SpN = Sp(Nlj,Nmin,Nmax,dNlj);\n\n        tmp2 = VA*dN3[1]*dwjl*Etmp/rjlmag;\n        f[atomj][0] -= tmp2*rjl[0];\n        f[atomj][1] -= tmp2*rjl[1];\n        f[atomj][2] -= tmp2*rjl[2];\n        f[atoml][0] += tmp2*rjl[0];\n        f[atoml][1] += tmp2*rjl[1];\n        f[atoml][2] += tmp2*rjl[2];\n\n        if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n        // due to kronecker(ltype, 0) term in contribution\n        // to NconjtmpJ and later Nijconj\n        if (ltype != 0) continue;\n\n        tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*dwjl*SpN)*Etmp/rjlmag;\n        f[atomj][0] -= tmp2*rjl[0];\n        f[atomj][1] -= tmp2*rjl[1];\n        f[atomj][2] -= tmp2*rjl[2];\n        f[atoml][0] += tmp2*rjl[0];\n        f[atoml][1] += tmp2*rjl[1];\n        f[atoml][2] += tmp2*rjl[2];\n\n        if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n        if (fabs(dNlj) > TOL) {\n          REBO_neighs_l = REBO_firstneigh[atoml];\n          for (n = 0; n < REBO_numneigh[atoml]; n++) {\n            atomn = REBO_neighs_l[n];\n            ntype = map[type[atomn]];\n            if (atomn !=atomj) {\n              rln[0] = x[atoml][0]-x[atomn][0];\n              rln[1] = x[atoml][1]-x[atomn][1];\n              rln[2] = x[atoml][2]-x[atomn][2];\n              rlnmag = sqrt((rln[0]*rln[0])+(rln[1]*rln[1])+(rln[2]*rln[2]));\n              Sp(rlnmag,rcmin[ltype][ntype],rcmax[ltype][ntype],dwln);\n\n              tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*wjl*dNlj*dwln)*Etmp/rlnmag;\n              f[atoml][0] -= tmp2*rln[0];\n              f[atoml][1] -= tmp2*rln[1];\n              f[atoml][2] -= tmp2*rln[2];\n              f[atomn][0] += tmp2*rln[0];\n              f[atomn][1] += tmp2*rln[1];\n              f[atomn][2] += tmp2*rln[2];\n\n              if (vflag_atom) v_tally2(atoml,atomn,-tmp2,rln);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  bij = (0.5*(pij+pji))+piRC+(Tij*Etmp);\n  return bij;\n}\n\n/* ----------------------------------------------------------------------\n   Bij* function\n------------------------------------------------------------------------- \n\nThis function calculates S(t_b(b_ij*)) as specified in the AIREBO paper.\nTo do so, it needs to compute b_ij*, i.e. the bondorder given that the\natoms i and j are placed a ficticious distance rijmag_mod apart.\nNow there are two approaches to calculate the resulting forces:\n1. Carry through the ficticious distance and corresponding vector\n   rij_mod, correcting afterwards using the derivative of r/|r|.\n2. Perform all the calculations using the real distance, and do not\n   use a correction, only using rijmag_mod where necessary.\nThis code opts for (2). Mathematically, the approaches are equivalent\nif implemented correctly, since in terms where only the normalized\nvector is used, both calculations necessarily lead to the same result\nsince if f(x) = g(x/|x|) then for x = y/|y| f(x) = g(y/|y|/1).\nThe actual modified distance is only used in the lamda terms.\nNote that these do not contribute to the forces between i and j, since\nrijmag_mod is a constant and the corresponding derivatives are\naccordingly zero.\nThis function should be kept in sync with bondorder(), i.e. changes\nthere probably also need to be performed here.\n\nThe OpenKIM Fortran implementation chooses option (1) instead, which\nmeans that the internal values computed by the two codes are not\ndirectly comparable.\nNote that of 7/2017 the OpenKIM code contains an issue where the it\nassumes dt2dij[] to be zero (since it is a r_ij derivative). This is\nincorrect since dt2dij is not a derivative of the scalar distance r_ij,\nbut of the vector r_ij.\n\n*/\n\ndouble PairAIREBO::bondorderLJ(int i, int j, double rij_mod[3], double rijmag_mod,\n                               double VA, double rij[3], double rijmag,\n                               double **f, int vflag_atom)\n{\n  int atomi,atomj,k,n,l,atomk,atoml,atomn,atom1,atom2,atom3,atom4;\n  int itype,jtype,ktype,ltype,ntype;\n  double rik[3],rjl[3],rkn[3],rji[3],rki[3],rlj[3],rknmag,dNki,dwjl,bij;\n  double NijC,NijH,NjiC,NjiH,wik,dwik,dwkn,wjl;\n  double rikmag,rjlmag,cosjik,cosijl,g,tmp2,tmp3;\n  double Etmp,pij,tmp,wij,dwij,NconjtmpI,NconjtmpJ,Nki,Nlj,dS;\n  double lamdajik,lamdaijl,dgdc,dgdN,pji,Nijconj,piRC;\n  double dcosjikdri[3],dcosijldri[3],dcosjikdrk[3];\n  double dN2[2],dN3[3];\n  double dcosjikdrj[3],dcosijldrj[3],dcosijldrl[3];\n  double Tij;\n  double r32[3],r32mag,cos321,r43[3],r13[3];\n  double dNlj;\n  double om1234,rln[3];\n  double rlnmag,dwln,r23[3],r23mag,r21[3],r21mag;\n  double w21,dw21,r34[3],r34mag,cos234,w34,dw34;\n  double cross321[3],cross234[3],prefactor,SpN;\n  double fcikpc,fcjlpc,fcjkpc,fcilpc,fcijpc;\n  double dt2dik[3],dt2djl[3],dt2dij[3],aa,aaa2,at2,cw,cwnum,cwnom;\n  double sin321,sin234,rr,rijrik,rijrjl,rjk2,rik2,ril2,rjl2;\n  double dctik,dctjk,dctjl,dctij,dctji,dctil,rik2i,rjl2i,sink2i,sinl2i;\n  double rjk[3],ril[3],dt1dik,dt1djk,dt1djl,dt1dil,dt1dij;\n  double F23[3],F12[3],F34[3],F31[3],F24[3],fi[3],fj[3],fk[3],fl[3];\n  double f1[3],f2[3],f3[3],f4[4];\n  double PijS,PjiS;\n  double rij2,tspjik,dtsjik,tspijl,dtsijl,costmp;\n  int *REBO_neighs,*REBO_neighs_i,*REBO_neighs_j,*REBO_neighs_k,*REBO_neighs_l;\n  double tmppij,tmppji,dN2PIJ[2],dN2PJI[2],dN3piRC[3],dN3Tij[3];\n  double tmp3pij,tmp3pji,Stb,dStb;\n\n  double **x = atom->x;\n  int *type = atom->type;\n\n  atomi = i;\n  atomj = j;\n  itype = map[type[atomi]];\n  jtype = map[type[atomj]];\n  wij = Sp(rijmag,rcmin[itype][jtype],rcmax[itype][jtype],dwij);\n  NijC = nC[atomi]-(wij*kronecker(jtype,0));\n  NijH = nH[atomi]-(wij*kronecker(jtype,1));\n  NjiC = nC[atomj]-(wij*kronecker(itype,0));\n  NjiH = nH[atomj]-(wij*kronecker(itype,1));\n  bij = 0.0;\n  tmp = 0.0;\n  tmp2 = 0.0;\n  tmp3 = 0.0;\n  dgdc = 0.0;\n  dgdN = 0.0;\n  NconjtmpI = 0.0;\n  NconjtmpJ = 0.0;\n  Etmp = 0.0;\n  Stb = 0.0;\n  dStb = 0.0;\n\n  REBO_neighs = REBO_firstneigh[i];\n  for (k = 0; k < REBO_numneigh[i]; k++) {\n    atomk = REBO_neighs[k];\n    if (atomk != atomj) {\n      ktype = map[type[atomk]];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      lamdajik = 4.0*kronecker(itype,1) *\n        ((rho[ktype][1]-rikmag)-(rho[jtype][1]-rijmag_mod));\n      wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dS);\n      Nki = nC[atomk]-(wik*kronecker(itype,0))+\n        nH[atomk]-(wik*kronecker(itype,1));\n      cosjik = ((rij[0]*rik[0])+(rij[1]*rik[1])+(rij[2]*rik[2])) /\n        (rijmag*rikmag);\n      cosjik = MIN(cosjik,1.0);\n      cosjik = MAX(cosjik,-1.0);\n\n      // evaluate splines g and derivatives dg\n\n      g = gSpline(cosjik,(NijC+NijH),itype,&dgdc,&dgdN);\n      Etmp += (wik*g*exp(lamdajik));\n      tmp3 += (wik*dgdN*exp(lamdajik));\n      NconjtmpI = NconjtmpI+(kronecker(ktype,0)*wik*Sp(Nki,Nmin,Nmax,dS));\n    }\n  }\n\n  PijS = 0.0;\n  dN2PIJ[0] = 0.0;\n  dN2PIJ[1] = 0.0;\n  PijS = PijSpline(NijC,NijH,itype,jtype,dN2PIJ);\n  pij = 1.0/sqrt(1.0+Etmp+PijS);\n  tmppij = -.5*cube(pij);\n  tmp3pij = tmp3;\n\n  tmp = 0.0;\n  tmp2 = 0.0;\n  tmp3 = 0.0;\n  Etmp = 0.0;\n\n  REBO_neighs = REBO_firstneigh[j];\n  for (l = 0; l < REBO_numneigh[j]; l++) {\n    atoml = REBO_neighs[l];\n    if (atoml != atomi) {\n      ltype = map[type[atoml]];\n      rjl[0] = x[atomj][0]-x[atoml][0];\n      rjl[1] = x[atomj][1]-x[atoml][1];\n      rjl[2] = x[atomj][2]-x[atoml][2];\n      rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n      lamdaijl = 4.0*kronecker(jtype,1) *\n        ((rho[ltype][1]-rjlmag)-(rho[itype][1]-rijmag_mod));\n      wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dS);\n      Nlj = nC[atoml]-(wjl*kronecker(jtype,0))+nH[atoml] -\n        (wjl*kronecker(jtype,1));\n      cosijl = -1.0*((rij[0]*rjl[0])+(rij[1]*rjl[1])+(rij[2]*rjl[2])) /\n        (rijmag*rjlmag);\n      cosijl = MIN(cosijl,1.0);\n      cosijl = MAX(cosijl,-1.0);\n\n      // evaluate splines g and derivatives dg\n\n      g = gSpline(cosijl,NjiC+NjiH,jtype,&dgdc,&dgdN);\n      Etmp += (wjl*g*exp(lamdaijl));\n      tmp3 += (wjl*dgdN*exp(lamdaijl));\n      NconjtmpJ = NconjtmpJ+(kronecker(ltype,0)*wjl*Sp(Nlj,Nmin,Nmax,dS));\n    }\n  }\n\n  PjiS = 0.0;\n  dN2PJI[0] = 0.0;\n  dN2PJI[1] = 0.0;\n  PjiS = PijSpline(NjiC,NjiH,jtype,itype,dN2PJI);\n  pji = 1.0/sqrt(1.0+Etmp+PjiS);\n  tmppji = -.5*cube(pji);\n  tmp3pji = tmp3;\n\n  // evaluate Nij conj\n\n  Nijconj = 1.0+(NconjtmpI*NconjtmpI)+(NconjtmpJ*NconjtmpJ);\n  piRC = piRCSpline(NijC+NijH,NjiC+NjiH,Nijconj,itype,jtype,dN3piRC);\n\n  Tij = 0.0;\n  dN3Tij[0] = 0.0;\n  dN3Tij[1] = 0.0;\n  dN3Tij[2] = 0.0;\n  if (itype == 0 && jtype == 0)\n    Tij=TijSpline((NijC+NijH),(NjiC+NjiH),Nijconj,dN3Tij);\n  Etmp = 0.0;\n\n  if (fabs(Tij) > TOL) {\n    atom2 = atomi;\n    atom3 = atomj;\n    r32[0] = x[atom3][0]-x[atom2][0];\n    r32[1] = x[atom3][1]-x[atom2][1];\n    r32[2] = x[atom3][2]-x[atom2][2];\n    r32mag = sqrt((r32[0]*r32[0])+(r32[1]*r32[1])+(r32[2]*r32[2]));\n    r23[0] = -r32[0];\n    r23[1] = -r32[1];\n    r23[2] = -r32[2];\n    r23mag = r32mag;\n    REBO_neighs_i = REBO_firstneigh[i];\n    for (k = 0; k < REBO_numneigh[i]; k++) {\n      atomk = REBO_neighs_i[k];\n      atom1 = atomk;\n      ktype = map[type[atomk]];\n      if (atomk != atomj) {\n        r21[0] = x[atom2][0]-x[atom1][0];\n        r21[1] = x[atom2][1]-x[atom1][1];\n        r21[2] = x[atom2][2]-x[atom1][2];\n        r21mag = sqrt(r21[0]*r21[0] + r21[1]*r21[1] + r21[2]*r21[2]);\n        cos321 = -1.0*((r21[0]*r32[0])+(r21[1]*r32[1])+(r21[2]*r32[2])) /\n          (r21mag*r32mag);\n        cos321 = MIN(cos321,1.0);\n        cos321 = MAX(cos321,-1.0);\n        sin321 = sqrt(1.0 - cos321*cos321);\n        if ((sin321 > TOL) && (r21mag > TOL)) { // XXX was sin321 != 0.0\n          w21 = Sp(r21mag,rcmin[itype][ktype],rcmaxp[itype][ktype],dw21); \n          tspjik = Sp2(cos321,thmin,thmax,dtsjik);\n\n          REBO_neighs_j = REBO_firstneigh[j];\n          for (l = 0; l < REBO_numneigh[j]; l++) {\n            atoml = REBO_neighs_j[l];\n            atom4 = atoml;\n            ltype = map[type[atoml]];\n            if (!(atoml == atomi || atoml == atomk)) {\n              r34[0] = x[atom3][0]-x[atom4][0];\n              r34[1] = x[atom3][1]-x[atom4][1];\n              r34[2] = x[atom3][2]-x[atom4][2];\n              r34mag = sqrt((r34[0]*r34[0])+(r34[1]*r34[1])+(r34[2]*r34[2]));\n              cos234 = (r32[0]*r34[0] + r32[1]*r34[1] + r32[2]*r34[2]) /\n                (r32mag*r34mag);\n              cos234 = MIN(cos234,1.0);\n              cos234 = MAX(cos234,-1.0);\n              sin234 = sqrt(1.0 - cos234*cos234);\n\n              if ((sin234 > TOL) && (r34mag > TOL)) {  // XXX was sin234 != 0.0\n                w34 = Sp(r34mag,rcmin[jtype][ltype],rcmaxp[jtype][ltype],dw34);\n                tspijl = Sp2(cos234,thmin,thmax,dtsijl);\n\n                cross321[0] = (r32[1]*r21[2])-(r32[2]*r21[1]);\n                cross321[1] = (r32[2]*r21[0])-(r32[0]*r21[2]);\n                cross321[2] = (r32[0]*r21[1])-(r32[1]*r21[0]);\n                cross234[0] = (r23[1]*r34[2])-(r23[2]*r34[1]);\n                cross234[1] = (r23[2]*r34[0])-(r23[0]*r34[2]);\n                cross234[2] = (r23[0]*r34[1])-(r23[1]*r34[0]);\n\n                cwnum = (cross321[0]*cross234[0]) +\n                  (cross321[1]*cross234[1]) + (cross321[2]*cross234[2]);\n                cwnom = r21mag*r34mag*r23mag*r23mag*sin321*sin234;\n                om1234 = cwnum/cwnom;\n                cw = om1234;\n                Etmp += ((1.0-square(om1234))*w21*w34) *\n                  (1.0-tspjik)*(1.0-tspijl);\n\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  bij = (.5*(pij+pji))+piRC+(Tij*Etmp);\n  Stb = Sp2(bij,bLJmin[itype][jtype],bLJmax[itype][jtype],dStb);\n  VA = VA*dStb;\n\n  if (dStb != 0.0) {\n    tmp = tmppij;\n    dN2[0] = dN2PIJ[0];\n    dN2[1] = dN2PIJ[1];\n    tmp3 = tmp3pij;\n\n    // pij forces\n\n    REBO_neighs_i = REBO_firstneigh[i];\n    for (k = 0; k < REBO_numneigh[i]; k++) {\n      atomk = REBO_neighs_i[k];\n      ktype = map[type[atomk]];\n      if (atomk != atomj) {\n        lamdajik = 0.0;\n        rik[0] = x[atomi][0]-x[atomk][0];\n        rik[1] = x[atomi][1]-x[atomk][1];\n        rik[2] = x[atomi][2]-x[atomk][2];\n        rikmag = sqrt(rik[0]*rik[0] + rik[1]*rik[1] + rik[2]*rik[2]);\n        lamdajik = 4.0*kronecker(itype,1) *\n          ((rho[ktype][1]-rikmag)-(rho[jtype][1]-rijmag_mod));\n        wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n        cosjik = (rij[0]*rik[0] + rij[1]*rik[1] + rij[2]*rik[2]) /\n          (rijmag*rikmag);\n        cosjik = MIN(cosjik,1.0);\n        cosjik = MAX(cosjik,-1.0);\n\n        dcosjikdri[0] = ((rij[0]+rik[0])/(rijmag*rikmag)) -\n          (cosjik*((rij[0]/(rijmag*rijmag))+(rik[0]/(rikmag*rikmag))));\n        dcosjikdri[1] = ((rij[1]+rik[1])/(rijmag*rikmag)) -\n          (cosjik*((rij[1]/(rijmag*rijmag))+(rik[1]/(rikmag*rikmag))));\n        dcosjikdri[2] = ((rij[2]+rik[2])/(rijmag*rikmag)) -\n          (cosjik*((rij[2]/(rijmag*rijmag))+(rik[2]/(rikmag*rikmag))));\n        dcosjikdrk[0] = (-rij[0]/(rijmag*rikmag)) +\n          (cosjik*(rik[0]/(rikmag*rikmag)));\n        dcosjikdrk[1] = (-rij[1]/(rijmag*rikmag)) +\n          (cosjik*(rik[1]/(rikmag*rikmag)));\n        dcosjikdrk[2] = (-rij[2]/(rijmag*rikmag)) +\n          (cosjik*(rik[2]/(rikmag*rikmag)));\n        dcosjikdrj[0] = (-rik[0]/(rijmag*rikmag)) +\n          (cosjik*(rij[0]/(rijmag*rijmag)));\n        dcosjikdrj[1] = (-rik[1]/(rijmag*rikmag)) +\n          (cosjik*(rij[1]/(rijmag*rijmag)));\n        dcosjikdrj[2] = (-rik[2]/(rijmag*rikmag)) +\n          (cosjik*(rij[2]/(rijmag*rijmag)));\n\n        g = gSpline(cosjik,(NijC+NijH),itype,&dgdc,&dgdN);\n        tmp2 = VA*.5*(tmp*wik*dgdc*exp(lamdajik));\n        fj[0] = -tmp2*dcosjikdrj[0];\n        fj[1] = -tmp2*dcosjikdrj[1];\n        fj[2] = -tmp2*dcosjikdrj[2];\n        fi[0] = -tmp2*dcosjikdri[0];\n        fi[1] = -tmp2*dcosjikdri[1];\n        fi[2] = -tmp2*dcosjikdri[2];\n        fk[0] = -tmp2*dcosjikdrk[0];\n        fk[1] = -tmp2*dcosjikdrk[1];\n        fk[2] = -tmp2*dcosjikdrk[2];\n\n        tmp2 = VA*.5*(tmp*wik*g*exp(lamdajik)*4.0*kronecker(itype,1));\n        fi[0] += tmp2*(rik[0]/rikmag);\n        fi[1] += tmp2*(rik[1]/rikmag);\n        fi[2] += tmp2*(rik[2]/rikmag);\n        fk[0] -= tmp2*(rik[0]/rikmag);\n        fk[1] -= tmp2*(rik[1]/rikmag);\n        fk[2] -= tmp2*(rik[2]/rikmag);\n\n        // coordination forces\n\n        // dwik forces\n\n        tmp2 = VA*.5*(tmp*dwik*g*exp(lamdajik))/rikmag;\n        fi[0] -= tmp2*rik[0];\n        fi[1] -= tmp2*rik[1];\n        fi[2] -= tmp2*rik[2];\n        fk[0] += tmp2*rik[0];\n        fk[1] += tmp2*rik[1];\n        fk[2] += tmp2*rik[2];\n\n        // PIJ forces\n\n        tmp2 = VA*.5*(tmp*dN2[ktype]*dwik)/rikmag;\n        fi[0] -= tmp2*rik[0];\n        fi[1] -= tmp2*rik[1];\n        fi[2] -= tmp2*rik[2];\n        fk[0] += tmp2*rik[0];\n        fk[1] += tmp2*rik[1];\n        fk[2] += tmp2*rik[2];\n\n        // dgdN forces\n\n        tmp2 = VA*.5*(tmp*tmp3*dwik)/rikmag;\n        fi[0] -= tmp2*rik[0];\n        fi[1] -= tmp2*rik[1];\n        fi[2] -= tmp2*rik[2];\n        fk[0] += tmp2*rik[0];\n        fk[1] += tmp2*rik[1];\n        fk[2] += tmp2*rik[2];\n\n        f[atomi][0] += fi[0]; f[atomi][1] += fi[1]; f[atomi][2] += fi[2];\n        f[atomj][0] += fj[0]; f[atomj][1] += fj[1]; f[atomj][2] += fj[2];\n        f[atomk][0] += fk[0]; f[atomk][1] += fk[1]; f[atomk][2] += fk[2];\n\n        if (vflag_atom) {\n          rji[0] = -rij[0]; rji[1] = -rij[1]; rji[2] = -rij[2];\n          rki[0] = -rik[0]; rki[1] = -rik[1]; rki[2] = -rik[2];\n          v_tally3(atomi,atomj,atomk,fj,fk,rji,rki);\n        }\n      }\n    }\n\n    tmp = tmppji;\n    tmp3 = tmp3pji;\n    dN2[0] = dN2PJI[0];\n    dN2[1] = dN2PJI[1];\n\n    REBO_neighs  =  REBO_firstneigh[j];\n    for (l = 0; l < REBO_numneigh[j]; l++) {\n      atoml = REBO_neighs[l];\n      if (atoml !=atomi) {\n        ltype = map[type[atoml]];\n        rjl[0] = x[atomj][0]-x[atoml][0];\n        rjl[1] = x[atomj][1]-x[atoml][1];\n        rjl[2] = x[atomj][2]-x[atoml][2];\n        rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n        lamdaijl = 4.0*kronecker(jtype,1) *\n          ((rho[ltype][1]-rjlmag)-(rho[itype][1]-rijmag_mod));\n        wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dwjl);\n        cosijl = (-1.0*((rij[0]*rjl[0])+(rij[1]*rjl[1])+(rij[2]*rjl[2]))) /\n          (rijmag*rjlmag);\n        cosijl = MIN(cosijl,1.0);\n        cosijl = MAX(cosijl,-1.0);\n        \n        dcosijldri[0] = (-rjl[0]/(rijmag*rjlmag)) -\n          (cosijl*rij[0]/(rijmag*rijmag));\n        dcosijldri[1] = (-rjl[1]/(rijmag*rjlmag)) -\n          (cosijl*rij[1]/(rijmag*rijmag));\n        dcosijldri[2] = (-rjl[2]/(rijmag*rjlmag)) -\n          (cosijl*rij[2]/(rijmag*rijmag));\n        dcosijldrj[0] = ((-rij[0]+rjl[0])/(rijmag*rjlmag)) +\n          (cosijl*((rij[0]/square(rijmag))-(rjl[0]/(rjlmag*rjlmag))));\n        dcosijldrj[1] = ((-rij[1]+rjl[1])/(rijmag*rjlmag)) +\n          (cosijl*((rij[1]/square(rijmag))-(rjl[1]/(rjlmag*rjlmag))));\n        dcosijldrj[2] = ((-rij[2]+rjl[2])/(rijmag*rjlmag)) +\n          (cosijl*((rij[2]/square(rijmag))-(rjl[2]/(rjlmag*rjlmag))));\n        dcosijldrl[0] = (rij[0]/(rijmag*rjlmag))+(cosijl*rjl[0]/(rjlmag*rjlmag));\n        dcosijldrl[1] = (rij[1]/(rijmag*rjlmag))+(cosijl*rjl[1]/(rjlmag*rjlmag));\n        dcosijldrl[2] = (rij[2]/(rijmag*rjlmag))+(cosijl*rjl[2]/(rjlmag*rjlmag));\n\n        // evaluate splines g and derivatives dg\n\n        g = gSpline(cosijl,NjiC+NjiH,jtype,&dgdc,&dgdN);\n        tmp2 = VA*.5*(tmp*wjl*dgdc*exp(lamdaijl));\n        fi[0] = -tmp2*dcosijldri[0];\n        fi[1] = -tmp2*dcosijldri[1];\n        fi[2] = -tmp2*dcosijldri[2];\n        fj[0] = -tmp2*dcosijldrj[0];\n        fj[1] = -tmp2*dcosijldrj[1];\n        fj[2] = -tmp2*dcosijldrj[2];\n        fl[0] = -tmp2*dcosijldrl[0];\n        fl[1] = -tmp2*dcosijldrl[1];\n        fl[2] = -tmp2*dcosijldrl[2];\n  \n        tmp2 = VA*.5*(tmp*wjl*g*exp(lamdaijl)*4.0*kronecker(jtype,1));\n        fj[0] += tmp2*(rjl[0]/rjlmag);\n        fj[1] += tmp2*(rjl[1]/rjlmag);\n        fj[2] += tmp2*(rjl[2]/rjlmag);\n        fl[0] -= tmp2*(rjl[0]/rjlmag);\n        fl[1] -= tmp2*(rjl[1]/rjlmag);\n        fl[2] -= tmp2*(rjl[2]/rjlmag);\n\n         // coordination forces\n\n        // dwik forces\n\n        tmp2 = VA*.5*(tmp*dwjl*g*exp(lamdaijl))/rjlmag;\n        fj[0] -= tmp2*rjl[0];\n        fj[1] -= tmp2*rjl[1];\n        fj[2] -= tmp2*rjl[2];\n        fl[0] += tmp2*rjl[0];\n        fl[1] += tmp2*rjl[1];\n        fl[2] += tmp2*rjl[2];\n\n        // PIJ forces\n\n        tmp2 = VA*.5*(tmp*dN2[ltype]*dwjl)/rjlmag;\n        fj[0] -= tmp2*rjl[0];\n        fj[1] -= tmp2*rjl[1];\n        fj[2] -= tmp2*rjl[2];\n        fl[0] += tmp2*rjl[0];\n        fl[1] += tmp2*rjl[1];\n        fl[2] += tmp2*rjl[2];\n\n        // dgdN forces\n\n        tmp2=VA*.5*(tmp*tmp3*dwjl)/rjlmag;\n        fj[0] -= tmp2*rjl[0];\n        fj[1] -= tmp2*rjl[1];\n        fj[2] -= tmp2*rjl[2];\n        fl[0] += tmp2*rjl[0];\n        fl[1] += tmp2*rjl[1];\n        fl[2] += tmp2*rjl[2];\n\n        f[atomi][0] += fi[0]; f[atomi][1] += fi[1]; f[atomi][2] += fi[2];\n        f[atomj][0] += fj[0]; f[atomj][1] += fj[1]; f[atomj][2] += fj[2];\n        f[atoml][0] += fl[0]; f[atoml][1] += fl[1]; f[atoml][2] += fl[2];\n\n        if (vflag_atom) {\n          rlj[0] = -rjl[0]; rlj[1] = -rjl[1]; rlj[2] = -rjl[2];\n          v_tally3(atomi,atomj,atoml,fi,fl,rij,rlj);\n        }\n      }\n    }\n\n    // piRC forces\n\n    dN3[0] = dN3piRC[0];\n    dN3[1] = dN3piRC[1];\n    dN3[2] = dN3piRC[2];\n\n    REBO_neighs_i = REBO_firstneigh[i];\n    for (k = 0; k < REBO_numneigh[i]; k++) {\n      atomk = REBO_neighs_i[k];\n      if (atomk != atomj) {\n        ktype = map[type[atomk]];\n        rik[0] = x[atomi][0]-x[atomk][0];\n        rik[1] = x[atomi][1]-x[atomk][1];\n        rik[2] = x[atomi][2]-x[atomk][2];\n        rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n        wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n        Nki = nC[atomk]-(wik*kronecker(itype,0))+nH[atomk] -\n          (wik*kronecker(itype,1));\n        SpN = Sp(Nki,Nmin,Nmax,dNki);\n\n        tmp2 = VA*dN3[0]*dwik/rikmag;\n        f[atomi][0] -= tmp2*rik[0];\n        f[atomi][1] -= tmp2*rik[1];\n        f[atomi][2] -= tmp2*rik[2];\n        f[atomk][0] += tmp2*rik[0];\n        f[atomk][1] += tmp2*rik[1];\n        f[atomk][2] += tmp2*rik[2];\n\n        if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n        // due to kronecker(ktype, 0) term in contribution\n        // to NconjtmpI and later Nijconj\n        if (ktype != 0) continue;\n\n        tmp2 = VA*dN3[2]*(2.0*NconjtmpI*dwik*SpN)/rikmag;\n        f[atomi][0] -= tmp2*rik[0];\n        f[atomi][1] -= tmp2*rik[1];\n        f[atomi][2] -= tmp2*rik[2];\n        f[atomk][0] += tmp2*rik[0];\n        f[atomk][1] += tmp2*rik[1];\n        f[atomk][2] += tmp2*rik[2];\n\n        if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n        if (fabs(dNki) > TOL) {\n          REBO_neighs_k = REBO_firstneigh[atomk];\n          for (n = 0; n < REBO_numneigh[atomk]; n++) {\n            atomn = REBO_neighs_k[n];\n            if (atomn != atomi) {\n              ntype = map[type[atomn]];\n              rkn[0] = x[atomk][0]-x[atomn][0];\n              rkn[1] = x[atomk][1]-x[atomn][1];\n              rkn[2] = x[atomk][2]-x[atomn][2];\n              rknmag = sqrt((rkn[0]*rkn[0])+(rkn[1]*rkn[1])+(rkn[2]*rkn[2]));\n              Sp(rknmag,rcmin[ktype][ntype],rcmax[ktype][ntype],dwkn);\n\n              tmp2 = VA*dN3[2]*(2.0*NconjtmpI*wik*dNki*dwkn)/rknmag;\n              f[atomk][0] -= tmp2*rkn[0];\n              f[atomk][1] -= tmp2*rkn[1];\n              f[atomk][2] -= tmp2*rkn[2];\n              f[atomn][0] += tmp2*rkn[0];\n              f[atomn][1] += tmp2*rkn[1];\n              f[atomn][2] += tmp2*rkn[2];\n\n              if (vflag_atom) v_tally2(atomk,atomn,-tmp2,rkn);\n            }\n          }\n        }\n      }\n    }\n\n    // piRC forces to J side\n\n    REBO_neighs = REBO_firstneigh[atomj];\n    for (l = 0; l < REBO_numneigh[atomj]; l++) {\n      atoml = REBO_neighs[l];\n      if (atoml != atomi) {\n        ltype = map[type[atoml]];\n        rjl[0] = x[atomj][0]-x[atoml][0];\n        rjl[1] = x[atomj][1]-x[atoml][1];\n        rjl[2] = x[atomj][2]-x[atoml][2];\n        rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n        wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dwjl);\n        Nlj = nC[atoml]-(wjl*kronecker(jtype,0))+nH[atoml] -\n          (wjl*kronecker(jtype,1));\n        SpN = Sp(Nlj,Nmin,Nmax,dNlj);\n\n        tmp2 = VA*dN3[1]*dwjl/rjlmag;\n        f[atomj][0] -= tmp2*rjl[0];\n        f[atomj][1] -= tmp2*rjl[1];\n        f[atomj][2] -= tmp2*rjl[2];\n        f[atoml][0] += tmp2*rjl[0];\n        f[atoml][1] += tmp2*rjl[1];\n        f[atoml][2] += tmp2*rjl[2];\n\n        if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n        // due to kronecker(ltype, 0) term in contribution\n        // to NconjtmpJ and later Nijconj\n        if (ltype != 0) continue;\n\n        tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*dwjl*SpN)/rjlmag;\n        f[atomj][0] -= tmp2*rjl[0];\n        f[atomj][1] -= tmp2*rjl[1];\n        f[atomj][2] -= tmp2*rjl[2];\n        f[atoml][0] += tmp2*rjl[0];\n        f[atoml][1] += tmp2*rjl[1];\n        f[atoml][2] += tmp2*rjl[2];\n\n        if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n        if (fabs(dNlj) > TOL) {\n          REBO_neighs_l = REBO_firstneigh[atoml];\n          for (n = 0; n < REBO_numneigh[atoml]; n++) {\n            atomn = REBO_neighs_l[n];\n            if (atomn != atomj) {\n              ntype = map[type[atomn]];\n              rln[0] = x[atoml][0]-x[atomn][0];\n              rln[1] = x[atoml][1]-x[atomn][1];\n              rln[2] = x[atoml][2]-x[atomn][2];\n              rlnmag = sqrt((rln[0]*rln[0])+(rln[1]*rln[1])+(rln[2]*rln[2]));\n              Sp(rlnmag,rcmin[ltype][ntype],rcmax[ltype][ntype],dwln);\n\n              tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*wjl*dNlj*dwln)/rlnmag;\n              f[atoml][0] -= tmp2*rln[0];\n              f[atoml][1] -= tmp2*rln[1];\n              f[atoml][2] -= tmp2*rln[2];\n              f[atomn][0] += tmp2*rln[0];\n              f[atomn][1] += tmp2*rln[1];\n              f[atomn][2] += tmp2*rln[2];\n\n              if (vflag_atom) v_tally2(atoml,atomn,-tmp2,rln);\n            }\n          }\n        }\n      }\n    }\n\n    if (fabs(Tij) > TOL) {\n      dN3[0] = dN3Tij[0];\n      dN3[1] = dN3Tij[1];\n      dN3[2] = dN3Tij[2];\n      atom2 = atomi;\n      atom3 = atomj;\n      r32[0] = x[atom3][0]-x[atom2][0];\n      r32[1] = x[atom3][1]-x[atom2][1];\n      r32[2] = x[atom3][2]-x[atom2][2];\n      r32mag = sqrt((r32[0]*r32[0])+(r32[1]*r32[1])+(r32[2]*r32[2]));\n      r23[0] = -r32[0];\n      r23[1] = -r32[1];\n      r23[2] = -r32[2];\n      r23mag = r32mag;\n      REBO_neighs_i = REBO_firstneigh[i];\n      for (k = 0; k < REBO_numneigh[i]; k++) {\n        atomk = REBO_neighs_i[k];\n        atom1 = atomk;\n        ktype = map[type[atomk]];\n        if (atomk != atomj) {\n          r21[0] = x[atom2][0]-x[atom1][0];\n          r21[1] = x[atom2][1]-x[atom1][1];\n          r21[2] = x[atom2][2]-x[atom1][2];\n          r21mag = sqrt(r21[0]*r21[0] + r21[1]*r21[1] + r21[2]*r21[2]);\n          cos321 = ((r21[0]*rij[0])+(r21[1]*rij[1])+(r21[2]*rij[2])) /\n            (r21mag*rijmag);\n          cos321 = MIN(cos321,1.0);\n          cos321 = MAX(cos321,-1.0);\n          sin321 = sqrt(1.0 - cos321*cos321);\n          if ((sin321 > TOL) && (r21mag > TOL)) { // XXX was sin321 != 0.0\n            sink2i = 1.0/(sin321*sin321);\n            rik2i = 1.0/(r21mag*r21mag);\n            rr = (rijmag*rijmag)-(r21mag*r21mag);\n            rjk[0] = r21[0]-r23[0];\n            rjk[1] = r21[1]-r23[1];\n            rjk[2] = r21[2]-r23[2];\n            rjk2 = (rjk[0]*rjk[0])+(rjk[1]*rjk[1])+(rjk[2]*rjk[2]);\n            rijrik = 2.0*r23mag*r21mag;\n            rik2 = r21mag*r21mag;\n            dctik = (-rr+rjk2)/(rijrik*rik2);\n            dctij = (rr+rjk2)/(rijrik*r23mag*r23mag);\n            dctjk = -2.0/rijrik;\n            w21 = Sp(r21mag,rcmin[itype][ktype],rcmaxp[itype][ktype],dw21);\n            rijmag = r32mag;\n            rikmag = r21mag;\n            rij2 = r32mag*r32mag;\n            rik2 = r21mag*r21mag;\n            costmp = 0.5*(rij2+rik2-rjk2)/rijmag/rikmag;\n            tspjik = Sp2(costmp,thmin,thmax,dtsjik);\n            dtsjik = -dtsjik;\n\n            REBO_neighs_j = REBO_firstneigh[j];\n            for (l = 0; l < REBO_numneigh[j]; l++) {\n              atoml = REBO_neighs_j[l];\n              atom4 = atoml;\n              ltype = map[type[atoml]];\n              if (!(atoml == atomi || atoml == atomk)) {\n                r34[0] = x[atom3][0]-x[atom4][0];\n                r34[1] = x[atom3][1]-x[atom4][1];\n                r34[2] = x[atom3][2]-x[atom4][2];\n                r34mag = sqrt(r34[0]*r34[0] + r34[1]*r34[1] + r34[2]*r34[2]);\n                cos234 = (r32[0]*r34[0] + r32[1]*r34[1] + r32[2]*r34[2]) /\n                  (r32mag*r34mag);\n                cos234 = MIN(cos234,1.0);\n                cos234 = MAX(cos234,-1.0);\n                sin234 = sqrt(1.0 - cos234*cos234);\n\n                if ((sin234 > TOL) && (r34mag > TOL)) { // XXX was sin234 != 0.0\n                  sinl2i = 1.0/(sin234*sin234);\n                  rjl2i = 1.0/(r34mag*r34mag);\n                  w34 = Sp(r34mag,rcmin[jtype][ltype],\n                           rcmaxp[jtype][ltype],dw34);\n                  rr = (r23mag*r23mag)-(r34mag*r34mag);\n                  ril[0] = r23[0]+r34[0];\n                  ril[1] = r23[1]+r34[1];\n                  ril[2] = r23[2]+r34[2];\n                  ril2 = (ril[0]*ril[0])+(ril[1]*ril[1])+(ril[2]*ril[2]);\n                  rijrjl = 2.0*r23mag*r34mag;\n                  rjl2 = r34mag*r34mag;\n                  dctjl = (-rr+ril2)/(rijrjl*rjl2);\n                  dctji = (rr+ril2)/(rijrjl*r23mag*r23mag);\n                  dctil = -2.0/rijrjl;\n                  rjlmag = r34mag;\n                  rjl2 = r34mag*r34mag;\n                  costmp = 0.5*(rij2+rjl2-ril2)/rijmag/rjlmag;\n                  tspijl = Sp2(costmp,thmin,thmax,dtsijl);\n                  dtsijl = -dtsijl; //need minus sign\n                  prefactor = VA*Tij;\n\n                  cross321[0] = (r32[1]*r21[2])-(r32[2]*r21[1]);\n                  cross321[1] = (r32[2]*r21[0])-(r32[0]*r21[2]);\n                  cross321[2] = (r32[0]*r21[1])-(r32[1]*r21[0]);\n                  cross234[0] = (r23[1]*r34[2])-(r23[2]*r34[1]);\n                  cross234[1] = (r23[2]*r34[0])-(r23[0]*r34[2]);\n                  cross234[2] = (r23[0]*r34[1])-(r23[1]*r34[0]);\n\n                  cwnum = (cross321[0]*cross234[0]) +\n                    (cross321[1]*cross234[1])+(cross321[2]*cross234[2]);\n                  cwnom = r21mag*r34mag*r23mag*r23mag*sin321*sin234;\n                  om1234 = cwnum/cwnom;\n                  cw = om1234;\n\n                  dt1dik = (rik2i)-(dctik*sink2i*cos321);\n                  dt1djk = (-dctjk*sink2i*cos321);\n                  dt1djl = (rjl2i)-(dctjl*sinl2i*cos234);\n                  dt1dil = (-dctil*sinl2i*cos234);\n                  dt1dij = (2.0/(r23mag*r23mag))-(dctij*sink2i*cos321) -\n                    (dctji*sinl2i*cos234);\n\n                  dt2dik[0] = (-r23[2]*cross234[1])+(r23[1]*cross234[2]);\n                  dt2dik[1] = (-r23[0]*cross234[2])+(r23[2]*cross234[0]);\n                  dt2dik[2] = (-r23[1]*cross234[0])+(r23[0]*cross234[1]);\n\n                  dt2djl[0] = (-r23[1]*cross321[2])+(r23[2]*cross321[1]);\n                  dt2djl[1] = (-r23[2]*cross321[0])+(r23[0]*cross321[2]);\n                  dt2djl[2] = (-r23[0]*cross321[1])+(r23[1]*cross321[0]);\n\n                  dt2dij[0] = (r21[2]*cross234[1])-(r34[2]*cross321[1]) -\n                    (r21[1]*cross234[2])+(r34[1]*cross321[2]);\n                  dt2dij[1] = (r21[0]*cross234[2])-(r34[0]*cross321[2]) -\n                    (r21[2]*cross234[0])+(r34[2]*cross321[0]);\n                  dt2dij[2] = (r21[1]*cross234[0])-(r34[1]*cross321[0]) -\n                    (r21[0]*cross234[1])+(r34[0]*cross321[1]);\n\n                  aa = (prefactor*2.0*cw/cwnom)*w21*w34 *\n                    (1.0-tspjik)*(1.0-tspijl);\n                  aaa2 = -prefactor*(1.0-square(om1234)) * w21*w34;\n                  at2 = aa*cwnum;\n\n                  fcijpc = (-dt1dij*at2)+(aaa2*dtsjik*dctij*(1.0-tspijl)) +\n                    (aaa2*dtsijl*dctji*(1.0-tspjik));\n                  fcikpc = (-dt1dik*at2)+(aaa2*dtsjik*dctik*(1.0-tspijl));\n                  fcjlpc = (-dt1djl*at2)+(aaa2*dtsijl*dctjl*(1.0-tspjik));\n                  fcjkpc = (-dt1djk*at2)+(aaa2*dtsjik*dctjk*(1.0-tspijl));\n                  fcilpc = (-dt1dil*at2)+(aaa2*dtsijl*dctil*(1.0-tspjik));\n\n                  F23[0] = (fcijpc*r23[0])+(aa*dt2dij[0]);\n                  F23[1] = (fcijpc*r23[1])+(aa*dt2dij[1]);\n                  F23[2] = (fcijpc*r23[2])+(aa*dt2dij[2]);\n\n                  F12[0] = (fcikpc*r21[0])+(aa*dt2dik[0]);\n                  F12[1] = (fcikpc*r21[1])+(aa*dt2dik[1]);\n                  F12[2] = (fcikpc*r21[2])+(aa*dt2dik[2]);\n\n                  F34[0] = (fcjlpc*r34[0])+(aa*dt2djl[0]);\n                  F34[1] = (fcjlpc*r34[1])+(aa*dt2djl[1]);\n                  F34[2] = (fcjlpc*r34[2])+(aa*dt2djl[2]);\n\n                  F31[0] = (fcjkpc*rjk[0]);\n                  F31[1] = (fcjkpc*rjk[1]);\n                  F31[2] = (fcjkpc*rjk[2]);\n\n                  F24[0] = (fcilpc*ril[0]);\n                  F24[1] = (fcilpc*ril[1]);\n                  F24[2] = (fcilpc*ril[2]);\n\n                  f1[0] = -F12[0]-F31[0];\n                  f1[1] = -F12[1]-F31[1];\n                  f1[2] = -F12[2]-F31[2];\n                  f2[0] = F23[0]+F12[0]+F24[0];\n                  f2[1] = F23[1]+F12[1]+F24[1];\n                  f2[2] = F23[2]+F12[2]+F24[2];\n                  f3[0] = -F23[0]+F34[0]+F31[0];\n                  f3[1] = -F23[1]+F34[1]+F31[1];\n                  f3[2] = -F23[2]+F34[2]+F31[2];\n                  f4[0] = -F34[0]-F24[0];\n                  f4[1] = -F34[1]-F24[1];\n                  f4[2] = -F34[2]-F24[2];\n\n                  // coordination forces\n\n                  tmp2 = VA*Tij*((1.0-(om1234*om1234))) *\n                    (1.0-tspjik)*(1.0-tspijl)*dw21*w34/r21mag;\n                  f2[0] -= tmp2*r21[0];\n                  f2[1] -= tmp2*r21[1];\n                  f2[2] -= tmp2*r21[2];\n                  f1[0] += tmp2*r21[0];\n                  f1[1] += tmp2*r21[1];\n                  f1[2] += tmp2*r21[2];\n\n                  tmp2 = VA*Tij*((1.0-(om1234*om1234))) *\n                    (1.0-tspjik)*(1.0-tspijl)*w21*dw34/r34mag;\n                  f3[0] -= tmp2*r34[0];\n                  f3[1] -= tmp2*r34[1];\n                  f3[2] -= tmp2*r34[2];\n                  f4[0] += tmp2*r34[0];\n                  f4[1] += tmp2*r34[1];\n                  f4[2] += tmp2*r34[2];\n\n                  f[atom1][0] += f1[0]; f[atom1][1] += f1[1];\n                  f[atom1][2] += f1[2];\n                  f[atom2][0] += f2[0]; f[atom2][1] += f2[1];\n                  f[atom2][2] += f2[2];\n                  f[atom3][0] += f3[0]; f[atom3][1] += f3[1];\n                  f[atom3][2] += f3[2];\n                  f[atom4][0] += f4[0]; f[atom4][1] += f4[1];\n                  f[atom4][2] += f4[2];\n\n                  if (vflag_atom) {\n                    r13[0] = -rjk[0]; r13[1] = -rjk[1]; r13[2] = -rjk[2];\n                    r43[0] = -r34[0]; r43[1] = -r34[1]; r43[2] = -r34[2];\n                    v_tally4(atom1,atom2,atom3,atom4,f1,f2,f4,r13,r23,r43);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      REBO_neighs = REBO_firstneigh[i];\n      for (k = 0; k < REBO_numneigh[i]; k++) {\n        atomk = REBO_neighs[k];\n        if (atomk != atomj) {\n          ktype = map[type[atomk]];\n          rik[0] = x[atomi][0]-x[atomk][0];\n          rik[1] = x[atomi][1]-x[atomk][1];\n          rik[2] = x[atomi][2]-x[atomk][2];\n          rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n          wik = Sp(rikmag,rcmin[itype][ktype],rcmax[itype][ktype],dwik);\n          Nki = nC[atomk]-(wik*kronecker(itype,0))+nH[atomk] -\n            (wik*kronecker(itype,1));\n          SpN = Sp(Nki,Nmin,Nmax,dNki);\n\n          tmp2 = VA*dN3[0]*dwik*Etmp/rikmag;\n          f[atomi][0] -= tmp2*rik[0];\n          f[atomi][1] -= tmp2*rik[1];\n          f[atomi][2] -= tmp2*rik[2];\n          f[atomk][0] += tmp2*rik[0];\n          f[atomk][1] += tmp2*rik[1];\n          f[atomk][2] += tmp2*rik[2];\n\n          if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n          // due to kronecker(ktype, 0) term in contribution\n          // to NconjtmpI and later Nijconj\n          if (ktype != 0) continue;\n\n          tmp2 = VA*dN3[2]*(2.0*NconjtmpI*dwik*SpN)*Etmp/rikmag;\n          f[atomi][0] -= tmp2*rik[0];\n          f[atomi][1] -= tmp2*rik[1];\n          f[atomi][2] -= tmp2*rik[2];\n          f[atomk][0] += tmp2*rik[0];\n          f[atomk][1] += tmp2*rik[1];\n          f[atomk][2] += tmp2*rik[2];\n\n          if (vflag_atom) v_tally2(atomi,atomk,-tmp2,rik);\n\n          if (fabs(dNki) > TOL) {\n            REBO_neighs_k = REBO_firstneigh[atomk];\n            for (n = 0; n < REBO_numneigh[atomk]; n++) {\n              atomn = REBO_neighs_k[n];\n              ntype = map[type[atomn]];\n              if (atomn !=atomi) {\n                rkn[0] = x[atomk][0]-x[atomn][0];\n                rkn[1] = x[atomk][1]-x[atomn][1];\n                rkn[2] = x[atomk][2]-x[atomn][2];\n                rknmag = sqrt((rkn[0]*rkn[0])+(rkn[1]*rkn[1])+(rkn[2]*rkn[2]));\n                Sp(rknmag,rcmin[ktype][ntype],rcmax[ktype][ntype],dwkn);\n\n                tmp2 = VA*dN3[2]*(2.0*NconjtmpI*wik*dNki*dwkn)*Etmp/rknmag;\n                f[atomk][0] -= tmp2*rkn[0];\n                f[atomk][1] -= tmp2*rkn[1];\n                f[atomk][2] -= tmp2*rkn[2];\n                f[atomn][0] += tmp2*rkn[0];\n                f[atomn][1] += tmp2*rkn[1];\n                f[atomn][2] += tmp2*rkn[2];\n\n                if (vflag_atom) v_tally2(atomk,atomn,-tmp2,rkn);\n              }\n            }\n          }\n        }\n      }\n\n      // Tij forces\n\n      REBO_neighs = REBO_firstneigh[j];\n      for (l = 0; l < REBO_numneigh[j]; l++) {\n        atoml = REBO_neighs[l];\n        if (atoml != atomi) {\n          ltype = map[type[atoml]];\n          rjl[0] = x[atomj][0]-x[atoml][0];\n          rjl[1] = x[atomj][1]-x[atoml][1];\n          rjl[2] = x[atomj][2]-x[atoml][2];\n          rjlmag = sqrt((rjl[0]*rjl[0])+(rjl[1]*rjl[1])+(rjl[2]*rjl[2]));\n          wjl = Sp(rjlmag,rcmin[jtype][ltype],rcmax[jtype][ltype],dwjl);\n          Nlj = nC[atoml]-(wjl*kronecker(jtype,0))+nH[atoml] -\n            (wjl*kronecker(jtype,1));\n          SpN = Sp(Nlj,Nmin,Nmax,dNlj);\n\n          tmp2 = VA*dN3[1]*dwjl*Etmp/rjlmag;\n          f[atomj][0] -= tmp2*rjl[0];\n          f[atomj][1] -= tmp2*rjl[1];\n          f[atomj][2] -= tmp2*rjl[2];\n          f[atoml][0] += tmp2*rjl[0];\n          f[atoml][1] += tmp2*rjl[1];\n          f[atoml][2] += tmp2*rjl[2];\n\n          if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n          // due to kronecker(ltype, 0) term in contribution\n          // to NconjtmpJ and later Nijconj\n          if (ltype != 0) continue;\n\n          tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*dwjl*SpN)*Etmp/rjlmag;\n          f[atomj][0] -= tmp2*rjl[0];\n          f[atomj][1] -= tmp2*rjl[1];\n          f[atomj][2] -= tmp2*rjl[2];\n          f[atoml][0] += tmp2*rjl[0];\n          f[atoml][1] += tmp2*rjl[1];\n          f[atoml][2] += tmp2*rjl[2];\n\n          if (vflag_atom) v_tally2(atomj,atoml,-tmp2,rjl);\n\n          if (fabs(dNlj) > TOL) {\n            REBO_neighs_l = REBO_firstneigh[atoml];\n            for (n = 0; n < REBO_numneigh[atoml]; n++) {\n              atomn = REBO_neighs_l[n];\n              ntype = map[type[atomn]];\n              if (atomn != atomj) {\n                rln[0] = x[atoml][0]-x[atomn][0];\n                rln[1] = x[atoml][1]-x[atomn][1];\n                rln[2] = x[atoml][2]-x[atomn][2];\n                rlnmag = sqrt((rln[0]*rln[0])+(rln[1]*rln[1])+(rln[2]*rln[2]));\n                Sp(rlnmag,rcmin[ltype][ntype],rcmax[ltype][ntype],dwln);\n\n                tmp2 = VA*dN3[2]*(2.0*NconjtmpJ*wjl*dNlj*dwln)*Etmp/rlnmag;\n                f[atoml][0] -= tmp2*rln[0];\n                f[atoml][1] -= tmp2*rln[1];\n                f[atoml][2] -= tmp2*rln[2];\n                f[atomn][0] += tmp2*rln[0];\n                f[atomn][1] += tmp2*rln[1];\n                f[atomn][2] += tmp2*rln[2];\n\n                if (vflag_atom) v_tally2(atoml,atomn,-tmp2,rln);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return Stb;\n}\n\n/* ----------------------------------------------------------------------\n   G spline\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::gSpline(double costh, double Nij, int typei,\n                           double *dgdc, double *dgdN)\n{\n  double coeffs[6],dS,g1,g2,dg1,dg2,cut,g;\n  int i,j;\n\n  i = 0;\n  j = 0;\n  g = 0.0;\n  cut = 0.0;\n  dS = 0.0;\n  dg1 = 0.0;\n  dg2 = 0.0;\n  *dgdc = 0.0;\n  *dgdN = 0.0;\n\n  // central atom is Carbon\n\n  if (typei == 0) {\n    if (costh < gCdom[0]) costh = gCdom[0];\n    if (costh > gCdom[4]) costh = gCdom[4];\n    if (Nij >= NCmax) {\n      for (i = 0; i < 4; i++) {\n        if (costh >= gCdom[i] && costh <= gCdom[i+1]) {\n          for (j = 0; j < 6; j++) coeffs[j] = gC2[i][j];\n        }\n      }\n      g2 = Sp5th(costh,coeffs,&dg2);\n      g = g2;\n      *dgdc = dg2;\n      *dgdN = 0.0;\n    }\n    if (Nij <= NCmin) {\n      for (i = 0; i < 4; i++) {\n        if (costh >= gCdom[i] && costh <= gCdom[i+1]) {\n          for (j = 0; j < 6; j++) coeffs[j] = gC1[i][j];\n        }\n      }\n      g1 = Sp5th(costh,coeffs,&dg1);\n      g = g1;\n      *dgdc = dg1;\n      *dgdN = 0.0;\n    }\n    if (Nij > NCmin && Nij < NCmax) {\n      for (i = 0; i < 4; i++) {\n        if (costh >= gCdom[i] && costh <= gCdom[i+1]) {\n          for (j = 0; j < 6; j++) coeffs[j] = gC1[i][j];\n        }\n      }\n      g1 = Sp5th(costh,coeffs,&dg1);\n      for (i = 0; i < 4; i++) {\n        if (costh >= gCdom[i] && costh <= gCdom[i+1]) {\n          for (j = 0; j < 6; j++) coeffs[j] = gC2[i][j];\n        }\n      }\n      g2 = Sp5th(costh,coeffs,&dg2);\n      cut = Sp(Nij,NCmin,NCmax,dS);\n      g = g2+cut*(g1-g2);\n      *dgdc = dg2+(cut*(dg1-dg2));\n      *dgdN = dS*(g1-g2);\n    }\n  }\n\n  // central atom is Hydrogen\n\n  if (typei == 1) {\n    if (costh < gHdom[0]) costh = gHdom[0];\n    if (costh > gHdom[3]) costh = gHdom[3];\n    for (i = 0; i < 3; i++) {\n      if (costh >= gHdom[i] && costh <= gHdom[i+1]) {\n        for (j = 0; j < 6; j++) coeffs[j] = gH[i][j];\n      }\n    }\n    g = Sp5th(costh,coeffs,&dg1);\n    *dgdN = 0.0;\n    *dgdc = dg1;\n  }\n\n  return g;\n}\n\n/* ----------------------------------------------------------------------\n   Pij spline\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::PijSpline(double NijC, double NijH, int typei, int typej,\n                             double dN2[2])\n{\n  int x,y;\n  double Pij;\n\n  x = 0;\n  y = 0;\n  dN2[0] = 0.0;\n  dN2[1] = 0.0;\n  Pij = 0.0;\n\n  if (typei == 1) return Pij;\n\n  if (typej == 0) {\n\n    // if inputs are out of bounds set them back to a point in bounds\n\n    if (NijC < pCCdom[0][0]) NijC=pCCdom[0][0];\n    if (NijC > pCCdom[0][1]) NijC=pCCdom[0][1];\n    if (NijH < pCCdom[1][0]) NijH=pCCdom[1][0];\n    if (NijH > pCCdom[1][1]) NijH=pCCdom[1][1];\n    x = (int) floor(NijC);\n    y = (int) floor(NijH);\n\n    if (fabs(NijC-floor(NijC)) < TOL && fabs(NijH-floor(NijH)) < TOL) {\n      Pij    = PCCf[x][y];\n      dN2[0] = PCCdfdx[x][y];\n      dN2[1] = PCCdfdy[x][y];\n    } else {\n      if (NijC == pCCdom[0][1]) --x;\n      if (NijH == pCCdom[1][1]) --y;\n      Pij = Spbicubic(NijC,NijH,pCC[x][y],dN2);\n    }\n\n  } else if (typej == 1) {\n\n    // if inputs are out of bounds set them back to a point in bounds\n\n    if (NijC < pCHdom[0][0]) NijC=pCHdom[0][0];\n    if (NijC > pCHdom[0][1]) NijC=pCHdom[0][1];\n    if (NijH < pCHdom[1][0]) NijH=pCHdom[1][0];\n    if (NijH > pCHdom[1][1]) NijH=pCHdom[1][1];\n    x = (int) floor(NijC);\n    y = (int) floor(NijH);\n\n    if (fabs(NijC-floor(NijC)) < TOL && fabs(NijH-floor(NijH)) < TOL) {\n      Pij = PCHf[x][y];\n      dN2[0] = PCHdfdx[x][y];\n      dN2[1] = PCHdfdy[x][y];\n    } else {\n      if (NijC == pCHdom[0][1]) --x;\n      if (NijH == pCHdom[1][1]) --y;\n      Pij = Spbicubic(NijC,NijH,pCH[x][y],dN2);\n    }\n  }\n  return Pij;\n}\n\n/* ----------------------------------------------------------------------\n   PiRC spline\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::piRCSpline(double Nij, double Nji, double Nijconj,\n                              int typei, int typej, double dN3[3])\n{\n  int x,y,z;\n  double piRC;\n  x=0;\n  y=0;\n  z=0;\n  dN3[0]=0.0;\n  dN3[1]=0.0;\n  dN3[2]=0.0;\n\n  if (typei==0 && typej==0) {\n\n    // CC interaction\n\n    // if the inputs are out of bounds set them back to a point in bounds\n\n    if (Nij < piCCdom[0][0]) Nij=piCCdom[0][0];\n    if (Nij > piCCdom[0][1]) Nij=piCCdom[0][1];\n    if (Nji < piCCdom[1][0]) Nji=piCCdom[1][0];\n    if (Nji > piCCdom[1][1]) Nji=piCCdom[1][1];\n    if (Nijconj < piCCdom[2][0]) Nijconj=piCCdom[2][0];\n    if (Nijconj > piCCdom[2][1]) Nijconj=piCCdom[2][1];\n    x = (int) floor(Nij);\n    y = (int) floor(Nji);\n    z = (int) floor(Nijconj);\n\n    if (fabs(Nij-floor(Nij)) < TOL && fabs(Nji-floor(Nji)) < TOL\n        && fabs(Nijconj-floor(Nijconj)) < TOL) {\n      piRC=piCCf[x][y][z];\n      dN3[0]=piCCdfdx[x][y][z];\n      dN3[1]=piCCdfdy[x][y][z];\n      dN3[2]=piCCdfdz[x][y][z];\n    } else {\n      if (Nij == piCCdom[0][1]) --x;\n      if (Nji == piCCdom[1][1]) --y;\n      if (Nijconj == piCCdom[2][1]) --z;\n      piRC=Sptricubic(Nij,Nji,Nijconj,piCC[x][y][z],dN3);\n    }\n  } else if ((typei==0 && typej==1) || (typei==1 && typej==0)) {\n\n    // CH interaction\n\n    // if the inputs are out of bounds set them back to a point in bounds\n\n    if (Nij < piCHdom[0][0]) Nij=piCHdom[0][0];\n    if (Nij > piCHdom[0][1]) Nij=piCHdom[0][1];\n    if (Nji < piCHdom[1][0]) Nji=piCHdom[1][0];\n    if (Nji > piCHdom[1][1]) Nji=piCHdom[1][1];\n    if (Nijconj < piCHdom[2][0]) Nijconj=piCHdom[2][0];\n    if (Nijconj > piCHdom[2][1]) Nijconj=piCHdom[2][1];\n    x = (int) floor(Nij);\n    y = (int) floor(Nji);\n    z = (int) floor(Nijconj);\n\n    if (fabs(Nij-floor(Nij)) < TOL && fabs(Nji-floor(Nji)) < TOL\n        && fabs(Nijconj-floor(Nijconj)) < TOL) {\n      piRC=piCHf[x][y][z];\n      dN3[0]=piCHdfdx[x][y][z];\n      dN3[1]=piCHdfdy[x][y][z];\n      dN3[2]=piCHdfdz[x][y][z];\n    } else {\n      if (Nij == piCHdom[0][1]) --x;\n      if (Nji == piCHdom[1][1]) --y;\n      if (Nijconj == piCHdom[2][1]) --z;\n      piRC=Sptricubic(Nij,Nji,Nijconj,piCH[x][y][z],dN3);\n    }\n  } else if (typei==1 && typej==1) {\n    if (Nij < piHHdom[0][0]) Nij=piHHdom[0][0];\n    if (Nij > piHHdom[0][1]) Nij=piHHdom[0][1];\n    if (Nji < piHHdom[1][0]) Nji=piHHdom[1][0];\n    if (Nji > piHHdom[1][1]) Nji=piHHdom[1][1];\n    if (Nijconj < piHHdom[2][0]) Nijconj=piHHdom[2][0];\n    if (Nijconj > piHHdom[2][1]) Nijconj=piHHdom[2][1];\n    x = (int) floor(Nij);\n    y = (int) floor(Nji);\n    z = (int) floor(Nijconj);\n\n    if (fabs(Nij-floor(Nij)) < TOL && fabs(Nji-floor(Nji)) < TOL\n        && fabs(Nijconj-floor(Nijconj)) < TOL) {\n      piRC=piHHf[x][y][z];\n      dN3[0]=piHHdfdx[x][y][z];\n      dN3[1]=piHHdfdy[x][y][z];\n      dN3[2]=piHHdfdz[x][y][z];\n    } else {\n      if (Nij == piHHdom[0][1]) --x;\n      if (Nji == piHHdom[1][1]) --y;\n      if (Nijconj == piHHdom[2][1]) --z;\n      piRC=Sptricubic(Nij,Nji,Nijconj,piHH[x][y][z],dN3);\n    }\n  }\n\n  return piRC;\n}\n\n/* ----------------------------------------------------------------------\n   Tij spline\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::TijSpline(double Nij, double Nji,\n                             double Nijconj, double dN3[3])\n{\n  int x,y,z;\n  double Tijf;\n\n  x=0;\n  y=0;\n  z=0;\n  Tijf=0.0;\n  dN3[0]=0.0;\n  dN3[1]=0.0;\n  dN3[2]=0.0;\n\n  //if the inputs are out of bounds set them back to a point in bounds\n\n  if (Nij < Tijdom[0][0]) Nij=Tijdom[0][0];\n  if (Nij > Tijdom[0][1]) Nij=Tijdom[0][1];\n  if (Nji < Tijdom[1][0]) Nji=Tijdom[1][0];\n  if (Nji > Tijdom[1][1]) Nji=Tijdom[1][1];\n  if (Nijconj < Tijdom[2][0]) Nijconj=Tijdom[2][0];\n  if (Nijconj > Tijdom[2][1]) Nijconj=Tijdom[2][1];\n  x = (int) floor(Nij);\n  y = (int) floor(Nji);\n  z = (int) floor(Nijconj);\n\n  if (fabs(Nij-floor(Nij)) < TOL && fabs(Nji-floor(Nji)) < TOL\n      && fabs(Nijconj-floor(Nijconj)) < TOL) {\n    Tijf=Tf[x][y][z];\n    dN3[0]=Tdfdx[x][y][z];\n    dN3[1]=Tdfdy[x][y][z];\n    dN3[2]=Tdfdz[x][y][z];\n  } else {\n    if (Nij == Tijdom[0][1]) --x;\n    if (Nji == Tijdom[1][1]) --y;\n    if (Nijconj == Tijdom[2][1]) --z;\n    Tijf=Sptricubic(Nij,Nji,Nijconj,Tijc[x][y][z],dN3);\n  }\n\n  return Tijf;\n}\n\n/* ----------------------------------------------------------------------\n   read AIREBO potential file\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::read_file(char *filename)\n{\n  int i,j,k,l,limit;\n  char s[MAXLINE];\n\n  // REBO Parameters (AIREBO)\n\n  double rcmin_CC,rcmin_CH,rcmin_HH,rcmax_CC,rcmax_CH,\n    rcmax_HH,rcmaxp_CC,rcmaxp_CH,rcmaxp_HH;\n  double Q_CC,Q_CH,Q_HH,alpha_CC,alpha_CH,alpha_HH,A_CC,A_CH,A_HH;\n  double BIJc_CC1,BIJc_CC2,BIJc_CC3,BIJc_CH1,BIJc_CH2,BIJc_CH3,\n    BIJc_HH1,BIJc_HH2,BIJc_HH3;\n  double Beta_CC1,Beta_CC2,Beta_CC3,Beta_CH1,Beta_CH2,Beta_CH3,\n    Beta_HH1,Beta_HH2,Beta_HH3;\n  double rho_CC,rho_CH,rho_HH;\n\n  // LJ Parameters (AIREBO)\n\n  double rcLJmin_CC,rcLJmin_CH,rcLJmin_HH,rcLJmax_CC,rcLJmax_CH,\n    rcLJmax_HH,bLJmin_CC;\n  double bLJmin_CH,bLJmin_HH,bLJmax_CC,bLJmax_CH,bLJmax_HH,\n    epsilon_CC,epsilon_CH,epsilon_HH;\n  double sigma_CC,sigma_CH,sigma_HH,epsilonT_CCCC,epsilonT_CCCH,epsilonT_HCCH;\n\n  // additional parameters for Morse potential.\n  double epsilonM_CC,epsilonM_CH,epsilonM_HH,alphaM_CC,alphaM_CH,alphaM_HH;\n  double reqM_CC,reqM_CH,reqM_HH;\n\n  MPI_Comm_rank(world,&me);\n\n  // read file on proc 0\n\n  if (me == 0) {\n    FILE *fp = force->open_potential(filename);\n    if (fp == NULL) {\n      char str[128];\n      if (morseflag)\n        sprintf(str,\"Cannot open AIREBO-M potential file %s\",filename);\n      else\n        sprintf(str,\"Cannot open AIREBO potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n\n    // skip initial comment lines\n\n    while (1) {\n      fgets(s,MAXLINE,fp);\n      if (s[0] != '#') break;\n    }\n\n    // read parameters\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmin_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmin_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmin_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmax_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmax_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmax_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmaxp_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmaxp_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcmaxp_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&smin);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Nmin);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Nmax);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&NCmin);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&NCmax);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Q_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Q_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Q_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&alpha_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&alpha_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&alpha_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&A_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&A_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&A_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_CC1);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_CC2);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_CC3);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_CH1);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_CH2);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_CH3);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_HH1);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_HH2);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&BIJc_HH3);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_CC1);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_CC2);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_CC3);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_CH1);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_CH2);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_CH3);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_HH1);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_HH2);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&Beta_HH3);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rho_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rho_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rho_HH);\n\n    // LJ parameters\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcLJmin_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcLJmin_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcLJmin_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcLJmax_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcLJmax_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&rcLJmax_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&bLJmin_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&bLJmin_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&bLJmin_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&bLJmax_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&bLJmax_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&bLJmax_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&epsilon_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&epsilon_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&epsilon_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&sigma_CC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&sigma_CH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&sigma_HH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&epsilonT_CCCC);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&epsilonT_CCCH);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%lg\",&epsilonT_HCCH);\n\n    if (morseflag) {\n      // lines for reading in MORSE parameters from CH.airebo_m file\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&epsilonM_CC);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&epsilonM_CH);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&epsilonM_HH);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&alphaM_CC);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&alphaM_CH);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&alphaM_HH);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&reqM_CC);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&reqM_CH);\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&reqM_HH);\n    }\n\n\n    // gC spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    // number-1 = # of domains for the spline\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit; i++) {\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&gCdom[i]);\n    }\n    fgets(s,MAXLINE,fp);\n    for (i = 0; i < limit-1; i++) {\n      for (j = 0; j < 6; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&gC1[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n    for (i = 0; i < limit-1; i++) {\n      for (j = 0; j < 6; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&gC2[i][j]);\n      }\n    }\n\n    // gH spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit; i++) {\n      fgets(s,MAXLINE,fp);\n      sscanf(s,\"%lg\",&gHdom[i]);\n    }\n\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < limit-1; i++) {\n      for (j = 0; j < 6; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&gH[i][j]);\n      }\n    }\n\n    // pCC spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit/2; i++) {\n      for (j = 0; j < limit/2; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&pCCdom[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < (int) pCCdom[0][1]; i++) {\n      for (j = 0; j < (int) pCCdom[1][1]; j++) {\n        for (k = 0; k < 16; k++) {\n          fgets(s,MAXLINE,fp);\n          sscanf(s,\"%lg\",&pCC[i][j][k]);\n        }\n      }\n    }\n\n    // pCH spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit/2; i++) {\n      for (j = 0; j < limit/2; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&pCHdom[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < (int) pCHdom[0][1]; i++) {\n      for (j = 0; j < (int) pCHdom[1][1]; j++) {\n        for (k = 0; k < 16; k++) {\n          fgets(s,MAXLINE,fp);\n          sscanf(s,\"%lg\",&pCH[i][j][k]);\n        }\n      }\n    }\n\n    // piCC cpline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit/2; i++) {\n      for (j = 0; j < limit/3; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&piCCdom[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < (int) piCCdom[0][1]; i++) {\n      for (j = 0; j < (int) piCCdom[1][1]; j++) {\n        for (k = 0; k < (int) piCCdom[2][1]; k++) {\n          for (l = 0; l < 64; l = l+1) {\n            fgets(s,MAXLINE,fp);\n            sscanf(s,\"%lg\",&piCC[i][j][k][l]);\n          }\n        }\n      }\n    }\n\n    // piCH spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit/2; i++) {\n      for (j = 0; j < limit/3; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&piCHdom[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < (int) piCHdom[0][1]; i++) {\n      for (j = 0; j < (int) piCHdom[1][1]; j++) {\n        for (k = 0; k < (int) piCHdom[2][1]; k++) {\n          for (l = 0; l < 64; l = l+1) {\n            fgets(s,MAXLINE,fp);\n            sscanf(s,\"%lg\",&piCH[i][j][k][l]);\n          }\n        }\n      }\n    }\n\n    // piHH spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit/2; i++) {\n      for (j = 0; j < limit/3; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&piHHdom[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < (int) piHHdom[0][1]; i++) {\n      for (j = 0; j < (int) piHHdom[1][1]; j++) {\n        for (k = 0; k < (int) piHHdom[2][1]; k++) {\n          for (l = 0; l < 64; l = l+1) {\n            fgets(s,MAXLINE,fp);\n            sscanf(s,\"%lg\",&piHH[i][j][k][l]);\n          }\n        }\n      }\n    }\n\n    // Tij spline\n\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n    fgets(s,MAXLINE,fp);\n\n    fgets(s,MAXLINE,fp);\n    sscanf(s,\"%d\",&limit);\n\n    for (i = 0; i < limit/2; i++) {\n      for (j = 0; j < limit/3; j++) {\n        fgets(s,MAXLINE,fp);\n        sscanf(s,\"%lg\",&Tijdom[i][j]);\n      }\n    }\n    fgets(s,MAXLINE,fp);\n\n    for (i = 0; i < (int) Tijdom[0][1]; i++) {\n      for (j = 0; j < (int) Tijdom[1][1]; j++) {\n        for (k = 0; k < (int) Tijdom[2][1]; k++) {\n          for (l = 0; l < 64; l = l+1) {\n            fgets(s,MAXLINE,fp);\n            sscanf(s,\"%lg\",&Tijc[i][j][k][l]);\n          }\n        }\n      }\n    }\n\n    fclose(fp);\n  }\n\n  // store read-in values in arrays\n\n  if (me == 0) {\n\n    // REBO\n\n    rcmin[0][0] = rcmin_CC;\n    rcmin[0][1] = rcmin_CH;\n    rcmin[1][0] = rcmin[0][1];\n    rcmin[1][1] = rcmin_HH;\n\n    rcmax[0][0] = rcmax_CC;\n    rcmax[0][1] = rcmax_CH;\n    rcmax[1][0] = rcmax[0][1];\n    rcmax[1][1] = rcmax_HH;\n\n    rcmaxsq[0][0] = rcmax[0][0]*rcmax[0][0];\n    rcmaxsq[1][0] = rcmax[1][0]*rcmax[1][0];\n    rcmaxsq[0][1] = rcmax[0][1]*rcmax[0][1];\n    rcmaxsq[1][1] = rcmax[1][1]*rcmax[1][1];\n\n    rcmaxp[0][0] = rcmaxp_CC;\n    rcmaxp[0][1] = rcmaxp_CH;\n    rcmaxp[1][0] = rcmaxp[0][1];\n    rcmaxp[1][1] = rcmaxp_HH;\n\n    Q[0][0] = Q_CC;\n    Q[0][1] = Q_CH;\n    Q[1][0] = Q[0][1];\n    Q[1][1] = Q_HH;\n\n    alpha[0][0] = alpha_CC;\n    alpha[0][1] = alpha_CH;\n    alpha[1][0] = alpha[0][1];\n    alpha[1][1] = alpha_HH;\n\n    A[0][0] = A_CC;\n    A[0][1] = A_CH;\n    A[1][0] = A[0][1];\n    A[1][1] = A_HH;\n\n    rho[0][0] = rho_CC;\n    rho[0][1] = rho_CH;\n    rho[1][0] = rho[0][1];\n    rho[1][1] = rho_HH;\n\n    BIJc[0][0][0] = BIJc_CC1;\n    BIJc[0][0][1] = BIJc_CC2;\n    BIJc[0][0][2] = BIJc_CC3;\n    BIJc[0][1][0] = BIJc_CH1;\n    BIJc[0][1][1] = BIJc_CH2;\n    BIJc[0][1][2] = BIJc_CH3;\n    BIJc[1][0][0] = BIJc_CH1;\n    BIJc[1][0][1] = BIJc_CH2;\n    BIJc[1][0][2] = BIJc_CH3;\n    BIJc[1][1][0] = BIJc_HH1;\n    BIJc[1][1][1] = BIJc_HH2;\n    BIJc[1][1][2] = BIJc_HH3;\n\n    Beta[0][0][0] = Beta_CC1;\n    Beta[0][0][1] = Beta_CC2;\n    Beta[0][0][2] = Beta_CC3;\n    Beta[0][1][0] = Beta_CH1;\n    Beta[0][1][1] = Beta_CH2;\n    Beta[0][1][2] = Beta_CH3;\n    Beta[1][0][0] = Beta_CH1;\n    Beta[1][0][1] = Beta_CH2;\n    Beta[1][0][2] = Beta_CH3;\n    Beta[1][1][0] = Beta_HH1;\n    Beta[1][1][1] = Beta_HH2;\n    Beta[1][1][2] = Beta_HH3;\n\n    // LJ\n\n    rcLJmin[0][0] = rcLJmin_CC;\n    rcLJmin[0][1] = rcLJmin_CH;\n    rcLJmin[1][0] = rcLJmin[0][1];\n    rcLJmin[1][1] = rcLJmin_HH;\n\n    rcLJmax[0][0] = rcLJmax_CC;\n    rcLJmax[0][1] = rcLJmax_CH;\n    rcLJmax[1][0] = rcLJmax[0][1];\n    rcLJmax[1][1] = rcLJmax_HH;\n\n    rcLJmaxsq[0][0] = rcLJmax[0][0]*rcLJmax[0][0];\n    rcLJmaxsq[1][0] = rcLJmax[1][0]*rcLJmax[1][0];\n    rcLJmaxsq[0][1] = rcLJmax[0][1]*rcLJmax[0][1];\n    rcLJmaxsq[1][1] = rcLJmax[1][1]*rcLJmax[1][1];\n\n    bLJmin[0][0] = bLJmin_CC;\n    bLJmin[0][1] = bLJmin_CH;\n    bLJmin[1][0] = bLJmin[0][1];\n    bLJmin[1][1] = bLJmin_HH;\n\n    bLJmax[0][0] = bLJmax_CC;\n    bLJmax[0][1] = bLJmax_CH;\n    bLJmax[1][0] = bLJmax[0][1];\n    bLJmax[1][1] = bLJmax_HH;\n\n    epsilon[0][0] = epsilon_CC;\n    epsilon[0][1] = epsilon_CH;\n    epsilon[1][0] = epsilon[0][1];\n    epsilon[1][1] = epsilon_HH;\n\n    sigma[0][0] = sigma_CC;\n    sigma[0][1] = sigma_CH;\n    sigma[1][0] = sigma[0][1];\n    sigma[1][1] = sigma_HH;\n\n    if (morseflag) {\n      // Morse parameter assignments\n\n      epsilonM[0][0] = epsilonM_CC;\n      epsilonM[0][1] = epsilonM_CH;\n      epsilonM[1][0] = epsilonM[0][1];\n      epsilonM[1][1] = epsilonM_HH;\n\n      alphaM[0][0] = alphaM_CC;\n      alphaM[0][1] = alphaM_CH;\n      alphaM[1][0] = alphaM[0][1];\n      alphaM[1][1] = alphaM_HH;\n\n      reqM[0][0] = reqM_CC;\n      reqM[0][1] = reqM_CH;\n      reqM[1][0] = reqM[0][1];\n      reqM[1][1] = reqM_HH;\n    }\n\n    // torsional\n\n    thmin = -1.0;\n    thmax = -0.995;\n    epsilonT[0][0] = epsilonT_CCCC;\n    epsilonT[0][1] = epsilonT_CCCH;\n    epsilonT[1][0] = epsilonT[0][1];\n    epsilonT[1][1] = epsilonT_HCCH;\n  }\n\n  // broadcast read-in and setup values\n\n  MPI_Bcast(&thmin,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&thmax,1,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&smin,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&Nmin,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&Nmax,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&NCmin,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&NCmax,1,MPI_DOUBLE,0,world);\n\n\n  MPI_Bcast(&rcmin[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcmax[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcmaxsq[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcmaxp[0][0],4,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&Q[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&alpha[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&A[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rho[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&BIJc[0][0][0],12,MPI_DOUBLE,0,world);\n  MPI_Bcast(&Beta[0][0][0],12,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&rcLJmin[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcLJmax[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcLJmaxsq[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcLJmin[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcLJmin[0][0],4,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&rcLJmin[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rcLJmax[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&bLJmin[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&bLJmax[0][0],4,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&epsilon[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&epsilonT[0][0],4,MPI_DOUBLE,0,world);\n\n  if (morseflag) {\n    // Morse parameter broadcast\n    MPI_Bcast(&epsilonM[0][0],4,MPI_DOUBLE,0,world);\n    MPI_Bcast(&alphaM[0][0],4,MPI_DOUBLE,0,world);\n    MPI_Bcast(&reqM[0][0],4,MPI_DOUBLE,0,world);\n  }\n\n  MPI_Bcast(&gCdom[0],5,MPI_DOUBLE,0,world);\n  MPI_Bcast(&gC1[0][0],24,MPI_DOUBLE,0,world);\n  MPI_Bcast(&gC2[0][0],24,MPI_DOUBLE,0,world);\n  MPI_Bcast(&gHdom[0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&gH[0][0],18,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&pCCdom[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pCHdom[0][0],4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pCC[0][0][0],256,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pCH[0][0][0],256,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&piCCdom[0][0],6,MPI_DOUBLE,0,world);\n  MPI_Bcast(&piCHdom[0][0],6,MPI_DOUBLE,0,world);\n  MPI_Bcast(&piHHdom[0][0],6,MPI_DOUBLE,0,world);\n  MPI_Bcast(&piCC[0][0][0][0],9216,MPI_DOUBLE,0,world);\n  MPI_Bcast(&piCH[0][0][0][0],9216,MPI_DOUBLE,0,world);\n  MPI_Bcast(&piHH[0][0][0][0],9216,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&Tijdom[0][0],6,MPI_DOUBLE,0,world);\n  MPI_Bcast(&Tijc[0][0][0][0],9216,MPI_DOUBLE,0,world);\n}\n\n// ----------------------------------------------------------------------\n// generic Spline functions\n// ----------------------------------------------------------------------\n\n/* ----------------------------------------------------------------------\n   fifth order spline evaluation\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::Sp5th(double x, double coeffs[6], double *df)\n{\n  double f, d;\n  const double x2 = x*x;\n  const double x3 = x2*x;\n\n  f  = coeffs[0];\n  f += coeffs[1]*x;\n  d  = coeffs[1];\n  f += coeffs[2]*x2;\n  d += 2.0*coeffs[2]*x;\n  f += coeffs[3]*x3;\n  d += 3.0*coeffs[3]*x2;\n  f += coeffs[4]*x2*x2;\n  d += 4.0*coeffs[4]*x3;\n  f += coeffs[5]*x2*x3;\n  d += 5.0*coeffs[5]*x2*x2;\n\n  *df = d;\n  return f;\n}\n\n/* ----------------------------------------------------------------------\n   bicubic spline evaluation\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::Spbicubic(double x, double y,\n                             double coeffs[16], double df[2])\n{\n  double f,xn,yn,xn1,yn1,c;\n  int i,j;\n\n  f = 0.0;\n  df[0] = 0.0;\n  df[1] = 0.0;\n\n  xn = 1.0;\n  for (i = 0; i < 4; i++) {\n    yn = 1.0;\n    for (j = 0; j < 4; j++) {\n      c = coeffs[i*4+j];\n\n      f += c*xn*yn;\n      if (i > 0) df[0] += c * ((double) i) * xn1 * yn;\n      if (j > 0) df[1] += c * ((double) j) * xn * yn1;\n\n      yn1 = yn;\n      yn *= y;\n    }\n    xn1 = xn;\n    xn *= x;\n  }\n\n  return f;\n}\n\n/* ----------------------------------------------------------------------\n   tricubic spline evaluation\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::Sptricubic(double x, double y, double z,\n                              double coeffs[64], double df[3])\n{\n  double f,ir,jr,kr,xn,yn,zn,xn1,yn1,zn1,c;\n  int i,j,k;\n\n  f = 0.0;\n  df[0] = 0.0;\n  df[1] = 0.0;\n  df[2] = 0.0;\n\n  xn = 1.0;\n  for (i = 0; i < 4; i++) {\n    ir = (double) i;\n    yn = 1.0;\n    for (j = 0; j < 4; j++) {\n      jr = (double) j;\n      zn = 1.0;\n      for (k = 0; k < 4; k++) {\n        kr = (double) k;\n        c = coeffs[16*i+4*j+k];\n        f += c*xn*yn*zn;\n        if (i > 0) df[0] += c * ir * xn1 * yn * zn;\n        if (j > 0) df[1] += c * jr * xn * yn1 * zn;\n        if (k > 0) df[2] += c * kr * xn * yn * zn1;\n        zn1 = zn;\n        zn *= z;\n      }\n      yn1 = yn;\n      yn *= y;\n    }\n    xn1 = xn;\n    xn *= x;\n  }\n\n  return f;\n}\n\n/* ----------------------------------------------------------------------\n   spline coefficient matrix python script\n-------------------------------------------------------------------------\n\nimport numpy as np\nimport numpy.linalg as lin\n\n# Generate all the derivatives that are spline conditions\n# Ordered such that df / dx_i / d_xj i < j.\n# Gives the derivatives at which the spline's values are prescribed.\ndef generate_derivs(n):\n  def generate_derivs_order(n, m):\n    if m == 0:\n      return [tuple()]\n    if m == 1:\n      return [tuple([i]) for i in range(n)]\n    rec = generate_derivs_order(n, m - 1)\n    return [tuple([i]+list(j)) for i in range(n) for j in rec if j[0] > i]\n  ret = []\n  m = 0\n  while m <= n:\n    ret += generate_derivs_order(n, m)\n    m += 1\n  return ret\n\n# Generate all the points in an n-dimensional unit cube.\n# Gives the points at which the spline's values are prescribed.\ndef generate_points(n):\n  if n == 1:\n    return [(0,), (1,)]\n  rec = generate_points(n - 1)\n  return [tuple([j]+list(i)) for j in range(2) for i in rec]\n\n# Generate all the coefficients in the order later expected.\ndef generate_coeffs(n):\n  if n == 1:\n    return [tuple([i]) for i in range(4)] # cubic\n  rec = generate_coeffs(n-1)\n  return [tuple([i]+list(j)) for i in range(4) for j in rec]\n\n# Evaluate the `deriv`'s derivative at `point` symbolically\n# with respect to the coefficients `coeffs`.\ndef eval_at(n, coeffs, deriv, point):\n  def eval_single(order, value, the_deriv):\n    if the_deriv:\n      if order == 0:\n        return 0\n      if order == 1:\n        return 1\n      return order * value\n    else:\n      if order == 0:\n        return 1\n      else:\n        return value\n  result = {}\n  for c in coeffs:\n    result[c] = 1\n    for i in range(n):\n      result[c] *= eval_single(c[i], point[i], i in deriv)\n  return result\n\n# Build the matrix transforming prescribed values to coefficients.\ndef get_matrix(n):\n  coeffs = generate_coeffs(n)\n  points = generate_points(n)\n  derivs = generate_derivs(n)\n  assert(len(coeffs) == len(points)*len(derivs))\n  i = 0\n  A = np.zeros((len(coeffs), len(points)*len(derivs)))\n  for d in derivs:\n    for p in points:\n      coeff = eval_at(n, coeffs, d, p)\n      for j, c in enumerate(coeffs):\n        A[i, j] = coeff[c]\n      i += 1\n  return lin.inv(A)\n\n# Output the first k values with padding n from A.\ndef output_matrix(n, k, A):\n  print('\\n'.join([''.join([(\"%{}d,\".format(n+1)) % i for i in j[:k]]) for j in A]))\n\n*/\n\n/* ----------------------------------------------------------------------\n   tricubic spline coefficient calculation\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::Sptricubic_patch_adjust(double * dl, double wid, double lo,\n                                         char dir) {\n  int rowOuterL = 16, rowInnerL = 1, colL = 4;\n  if (dir == 'R') {\n    rowOuterL = 4;\n    colL = 16;\n  } else if (dir == 'M') {\n    colL = 4;\n  } else if (dir == 'L') {\n    rowInnerL = 4;\n    colL = 1;\n  }\n  double binomial[5] = {1, 1, 2, 6};\n  for (int rowOuter = 0; rowOuter < 4; rowOuter++) {\n    for (int rowInner = 0; rowInner < 4; rowInner++) {\n      for (int col = 0; col < 4; col++) {\n        double acc = 0;\n        for (int k = col; k < 4; k++) {\n          acc += dl[rowOuterL * rowOuter + rowInnerL * rowInner + colL * k]\n               * pow(wid, -k) * pow(-lo, k - col) * binomial[k] / binomial[col]\n               / binomial[k - col];\n        }\n        dl[rowOuterL * rowOuter + rowInnerL * rowInner + colL * col] = acc;\n      }\n    }\n  }\n}\n\nvoid PairAIREBO::Sptricubic_patch_coeffs(\n    double xmin, double xmax, double ymin, double ymax, double zmin, double zmax,\n    double * y, double * y1, double * y2, double * y3, double * dl\n) {\n  const double C_inv[64][32] = {\n    // output_matrix(2, 8*4, get_matrix(3))\n      1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,\n     -3,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2, -1,  0,  0,  0,  0,  0,  0,\n      2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n     -3,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3,  0,  3,  0,  0,  0,  0,  0,\n      9, -9, -9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, -6,  3, -3,  0,  0,  0,  0,  6,  3, -6, -3,  0,  0,  0,  0,\n     -6,  6,  6, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4,  4, -2,  2,  0,  0,  0,  0, -3, -3,  3,  3,  0,  0,  0,  0,\n      2,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0,  0,\n     -6,  6,  6, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3,  3, -3,  3,  0,  0,  0,  0, -4, -2,  4,  2,  0,  0,  0,  0,\n      4, -4, -4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, -2,  2, -2,  0,  0,  0,  0,  2,  2, -2, -2,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0, -3,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0, -3,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  9, -9, -9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0, -6,  6,  6, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  2,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0, -6,  6,  6, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  4, -4, -4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n     -3,  0,  0,  0,  3,  0,  0,  0, -2,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3,  0,  0,  0,  3,  0,  0,  0,\n      9, -9,  0,  0, -9,  9,  0,  0,  6, -6,  0,  0,  3, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  3,  0,  0, -6, -3,  0,  0,\n     -6,  6,  0,  0,  6, -6,  0,  0, -4,  4,  0,  0, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3, -3,  0,  0,  3,  3,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -3,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, -9,  0,  0, -9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6,  6,  0,  0,  6, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      9,  0, -9,  0, -9,  0,  9,  0,  6,  0, -6,  0,  3,  0, -3,  0,  6,  0,  3,  0, -6,  0, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, -9,  0, -9,  0,  9,  0,\n    -27, 27, 27,-27, 27,-27,-27, 27,-18, 18, 18,-18, -9,  9,  9, -9,-18, 18, -9,  9, 18,-18,  9, -9,-18, -9, 18,  9, 18,  9,-18, -9,\n     18,-18,-18, 18,-18, 18, 18,-18, 12,-12,-12, 12,  6, -6, -6,  6, 12,-12,  6, -6,-12, 12, -6,  6,  9,  9, -9, -9, -9, -9,  9,  9,\n     -6,  0,  6,  0,  6,  0, -6,  0, -4,  0,  4,  0, -2,  0,  2,  0, -3,  0, -3,  0,  3,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6,  0,  6,  0,  6,  0, -6,  0,\n     18,-18,-18, 18,-18, 18, 18,-18, 12,-12,-12, 12,  6, -6, -6,  6,  9, -9,  9, -9, -9,  9, -9,  9, 12,  6,-12, -6,-12, -6, 12,  6,\n    -12, 12, 12,-12, 12,-12,-12, 12, -8,  8,  8, -8, -4,  4,  4, -4, -6,  6, -6,  6,  6, -6,  6, -6, -6, -6,  6,  6,  6,  6, -6, -6,\n      2,  0,  0,  0, -2,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0, -2,  0,  0,  0,\n     -6,  6,  0,  0,  6, -6,  0,  0, -3,  3,  0,  0, -3,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -4, -2,  0,  0,  4,  2,  0,  0,\n      4, -4,  0,  0, -4,  4,  0,  0,  2, -2,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0, -2, -2,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6,  6,  0,  0,  6, -6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, -4,  0,  0, -4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n     -6,  0,  6,  0,  6,  0, -6,  0, -3,  0,  3,  0, -3,  0,  3,  0, -4,  0, -2,  0,  4,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -6,  0,  6,  0,  6,  0, -6,  0,\n     18,-18,-18, 18,-18, 18, 18,-18,  9, -9, -9,  9,  9, -9, -9,  9, 12,-12,  6, -6,-12, 12, -6,  6, 12,  6,-12, -6,-12, -6, 12,  6,\n    -12, 12, 12,-12, 12,-12,-12, 12, -6,  6,  6, -6, -6,  6,  6, -6, -8,  8, -4,  4,  8, -8,  4, -4, -6, -6,  6,  6,  6,  6, -6, -6,\n      4,  0, -4,  0, -4,  0,  4,  0,  2,  0, -2,  0,  2,  0, -2,  0,  2,  0,  2,  0, -2,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0, -4,  0, -4,  0,  4,  0,\n    -12, 12, 12,-12, 12,-12,-12, 12, -6,  6,  6, -6, -6,  6,  6, -6, -6,  6, -6,  6,  6, -6,  6, -6, -8, -4,  8,  4,  8,  4, -8, -4,\n      8, -8, -8,  8, -8,  8,  8, -8,  4, -4, -4,  4,  4, -4, -4,  4,  4, -4,  4, -4, -4,  4, -4,  4,  4,  4, -4, -4, -4, -4,  4,  4,\n  };\n  double dx = xmax - xmin;\n  double dy = ymax - ymin;\n  double dz = zmax - zmin;\n  double x[32];\n  for (int i = 0; i < 8; i++) {\n    x[i+0*8] = y[i];\n    x[i+1*8] = y1[i] * dx;\n    x[i+2*8] = y2[i] * dy;\n    x[i+3*8] = y3[i] * dz;\n  }\n  for (int i = 0; i < 64; i++) {\n    dl[i] = 0;\n    for (int k = 0; k < 32; k++) {\n      dl[i] += x[k] * C_inv[i][k];\n    }\n  }\n  Sptricubic_patch_adjust(dl, dx, xmin, 'R');\n  Sptricubic_patch_adjust(dl, dy, ymin, 'M');\n  Sptricubic_patch_adjust(dl, dz, zmin, 'L');\n}\n\n/* ----------------------------------------------------------------------\n   bicubic spline coefficient calculation\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::Spbicubic_patch_adjust(double * dl, double wid, double lo,\n                                        char dir) {\n  int rowL = dir == 'R' ? 1 : 4;\n  int colL = dir == 'L' ? 1 : 4;\n  double binomial[5] = {1, 1, 2, 6};\n  for (int row = 0; row < 4; row++) {\n    for (int col = 0; col < 4; col++) {\n      double acc = 0;\n      for (int k = col; k < 4; k++) {\n        acc += dl[rowL * row + colL * k] * pow(wid, -k) * pow(-lo, k - col)\n             * binomial[k] / binomial[col] / binomial[k - col];\n      }\n      dl[rowL * row + colL * col] = acc;\n    }\n  }\n}\n\nvoid PairAIREBO::Spbicubic_patch_coeffs(\n    double xmin, double xmax, double ymin, double ymax, double * y,\n    double * y1, double * y2, double * dl\n) {\n  const double C_inv[16][12] = {\n     // output_matrix(1, 4*3, get_matrix(2))\n      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n     -3, 3, 0, 0, 0, 0, 0, 0,-2,-1, 0, 0,\n      2,-2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0,-3, 3, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 2,-2, 0, 0, 0, 0, 0, 0,\n     -3, 0, 3, 0,-2, 0,-1, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,-3, 0, 3, 0,\n      9,-9,-9, 9, 6,-6, 3,-3, 6, 3,-6,-3,\n     -6, 6, 6,-6,-4, 4,-2, 2,-3,-3, 3, 3,\n      2, 0,-2, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 2, 0,-2, 0,\n     -6, 6, 6,-6,-3, 3,-3, 3,-4,-2, 4, 2,\n      4,-4,-4, 4, 2,-2, 2,-2, 2, 2,-2,-2,\n  };\n  double dx = xmax - xmin;\n  double dy = ymax - ymin;\n  double x[12];\n  for (int i = 0; i < 4; i++) {\n    x[i+0*4] = y[i];\n    x[i+1*4] = y1[i] * dx;\n    x[i+2*4] = y2[i] * dy;\n  }\n  for (int i = 0; i < 16; i++) {\n    dl[i] = 0;\n    for (int k = 0; k < 12; k++) {\n      dl[i] += x[k] * C_inv[i][k];\n    }\n  }\n  Spbicubic_patch_adjust(dl, dx, xmin, 'R');\n  Spbicubic_patch_adjust(dl, dy, ymin, 'L');\n}\n\n/* ----------------------------------------------------------------------\n   initialize spline knot values\n------------------------------------------------------------------------- */\n\nvoid PairAIREBO::spline_init()\n{\n  int i,j,k;\n\n  for (i = 0; i < 5; i++) {\n    for (j = 0; j < 5; j++) {\n      PCCf[i][j] = 0.0;\n      PCCdfdx[i][j] = 0.0;\n      PCCdfdy[i][j] = 0.0;\n      PCHf[i][j] = 0.0;\n      PCHdfdx[i][j] = 0.0;\n      PCHdfdy[i][j] = 0.0;\n    }\n  }\n\n  PCCf[0][2] = -0.00050;\n  PCCf[0][3] = 0.0161253646;\n  PCCf[1][1] = -0.010960;\n  PCCf[1][2] = 0.00632624824;\n\n  // this one parameter for C-C interactions is different in REBO vs AIREBO\n  // see Favata, Micheletti, Ryu, Pugno, Comp Phys Comm (2016)\n\n  PCCf[2][0] = PCCf_2_0;\n\n  PCCf[2][1] = 0.00317953083;\n\n  PCHf[0][1] = 0.209336733;\n  PCHf[0][2] = -0.0644496154;\n  PCHf[0][3] = -0.303927546;\n  PCHf[1][0] = 0.010;\n  PCHf[1][1] = -0.125123401;\n  PCHf[1][2] = -0.298905246;\n  PCHf[2][0] = -0.122042146;\n  PCHf[2][1] = -0.300529172;\n  PCHf[3][0] = -0.307584705;\n\n  for (int nH = 0; nH < 4; nH++) {\n    for (int nC = 0; nC < 4; nC++) {\n      double y[4] = {0}, y1[4] = {0}, y2[4] = {0};\n      y[0] = PCCf[nC][nH];\n      y[1] = PCCf[nC][nH+1];\n      y[2] = PCCf[nC+1][nH];\n      y[3] = PCCf[nC+1][nH+1];\n      Spbicubic_patch_coeffs(nC, nC+1, nH, nH+1, y, y1, y2, &pCC[nC][nH][0]);\n      y[0] = PCHf[nC][nH];\n      y[1] = PCHf[nC][nH+1];\n      y[2] = PCHf[nC+1][nH];\n      y[3] = PCHf[nC+1][nH+1];\n      Spbicubic_patch_coeffs(nC, nC+1, nH, nH+1, y, y1, y2, &pCH[nC][nH][0]);\n    }\n  }\n\n  for (i = 0; i < 5; i++) {\n    for (j = 0; j < 5; j++) {\n      for (k = 0; k < 10; k++) {\n        piCCf[i][j][k] = 0.0;\n        piCCdfdx[i][j][k] = 0.0;\n        piCCdfdy[i][j][k] = 0.0;\n        piCCdfdz[i][j][k] = 0.0;\n        piCHf[i][j][k] = 0.0;\n        piCHdfdx[i][j][k] = 0.0;\n        piCHdfdy[i][j][k] = 0.0;\n        piCHdfdz[i][j][k] = 0.0;\n        piHHf[i][j][k] = 0.0;\n        piHHdfdx[i][j][k] = 0.0;\n        piHHdfdy[i][j][k] = 0.0;\n        piHHdfdz[i][j][k] = 0.0;\n        Tf[i][j][k] = 0.0;\n        Tdfdx[i][j][k] = 0.0;\n        Tdfdy[i][j][k] = 0.0;\n        Tdfdz[i][j][k] = 0.0;\n      }\n    }\n  }\n\n  for (i = 3; i < 10; i++) piCCf[0][0][i] = 0.0049586079;\n  piCCf[1][0][1] = 0.021693495;\n  piCCf[0][1][1] = 0.021693495;\n  for (i = 2; i < 10; i++) piCCf[1][0][i] = 0.0049586079;\n  for (i = 2; i < 10; i++) piCCf[0][1][i] = 0.0049586079;\n  piCCf[1][1][1] = 0.05250;\n  piCCf[1][1][2] = -0.002088750;\n  for (i = 3; i < 10; i++) piCCf[1][1][i] = -0.00804280;\n  piCCf[2][0][1] = 0.024698831850;\n  piCCf[0][2][1] = 0.024698831850;\n  piCCf[2][0][2] = -0.00597133450;\n  piCCf[0][2][2] = -0.00597133450;\n  for (i = 3; i < 10; i++) piCCf[2][0][i] = 0.0049586079;\n  for (i = 3; i < 10; i++) piCCf[0][2][i] = 0.0049586079;\n  piCCf[2][1][1] = 0.00482478490;\n  piCCf[1][2][1] = 0.00482478490;\n  piCCf[2][1][2] = 0.0150;\n  piCCf[1][2][2] = 0.0150;\n  piCCf[2][1][3] = -0.010;\n  piCCf[1][2][3] = -0.010;\n  piCCf[2][1][4] = -0.01168893870;\n  piCCf[1][2][4] = -0.01168893870;\n  piCCf[2][1][5] = -0.013377877400;\n  piCCf[1][2][5] = -0.013377877400;\n  piCCf[2][1][6] = -0.015066816000;\n  piCCf[1][2][6] = -0.015066816000;\n  for (i = 7; i < 10; i++) piCCf[2][1][i] = -0.015066816000;\n  for (i = 7; i < 10; i++) piCCf[1][2][i] = -0.015066816000;\n  piCCf[2][2][1] = 0.0472247850;\n  piCCf[2][2][2] = 0.0110;\n  piCCf[2][2][3] = 0.0198529350;\n  piCCf[2][2][4] = 0.01654411250;\n  piCCf[2][2][5] = 0.013235290;\n  piCCf[2][2][6] = 0.00992646749999 ;\n  piCCf[2][2][7] = 0.006617644999;\n  piCCf[2][2][8] = 0.00330882250;\n  piCCf[3][0][1] = -0.05989946750;\n  piCCf[0][3][1] = -0.05989946750;\n  piCCf[3][0][2] = -0.05989946750;\n  piCCf[0][3][2] = -0.05989946750;\n  for (i = 3; i < 10; i++) piCCf[3][0][i] = 0.0049586079;\n  for (i = 3; i < 10; i++) piCCf[0][3][i] = 0.0049586079;\n  piCCf[3][1][2] = -0.0624183760;\n  piCCf[1][3][2] = -0.0624183760;\n  for (i = 3; i < 10; i++) piCCf[3][1][i] = -0.0624183760;\n  for (i = 3; i < 10; i++) piCCf[1][3][i] = -0.0624183760;\n  piCCf[3][2][1] = -0.02235469150;\n  piCCf[2][3][1] = -0.02235469150;\n  for (i = 2; i < 10; i++) piCCf[3][2][i] = -0.02235469150;\n  for (i = 2; i < 10; i++) piCCf[2][3][i] = -0.02235469150;\n\n  piCCdfdx[2][1][1] = -0.026250;\n  piCCdfdx[2][1][5] = -0.0271880;\n  piCCdfdx[2][1][6] = -0.0271880;\n  for (i = 7; i < 10; i++) piCCdfdx[2][1][i] = -0.0271880;\n  piCCdfdx[1][3][2] = 0.0187723882;\n  for (i = 2; i < 10; i++) piCCdfdx[2][3][i] = 0.031209;\n\n  piCCdfdy[1][2][1] = -0.026250;\n  piCCdfdy[1][2][5] = -0.0271880;\n  piCCdfdy[1][2][6] = -0.0271880;\n  for (i = 7; i < 10; i++) piCCdfdy[1][2][i] = -0.0271880;\n  piCCdfdy[3][1][2] = 0.0187723882;\n  for (i = 2; i < 10; i++) piCCdfdy[3][2][i] = 0.031209;\n\n  piCCdfdz[1][1][2] = -0.0302715;\n  piCCdfdz[2][1][4] = -0.0100220;\n  piCCdfdz[1][2][4] = -0.0100220;\n  piCCdfdz[2][1][5] = -0.0100220;\n  piCCdfdz[1][2][5] = -0.0100220;\n  for (i = 4; i < 9; i++) piCCdfdz[2][2][i] = -0.0033090;\n\n  //  make top end of piCC flat instead of zero\n  i = 4;\n  for (j = 0; j < 4; j++){\n      for (k = 1; k < 11; k++){\n          piCCf[i][j][k] = piCCf[i-1][j][k];\n      }\n  }\n  for (i = 0; i < 4; i++){ // also enforces some symmetry\n      for (j = i+1; j < 5; j++){\n          for (k = 1; k < 11; k++){\n              piCCf[i][j][k] = piCCf[j][i][k];\n          }\n      }\n  }\n  for (k = 1; k < 11; k++) piCCf[4][4][k] = piCCf[3][4][k];\n  k = 10;\n  for (i = 0; i < 5; i++){\n      for (j = 0; j < 5; j++){\n      piCCf[i][j][k] = piCCf[i][j][k-1];\n      }\n  }\n\n  piCHf[1][1][1] = -0.050;\n  piCHf[1][1][2] = -0.050;\n  piCHf[1][1][3] = -0.30;\n  for (i = 4; i < 10; i++) piCHf[1][1][i] = -0.050;\n  for (i = 5; i < 10; i++) piCHf[2][0][i] = -0.004523893758064;\n  for (i = 5; i < 10; i++) piCHf[0][2][i] = -0.004523893758064;\n  piCHf[2][1][2] = -0.250;\n  piCHf[1][2][2] = -0.250;\n  piCHf[2][1][3] = -0.250;\n  piCHf[1][2][3] = -0.250;\n  piCHf[3][1][1] = -0.10;\n  piCHf[1][3][1] = -0.10;\n  piCHf[3][1][2] = -0.125;\n  piCHf[1][3][2] = -0.125;\n  piCHf[3][1][3] = -0.125;\n  piCHf[1][3][3] = -0.125;\n  for (i = 4; i < 10; i++) piCHf[3][1][i] = -0.10;\n  for (i = 4; i < 10; i++) piCHf[1][3][i] = -0.10;\n\n  // make top end of piCH flat instead of zero\n // also enforces some symmetry\n\n  i = 4;\n  for (j = 0; j < 4; j++){\n      for (k = 1; k < 11; k++){\n          piCHf[i][j][k] = piCHf[i-1][j][k];\n      }\n  }\n  for (i = 0; i < 4; i++){\n      for (j = i+1; j < 5; j++){\n          for (k = 1; k < 11; k++){\n              piCHf[i][j][k] = piCHf[j][i][k];\n          }\n      }\n  }\n  for (k = 1; k < 11; k++) piCHf[4][4][k] = piCHf[3][4][k];\n  k = 10;\n  for (i = 0; i < 5; i++){\n      for (j = 0; j < 5; j++){\n      piCHf[i][j][k] = piCHf[i][j][k-1];\n      }\n  }\n\n  piHHf[1][1][1] = 0.124915958;\n\n  Tf[2][2][1] = -0.035140;\n  for (i = 2; i < 10; i++) Tf[2][2][i] = -0.0040480;\n\n  for (int nH = 0; nH < 4; nH++) {\n    for (int nC = 0; nC < 4; nC++) {\n      // Note: Spline knot values exist up to \"10\", but are never used because\n      // they are clamped down to 9.\n      for (int nConj = 0; nConj < 9; nConj++) {\n        double y[8] = {0}, y1[8] = {0}, y2[8] = {0}, y3[8] = {0};\n        #define FILL_KNOTS_TRI(dest, src)      \\\n          dest[0] = src[nC+0][nH+0][nConj+0];  \\\n          dest[1] = src[nC+0][nH+0][nConj+1];  \\\n          dest[2] = src[nC+0][nH+1][nConj+0];  \\\n          dest[3] = src[nC+0][nH+1][nConj+1];  \\\n          dest[4] = src[nC+1][nH+0][nConj+0];  \\\n          dest[5] = src[nC+1][nH+0][nConj+1];  \\\n          dest[6] = src[nC+1][nH+1][nConj+0];  \\\n          dest[7] = src[nC+1][nH+1][nConj+1];\n        FILL_KNOTS_TRI(y, piCCf)\n        FILL_KNOTS_TRI(y1, piCCdfdx)\n        FILL_KNOTS_TRI(y2, piCCdfdy)\n        FILL_KNOTS_TRI(y3, piCCdfdz)\n        Sptricubic_patch_coeffs(nC, nC+1, nH, nH+1, nConj, nConj+1, y, y1, y2, y3, &piCC[nC][nH][nConj][0]);\n        FILL_KNOTS_TRI(y, piCHf)\n        FILL_KNOTS_TRI(y1, piCHdfdx)\n        FILL_KNOTS_TRI(y2, piCHdfdy)\n        FILL_KNOTS_TRI(y3, piCHdfdz)\n        Sptricubic_patch_coeffs(nC, nC+1, nH, nH+1, nConj, nConj+1, y, y1, y2, y3, &piCH[nC][nH][nConj][0]);\n        FILL_KNOTS_TRI(y, piHHf)\n        FILL_KNOTS_TRI(y1, piHHdfdx)\n        FILL_KNOTS_TRI(y2, piHHdfdy)\n        FILL_KNOTS_TRI(y3, piHHdfdz)\n        Sptricubic_patch_coeffs(nC, nC+1, nH, nH+1, nConj, nConj+1, y, y1, y2, y3, &piHH[nC][nH][nConj][0]);\n        FILL_KNOTS_TRI(y, Tf)\n        FILL_KNOTS_TRI(y1, Tdfdx)\n        FILL_KNOTS_TRI(y2, Tdfdy)\n        FILL_KNOTS_TRI(y3, Tdfdz)\n        Sptricubic_patch_coeffs(nC, nC+1, nH, nH+1, nConj, nConj+1, y, y1, y2, y3, &Tijc[nC][nH][nConj][0]);\n        #undef FILL_KNOTS_TRI\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairAIREBO::memory_usage()\n{\n  double bytes = 0.0;\n  bytes += maxlocal * sizeof(int);\n  bytes += maxlocal * sizeof(int *);\n\n  for (int i = 0; i < comm->nthreads; i++)\n    bytes += ipage[i].size();\n\n  bytes += 2*maxlocal * sizeof(double);\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\nMyPage = templated class for storing chunks of datums in pages\n  chunks are not returnable, can only reset and start over\n  replaces many small mallocs with a few large mallocs\n  pages are never freed, so can reuse w/out reallocs\nusage:\n  request one datum at a time, repeat, clear\n  request chunks of datums in each get() or vget(), repeat, clear\n  chunk size can vary from request to request\n  chunk size can be known in advance or registered after usage via vgot()\ninputs:\n   template T = one datum, e.g. int, double, struct, int[3]\n     for int[3], access datum as ivec[i][2]\nmethods:\n   T *get() = return ptr to one datum\n   T *get(N) = return ptr to N datums, N < maxchunk required\n   T *vget() = return ptr to maxchunk datums, use as needed, then call vgot()\n     all gets return NULL if error encountered\n   vgot(N) = used N datums of previous vget(), N < maxchunk required\n   void init(maxchunk, pagesize, pagedelta)\n     define allocation params and allocate first page(s)\n     call right after constructor\n       can call again to reset allocation params and free previous pages\n     maxchunk = max # of datums in one chunk, default = 1\n     pagesize = # of datums in one page, default = 1024\n       should be big enough to store multiple chunks\n     pagedelta = # of pages to allocate at a time, default = 1\n     return 1 if bad params\n   void reset() = clear pages w/out freeing\n   int size() = return total size of allocated pages in bytes\n   int status() = return error status\n     0 = ok, 1 = chunksize > maxchunk, 2 = allocation error\n------------------------------------------------------------------------- */\n\n#ifndef LAMMPS_MY_PAGE_H\n#define LAMMPS_MY_PAGE_H\n\n#if defined(LMP_USER_INTEL) && !defined(LAMMPS_MEMALIGN)\n#define LAMMPS_MEMALIGN 64\n#endif\n\n#include <stdlib.h>\nnamespace LAMMPS_NS {\n\ntemplate<class T>\nclass MyPage {\n public:\n  int ndatum;      // total # of stored datums\n  int nchunk;      // total # of stored chunks\n\n  MyPage() {\n    ndatum = nchunk = 0;\n    pages = NULL;\n    npage = 0;\n    errorflag = 0;\n  }\n\n  // (re)initialize allocation params\n  // also allocate first page(s)\n\n  int init(int user_maxchunk = 1, int user_pagesize = 1024,\n           int user_pagedelta = 1) {\n    maxchunk = user_maxchunk;\n    pagesize = user_pagesize;\n    pagedelta = user_pagedelta;\n\n    if (maxchunk <= 0 || pagesize <= 0 || pagedelta <= 0) return 1;\n    if (maxchunk > pagesize) return 1;\n\n    // free any previously allocated pages\n\n    for (int i = 0; i < npage; i++) free(pages[i]);\n    free(pages);\n\n    // initial page allocation\n\n    ndatum = nchunk = 0;\n    pages = NULL;\n    npage = 0;\n    allocate();\n    if (errorflag) return 2;\n    ipage = index = 0;\n    page = pages[ipage];\n    return 0;\n  }\n\n  // free all allocated pages\n\n  ~MyPage() {\n    for (int i = 0; i < npage; i++) free(pages[i]);\n    free(pages);\n  }\n\n  // get ptr to one datum\n  // return NULL if run out of memory\n\n  T *get() {\n    ndatum++;\n    nchunk++;\n    if (index < pagesize) return &page[index++];\n    ipage++;\n    if (ipage == npage) {\n      allocate();\n      if (errorflag) return NULL;\n    }\n    page = pages[ipage];\n    index = 0;\n    return &page[index++];\n  }\n\n  // get ptr to location that can store N datums\n  // error if N > maxchunk\n  // return NULL if run out of memory\n\n  T *get(int n) {\n    if (n > maxchunk) {\n      errorflag = 1;\n      return NULL;\n    }\n    ndatum += n;\n    nchunk++;\n    if (index+n <= pagesize) {\n      int start = index;\n      index += n;\n      return &page[start];\n    }\n    ipage++;\n    if (ipage == npage) {\n      allocate();\n      if (errorflag) return NULL;\n    }\n    page = pages[ipage];\n    index = n;\n    return &page[0];\n  }\n\n  // get ptr to location that can store maxchunk datums\n  // will return same ptr as previous call if vgot() not called\n  // return NULL if run out of memory\n\n  T *vget() {\n    if (index+maxchunk <= pagesize) return &page[index];\n    ipage++;\n    if (ipage == npage) {\n      allocate();\n      if (errorflag) return NULL;\n    }\n    page = pages[ipage];\n    index = 0;\n    return &page[index];\n  }\n\n  // increment by N = # of values stored in loc returned by vget()\n  // OK to not call if vget() ptr was not used\n  // error if N > maxchunk\n\n  void vgot(int n) {\n    if (n > maxchunk) errorflag = 1;\n    ndatum += n;\n    nchunk++;\n    index += n;\n  }\n\n  // clear all pages, without freeing any memory\n\n  void reset() {\n    ndatum = nchunk = 0;\n    index = ipage = 0;\n    page = pages[ipage];\n  }\n\n  // return total size of allocated pages\n\n  int size() const {\n    return npage*pagesize*sizeof(T);\n  }\n\n  // return error status\n\n  int status() const {\n    return errorflag;\n  }\n\n private:\n  T **pages;      // list of allocated pages\n  T *page;        // ptr to current page\n  int npage;      // # of allocated pages\n  int ipage;      // index of current page\n  int index;      // current index on current page\n\n  int maxchunk;   // max # of datums in one requested chunk\n  int pagesize;   // # of datums in one page, default = 1024\n  int pagedelta;  // # of pages to allocate at once, default = 1\n\n  int errorflag;  // flag > 0 if error has occurred\n                  // 1 = chunk size exceeded maxchunk\n                  // 2 = memory allocation error\n\n  void allocate() {\n    npage += pagedelta;\n    pages = (T **) realloc(pages,npage*sizeof(T *));\n    if (!pages) {\n      errorflag = 2;\n      return;\n    }\n\n    for (int i = npage-pagedelta; i < npage; i++) {\n#if defined(LAMMPS_MEMALIGN)\n      void *ptr;\n      if (posix_memalign(&ptr, LAMMPS_MEMALIGN, pagesize*sizeof(T)))\n        errorflag = 2;\n      pages[i] = (T *) ptr;\n#else\n      pages[i] = (T *) malloc(pagesize*sizeof(T));\n      if (!pages[i]) errorflag = 2;\n#endif\n    }\n  }\n};\n\n}\n\n#endif\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(airebo,PairAIREBO)\n\n#else\n\n#ifndef LMP_PAIR_AIREBO_H\n#define LMP_PAIR_AIREBO_H\n\n#include \"pair.h\"\n#include \"my_page.h\"\n#include <math.h>\n#include \"math_const.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairAIREBO : public Pair {\n public:\n  PairAIREBO(class LAMMPS *);\n  virtual ~PairAIREBO();\n  virtual void compute(int, int);\n  virtual void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n  double memory_usage();\n\n protected:\n  int *map;                        // 0 (C), 1 (H), or -1 (NULL) for each type\n\n  int me;\n  int ljflag,torflag;              // 0/1 if LJ/Morse,torsion terms included\n  int morseflag;                   // 1 if Morse instead of LJ for non-bonded\n\n  double cutlj;                    // user-specified LJ cutoff\n  double sigcut,sigwid,sigmin;     // corresponding cutoff function\n  double cutljrebosq;              // cut for when to compute\n                                   // REBO neighs of ghost atoms\n\n  double **cutljsq;                // LJ cutoffs for C,H types\n  double **lj1,**lj2,**lj3,**lj4;  // pre-computed LJ coeffs for C,H types\n  double cut3rebo;                 // maximum distance for 3rd REBO neigh\n\n  int maxlocal;                    // size of numneigh, firstneigh arrays\n  int pgsize;                      // size of neighbor page\n  int oneatom;                     // max # of neighbors for one atom\n  MyPage<int> *ipage;              // neighbor list pages\n  int *REBO_numneigh;              // # of pair neighbors for each atom\n  int **REBO_firstneigh;           // ptr to 1st neighbor of each atom\n\n  double *closestdistsq;           // closest owned atom dist to each ghost\n  double *nC,*nH;                  // sum of weighting fns with REBO neighs\n\n  double smin,Nmin,Nmax,NCmin,NCmax,thmin,thmax;\n  double rcmin[2][2],rcmax[2][2],rcmaxsq[2][2],rcmaxp[2][2];\n  double Q[2][2],alpha[2][2],A[2][2],rho[2][2],BIJc[2][2][3],Beta[2][2][3];\n  double rcLJmin[2][2],rcLJmax[2][2],rcLJmaxsq[2][2],bLJmin[2][2],bLJmax[2][2];\n  double epsilon[2][2],sigma[2][2],epsilonT[2][2];\n\n  // parameters for Morse variant\n\n  double epsilonM[2][2],alphaM[2][2],reqM[2][2];\n\n  // spline coefficients\n\n  double gCdom[5],gC1[4][6],gC2[4][6],gHdom[4],gH[3][6];\n  double pCCdom[2][2],pCHdom[2][2],pCC[4][4][16],pCH[4][4][16];\n  double piCCdom[3][2],piCHdom[3][2],piHHdom[3][2];\n  double piCC[4][4][9][64],piCH[4][4][9][64],piHH[4][4][9][64];\n  double Tijdom[3][2],Tijc[4][4][9][64];\n\n  // spline knot values\n\n  double PCCf_2_0;\n  double PCCf[5][5],PCCdfdx[5][5],PCCdfdy[5][5],PCHf[5][5];\n  double PCHdfdx[5][5],PCHdfdy[5][5];\n  double piCCf[5][5][11],piCCdfdx[5][5][11];\n  double piCCdfdy[5][5][11],piCCdfdz[5][5][11];\n  double piCHf[5][5][11],piCHdfdx[5][5][11];\n  double piCHdfdy[5][5][11],piCHdfdz[5][5][11];\n  double piHHf[5][5][11],piHHdfdx[5][5][11];\n  double piHHdfdy[5][5][11],piHHdfdz[5][5][11];\n  double Tf[5][5][10],Tdfdx[5][5][10],Tdfdy[5][5][10],Tdfdz[5][5][10];\n\n  void REBO_neigh();\n  void FREBO(int, int);\n  void FLJ(int, int);\n  void TORSION(int, int);\n\n  double bondorder(int, int, double *, double, double, double **, int);\n  double bondorderLJ(int, int, double *, double, double,\n                     double *, double, double **, int);\n\n  double gSpline(double, double, int, double *, double *);\n  double PijSpline(double, double, int, int, double *);\n  double piRCSpline(double, double, double, int, int, double *);\n  double TijSpline(double, double, double, double *);\n\n  void read_file(char *);\n\n  double Sp5th(double, double *, double *);\n  double Spbicubic(double, double, double *, double *);\n  double Sptricubic(double, double, double, double *, double *);\n  void Sptricubic_patch_adjust(double *, double, double, char);\n  void Sptricubic_patch_coeffs(double, double, double, double, double, double,\n                               double*, double*, double*, double*, double*);\n  void Spbicubic_patch_adjust(double *, double, double, char);\n  void Spbicubic_patch_coeffs(double, double, double, double, double *,\n                              double *, double *, double *);\n  void spline_init();\n\n  void allocate();\n\n  // ----------------------------------------------------------------------\n  // S'(t) and S(t) cutoff functions\n  // added to header for inlining\n  // ----------------------------------------------------------------------\n\n  /* ----------------------------------------------------------------------\n     cutoff function Sprime\n     return cutoff and dX = derivative\n     no side effects\n  ------------------------------------------------------------------------- */\n\n  inline double Sp(double Xij, double Xmin, double Xmax, double &dX) const {\n    double cutoff;\n\n    double t = (Xij-Xmin) / (Xmax-Xmin);\n    if (t <= 0.0) {\n      cutoff = 1.0;\n      dX = 0.0;\n    } else if (t >= 1.0) {\n      cutoff = 0.0;\n      dX = 0.0;\n    } else {\n      cutoff = 0.5 * (1.0+cos(t*MathConst::MY_PI));\n      dX = (-0.5*MathConst::MY_PI*sin(t*MathConst::MY_PI)) / (Xmax-Xmin);\n    }\n    return cutoff;\n  };\n\n  /* ----------------------------------------------------------------------\n     LJ cutoff function Sp2\n     return cutoff and dX = derivative\n     no side effects\n  ------------------------------------------------------------------------- */\n\n  inline double Sp2(double Xij, double Xmin, double Xmax, double &dX) const {\n    double cutoff;\n\n    double t = (Xij-Xmin) / (Xmax-Xmin);\n    if (t <= 0.0) {\n      cutoff = 1.0;\n      dX = 0.0;\n    } else if (t >= 1.0) {\n      cutoff = 0.0;\n      dX = 0.0;\n    } else {\n      cutoff = (1.0-(t*t*(3.0-2.0*t)));\n      dX = 6.0*(t*t-t) / (Xmax-Xmin);\n    }\n    return cutoff;\n  };\n\n  /* kronecker delta function returning a double */\n\n  inline double kronecker(const int a, const int b) const {\n    return (a == b) ? 1.0 : 0.0;\n  };\n\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style AIREBO requires atom IDs\n\nThis is a requirement to use the AIREBO potential.\n\nE: Pair style AIREBO requires newton pair on\n\nSee the newton command.  This is a restriction to use the AIREBO\npotential.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Neighbor list overflow, boost neigh_modify one\n\nThere are too many neighbors of a single atom.  Use the neigh_modify\ncommand to increase the max number of neighbors allowed for one atom.\nYou may also want to boost the page size.\n\nE: Cannot open AIREBO potential file %s\n\nThe specified AIREBO potential file cannot be opened.  Check that the\npath and name are correct.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_MATH_SPECIAL_H\n#define LMP_MATH_SPECIAL_H\n\n#include <math.h>\n\nnamespace LAMMPS_NS {\n\nnamespace MathSpecial {\n\n  // support function for scaled error function complement\n\n  extern double erfcx_y100(const double y100);\n\n  // fast 2**x function without argument checks for little endian CPUs\n  extern double exp2_x86(double x);\n\n// fast e**x function for little endian CPUs, falls back to libc on other platforms\n  extern double fm_exp(double x);\n\n  // scaled error function complement exp(x*x)*erfc(x) for coul/long styles\n\n  static inline double my_erfcx(const double x)\n  {\n    if (x >= 0.0) return erfcx_y100(400.0/(4.0+x));\n    else return 2.0*exp(x*x) - erfcx_y100(400.0/(4.0-x));\n  }\n\n  // exp(-x*x) for coul/long styles\n\n  static inline double expmsq(double x)\n  {\n    x *= x;\n    x *= 1.4426950408889634074; // log_2(e)\n#if defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n    return (x < 1023.0) ? exp2_x86(-x) : 0.0;\n#else\n    return (x < 1023.0) ? exp2(-x) : 0.0;\n#endif\n  }\n\n  // x**2, use instead of pow(x,2.0)\n\n  static inline double square(const double &x) { return x*x; }\n\n  // x**3, use instead of pow(x,3.0)\n  static inline double cube(const double &x) { return x*x*x; }\n\n  // return -1.0 for odd n, 1.0 for even n, like pow(-1.0,n)\n  static inline double powsign(const int n) { return (n & 1) ? -1.0 : 1.0; }\n\n  // optimized version of pow(x,n) with n being integer\n  // up to 10x faster than pow(x,y)\n\n  static inline double powint(const double &x, const int n) {\n    double yy,ww;\n\n    if (x == 0.0) return 0.0;\n    int nn = (n > 0) ? n : -n;\n    ww = x;\n\n    for (yy = 1.0; nn != 0; nn >>= 1, ww *=ww)\n      if (nn & 1) yy *= ww;\n\n    return (n > 0) ? yy : 1.0/yy;\n  }\n\n  // optimized version of (sin(x)/x)**n with n being a _positive_ integer\n\n  static inline double powsinxx(const double &x, int n) {\n    double yy,ww;\n\n    if (x == 0.0) return 1.0;\n\n    ww = sin(x)/x;\n\n    for (yy = 1.0; n != 0; n >>= 1, ww *=ww)\n      if (n & 1) yy *= ww;\n\n    return yy;\n  }\n}\n}\n\n#endif\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_lj_charmm_coul_charmm.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCharmmCoulCharmm::PairLJCharmmCoulCharmm(LAMMPS *lmp) : Pair(lmp)\n{\n  implicit = 0;\n  mix_flag = ARITHMETIC;\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCharmmCoulCharmm::~PairLJCharmmCoulCharmm()\n{\n  if (!copymode) {\n   if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n\n    memory->destroy(epsilon);\n    memory->destroy(sigma);\n    memory->destroy(eps14);\n    memory->destroy(sigma14);\n    memory->destroy(lj1);\n    memory->destroy(lj2);\n    memory->destroy(lj3);\n    memory->destroy(lj4);\n    memory->destroy(lj14_1);\n    memory->destroy(lj14_2);\n    memory->destroy(lj14_3);\n    memory->destroy(lj14_4);\n   }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,inum,jnum,itype,jtype;\n  double qtmp,xtmp,ytmp,ztmp,delx,dely,delz,evdwl,ecoul,fpair;\n  double rsq,r2inv,r6inv,forcecoul,forcelj,factor_coul,factor_lj;\n  double philj,switch1,switch2;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  double *special_coul = force->special_coul;\n  double *special_lj = force->special_lj;\n  int newton_pair = force->newton_pair;\n  double qqrd2e = force->qqrd2e;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    qtmp = q[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_lj = special_lj[sbmask(j)];\n      factor_coul = special_coul[sbmask(j)];\n      j &= NEIGHMASK;\n      jtype = type[j];\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cut_bothsq) {\n        r2inv = 1.0/rsq;\n\n        if (rsq < cut_coulsq) {\n          forcecoul = qqrd2e * qtmp*q[j]*sqrt(r2inv);\n          if (rsq > cut_coul_innersq) {\n            switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n              (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) / denom_coul;\n            forcecoul *= switch1;\n          }\n        } else forcecoul = 0.0;\n\n        if (rsq < cut_ljsq) {\n          r6inv = r2inv*r2inv*r2inv;\n          forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n          if (rsq > cut_lj_innersq) {\n            switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n              (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n            switch2 = 12.0*rsq * (cut_ljsq-rsq) *\n              (rsq-cut_lj_innersq) / denom_lj;\n            philj = r6inv * (lj3[itype][jtype]*r6inv - lj4[itype][jtype]);\n            forcelj = forcelj*switch1 + philj*switch2;\n          }\n        } else forcelj = 0.0;\n\n        fpair = (factor_coul*forcecoul + factor_lj*forcelj) * r2inv;\n\n        f[i][0] += delx*fpair;\n        f[i][1] += dely*fpair;\n        f[i][2] += delz*fpair;\n        if (newton_pair || j < nlocal) {\n          f[j][0] -= delx*fpair;\n          f[j][1] -= dely*fpair;\n          f[j][2] -= delz*fpair;\n        }\n\n        if (eflag) {\n          if (rsq < cut_coulsq) {\n            ecoul = qqrd2e * qtmp*q[j]*sqrt(r2inv);\n            if (rsq > cut_coul_innersq) {\n              switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n                (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) /\n                denom_coul;\n              ecoul *= switch1;\n            }\n            ecoul *= factor_coul;\n          } else ecoul = 0.0;\n          if (rsq < cut_ljsq) {\n            evdwl = r6inv*(lj3[itype][jtype]*r6inv-lj4[itype][jtype]);\n            if (rsq > cut_lj_innersq) {\n              switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n                (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n              evdwl *= switch1;\n            }\n            evdwl *= factor_lj;\n          } else evdwl = 0.0;\n        }\n\n        if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                             evdwl,ecoul,fpair,delx,dely,delz);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  memory->create(epsilon,n+1,n+1,\"pair:epsilon\");\n  memory->create(sigma,n+1,n+1,\"pair:sigma\");\n  memory->create(eps14,n+1,n+1,\"pair:eps14\");\n  memory->create(sigma14,n+1,n+1,\"pair:sigma14\");\n  memory->create(lj1,n+1,n+1,\"pair:lj1\");\n  memory->create(lj2,n+1,n+1,\"pair:lj2\");\n  memory->create(lj3,n+1,n+1,\"pair:lj3\");\n  memory->create(lj4,n+1,n+1,\"pair:lj4\");\n  memory->create(lj14_1,n+1,n+1,\"pair:lj14_1\");\n  memory->create(lj14_2,n+1,n+1,\"pair:lj14_2\");\n  memory->create(lj14_3,n+1,n+1,\"pair:lj14_3\");\n  memory->create(lj14_4,n+1,n+1,\"pair:lj14_4\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n   unlike other pair styles,\n     there are no individual pair settings that these override\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::settings(int narg, char **arg)\n{\n  if (narg != 2 && narg != 4)\n    error->all(FLERR,\"Illegal pair_style command\");\n\n  cut_lj_inner = force->numeric(FLERR,arg[0]);\n  cut_lj = force->numeric(FLERR,arg[1]);\n  if (narg == 2) {\n    cut_coul_inner = cut_lj_inner;\n    cut_coul = cut_lj;\n  } else {\n    cut_coul_inner = force->numeric(FLERR,arg[2]);\n    cut_coul = force->numeric(FLERR,arg[3]);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::coeff(int narg, char **arg)\n{\n  if (narg != 4 && narg != 6)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n\n  double epsilon_one = force->numeric(FLERR,arg[2]);\n  double sigma_one = force->numeric(FLERR,arg[3]);\n  double eps14_one = epsilon_one;\n  double sigma14_one = sigma_one;\n  if (narg == 6) {\n    eps14_one = force->numeric(FLERR,arg[4]);\n    sigma14_one = force->numeric(FLERR,arg[5]);\n  }\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    for (int j = MAX(jlo,i); j <= jhi; j++) {\n      epsilon[i][j] = epsilon_one;\n      sigma[i][j] = sigma_one;\n      eps14[i][j] = eps14_one;\n      sigma14[i][j] = sigma14_one;\n      setflag[i][j] = 1;\n      count++;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::init_style()\n{\n  if (!atom->q_flag)\n    error->all(FLERR,\n               \"Pair style lj/charmm/coul/charmm requires atom attribute q\");\n\n  neighbor->request(this,instance_me);\n\n  // require cut_lj_inner < cut_lj, cut_coul_inner < cut_coul\n\n  if (cut_lj_inner >= cut_lj || cut_coul_inner >= cut_coul)\n    error->all(FLERR,\"Pair inner cutoff >= Pair outer cutoff\");\n\n  cut_lj_innersq = cut_lj_inner * cut_lj_inner;\n  cut_ljsq = cut_lj * cut_lj;\n  cut_coul_innersq = cut_coul_inner * cut_coul_inner;\n  cut_coulsq = cut_coul * cut_coul;\n  cut_bothsq = MAX(cut_ljsq,cut_coulsq);\n\n  denom_lj = (cut_ljsq-cut_lj_innersq) * (cut_ljsq-cut_lj_innersq) *\n    (cut_ljsq-cut_lj_innersq);\n  denom_coul = (cut_coulsq-cut_coul_innersq) * (cut_coulsq-cut_coul_innersq) *\n    (cut_coulsq-cut_coul_innersq);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairLJCharmmCoulCharmm::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) {\n    epsilon[i][j] = mix_energy(epsilon[i][i],epsilon[j][j],\n                               sigma[i][i],sigma[j][j]);\n    sigma[i][j] = mix_distance(sigma[i][i],sigma[j][j]);\n    eps14[i][j] = mix_energy(eps14[i][i],eps14[j][j],\n                               sigma14[i][i],sigma14[j][j]);\n    sigma14[i][j] = mix_distance(sigma14[i][i],sigma14[j][j]);\n  }\n\n  double cut = MAX(cut_lj,cut_coul);\n\n  lj1[i][j] = 48.0 * epsilon[i][j] * pow(sigma[i][j],12.0);\n  lj2[i][j] = 24.0 * epsilon[i][j] * pow(sigma[i][j],6.0);\n  lj3[i][j] = 4.0 * epsilon[i][j] * pow(sigma[i][j],12.0);\n  lj4[i][j] = 4.0 * epsilon[i][j] * pow(sigma[i][j],6.0);\n  lj14_1[i][j] = 48.0 * eps14[i][j] * pow(sigma14[i][j],12.0);\n  lj14_2[i][j] = 24.0 * eps14[i][j] * pow(sigma14[i][j],6.0);\n  lj14_3[i][j] = 4.0 * eps14[i][j] * pow(sigma14[i][j],12.0);\n  lj14_4[i][j] = 4.0 * eps14[i][j] * pow(sigma14[i][j],6.0);\n\n  lj1[j][i] = lj1[i][j];\n  lj2[j][i] = lj2[i][j];\n  lj3[j][i] = lj3[i][j];\n  lj4[j][i] = lj4[i][j];\n  lj14_1[j][i] = lj14_1[i][j];\n  lj14_2[j][i] = lj14_2[i][j];\n  lj14_3[j][i] = lj14_3[i][j];\n  lj14_4[j][i] = lj14_4[i][j];\n\n  return cut;\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::write_restart(FILE *fp)\n{\n  write_restart_settings(fp);\n\n  int i,j;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      fwrite(&setflag[i][j],sizeof(int),1,fp);\n      if (setflag[i][j]) {\n        fwrite(&epsilon[i][j],sizeof(double),1,fp);\n        fwrite(&sigma[i][j],sizeof(double),1,fp);\n        fwrite(&eps14[i][j],sizeof(double),1,fp);\n        fwrite(&sigma14[i][j],sizeof(double),1,fp);\n      }\n    }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::read_restart(FILE *fp)\n{\n  read_restart_settings(fp);\n\n  allocate();\n\n  int i,j;\n  int me = comm->me;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      if (me == 0) fread(&setflag[i][j],sizeof(int),1,fp);\n      MPI_Bcast(&setflag[i][j],1,MPI_INT,0,world);\n      if (setflag[i][j]) {\n        if (me == 0) {\n          fread(&epsilon[i][j],sizeof(double),1,fp);\n          fread(&sigma[i][j],sizeof(double),1,fp);\n          fread(&eps14[i][j],sizeof(double),1,fp);\n          fread(&sigma14[i][j],sizeof(double),1,fp);\n        }\n        MPI_Bcast(&epsilon[i][j],1,MPI_DOUBLE,0,world);\n        MPI_Bcast(&sigma[i][j],1,MPI_DOUBLE,0,world);\n        MPI_Bcast(&eps14[i][j],1,MPI_DOUBLE,0,world);\n        MPI_Bcast(&sigma14[i][j],1,MPI_DOUBLE,0,world);\n      }\n    }\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ntypes; i++)\n    fprintf(fp,\"%d %g %g %g %g\\n\",\n            i,epsilon[i][i],sigma[i][i],eps14[i][i],sigma14[i][i]);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes all pairs to data file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::write_data_all(FILE *fp)\n{\n  for (int i = 1; i <= atom->ntypes; i++)\n    for (int j = i; j <= atom->ntypes; j++)\n      fprintf(fp,\"%d %d %g %g %g %g\\n\",i,j,\n              epsilon[i][j],sigma[i][j],eps14[i][j],sigma14[i][j]);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::write_restart_settings(FILE *fp)\n{\n  fwrite(&cut_lj_inner,sizeof(double),1,fp);\n  fwrite(&cut_lj,sizeof(double),1,fp);\n  fwrite(&cut_coul_inner,sizeof(double),1,fp);\n  fwrite(&cut_coul,sizeof(double),1,fp);\n  fwrite(&offset_flag,sizeof(int),1,fp);\n  fwrite(&mix_flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmm::read_restart_settings(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&cut_lj_inner,sizeof(double),1,fp);\n    fread(&cut_lj,sizeof(double),1,fp);\n    fread(&cut_coul_inner,sizeof(double),1,fp);\n    fread(&cut_coul,sizeof(double),1,fp);\n    fread(&offset_flag,sizeof(int),1,fp);\n    fread(&mix_flag,sizeof(int),1,fp);\n  }\n  MPI_Bcast(&cut_lj_inner,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cut_lj,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cut_coul_inner,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cut_coul,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&offset_flag,1,MPI_INT,0,world);\n  MPI_Bcast(&mix_flag,1,MPI_INT,0,world);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairLJCharmmCoulCharmm::single(int i, int j, int itype, int jtype,\n                                      double rsq,\n                                      double factor_coul, double factor_lj,\n                                      double &fforce)\n{\n  double r2inv,r6inv,forcecoul,forcelj,phicoul,philj;\n  double switch1,switch2;\n\n  r2inv = 1.0/rsq;\n  if (rsq < cut_coulsq) {\n    forcecoul = force->qqrd2e * atom->q[i]*atom->q[j]*sqrt(r2inv);\n    if (rsq > cut_coul_innersq) {\n      switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n        (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) / denom_coul;\n      forcecoul *= switch1;\n    }\n  } else forcecoul = 0.0;\n\n  if (rsq < cut_ljsq) {\n    r6inv = r2inv*r2inv*r2inv;\n    forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n    if (rsq > cut_lj_innersq) {\n      switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n        (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n      switch2 = 12.0*rsq * (cut_ljsq-rsq) *\n        (rsq-cut_lj_innersq) / denom_lj;\n      philj = r6inv * (lj3[itype][jtype]*r6inv - lj4[itype][jtype]);\n      forcelj = forcelj*switch1 + philj*switch2;\n    }\n  } else forcelj = 0.0;\n\n  fforce = (factor_coul*forcecoul + factor_lj*forcelj) * r2inv;\n\n  double eng = 0.0;\n  if (rsq < cut_coulsq) {\n    phicoul = force->qqrd2e * atom->q[i]*atom->q[j]*sqrt(r2inv);\n    if (rsq > cut_coul_innersq) {\n      switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n        (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) /\n        denom_coul;\n      phicoul *= switch1;\n    }\n    eng += factor_coul*phicoul;\n  }\n  if (rsq < cut_ljsq) {\n    philj = r6inv*(lj3[itype][jtype]*r6inv-lj4[itype][jtype]);\n    if (rsq > cut_lj_innersq) {\n      switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n        (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n      philj *= switch1;\n    }\n    eng += factor_lj*philj;\n  }\n\n  return eng;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid *PairLJCharmmCoulCharmm::extract(const char *str, int &dim)\n{\n  dim = 2;\n  if (strcmp(str,\"lj14_1\") == 0) return (void *) lj14_1;\n  if (strcmp(str,\"lj14_2\") == 0) return (void *) lj14_2;\n  if (strcmp(str,\"lj14_3\") == 0) return (void *) lj14_3;\n  if (strcmp(str,\"lj14_4\") == 0) return (void *) lj14_4;\n\n  dim = 0;\n  if (strcmp(str,\"implicit\") == 0) return (void *) &implicit;\n\n  return NULL;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef ATOM_CLASS\n\nAtomStyle(molecular,AtomVecMolecular)\n\n#else\n\n#ifndef LMP_ATOM_VEC_MOLECULAR_H\n#define LMP_ATOM_VEC_MOLECULAR_H\n\n#include \"atom_vec.h\"\n\nnamespace LAMMPS_NS {\n\nclass AtomVecMolecular : public AtomVec {\n public:\n  AtomVecMolecular(class LAMMPS *);\n  void grow(int);\n  void grow_reset();\n  void copy(int, int, int);\n  int pack_comm(int, int *, double *, int, int *);\n  int pack_comm_vel(int, int *, double *, int, int *);\n  void unpack_comm(int, int, double *);\n  void unpack_comm_vel(int, int, double *);\n  int pack_reverse(int, int, double *);\n  void unpack_reverse(int, int *, double *);\n  int pack_border(int, int *, double *, int, int *);\n  int pack_border_vel(int, int *, double *, int, int *);\n  int pack_border_hybrid(int, int *, double *);\n  void unpack_border(int, int, double *);\n  void unpack_border_vel(int, int, double *);\n  int unpack_border_hybrid(int, int, double *);\n  int pack_exchange(int, double *);\n  int unpack_exchange(double *);\n  int size_restart();\n  int pack_restart(int, double *);\n  int unpack_restart(double *);\n  void create_atom(int, double *);\n  void data_atom(double *, imageint, char **);\n  int data_atom_hybrid(int, char **);\n  void pack_data(double **);\n  int pack_data_hybrid(int, double *);\n  void write_data(FILE *, int, double **);\n  int write_data_hybrid(FILE *, double *);\n  bigint memory_usage();\n\n private:\n  tagint *tag;\n  int *type,*mask;\n  imageint *image;\n  double **x,**v,**f;\n  tagint *molecule;\n  int **nspecial;\n  tagint **special;\n  int *num_bond;\n  int **bond_type;\n  tagint **bond_atom;\n  int *num_angle;\n  int **angle_type;\n  tagint **angle_atom1,**angle_atom2,**angle_atom3;\n  int *num_dihedral;\n  int **dihedral_type;\n  tagint **dihedral_atom1,**dihedral_atom2,**dihedral_atom3,**dihedral_atom4;\n  int *num_improper;\n  int **improper_type;\n  tagint **improper_atom1,**improper_atom2,**improper_atom3,**improper_atom4;\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Per-processor system is too big\n\nThe number of owned atoms plus ghost atoms on a single\nprocessor must fit in 32-bit integer.\n\nE: Invalid atom type in Atoms section of data file\n\nAtom types must range from 1 to specified # of types.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <stdlib.h>\n#include \"atom_vec_molecular.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nAtomVecMolecular::AtomVecMolecular(LAMMPS *lmp) : AtomVec(lmp)\n{\n  molecular = 1;\n  bonds_allow = angles_allow = dihedrals_allow = impropers_allow = 1;\n  mass_type = 1;\n\n  comm_x_only = comm_f_only = 1;\n  size_forward = 3;\n  size_reverse = 3;\n  size_border = 7;\n  size_velocity = 3;\n  size_data_atom = 6;\n  size_data_vel = 4;\n  xcol_data = 4;\n\n  atom->molecule_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   grow atom arrays\n   n = 0 grows arrays by a chunk\n   n > 0 allocates arrays to size n\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::grow(int n)\n{\n  if (n == 0) grow_nmax();\n  else nmax = n;\n  atom->nmax = nmax;\n  if (nmax < 0 || nmax > MAXSMALLINT)\n    error->one(FLERR,\"Per-processor system is too big\");\n\n  tag = memory->grow(atom->tag,nmax,\"atom:tag\");\n  type = memory->grow(atom->type,nmax,\"atom:type\");\n  mask = memory->grow(atom->mask,nmax,\"atom:mask\");\n  image = memory->grow(atom->image,nmax,\"atom:image\");\n  x = memory->grow(atom->x,nmax,3,\"atom:x\");\n  v = memory->grow(atom->v,nmax,3,\"atom:v\");\n  f = memory->grow(atom->f,nmax*comm->nthreads,3,\"atom:f\");\n\n  molecule = memory->grow(atom->molecule,nmax,\"atom:molecule\");\n\n  nspecial = memory->grow(atom->nspecial,nmax,3,\"atom:nspecial\");\n  special = memory->grow(atom->special,nmax,atom->maxspecial,\"atom:special\");\n\n  num_bond = memory->grow(atom->num_bond,nmax,\"atom:num_bond\");\n  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,\n                           \"atom:bond_type\");\n  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,\n                           \"atom:bond_atom\");\n\n  num_angle = memory->grow(atom->num_angle,nmax,\"atom:num_angle\");\n  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,\n                            \"atom:angle_type\");\n  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom1\");\n  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom2\");\n  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom3\");\n\n  num_dihedral = memory->grow(atom->num_dihedral,nmax,\"atom:num_dihedral\");\n  dihedral_type = memory->grow(atom->dihedral_type,nmax,\n                               atom->dihedral_per_atom,\"atom:dihedral_type\");\n  dihedral_atom1 =\n    memory->grow(atom->dihedral_atom1,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom1\");\n  dihedral_atom2 =\n    memory->grow(atom->dihedral_atom2,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom2\");\n  dihedral_atom3 =\n    memory->grow(atom->dihedral_atom3,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom3\");\n  dihedral_atom4 =\n    memory->grow(atom->dihedral_atom4,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom4\");\n\n  num_improper = memory->grow(atom->num_improper,nmax,\"atom:num_improper\");\n  improper_type =\n    memory->grow(atom->improper_type,nmax,atom->improper_per_atom,\n                 \"atom:improper_type\");\n  improper_atom1 =\n    memory->grow(atom->improper_atom1,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom1\");\n  improper_atom2 =\n    memory->grow(atom->improper_atom2,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom2\");\n  improper_atom3 =\n    memory->grow(atom->improper_atom3,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom3\");\n  improper_atom4 =\n    memory->grow(atom->improper_atom4,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom4\");\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);\n}\n\n/* ----------------------------------------------------------------------\n   reset local array ptrs\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::grow_reset()\n{\n  tag = atom->tag; type = atom->type;\n  mask = atom->mask; image = atom->image;\n  x = atom->x; v = atom->v; f = atom->f;\n  molecule = atom->molecule;\n  nspecial = atom->nspecial; special = atom->special;\n  num_bond = atom->num_bond; bond_type = atom->bond_type;\n  bond_atom = atom->bond_atom;\n  num_angle = atom->num_angle; angle_type = atom->angle_type;\n  angle_atom1 = atom->angle_atom1; angle_atom2 = atom->angle_atom2;\n  angle_atom3 = atom->angle_atom3;\n  num_dihedral = atom->num_dihedral; dihedral_type = atom->dihedral_type;\n  dihedral_atom1 = atom->dihedral_atom1; dihedral_atom2 = atom->dihedral_atom2;\n  dihedral_atom3 = atom->dihedral_atom3; dihedral_atom4 = atom->dihedral_atom4;\n  num_improper = atom->num_improper; improper_type = atom->improper_type;\n  improper_atom1 = atom->improper_atom1; improper_atom2 = atom->improper_atom2;\n  improper_atom3 = atom->improper_atom3; improper_atom4 = atom->improper_atom4;\n}\n\n/* ----------------------------------------------------------------------\n   copy atom I info to atom J\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::copy(int i, int j, int delflag)\n{\n  int k;\n\n  tag[j] = tag[i];\n  type[j] = type[i];\n  mask[j] = mask[i];\n  image[j] = image[i];\n  x[j][0] = x[i][0];\n  x[j][1] = x[i][1];\n  x[j][2] = x[i][2];\n  v[j][0] = v[i][0];\n  v[j][1] = v[i][1];\n  v[j][2] = v[i][2];\n\n  molecule[j] = molecule[i];\n\n  num_bond[j] = num_bond[i];\n  for (k = 0; k < num_bond[j]; k++) {\n    bond_type[j][k] = bond_type[i][k];\n    bond_atom[j][k] = bond_atom[i][k];\n  }\n\n  num_angle[j] = num_angle[i];\n  for (k = 0; k < num_angle[j]; k++) {\n    angle_type[j][k] = angle_type[i][k];\n    angle_atom1[j][k] = angle_atom1[i][k];\n    angle_atom2[j][k] = angle_atom2[i][k];\n    angle_atom3[j][k] = angle_atom3[i][k];\n  }\n\n  num_dihedral[j] = num_dihedral[i];\n  for (k = 0; k < num_dihedral[j]; k++) {\n    dihedral_type[j][k] = dihedral_type[i][k];\n    dihedral_atom1[j][k] = dihedral_atom1[i][k];\n    dihedral_atom2[j][k] = dihedral_atom2[i][k];\n    dihedral_atom3[j][k] = dihedral_atom3[i][k];\n    dihedral_atom4[j][k] = dihedral_atom4[i][k];\n  }\n\n  num_improper[j] = num_improper[i];\n  for (k = 0; k < num_improper[j]; k++) {\n    improper_type[j][k] = improper_type[i][k];\n    improper_atom1[j][k] = improper_atom1[i][k];\n    improper_atom2[j][k] = improper_atom2[i][k];\n    improper_atom3[j][k] = improper_atom3[i][k];\n    improper_atom4[j][k] = improper_atom4[i][k];\n  }\n\n  nspecial[j][0] = nspecial[i][0];\n  nspecial[j][1] = nspecial[i][1];\n  nspecial[j][2] = nspecial[i][2];\n  for (k = 0; k < nspecial[j][2]; k++) special[j][k] = special[i][k];\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_comm(int n, int *list, double *buf,\n                                int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_comm_vel(int n, int *list, double *buf,\n                                    int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::unpack_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::unpack_comm_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_reverse(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    buf[m++] = f[i][0];\n    buf[m++] = f[i][1];\n    buf[m++] = f[i][2];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::unpack_reverse(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    f[j][0] += buf[m++];\n    f[j][1] += buf[m++];\n    f[j][2] += buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_border(int n, int *list, double *buf,\n                                  int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_border_vel(int n, int *list, double *buf,\n                                      int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_border_hybrid(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = ubuf(molecule[j]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::unpack_border(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::unpack_border_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::unpack_border_hybrid(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++)\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   pack data for atom I for sending to another proc\n   xyz must be 1st 3 values, so comm::exchange() can test on them\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_exchange(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(bond_type[i][k]).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_angle[i]).d;\n  for (k = 0; k < num_angle[i]; k++) {\n    buf[m++] = ubuf(angle_type[i][k]).d;\n    buf[m++] = ubuf(angle_atom1[i][k]).d;\n    buf[m++] = ubuf(angle_atom2[i][k]).d;\n    buf[m++] = ubuf(angle_atom3[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_dihedral[i]).d;\n  for (k = 0; k < num_dihedral[i]; k++) {\n    buf[m++] = ubuf(dihedral_type[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom1[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom2[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom3[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom4[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_improper[i]).d;\n  for (k = 0; k < num_improper[i]; k++) {\n    buf[m++] = ubuf(improper_type[i][k]).d;\n    buf[m++] = ubuf(improper_atom1[i][k]).d;\n    buf[m++] = ubuf(improper_atom2[i][k]).d;\n    buf[m++] = ubuf(improper_atom3[i][k]).d;\n    buf[m++] = ubuf(improper_atom4[i][k]).d;\n  }\n\n  buf[m++] = ubuf(nspecial[i][0]).d;\n  buf[m++] = ubuf(nspecial[i][1]).d;\n  buf[m++] = ubuf(nspecial[i][2]).d;\n  for (k = 0; k < nspecial[i][2]; k++) buf[m++] = ubuf(special[i][k]).d;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecMolecular::unpack_exchange(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  num_angle[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_angle[nlocal]; k++) {\n    angle_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom1[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom2[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom3[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  num_dihedral[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_dihedral[nlocal]; k++) {\n    dihedral_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom1[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom2[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom3[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom4[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  num_improper[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_improper[nlocal]; k++) {\n    improper_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom1[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom2[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom3[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom4[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][1] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][2] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < nspecial[nlocal][2]; k++)\n    special[nlocal][k] = (int) ubuf(buf[m++]).i;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->\n        unpack_exchange(nlocal,&buf[m]);\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   size of restart data for all atoms owned by this proc\n   include extra data stored by fixes\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::size_restart()\n{\n  int i;\n\n  int nlocal = atom->nlocal;\n  int n = 0;\n  for (i = 0; i < nlocal; i++)\n    n += 16 + 2*num_bond[i] + 4*num_angle[i] +\n      5*num_dihedral[i] + 5*num_improper[i];\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      for (i = 0; i < nlocal; i++)\n        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);\n\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom I's data for restart file including extra quantities\n   xyz must be 1st 3 values, so that read_restart can test on them\n   molecular types may be negative, but write as positive\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_restart(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(MAX(bond_type[i][k],-bond_type[i][k])).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_angle[i]).d;\n  for (k = 0; k < num_angle[i]; k++) {\n    buf[m++] = ubuf(MAX(angle_type[i][k],-angle_type[i][k])).d;\n    buf[m++] = ubuf(angle_atom1[i][k]).d;\n    buf[m++] = ubuf(angle_atom2[i][k]).d;\n    buf[m++] = ubuf(angle_atom3[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_dihedral[i]).d;\n  for (k = 0; k < num_dihedral[i]; k++) {\n    buf[m++] = ubuf(MAX(dihedral_type[i][k],-dihedral_type[i][k])).d;\n    buf[m++] = ubuf(dihedral_atom1[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom2[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom3[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom4[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_improper[i]).d;\n  for (k = 0; k < num_improper[i]; k++) {\n    buf[m++] = ubuf(MAX(improper_type[i][k],-improper_type[i][k])).d;\n    buf[m++] = ubuf(improper_atom1[i][k]).d;\n    buf[m++] = ubuf(improper_atom2[i][k]).d;\n    buf[m++] = ubuf(improper_atom3[i][k]).d;\n    buf[m++] = ubuf(improper_atom4[i][k]).d;\n  }\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   unpack data for one atom from restart file including extra quantities\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::unpack_restart(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) {\n    grow(0);\n    if (atom->nextra_store)\n      memory->grow(atom->extra,nmax,atom->nextra_store,\"atom:extra\");\n  }\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  num_angle[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_angle[nlocal]; k++) {\n    angle_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom1[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom2[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom3[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  num_dihedral[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_dihedral[nlocal]; k++) {\n    dihedral_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom1[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom2[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom3[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom4[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  num_improper[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_improper[nlocal]; k++) {\n    improper_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom1[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom2[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom3[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom4[nlocal][k] = (int) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  double **extra = atom->extra;\n  if (atom->nextra_store) {\n    int size = static_cast<int> (buf[0]) - m;\n    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];\n  }\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   create one atom of itype at coord\n   set other values to defaults\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::create_atom(int itype, double *coord)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = 0;\n  type[nlocal] = itype;\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n  mask[nlocal] = 1;\n  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |\n    ((imageint) IMGMAX << IMGBITS) | IMGMAX;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n\n  molecule[nlocal] = 0;\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  num_dihedral[nlocal] = 0;\n  num_improper[nlocal] = 0;\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack one line from Atoms section of data file\n   initialize other atom quantities\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::data_atom(double *coord, imageint imagetmp,\n                                 char **values)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = ATOTAGINT(values[0]);\n  molecule[nlocal] = ATOTAGINT(values[1]);\n  type[nlocal] = atoi(values[2]);\n  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)\n    error->one(FLERR,\"Invalid atom type in Atoms section of data file\");\n\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n\n  image[nlocal] = imagetmp;\n\n  mask[nlocal] = 1;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  num_dihedral[nlocal] = 0;\n  num_improper[nlocal] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack hybrid quantities from one line in Atoms section of data file\n   initialize other atom quantities for this sub-style\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::data_atom_hybrid(int nlocal, char **values)\n{\n  molecule[nlocal] = ATOTAGINT(values[0]);\n\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  num_dihedral[nlocal] = 0;\n  num_improper[nlocal] = 0;\n\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom info for data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::pack_data(double **buf)\n{\n  int nlocal = atom->nlocal;\n  for (int i = 0; i < nlocal; i++) {\n    buf[i][0] = ubuf(tag[i]).d;\n    buf[i][1] = ubuf(molecule[i]).d;\n    buf[i][2] = ubuf(type[i]).d;\n    buf[i][3] = x[i][0];\n    buf[i][4] = x[i][1];\n    buf[i][5] = x[i][2];\n    buf[i][6] = ubuf((image[i] & IMGMASK) - IMGMAX).d;\n    buf[i][7] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;\n    buf[i][8] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   pack hybrid atom info for data file\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::pack_data_hybrid(int i, double *buf)\n{\n  buf[0] = ubuf(molecule[i]).d;\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   write atom info to data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecMolecular::write_data(FILE *fp, int n, double **buf)\n{\n  for (int i = 0; i < n; i++)\n    fprintf(fp,TAGINT_FORMAT \" \" TAGINT_FORMAT\n            \" %d %-1.16e %-1.16e %-1.16e %d %d %d\\n\",\n            (tagint) ubuf(buf[i][0]).i,(tagint) ubuf(buf[i][1]).i,\n            (int) ubuf(buf[i][2]).i,\n            buf[i][3],buf[i][4],buf[i][5],\n            (int) ubuf(buf[i][6]).i,(int) ubuf(buf[i][7]).i,\n            (int) ubuf(buf[i][8]).i);\n}\n\n/* ----------------------------------------------------------------------\n   write hybrid atom info to data file\n------------------------------------------------------------------------- */\n\nint AtomVecMolecular::write_data_hybrid(FILE *fp, double *buf)\n{\n  fprintf(fp,\" \" TAGINT_FORMAT,(tagint) ubuf(buf[0]).i);\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   return # of bytes of allocated memory\n------------------------------------------------------------------------- */\n\nbigint AtomVecMolecular::memory_usage()\n{\n  bigint bytes = 0;\n\n  if (atom->memcheck(\"tag\")) bytes += memory->usage(tag,nmax);\n  if (atom->memcheck(\"type\")) bytes += memory->usage(type,nmax);\n  if (atom->memcheck(\"mask\")) bytes += memory->usage(mask,nmax);\n  if (atom->memcheck(\"image\")) bytes += memory->usage(image,nmax);\n  if (atom->memcheck(\"x\")) bytes += memory->usage(x,nmax,3);\n  if (atom->memcheck(\"v\")) bytes += memory->usage(v,nmax,3);\n  if (atom->memcheck(\"f\")) bytes += memory->usage(f,nmax*comm->nthreads,3);\n\n  if (atom->memcheck(\"molecule\")) bytes += memory->usage(molecule,nmax);\n  if (atom->memcheck(\"nspecial\")) bytes += memory->usage(nspecial,nmax,3);\n  if (atom->memcheck(\"special\"))\n    bytes += memory->usage(special,nmax,atom->maxspecial);\n\n  if (atom->memcheck(\"num_bond\")) bytes += memory->usage(num_bond,nmax);\n  if (atom->memcheck(\"bond_type\"))\n    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);\n  if (atom->memcheck(\"bond_atom\"))\n    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);\n\n  if (atom->memcheck(\"num_angle\")) bytes += memory->usage(num_angle,nmax);\n  if (atom->memcheck(\"angle_type\"))\n    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom1\"))\n    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom2\"))\n    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom3\"))\n    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);\n\n  if (atom->memcheck(\"num_dihedral\")) bytes += memory->usage(num_dihedral,nmax);\n  if (atom->memcheck(\"dihedral_type\"))\n    bytes += memory->usage(dihedral_type,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom1\"))\n    bytes += memory->usage(dihedral_atom1,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom2\"))\n    bytes += memory->usage(dihedral_atom2,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom3\"))\n    bytes += memory->usage(dihedral_atom3,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom4\"))\n    bytes += memory->usage(dihedral_atom4,nmax,atom->dihedral_per_atom);\n\n  if (atom->memcheck(\"num_improper\")) bytes += memory->usage(num_improper,nmax);\n  if (atom->memcheck(\"improper_type\"))\n    bytes += memory->usage(improper_type,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom1\"))\n    bytes += memory->usage(improper_atom1,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom2\"))\n    bytes += memory->usage(improper_atom2,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom3\"))\n    bytes += memory->usage(improper_atom3,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom4\"))\n    bytes += memory->usage(improper_atom4,nmax,atom->improper_per_atom);\n\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_ATOM_VEC_H\n#define LMP_ATOM_VEC_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass AtomVec : protected Pointers {\n public:\n  int molecular;                       // 0 = atomic, 1 = molecular system\n  int bonds_allow,angles_allow;        // 1 if bonds, angles are used\n  int dihedrals_allow,impropers_allow; // 1 if dihedrals, impropers used\n  int mass_type;                       // 1 if per-type masses\n  int dipole_type;                     // 1 if per-type dipole moments\n  int forceclearflag;                  // 1 if has forceclear() method\n\n  int comm_x_only;                     // 1 if only exchange x in forward comm\n  int comm_f_only;                     // 1 if only exchange f in reverse comm\n\n  int size_forward;                    // # of values per atom in comm\n  int size_reverse;                    // # in reverse comm\n  int size_border;                     // # in border comm\n  int size_velocity;                   // # of velocity based quantities\n  int size_data_atom;                  // number of values in Atom line\n  int size_data_vel;                   // number of values in Velocity line\n  int size_data_bonus;                 // number of values in Bonus line\n  int xcol_data;                       // column (1-N) where x is in Atom line\n\n  class Molecule **onemols;            // list of molecules for style template\n  int nset;                            // # of molecules in list\n\n  int kokkosable;                      // 1 if atom style is KOKKOS-enabled\n\n  int nargcopy;          // copy of command-line args for atom_style command\n  char **argcopy;        // used when AtomVec is realloced (restart,replicate)\n\n  AtomVec(class LAMMPS *);\n  virtual ~AtomVec();\n  void store_args(int, char **);\n  virtual void process_args(int, char **);\n  virtual void init();\n\n  virtual void grow(int) = 0;\n  virtual void grow_reset() = 0;\n  virtual void copy(int, int, int) = 0;\n  virtual void clear_bonus() {}\n  virtual void force_clear(int, size_t) {}\n\n  virtual int pack_comm(int, int *, double *, int, int *) = 0;\n  virtual int pack_comm_vel(int, int *, double *, int, int *) = 0;\n  virtual int pack_comm_hybrid(int, int *, double *) {return 0;}\n  virtual void unpack_comm(int, int, double *) = 0;\n  virtual void unpack_comm_vel(int, int, double *) = 0;\n  virtual int unpack_comm_hybrid(int, int, double *) {return 0;}\n\n  virtual int pack_reverse(int, int, double *) = 0;\n  virtual int pack_reverse_hybrid(int, int, double *) {return 0;}\n  virtual void unpack_reverse(int, int *, double *) = 0;\n  virtual int unpack_reverse_hybrid(int, int *, double *) {return 0;}\n\n  virtual int pack_border(int, int *, double *, int, int *) = 0;\n  virtual int pack_border_vel(int, int *, double *, int, int *) = 0;\n  virtual int pack_border_hybrid(int, int *, double *) {return 0;}\n  virtual void unpack_border(int, int, double *) = 0;\n  virtual void unpack_border_vel(int, int, double *) = 0;\n  virtual int unpack_border_hybrid(int, int, double *) {return 0;}\n\n  virtual int pack_exchange(int, double *) = 0;\n  virtual int unpack_exchange(double *) = 0;\n\n  virtual int size_restart() = 0;\n  virtual int pack_restart(int, double *) = 0;\n  virtual int unpack_restart(double *) = 0;\n\n  virtual void create_atom(int, double *) = 0;\n\n  virtual void data_atom(double *, imageint, char **) = 0;\n  virtual void data_atom_bonus(int, char **) {}\n  virtual int data_atom_hybrid(int, char **) {return 0;}\n  virtual void data_vel(int, char **);\n  virtual int data_vel_hybrid(int, char **) {return 0;}\n\n  virtual void pack_data(double **) = 0;\n  virtual int pack_data_hybrid(int, double *) {return 0;}\n  virtual void write_data(FILE *, int, double **) = 0;\n  virtual int write_data_hybrid(FILE *, double *) {return 0;}\n  virtual void pack_vel(double **);\n  virtual int pack_vel_hybrid(int, double *) {return 0;}\n  virtual void write_vel(FILE *, int, double **);\n  virtual int write_vel_hybrid(FILE *, double *) {return 0;}\n\n  int pack_bond(tagint **);\n  void write_bond(FILE *, int, tagint **, int);\n  int pack_angle(tagint **);\n  void write_angle(FILE *, int, tagint **, int);\n  void pack_dihedral(tagint **);\n  void write_dihedral(FILE *, int, tagint **, int);\n  void pack_improper(tagint **);\n  void write_improper(FILE *, int, tagint **, int);\n\n  virtual int property_atom(char *) {return -1;}\n  virtual void pack_property_atom(int, double *, int, int) {}\n\n  virtual bigint memory_usage() = 0;\n\n protected:\n  int nmax;                             // local copy of atom->nmax\n  int deform_vremap;                    // local copy of domain properties\n  int deform_groupbit;\n  double *h_rate;\n\n  // union data struct for packing 32-bit and 64-bit ints into double bufs\n  // this avoids aliasing issues by having 2 pointers (double,int)\n  //   to same buf memory\n  // constructor for 32-bit int prevents compiler\n  //   from possibly calling the double constructor when passed an int\n  // copy to a double *buf:\n  //   buf[m++] = ubuf(foo).d, where foo is a 32-bit or 64-bit int\n  // copy from a double *buf:\n  //   foo = (int) ubuf(buf[m++]).i;, where (int) or (tagint) match foo\n  //   the cast prevents compiler warnings about possible truncation\n\n  union ubuf {\n    double d;\n    int64_t i;\n    ubuf(double arg) : d(arg) {}\n    ubuf(int64_t arg) : i(arg) {}\n    ubuf(int arg) : i(arg) {}\n  };\n\n  void grow_nmax();\n  int grow_nmax_bonus(int);\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Invalid atom_style command\n\nSelf-explanatory.\n\nE: KOKKOS package requires a kokkos enabled atom_style\n\nSelf-explanatory.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(rebo,PairREBO)\n\n#else\n\n#ifndef LMP_PAIR_REBO_H\n#define LMP_PAIR_REBO_H\n\n#include \"pair_airebo.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairREBO : public PairAIREBO {\n public:\n  PairREBO(class LAMMPS *);\n  void settings(int, char **);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include \"pair_rebo.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairREBO::PairREBO(LAMMPS *lmp) : PairAIREBO(lmp) {}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairREBO::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n\n  cutlj = 0.0;\n  ljflag = torflag = 0;\n\n  // this one parameter for C-C interactions is different in REBO vs AIREBO\n  // see Favata, Micheletti, Ryu, Pugno, Comp Phys Comm (2016)\n  \n  PCCf_2_0 = 0.0;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <mpi.h>\n#include <string.h>\n#include <stdlib.h>\n#include \"fix_bond_create.h\"\n#include \"update.h\"\n#include \"respa.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"random_mars.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\n\n#define BIG 1.0e20\n#define DELTA 16\n\n/* ---------------------------------------------------------------------- */\n\nFixBondCreate::FixBondCreate(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg),\n  bondcount(NULL), partner(NULL), finalpartner(NULL), distsq(NULL),\n  probability(NULL), created(NULL), copy(NULL), random(NULL), list(NULL)\n{\n  if (narg < 8) error->all(FLERR,\"Illegal fix bond/create command\");\n\n  MPI_Comm_rank(world,&me);\n\n  nevery = force->inumeric(FLERR,arg[3]);\n  if (nevery <= 0) error->all(FLERR,\"Illegal fix bond/create command\");\n\n  force_reneighbor = 1;\n  next_reneighbor = -1;\n  vector_flag = 1;\n  size_vector = 2;\n  global_freq = 1;\n  extvector = 0;\n\n  iatomtype = force->inumeric(FLERR,arg[4]);\n  jatomtype = force->inumeric(FLERR,arg[5]);\n  double cutoff = force->numeric(FLERR,arg[6]);\n  btype = force->inumeric(FLERR,arg[7]);\n\n  if (iatomtype < 1 || iatomtype > atom->ntypes ||\n      jatomtype < 1 || jatomtype > atom->ntypes)\n    error->all(FLERR,\"Invalid atom type in fix bond/create command\");\n  if (cutoff < 0.0) error->all(FLERR,\"Illegal fix bond/create command\");\n  if (btype < 1 || btype > atom->nbondtypes)\n    error->all(FLERR,\"Invalid bond type in fix bond/create command\");\n\n  cutsq = cutoff*cutoff;\n\n  // optional keywords\n\n  imaxbond = 0;\n  inewtype = iatomtype;\n  jmaxbond = 0;\n  jnewtype = jatomtype;\n  fraction = 1.0;\n  int seed = 12345;\n  atype = dtype = itype = 0;\n\n  int iarg = 8;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"iparam\") == 0) {\n      if (iarg+3 > narg) error->all(FLERR,\"Illegal fix bond/create command\");\n      imaxbond = force->inumeric(FLERR,arg[iarg+1]);\n      inewtype = force->inumeric(FLERR,arg[iarg+2]);\n      if (imaxbond < 0) error->all(FLERR,\"Illegal fix bond/create command\");\n      if (inewtype < 1 || inewtype > atom->ntypes)\n        error->all(FLERR,\"Invalid atom type in fix bond/create command\");\n      iarg += 3;\n    } else if (strcmp(arg[iarg],\"jparam\") == 0) {\n      if (iarg+3 > narg) error->all(FLERR,\"Illegal fix bond/create command\");\n      jmaxbond = force->inumeric(FLERR,arg[iarg+1]);\n      jnewtype = force->inumeric(FLERR,arg[iarg+2]);\n      if (jmaxbond < 0) error->all(FLERR,\"Illegal fix bond/create command\");\n      if (jnewtype < 1 || jnewtype > atom->ntypes)\n        error->all(FLERR,\"Invalid atom type in fix bond/create command\");\n      iarg += 3;\n    } else if (strcmp(arg[iarg],\"prob\") == 0) {\n      if (iarg+3 > narg) error->all(FLERR,\"Illegal fix bond/create command\");\n      fraction = force->numeric(FLERR,arg[iarg+1]);\n      seed = force->inumeric(FLERR,arg[iarg+2]);\n      if (fraction < 0.0 || fraction > 1.0)\n        error->all(FLERR,\"Illegal fix bond/create command\");\n      if (seed <= 0) error->all(FLERR,\"Illegal fix bond/create command\");\n      iarg += 3;\n    } else if (strcmp(arg[iarg],\"atype\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix bond/create command\");\n      atype = force->inumeric(FLERR,arg[iarg+1]);\n      if (atype < 0) error->all(FLERR,\"Illegal fix bond/create command\");\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"dtype\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix bond/create command\");\n      dtype = force->inumeric(FLERR,arg[iarg+1]);\n      if (dtype < 0) error->all(FLERR,\"Illegal fix bond/create command\");\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"itype\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix bond/create command\");\n      itype = force->inumeric(FLERR,arg[iarg+1]);\n      if (itype < 0) error->all(FLERR,\"Illegal fix bond/create command\");\n      iarg += 2;\n    } else error->all(FLERR,\"Illegal fix bond/create command\");\n  }\n\n  // error check\n\n  if (atom->molecular != 1)\n    error->all(FLERR,\"Cannot use fix bond/create with non-molecular systems\");\n  if (iatomtype == jatomtype &&\n      ((imaxbond != jmaxbond) || (inewtype != jnewtype)))\n    error->all(FLERR,\n               \"Inconsistent iparam/jparam values in fix bond/create command\");\n\n  // initialize Marsaglia RNG with processor-unique seed\n\n  random = new RanMars(lmp,seed + me);\n\n  // perform initial allocation of atom-based arrays\n  // register with Atom class\n  // bondcount values will be initialized in setup()\n\n  bondcount = NULL;\n  grow_arrays(atom->nmax);\n  atom->add_callback(0);\n  countflag = 0;\n\n  // set comm sizes needed by this fix\n  // forward is big due to comm of broken bonds and 1-2 neighbors\n\n  comm_forward = MAX(2,2+atom->maxspecial);\n  comm_reverse = 2;\n\n  // allocate arrays local to this fix\n\n  nmax = 0;\n  partner = finalpartner = NULL;\n  distsq = NULL;\n\n  maxcreate = 0;\n  created = NULL;\n\n  // copy = special list for one atom\n  // size = ms^2 + ms is sufficient\n  // b/c in rebuild_special_one() neighs of all 1-2s are added,\n  //   then a dedup(), then neighs of all 1-3s are added, then final dedup()\n  // this means intermediate size cannot exceed ms^2 + ms\n\n  int maxspecial = atom->maxspecial;\n  copy = new tagint[maxspecial*maxspecial + maxspecial];\n\n  // zero out stats\n\n  createcount = 0;\n  createcounttotal = 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixBondCreate::~FixBondCreate()\n{\n  // unregister callbacks to this fix from Atom class\n\n  atom->delete_callback(id,0);\n\n  delete random;\n\n  // delete locally stored arrays\n\n  memory->destroy(bondcount);\n  memory->destroy(partner);\n  memory->destroy(finalpartner);\n  memory->destroy(distsq);\n  memory->destroy(created);\n  delete [] copy;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondCreate::setmask()\n{\n  int mask = 0;\n  mask |= POST_INTEGRATE;\n  mask |= POST_INTEGRATE_RESPA;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::init()\n{\n  if (strstr(update->integrate_style,\"respa\"))\n    nlevels_respa = ((Respa *) update->integrate)->nlevels;\n\n  // check cutoff for iatomtype,jatomtype\n\n  if (force->pair == NULL || cutsq > force->pair->cutsq[iatomtype][jatomtype])\n    error->all(FLERR,\"Fix bond/create cutoff is longer than pairwise cutoff\");\n\n  // enable angle/dihedral/improper creation if atype/dtype/itype\n  //   option was used and a force field has been specified\n\n  if (atype && force->angle) {\n    angleflag = 1;\n    if (atype > atom->nangletypes)\n      error->all(FLERR,\"Fix bond/create angle type is invalid\");\n  } else angleflag = 0;\n\n  if (dtype && force->dihedral) {\n    dihedralflag = 1;\n    if (dtype > atom->ndihedraltypes)\n      error->all(FLERR,\"Fix bond/create dihedral type is invalid\");\n  } else dihedralflag = 0;\n\n  if (itype && force->improper) {\n    improperflag = 1;\n    if (itype > atom->nimpropertypes)\n      error->all(FLERR,\"Fix bond/create improper type is invalid\");\n  } else improperflag = 0;\n\n  if (force->improper) {\n    if (force->improper_match(\"class2\") || force->improper_match(\"ring\"))\n      error->all(FLERR,\"Cannot yet use fix bond/create with this \"\n                 \"improper style\");\n  }\n\n  // need a half neighbor list, built every Nevery steps\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->pair = 0;\n  neighbor->requests[irequest]->fix = 1;\n  neighbor->requests[irequest]->occasional = 1;\n\n  lastcheck = -1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::init_list(int id, NeighList *ptr)\n{\n  list = ptr;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::setup(int vflag)\n{\n  int i,j,m;\n\n  // compute initial bondcount if this is first run\n  // can't do this earlier, in constructor or init, b/c need ghost info\n\n  if (countflag) return;\n  countflag = 1;\n\n  // count bonds stored with each bond I own\n  // if newton bond is not set, just increment count on atom I\n  // if newton bond is set, also increment count on atom J even if ghost\n  // bondcount is long enough to tally ghost atom counts\n\n  int *num_bond = atom->num_bond;\n  int **bond_type = atom->bond_type;\n  tagint **bond_atom = atom->bond_atom;\n  int nlocal = atom->nlocal;\n  int nghost = atom->nghost;\n  int nall = nlocal + nghost;\n  int newton_bond = force->newton_bond;\n\n  for (i = 0; i < nall; i++) bondcount[i] = 0;\n\n  for (i = 0; i < nlocal; i++)\n    for (j = 0; j < num_bond[i]; j++) {\n      if (bond_type[i][j] == btype) {\n        bondcount[i]++;\n        if (newton_bond) {\n          m = atom->map(bond_atom[i][j]);\n          if (m < 0)\n            error->one(FLERR,\"Fix bond/create needs ghost atoms \"\n                       \"from further away\");\n          bondcount[m]++;\n        }\n      }\n    }\n\n  // if newton_bond is set, need to sum bondcount\n\n  commflag = 1;\n  if (newton_bond) comm->reverse_comm_fix(this,1);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::post_integrate()\n{\n  int i,j,k,m,n,ii,jj,inum,jnum,itype,jtype,n1,n2,n3,possible;\n  double xtmp,ytmp,ztmp,delx,dely,delz,rsq;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  tagint *slist;\n\n  if (update->ntimestep % nevery) return;\n\n  // check that all procs have needed ghost atoms within ghost cutoff\n  // only if neighbor list has changed since last check\n  // needs to be <= test b/c neighbor list could have been re-built in\n  //   same timestep as last post_integrate() call, but afterwards\n  // NOTE: no longer think is needed, due to error tests on atom->map()\n  // NOTE: if delete, can also delete lastcheck and check_ghosts()\n\n  //if (lastcheck <= neighbor->lastcall) check_ghosts();\n\n  // acquire updated ghost atom positions\n  // necessary b/c are calling this after integrate, but before Verlet comm\n\n  comm->forward_comm();\n\n  // forward comm of bondcount, so ghosts have it\n\n  commflag = 1;\n  comm->forward_comm_fix(this,1);\n\n  // resize bond partner list and initialize it\n  // probability array overlays distsq array\n  // needs to be atom->nmax in length\n\n  if (atom->nmax > nmax) {\n    memory->destroy(partner);\n    memory->destroy(finalpartner);\n    memory->destroy(distsq);\n    nmax = atom->nmax;\n    memory->create(partner,nmax,\"bond/create:partner\");\n    memory->create(finalpartner,nmax,\"bond/create:finalpartner\");\n    memory->create(distsq,nmax,\"bond/create:distsq\");\n    probability = distsq;\n  }\n\n  int nlocal = atom->nlocal;\n  int nall = atom->nlocal + atom->nghost;\n\n  for (i = 0; i < nall; i++) {\n    partner[i] = 0;\n    finalpartner[i] = 0;\n    distsq[i] = BIG;\n  }\n\n  // loop over neighbors of my atoms\n  // each atom sets one closest eligible partner atom ID to bond with\n\n  double **x = atom->x;\n  tagint *tag = atom->tag;\n  tagint **bond_atom = atom->bond_atom;\n  int *num_bond = atom->num_bond;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n  int *mask = atom->mask;\n  int *type = atom->type;\n\n  neighbor->build_one(list,1);\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    if (!(mask[i] & groupbit)) continue;\n    itype = type[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      if (!(mask[j] & groupbit)) continue;\n      jtype = type[j];\n\n      possible = 0;\n      if (itype == iatomtype && jtype == jatomtype) {\n        if ((imaxbond == 0 || bondcount[i] < imaxbond) &&\n            (jmaxbond == 0 || bondcount[j] < jmaxbond))\n          possible = 1;\n      } else if (itype == jatomtype && jtype == iatomtype) {\n        if ((jmaxbond == 0 || bondcount[i] < jmaxbond) &&\n            (imaxbond == 0 || bondcount[j] < imaxbond))\n          possible = 1;\n      }\n      if (!possible) continue;\n\n      // do not allow a duplicate bond to be created\n      // check 1-2 neighbors of atom I\n\n      for (k = 0; k < nspecial[i][0]; k++)\n        if (special[i][k] == tag[j]) possible = 0;\n      if (!possible) continue;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      if (rsq >= cutsq) continue;\n\n      if (rsq < distsq[i]) {\n        partner[i] = tag[j];\n        distsq[i] = rsq;\n      }\n      if (rsq < distsq[j]) {\n        partner[j] = tag[i];\n        distsq[j] = rsq;\n      }\n    }\n  }\n\n  // reverse comm of distsq and partner\n  // not needed if newton_pair off since I,J pair was seen by both procs\n\n  commflag = 2;\n  if (force->newton_pair) comm->reverse_comm_fix(this);\n\n  // each atom now knows its winning partner\n  // for prob check, generate random value for each atom with a bond partner\n  // forward comm of partner and random value, so ghosts have it\n\n  if (fraction < 1.0) {\n    for (i = 0; i < nlocal; i++)\n      if (partner[i]) probability[i] = random->uniform();\n  }\n\n  commflag = 2;\n  comm->forward_comm_fix(this,2);\n\n  // create bonds for atoms I own\n  // only if both atoms list each other as winning bond partner\n  //   and probability constraint is satisfied\n  // if other atom is owned by another proc, it should do same thing\n\n  int **bond_type = atom->bond_type;\n  int newton_bond = force->newton_bond;\n\n  ncreate = 0;\n  for (i = 0; i < nlocal; i++) {\n    if (partner[i] == 0) continue;\n    j = atom->map(partner[i]);\n    if (partner[j] != tag[i]) continue;\n\n    // apply probability constraint using RN for atom with smallest ID\n\n    if (fraction < 1.0) {\n      if (tag[i] < tag[j]) {\n        if (probability[i] >= fraction) continue;\n      } else {\n        if (probability[j] >= fraction) continue;\n      }\n    }\n\n    // if newton_bond is set, only store with I or J\n    // if not newton_bond, store bond with both I and J\n    // atom J will also do this consistently, whatever proc it is on\n\n    if (!newton_bond || tag[i] < tag[j]) {\n      if (num_bond[i] == atom->bond_per_atom)\n        error->one(FLERR,\"New bond exceeded bonds per atom in fix bond/create\");\n      bond_type[i][num_bond[i]] = btype;\n      bond_atom[i][num_bond[i]] = tag[j];\n      num_bond[i]++;\n    }\n\n    // add a 1-2 neighbor to special bond list for atom I\n    // atom J will also do this, whatever proc it is on\n    // need to first remove tag[j] from later in list if it appears\n    // prevents list from overflowing, will be rebuilt in rebuild_special_one()\n\n    slist = special[i];\n    n1 = nspecial[i][0];\n    n2 = nspecial[i][1];\n    n3 = nspecial[i][2];\n    for (m = n1; m < n3; m++)\n      if (slist[m] == tag[j]) break;\n    if (m < n3) {\n      for (n = m; n < n3-1; n++) slist[n] = slist[n+1];\n      n3--;\n      if (m < n2) n2--;\n    }\n    if (n3 == atom->maxspecial)\n      error->one(FLERR,\n                 \"New bond exceeded special list size in fix bond/create\");\n    for (m = n3; m > n1; m--) slist[m] = slist[m-1];\n    slist[n1] = tag[j];\n    nspecial[i][0] = n1+1;\n    nspecial[i][1] = n2+1;\n    nspecial[i][2] = n3+1;\n\n    // increment bondcount, convert atom to new type if limit reached\n    // atom J will also do this, whatever proc it is on\n\n    bondcount[i]++;\n    if (type[i] == iatomtype) {\n      if (bondcount[i] == imaxbond) type[i] = inewtype;\n    } else {\n      if (bondcount[i] == jmaxbond) type[i] = jnewtype;\n    }\n\n    // store final created bond partners and count the created bond once\n\n    finalpartner[i] = tag[j];\n    finalpartner[j] = tag[i];\n    if (tag[i] < tag[j]) ncreate++;\n  }\n\n  // tally stats\n\n  MPI_Allreduce(&ncreate,&createcount,1,MPI_INT,MPI_SUM,world);\n  createcounttotal += createcount;\n  atom->nbonds += createcount;\n\n  // trigger reneighboring if any bonds were formed\n  // this insures neigh lists will immediately reflect the topology changes\n  // done if any bonds created\n\n  if (createcount) next_reneighbor = update->ntimestep;\n  if (!createcount) return;\n\n  // communicate final partner and 1-2 special neighbors\n  // 1-2 neighs already reflect created bonds\n\n  commflag = 3;\n  comm->forward_comm_fix(this);\n\n  // create list of broken bonds that influence my owned atoms\n  //   even if between owned-ghost or ghost-ghost atoms\n  // finalpartner is now set for owned and ghost atoms so loop over nall\n  // OK if duplicates in broken list due to ghosts duplicating owned atoms\n  // check J < 0 to insure a broken bond to unknown atom is included\n  //   i.e. a bond partner outside of cutoff length\n\n  ncreate = 0;\n  for (i = 0; i < nall; i++) {\n    if (finalpartner[i] == 0) continue;\n    j = atom->map(finalpartner[i]);\n    if (j < 0 || tag[i] < tag[j]) {\n      if (ncreate == maxcreate) {\n        maxcreate += DELTA;\n        memory->grow(created,maxcreate,2,\"bond/create:created\");\n      }\n      created[ncreate][0] = tag[i];\n      created[ncreate][1] = finalpartner[i];\n      ncreate++;\n    }\n  }\n\n  // update special neigh lists of all atoms affected by any created bond\n  // also add angles/dihedrals/impropers induced by created bonds\n\n  update_topology();\n\n  // DEBUG\n  //print_bb();\n}\n\n/* ----------------------------------------------------------------------\n   insure all atoms 2 hops away from owned atoms are in ghost list\n   this allows dihedral 1-2-3-4 to be properly created\n     and special list of 1 to be properly updated\n   if I own atom 1, but not 2,3,4, and bond 3-4 is added\n     then 2,3 will be ghosts and 3 will store 4 as its finalpartner\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::check_ghosts()\n{\n  int i,j,n;\n  tagint *slist;\n\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n  int nlocal = atom->nlocal;\n\n  int flag = 0;\n  for (i = 0; i < nlocal; i++) {\n    slist = special[i];\n    n = nspecial[i][1];\n    for (j = 0; j < n; j++)\n      if (atom->map(slist[j]) < 0) flag = 1;\n  }\n\n  int flagall;\n  MPI_Allreduce(&flag,&flagall,1,MPI_INT,MPI_SUM,world);\n  if (flagall)\n    error->all(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n  lastcheck = update->ntimestep;\n}\n\n/* ----------------------------------------------------------------------\n   double loop over my atoms and created bonds\n   influenced = 1 if atom's topology is affected by any created bond\n     yes if is one of 2 atoms in bond\n     yes if either atom ID appears in as 1-2 or 1-3 in atom's special list\n     else no\n   if influenced by any created bond:\n     rebuild the atom's special list of 1-2,1-3,1-4 neighs\n     check for angles/dihedrals/impropers to create due modified special list\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::update_topology()\n{\n  int i,j,k,n,influence,influenced;\n  tagint id1,id2;\n  tagint *slist;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n  int nlocal = atom->nlocal;\n\n  nangles = 0;\n  ndihedrals = 0;\n  nimpropers = 0;\n  overflow = 0;\n\n  //printf(\"NCREATE %d: \",ncreate);\n  //for (i = 0; i < ncreate; i++)\n  //  printf(\" %d %d,\",created[i][0],created[i][1]);\n  //printf(\"\\n\");\n\n  for (i = 0; i < nlocal; i++) {\n    influenced = 0;\n    slist = special[i];\n\n    for (j = 0; j < ncreate; j++) {\n      id1 = created[j][0];\n      id2 = created[j][1];\n\n      influence = 0;\n      if (tag[i] == id1 || tag[i] == id2) influence = 1;\n      else {\n        n = nspecial[i][1];\n        for (k = 0; k < n; k++)\n          if (slist[k] == id1 || slist[k] == id2) {\n            influence = 1;\n            break;\n          }\n      }\n      if (!influence) continue;\n      influenced = 1;\n    }\n\n    // rebuild_special_one() first, since used by create_angles, etc\n\n    if (influenced) {\n      rebuild_special_one(i);\n      if (angleflag) create_angles(i);\n      if (dihedralflag) create_dihedrals(i);\n      if (improperflag) create_impropers(i);\n    }\n  }\n\n  int overflowall;\n  MPI_Allreduce(&overflow,&overflowall,1,MPI_INT,MPI_SUM,world);\n  if (overflowall) error->all(FLERR,\"Fix bond/create induced too many \"\n                              \"angles/dihedrals/impropers per atom\");\n\n  int newton_bond = force->newton_bond;\n\n  int all;\n  if (angleflag) {\n    MPI_Allreduce(&nangles,&all,1,MPI_INT,MPI_SUM,world);\n    if (!newton_bond) all /= 3;\n    atom->nangles += all;\n  }\n  if (dihedralflag) {\n    MPI_Allreduce(&ndihedrals,&all,1,MPI_INT,MPI_SUM,world);\n    if (!newton_bond) all /= 4;\n    atom->ndihedrals += all;\n  }\n  if (improperflag) {\n    MPI_Allreduce(&nimpropers,&all,1,MPI_INT,MPI_SUM,world);\n    if (!newton_bond) all /= 4;\n    atom->nimpropers += all;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   re-build special list of atom M\n   does not affect 1-2 neighs (already include effects of new bond)\n   affects 1-3 and 1-4 neighs due to other atom's augmented 1-2 neighs\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::rebuild_special_one(int m)\n{\n  int i,j,n,n1,cn1,cn2,cn3;\n  tagint *slist;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  // existing 1-2 neighs of atom M\n\n  slist = special[m];\n  n1 = nspecial[m][0];\n  cn1 = 0;\n  for (i = 0; i < n1; i++)\n    copy[cn1++] = slist[i];\n\n  // new 1-3 neighs of atom M, based on 1-2 neighs of 1-2 neighs\n  // exclude self\n  // remove duplicates after adding all possible 1-3 neighs\n\n  cn2 = cn1;\n  for (i = 0; i < cn1; i++) {\n    n = atom->map(copy[i]);\n    if (n < 0)\n      error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n    slist = special[n];\n    n1 = nspecial[n][0];\n    for (j = 0; j < n1; j++)\n      if (slist[j] != tag[m]) copy[cn2++] = slist[j];\n  }\n\n  cn2 = dedup(cn1,cn2,copy);\n  if (cn2 > atom->maxspecial)\n    error->one(FLERR,\"Special list size exceeded in fix bond/create\");\n\n  // new 1-4 neighs of atom M, based on 1-2 neighs of 1-3 neighs\n  // exclude self\n  // remove duplicates after adding all possible 1-4 neighs\n\n  cn3 = cn2;\n  for (i = cn1; i < cn2; i++) {\n    n = atom->map(copy[i]);\n    if (n < 0)\n      error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n    slist = special[n];\n    n1 = nspecial[n][0];\n    for (j = 0; j < n1; j++)\n      if (slist[j] != tag[m]) copy[cn3++] = slist[j];\n  }\n\n  cn3 = dedup(cn2,cn3,copy);\n  if (cn3 > atom->maxspecial)\n    error->one(FLERR,\"Special list size exceeded in fix bond/create\");\n\n  // store new special list with atom M\n\n  nspecial[m][0] = cn1;\n  nspecial[m][1] = cn2;\n  nspecial[m][2] = cn3;\n  memcpy(special[m],copy,cn3*sizeof(int));\n}\n\n/* ----------------------------------------------------------------------\n   create any angles owned by atom M induced by newly created bonds\n   walk special list to find all possible angles to create\n   only add an angle if a new bond is one of its 2 bonds (I-J,J-K)\n   for newton_bond on, atom M is central atom\n   for newton_bond off, atom M is any of 3 atoms in angle\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::create_angles(int m)\n{\n  int i,j,n,i2local,n1,n2;\n  tagint i1,i2,i3;\n  tagint *s1list,*s2list;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  int num_angle = atom->num_angle[m];\n  int *angle_type = atom->angle_type[m];\n  tagint *angle_atom1 = atom->angle_atom1[m];\n  tagint *angle_atom2 = atom->angle_atom2[m];\n  tagint *angle_atom3 = atom->angle_atom3[m];\n\n  // atom M is central atom in angle\n  // double loop over 1-2 neighs\n  // avoid double counting by 2nd loop as j = i+1,N not j = 1,N\n  // consider all angles, only add if:\n  //   a new bond is in the angle and atom types match\n\n  i2 = tag[m];\n  n2 = nspecial[m][0];\n  s2list = special[m];\n\n  for (i = 0; i < n2; i++) {\n    i1 = s2list[i];\n    for (j = i+1; j < n2; j++) {\n      i3 = s2list[j];\n\n      // angle = i1-i2-i3\n\n      for (n = 0; n < ncreate; n++) {\n        if (created[n][0] == i1 && created[n][1] == i2) break;\n        if (created[n][0] == i2 && created[n][1] == i1) break;\n        if (created[n][0] == i2 && created[n][1] == i3) break;\n        if (created[n][0] == i3 && created[n][1] == i2) break;\n      }\n      if (n == ncreate) continue;\n\n      // NOTE: this is place to check atom types of i1,i2,i3\n\n      if (num_angle < atom->angle_per_atom) {\n        angle_type[num_angle] = atype;\n        angle_atom1[num_angle] = i1;\n        angle_atom2[num_angle] = i2;\n        angle_atom3[num_angle] = i3;\n        num_angle++;\n        nangles++;\n      } else overflow = 1;\n    }\n  }\n\n  atom->num_angle[m] = num_angle;\n  if (force->newton_bond) return;\n\n  // for newton_bond off, also consider atom M as atom 1 in angle\n\n  i1 = tag[m];\n  n1 = nspecial[m][0];\n  s1list = special[m];\n\n  for (i = 0; i < n1; i++) {\n    i2 = s1list[i];\n    i2local = atom->map(i2);\n    if (i2local < 0)\n      error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n    s2list = special[i2local];\n    n2 = nspecial[i2local][0];\n\n    for (j = 0; j < n2; j++) {\n      i3 = s2list[j];\n      if (i3 == i1) continue;\n\n      // angle = i1-i2-i3\n\n      for (n = 0; n < ncreate; n++) {\n        if (created[n][0] == i1 && created[n][1] == i2) break;\n        if (created[n][0] == i2 && created[n][1] == i1) break;\n        if (created[n][0] == i2 && created[n][1] == i3) break;\n        if (created[n][0] == i3 && created[n][1] == i2) break;\n      }\n      if (n == ncreate) continue;\n\n      // NOTE: this is place to check atom types of i1,i2,i3\n\n      if (num_angle < atom->angle_per_atom) {\n        angle_type[num_angle] = atype;\n        angle_atom1[num_angle] = i1;\n        angle_atom2[num_angle] = i2;\n        angle_atom3[num_angle] = i3;\n        num_angle++;\n        nangles++;\n      } else overflow = 1;\n    }\n  }\n\n  atom->num_angle[m] = num_angle;\n}\n\n/* ----------------------------------------------------------------------\n   create any dihedrals owned by atom M induced by newly created bonds\n   walk special list to find all possible dihedrals to create\n   only add a dihedral if a new bond is one of its 3 bonds (I-J,J-K,K-L)\n   for newton_bond on, atom M is central atom\n   for newton_bond off, atom M is any of 4 atoms in dihedral\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::create_dihedrals(int m)\n{\n  int i,j,k,n,i1local,i2local,i3local,n1,n2,n3;\n  tagint i1,i2,i3,i4;\n  tagint *s1list,*s2list,*s3list;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  int num_dihedral = atom->num_dihedral[m];\n  int *dihedral_type = atom->dihedral_type[m];\n  tagint *dihedral_atom1 = atom->dihedral_atom1[m];\n  tagint *dihedral_atom2 = atom->dihedral_atom2[m];\n  tagint *dihedral_atom3 = atom->dihedral_atom3[m];\n  tagint *dihedral_atom4 = atom->dihedral_atom4[m];\n\n  // atom M is 2nd atom in dihedral\n  // double loop over 1-2 neighs\n  // two triple loops: one over neighs at each end of triplet\n  // avoid double counting by 2nd loop as j = i+1,N not j = 1,N\n  // avoid double counting due to another atom being 2nd atom in same dihedral\n  //   by requiring ID of 2nd atom < ID of 3rd atom\n  //   don't do this if newton bond off since want to double count\n  // consider all dihedrals, only add if:\n  //   a new bond is in the dihedral and atom types match\n\n  i2 = tag[m];\n  n2 = nspecial[m][0];\n  s2list = special[m];\n\n  for (i = 0; i < n2; i++) {\n    i1 = s2list[i];\n\n    for (j = i+1; j < n2; j++) {\n      i3 = s2list[j];\n      if (force->newton_bond && i2 > i3) continue;\n      i3local = atom->map(i3);\n      if (i3local < 0)\n        error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n      s3list = special[i3local];\n      n3 = nspecial[i3local][0];\n\n      for (k = 0; k < n3; k++) {\n        i4 = s3list[k];\n        if (i4 == i1 || i4 == i2 || i4 == i3) continue;\n\n        // dihedral = i1-i2-i3-i4\n\n        for (n = 0; n < ncreate; n++) {\n          if (created[n][0] == i1 && created[n][1] == i2) break;\n          if (created[n][0] == i2 && created[n][1] == i1) break;\n          if (created[n][0] == i2 && created[n][1] == i3) break;\n          if (created[n][0] == i3 && created[n][1] == i2) break;\n          if (created[n][0] == i3 && created[n][1] == i4) break;\n          if (created[n][0] == i4 && created[n][1] == i3) break;\n        }\n        if (n < ncreate) {\n          // NOTE: this is place to check atom types of i3,i2,i1,i4\n          if (num_dihedral < atom->dihedral_per_atom) {\n            dihedral_type[num_dihedral] = dtype;\n            dihedral_atom1[num_dihedral] = i1;\n            dihedral_atom2[num_dihedral] = i2;\n            dihedral_atom3[num_dihedral] = i3;\n            dihedral_atom4[num_dihedral] = i4;\n            num_dihedral++;\n            ndihedrals++;\n          } else overflow = 1;\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < n2; i++) {\n    i1 = s2list[i];\n    if (force->newton_bond && i2 > i1) continue;\n    i1local = atom->map(i1);\n    if (i1local < 0)\n      error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n    s3list = special[i1local];\n    n3 = nspecial[i1local][0];\n\n    for (j = i+1; j < n2; j++) {\n      i3 = s2list[j];\n\n      for (k = 0; k < n3; k++) {\n        i4 = s3list[k];\n        if (i4 == i1 || i4 == i2 || i4 == i3) continue;\n\n        // dihedral = i3-i2-i1-i4\n\n        for (n = 0; n < ncreate; n++) {\n          if (created[n][0] == i3 && created[n][1] == i2) break;\n          if (created[n][0] == i2 && created[n][1] == i3) break;\n          if (created[n][0] == i2 && created[n][1] == i1) break;\n          if (created[n][0] == i1 && created[n][1] == i2) break;\n          if (created[n][0] == i1 && created[n][1] == i4) break;\n          if (created[n][0] == i4 && created[n][1] == i1) break;\n        }\n        if (n < ncreate) {\n          // NOTE: this is place to check atom types of i3,i2,i1,i4\n          if (num_dihedral < atom->dihedral_per_atom) {\n            dihedral_type[num_dihedral] = dtype;\n            dihedral_atom1[num_dihedral] = i3;\n            dihedral_atom2[num_dihedral] = i2;\n            dihedral_atom3[num_dihedral] = i1;\n            dihedral_atom4[num_dihedral] = i4;\n            num_dihedral++;\n            ndihedrals++;\n          } else overflow = 1;\n        }\n      }\n    }\n  }\n\n  atom->num_dihedral[m] = num_dihedral;\n  if (force->newton_bond) return;\n\n  // for newton_bond off, also consider atom M as atom 1 in dihedral\n\n  i1 = tag[m];\n  n1 = nspecial[m][0];\n  s1list = special[m];\n\n  for (i = 0; i < n1; i++) {\n    i2 = s1list[i];\n    i2local = atom->map(i2);\n    if (i2local < 0)\n      error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n    s2list = special[i2local];\n    n2 = nspecial[i2local][0];\n\n    for (j = 0; j < n2; j++) {\n      i3 = s2list[j];\n      if (i3 == i1) continue;\n      i3local = atom->map(i3);\n      if (i3local < 0)\n        error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n      s3list = special[i3local];\n      n3 = nspecial[i3local][0];\n\n      for (k = 0; k < n3; k++) {\n        i4 = s3list[k];\n        if (i4 == i1 || i4 == i2 || i4 == i3) continue;\n\n        // dihedral = i1-i2-i3-i4\n\n        for (n = 0; n < ncreate; n++) {\n          if (created[n][0] == i1 && created[n][1] == i2) break;\n          if (created[n][0] == i2 && created[n][1] == i1) break;\n          if (created[n][0] == i2 && created[n][1] == i3) break;\n          if (created[n][0] == i3 && created[n][1] == i2) break;\n          if (created[n][0] == i3 && created[n][1] == i4) break;\n          if (created[n][0] == i4 && created[n][1] == i3) break;\n        }\n        if (n < ncreate) {\n          // NOTE: this is place to check atom types of i3,i2,i1,i4\n          if (num_dihedral < atom->dihedral_per_atom) {\n            dihedral_type[num_dihedral] = dtype;\n            dihedral_atom1[num_dihedral] = i1;\n            dihedral_atom2[num_dihedral] = i2;\n            dihedral_atom3[num_dihedral] = i3;\n            dihedral_atom4[num_dihedral] = i4;\n            num_dihedral++;\n            ndihedrals++;\n          } else overflow = 1;\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   create any impropers owned by atom M induced by newly created bonds\n   walk special list to find all possible impropers to create\n   only add an improper if a new bond is one of its 3 bonds (I-J,I-K,I-L)\n   for newton_bond on, atom M is central atom\n   for newton_bond off, atom M is any of 4 atoms in improper\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::create_impropers(int m)\n{\n  int i,j,k,n,i1local,n1,n2;\n  tagint i1,i2,i3,i4;\n  tagint *s1list,*s2list;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  int num_improper = atom->num_improper[m];\n  int *improper_type = atom->improper_type[m];\n  tagint *improper_atom1 = atom->improper_atom1[m];\n  tagint *improper_atom2 = atom->improper_atom2[m];\n  tagint *improper_atom3 = atom->improper_atom3[m];\n  tagint *improper_atom4 = atom->improper_atom4[m];\n\n  // atom M is central atom in improper\n  // triple loop over 1-2 neighs\n  // avoid double counting by 2nd loop as j = i+1,N not j = 1,N\n  // consider all impropers, only add if:\n  //   a new bond is in the improper and atom types match\n\n  i1 = tag[m];\n  n1 = nspecial[m][0];\n  s1list = special[m];\n\n  for (i = 0; i < n1; i++) {\n    i2 = s1list[i];\n    for (j = i+1; j < n1; j++) {\n      i3 = s1list[j];\n      for (k = j+1; k < n1; k++) {\n        i4 = s1list[k];\n\n        // improper = i1-i2-i3-i4\n\n        for (n = 0; n < ncreate; n++) {\n          if (created[n][0] == i1 && created[n][1] == i2) break;\n          if (created[n][0] == i2 && created[n][1] == i1) break;\n          if (created[n][0] == i1 && created[n][1] == i3) break;\n          if (created[n][0] == i3 && created[n][1] == i1) break;\n          if (created[n][0] == i1 && created[n][1] == i4) break;\n          if (created[n][0] == i4 && created[n][1] == i1) break;\n        }\n        if (n == ncreate) continue;\n\n        // NOTE: this is place to check atom types of i1,i2,i3,i4\n\n        if (num_improper < atom->improper_per_atom) {\n          improper_type[num_improper] = itype;\n          improper_atom1[num_improper] = i1;\n          improper_atom2[num_improper] = i2;\n          improper_atom3[num_improper] = i3;\n          improper_atom4[num_improper] = i4;\n          num_improper++;\n          nimpropers++;\n        } else overflow = 1;\n      }\n    }\n  }\n\n  atom->num_improper[m] = num_improper;\n  if (force->newton_bond) return;\n\n  // for newton_bond off, also consider atom M as atom 2 in improper\n\n  i2 = tag[m];\n  n2 = nspecial[m][0];\n  s2list = special[m];\n\n  for (i = 0; i < n2; i++) {\n    i1 = s2list[i];\n    i1local = atom->map(i1);\n    if (i1local < 0)\n      error->one(FLERR,\"Fix bond/create needs ghost atoms from further away\");\n    s1list = special[i1local];\n    n1 = nspecial[i1local][0];\n\n    for (j = 0; j < n1; j++) {\n      i3 = s1list[j];\n      if (i3 == i1 || i3 == i2) continue;\n\n      for (k = j+1; k < n1; k++) {\n        i4 = s1list[k];\n        if (i4 == i1 || i4 == i2) continue;\n\n        // improper = i1-i2-i3-i4\n\n        for (n = 0; n < ncreate; n++) {\n          if (created[n][0] == i1 && created[n][1] == i2) break;\n          if (created[n][0] == i2 && created[n][1] == i1) break;\n          if (created[n][0] == i1 && created[n][1] == i3) break;\n          if (created[n][0] == i3 && created[n][1] == i1) break;\n          if (created[n][0] == i1 && created[n][1] == i4) break;\n          if (created[n][0] == i4 && created[n][1] == i1) break;\n        }\n        if (n < ncreate) {\n          // NOTE: this is place to check atom types of i3,i2,i1,i4\n          if (num_improper < atom->improper_per_atom) {\n            improper_type[num_improper] = itype;\n            improper_atom1[num_improper] = i1;\n            improper_atom2[num_improper] = i2;\n            improper_atom3[num_improper] = i3;\n            improper_atom4[num_improper] = i4;\n            num_improper++;\n            nimpropers++;\n          } else overflow = 1;\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   remove all ID duplicates in copy from Nstart:Nstop-1\n   compare to all previous values in copy\n   return N decremented by any discarded duplicates\n------------------------------------------------------------------------- */\n\nint FixBondCreate::dedup(int nstart, int nstop, tagint *copy)\n{\n  int i;\n\n  int m = nstart;\n  while (m < nstop) {\n    for (i = 0; i < m; i++)\n      if (copy[i] == copy[m]) {\n        copy[m] = copy[nstop-1];\n        nstop--;\n        break;\n      }\n    if (i == m) m++;\n  }\n\n  return nstop;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::post_integrate_respa(int ilevel, int iloop)\n{\n  if (ilevel == nlevels_respa-1) post_integrate();\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondCreate::pack_forward_comm(int n, int *list, double *buf,\n                                     int pbc_flag, int *pbc)\n{\n  int i,j,k,m,ns;\n\n  m = 0;\n\n  if (commflag == 1) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = ubuf(bondcount[j]).d;\n    }\n    return m;\n  }\n\n  if (commflag == 2) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = ubuf(partner[j]).d;\n      buf[m++] = probability[j];\n    }\n    return m;\n  }\n\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = ubuf(finalpartner[j]).d;\n    ns = nspecial[j][0];\n    buf[m++] = ubuf(ns).d;\n    for (k = 0; k < ns; k++)\n      buf[m++] = ubuf(special[j][k]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,j,m,ns,last;\n\n  m = 0;\n  last = first + n;\n\n  if (commflag == 1) {\n    for (i = first; i < last; i++)\n      bondcount[i] = (int) ubuf(buf[m++]).i;\n\n  } else if (commflag == 2) {\n    for (i = first; i < last; i++) {\n      partner[i] = (tagint) ubuf(buf[m++]).i;\n      probability[i] = buf[m++];\n    }\n\n  } else {\n    int **nspecial = atom->nspecial;\n    tagint **special = atom->special;\n\n    m = 0;\n    last = first + n;\n    for (i = first; i < last; i++) {\n      finalpartner[i] = (tagint) ubuf(buf[m++]).i;\n      ns = (int) ubuf(buf[m++]).i;\n      nspecial[i][0] = ns;\n      for (j = 0; j < ns; j++)\n        special[i][j] = (tagint) ubuf(buf[m++]).i;\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondCreate::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n\n  if (commflag == 1) {\n    for (i = first; i < last; i++)\n      buf[m++] = ubuf(bondcount[i]).d;\n    return m;\n  }\n\n  for (i = first; i < last; i++) {\n    buf[m++] = ubuf(partner[i]).d;\n    buf[m++] = distsq[i];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n\n  if (commflag == 1) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      bondcount[j] += (int) ubuf(buf[m++]).i;\n    }\n\n  } else {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      if (buf[m+1] < distsq[j]) {\n        partner[j] = (tagint) ubuf(buf[m++]).i;\n        distsq[j] = buf[m++];\n      } else m += 2;\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   allocate local atom-based arrays\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::grow_arrays(int nmax)\n{\n  memory->grow(bondcount,nmax,\"bond/create:bondcount\");\n}\n\n/* ----------------------------------------------------------------------\n   copy values within local atom-based arrays\n------------------------------------------------------------------------- */\n\nvoid FixBondCreate::copy_arrays(int i, int j, int delflag)\n{\n  bondcount[j] = bondcount[i];\n}\n\n/* ----------------------------------------------------------------------\n   pack values in local atom-based arrays for exchange with another proc\n------------------------------------------------------------------------- */\n\nint FixBondCreate::pack_exchange(int i, double *buf)\n{\n  buf[0] = bondcount[i];\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   unpack values in local atom-based arrays from exchange with another proc\n------------------------------------------------------------------------- */\n\nint FixBondCreate::unpack_exchange(int nlocal, double *buf)\n{\n  bondcount[nlocal] = static_cast<int> (buf[0]);\n  return 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble FixBondCreate::compute_vector(int n)\n{\n  if (n == 0) return (double) createcount;\n  return (double) createcounttotal;\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble FixBondCreate::memory_usage()\n{\n  int nmax = atom->nmax;\n  double bytes = nmax * sizeof(int);\n  bytes = 2*nmax * sizeof(tagint);\n  bytes += nmax * sizeof(double);\n  return bytes;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::print_bb()\n{\n  for (int i = 0; i < atom->nlocal; i++) {\n    printf(\"TAG \" TAGINT_FORMAT \": %d nbonds: \",atom->tag[i],atom->num_bond[i]);\n    for (int j = 0; j < atom->num_bond[i]; j++) {\n      printf(\" \" TAGINT_FORMAT,atom->bond_atom[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d nangles: \",atom->tag[i],atom->num_angle[i]);\n    for (int j = 0; j < atom->num_angle[i]; j++) {\n      printf(\" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \",\",\n             atom->angle_atom1[i][j], atom->angle_atom2[i][j],\n             atom->angle_atom3[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d ndihedrals: \",atom->tag[i],atom->num_dihedral[i]);\n    for (int j = 0; j < atom->num_dihedral[i]; j++) {\n      printf(\" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n             TAGINT_FORMAT \",\", atom->dihedral_atom1[i][j],\n\t     atom->dihedral_atom2[i][j],atom->dihedral_atom3[i][j],\n\t     atom->dihedral_atom4[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d nimpropers: \",atom->tag[i],atom->num_improper[i]);\n    for (int j = 0; j < atom->num_improper[i]; j++) {\n      printf(\" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n             TAGINT_FORMAT \",\",atom->improper_atom1[i][j],\n\t     atom->improper_atom2[i][j],atom->improper_atom3[i][j],\n\t     atom->improper_atom4[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d %d %d nspecial: \",atom->tag[i],\n\t   atom->nspecial[i][0],atom->nspecial[i][1],atom->nspecial[i][2]);\n    for (int j = 0; j < atom->nspecial[i][2]; j++) {\n      printf(\" \" TAGINT_FORMAT,atom->special[i][j]);\n    }\n    printf(\"\\n\");\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondCreate::print_copy(const char *str, tagint m,\n                              int n1, int n2, int n3, int *v)\n{\n  printf(\"%s \" TAGINT_FORMAT \": %d %d %d nspecial: \",str,m,n1,n2,n3);\n  for (int j = 0; j < n3; j++) printf(\" %d\",v[j]);\n  printf(\"\\n\");\n}\n","// -*- C++ -*-\n//===--------------------------- string.h ---------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is distributed under the University of Illinois Open Source\n// License. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_STRING_H\n#define _LIBCPP_STRING_H\n\n/*\n    string.h synopsis\n\nMacros:\n\n    NULL\n\nTypes:\n\n    size_t\n\nvoid* memcpy(void* restrict s1, const void* restrict s2, size_t n);\nvoid* memmove(void* s1, const void* s2, size_t n);\nchar* strcpy (char* restrict s1, const char* restrict s2);\nchar* strncpy(char* restrict s1, const char* restrict s2, size_t n);\nchar* strcat (char* restrict s1, const char* restrict s2);\nchar* strncat(char* restrict s1, const char* restrict s2, size_t n);\nint memcmp(const void* s1, const void* s2, size_t n);\nint strcmp (const char* s1, const char* s2);\nint strncmp(const char* s1, const char* s2, size_t n);\nint strcoll(const char* s1, const char* s2);\nsize_t strxfrm(char* restrict s1, const char* restrict s2, size_t n);\nconst void* memchr(const void* s, int c, size_t n);\n      void* memchr(      void* s, int c, size_t n);\nconst char* strchr(const char* s, int c);\n      char* strchr(      char* s, int c);\nsize_t strcspn(const char* s1, const char* s2);\nconst char* strpbrk(const char* s1, const char* s2);\n      char* strpbrk(      char* s1, const char* s2);\nconst char* strrchr(const char* s, int c);\n      char* strrchr(      char* s, int c);\nsize_t strspn(const char* s1, const char* s2);\nconst char* strstr(const char* s1, const char* s2);\n      char* strstr(      char* s1, const char* s2);\nchar* strtok(char* restrict s1, const char* restrict s2);\nvoid* memset(void* s, int c, size_t n);\nchar* strerror(int errnum);\nsize_t strlen(const char* s);\n\n*/\n\n#include <__config>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n#include_next <string.h>\n\n// MSVCRT, GNU libc and its derivates may already have the correct prototype in\n// <string.h>. This macro can be defined by users if their C library provides\n// the right signature.\n#if defined(__CORRECT_ISO_CPP_STRING_H_PROTO) || defined(_LIBCPP_MSVCRT) || \\\n    defined(__sun__) || defined(_STRING_H_CPLUSPLUS_98_CONFORMANCE_)\n#define _LIBCPP_STRING_H_HAS_CONST_OVERLOADS\n#endif\n\n#if defined(__cplusplus) && !defined(_LIBCPP_STRING_H_HAS_CONST_OVERLOADS) && defined(_LIBCPP_PREFERRED_OVERLOAD)\nextern \"C++\" {\ninline _LIBCPP_INLINE_VISIBILITY\nchar* __libcpp_strchr(const char* __s, int __c) {return (char*)strchr(__s, __c);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\nconst char* strchr(const char* __s, int __c) {return __libcpp_strchr(__s, __c);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\n      char* strchr(      char* __s, int __c) {return __libcpp_strchr(__s, __c);}\n\ninline _LIBCPP_INLINE_VISIBILITY\nchar* __libcpp_strpbrk(const char* __s1, const char* __s2) {return (char*)strpbrk(__s1, __s2);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\nconst char* strpbrk(const char* __s1, const char* __s2) {return __libcpp_strpbrk(__s1, __s2);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\n      char* strpbrk(      char* __s1, const char* __s2) {return __libcpp_strpbrk(__s1, __s2);}\n\ninline _LIBCPP_INLINE_VISIBILITY\nchar* __libcpp_strrchr(const char* __s, int __c) {return (char*)strrchr(__s, __c);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\nconst char* strrchr(const char* __s, int __c) {return __libcpp_strrchr(__s, __c);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\n      char* strrchr(      char* __s, int __c) {return __libcpp_strrchr(__s, __c);}\n\ninline _LIBCPP_INLINE_VISIBILITY\nvoid* __libcpp_memchr(const void* __s, int __c, size_t __n) {return (void*)memchr(__s, __c, __n);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\nconst void* memchr(const void* __s, int __c, size_t __n) {return __libcpp_memchr(__s, __c, __n);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\n      void* memchr(      void* __s, int __c, size_t __n) {return __libcpp_memchr(__s, __c, __n);}\n\ninline _LIBCPP_INLINE_VISIBILITY\nchar* __libcpp_strstr(const char* __s1, const char* __s2) {return (char*)strstr(__s1, __s2);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\nconst char* strstr(const char* __s1, const char* __s2) {return __libcpp_strstr(__s1, __s2);}\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_PREFERRED_OVERLOAD\n      char* strstr(      char* __s1, const char* __s2) {return __libcpp_strstr(__s1, __s2);}\n}\n#endif\n\n#endif  // _LIBCPP_STRING_H\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_FIX_H\n#define LMP_FIX_H\n\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass Fix : protected Pointers {\n public:\n  static int instance_total;     // # of Fix classes ever instantiated\n\n  char *id,*style;\n  int igroup,groupbit;\n\n  int restart_global;            // 1 if Fix saves global state, 0 if not\n  int restart_peratom;           // 1 if Fix saves peratom state, 0 if not\n  int restart_file;              // 1 if Fix writes own restart file, 0 if not\n  int force_reneighbor;          // 1 if Fix forces reneighboring, 0 if not\n\n  int box_change_size;           // 1 if Fix changes box size, 0 if not\n  int box_change_shape;          // 1 if Fix changes box shape, 0 if not\n  int box_change_domain;         // 1 if Fix changes proc sub-domains, 0 if not\n\n  bigint next_reneighbor;        // next timestep to force a reneighboring\n  int thermo_energy;             // 1 if fix_modify enabled ThEng, 0 if not\n  int nevery;                    // how often to call an end_of_step fix\n  int rigid_flag;                // 1 if Fix integrates rigid bodies, 0 if not\n  int peatom_flag;               // 1 if Fix contributes per-atom eng, 0 if not\n  int virial_flag;               // 1 if Fix contributes to virial, 0 if not\n  int no_change_box;             // 1 if cannot swap ortho <-> triclinic\n  int time_integrate;            // 1 if fix performs time integration, 0 if no\n  int time_depend;               // 1 if requires continuous timestepping\n  int create_attribute;          // 1 if fix stores attributes that need\n                                 //      setting when a new atom is created\n  int restart_pbc;               // 1 if fix moves atoms (except integrate)\n                                 //      so write_restart must remap to PBC\n  int wd_header;                 // # of header values fix writes to data file\n  int wd_section;                // # of sections fix writes to data file\n  int dynamic_group_allow;       // 1 if can be used with dynamic group, else 0\n  int dof_flag;                  // 1 if has dof() method (not min_dof())\n  int special_alter_flag;        // 1 if has special_alter() meth for spec lists\n  int enforce2d_flag;            // 1 if has enforce2d method\n  int respa_level_support;       // 1 if fix supports fix_modify respa\n  int respa_level;               // which respa level to apply fix (1-Nrespa)\n\n  int scalar_flag;               // 0/1 if compute_scalar() function exists\n  int vector_flag;               // 0/1 if compute_vector() function exists\n  int array_flag;                // 0/1 if compute_array() function exists\n  int size_vector;               // length of global vector\n  int size_array_rows;           // rows in global array\n  int size_array_cols;           // columns in global array\n  int size_vector_variable;      // 1 if vec length is unknown in advance\n  int size_array_rows_variable;  // 1 if array rows is unknown in advance\n  int global_freq;               // frequency s/v data is available at\n\n  int peratom_flag;              // 0/1 if per-atom data is stored\n  int size_peratom_cols;         // 0 = vector, N = columns in peratom array\n  int peratom_freq;              // frequency per-atom data is available at\n\n  int local_flag;                // 0/1 if local data is stored\n  int size_local_rows;           // rows in local vector or array\n  int size_local_cols;           // 0 = vector, N = columns in local array\n  int local_freq;                // frequency local data is available at\n\n  int extscalar;            // 0/1 if global scalar is intensive/extensive\n  int extvector;            // 0/1/-1 if global vector is all int/ext/extlist\n  int *extlist;             // list of 0/1 int/ext for each vec component\n  int extarray;             // 0/1 if global array is intensive/extensive\n\n  double *vector_atom;           // computed per-atom vector\n  double **array_atom;           // computed per-atom array\n  double *vector_local;          // computed local vector\n  double **array_local;          // computed local array\n\n  int comm_forward;              // size of forward communication (0 if none)\n  int comm_reverse;              // size of reverse communication (0 if none)\n  int comm_border;               // size of border communication (0 if none)\n\n  double virial[6];              // accumulated virial\n  double *eatom,**vatom;         // accumulated per-atom energy/virial\n\n  int restart_reset;             // 1 if restart just re-initialized fix\n\n  // KOKKOS host/device flag and data masks\n\n  int kokkosable;                // 1 if Kokkos fix\n  ExecutionSpace execution_space;\n  unsigned int datamask_read,datamask_modify;\n\n  Fix(class LAMMPS *, int, char **);\n  virtual ~Fix();\n  void modify_params(int, char **);\n\n  virtual int setmask() = 0;\n\n  virtual void post_constructor() {}\n  virtual void init() {}\n  virtual void init_list(int, class NeighList *) {}\n  virtual void setup(int) {}\n  virtual void setup_pre_exchange() {}\n  virtual void setup_pre_neighbor() {}\n  virtual void setup_pre_force(int) {}\n  virtual void setup_pre_reverse(int, int) {}\n  virtual void min_setup(int) {}\n  virtual void initial_integrate(int) {}\n  virtual void post_integrate() {}\n  virtual void pre_exchange() {}\n  virtual void pre_neighbor() {}\n  virtual void pre_force(int) {}\n  virtual void pre_reverse(int,int) {}\n  virtual void post_force(int) {}\n  virtual void final_integrate() {}\n  virtual void end_of_step() {}\n  virtual void post_run() {}\n  virtual void write_restart(FILE *) {}\n  virtual void write_restart_file(char *) {}\n  virtual void restart(char *) {}\n\n  virtual void grow_arrays(int) {}\n  virtual void copy_arrays(int, int, int) {}\n  virtual void set_arrays(int) {}\n  virtual void update_arrays(int, int) {}\n  virtual void set_molecule(int, tagint, int, double *, double *, double *) {}\n  virtual void clear_bonus() {}\n\n  virtual int pack_border(int, int *, double *) {return 0;}\n  virtual int unpack_border(int, int, double *) {return 0;}\n  virtual int pack_exchange(int, double *) {return 0;}\n  virtual int unpack_exchange(int, double *) {return 0;}\n  virtual int pack_restart(int, double *) {return 0;}\n  virtual void unpack_restart(int, int) {}\n  virtual int size_restart(int) {return 0;}\n  virtual int maxsize_restart() {return 0;}\n\n  virtual void setup_pre_force_respa(int, int) {}\n  virtual void initial_integrate_respa(int, int, int) {}\n  virtual void post_integrate_respa(int, int) {}\n  virtual void pre_force_respa(int, int, int) {}\n  virtual void post_force_respa(int, int, int) {}\n  virtual void final_integrate_respa(int, int) {}\n\n  virtual void min_pre_exchange() {}\n  virtual void min_pre_neighbor() {}\n  virtual void min_pre_force(int) {}\n  virtual void min_pre_reverse(int,int) {}\n  virtual void min_post_force(int) {}\n\n  virtual double min_energy(double *) {return 0.0;}\n  virtual void min_store() {}\n  virtual void min_clearstore() {}\n  virtual void min_pushstore() {}\n  virtual void min_popstore() {}\n  virtual int min_reset_ref() {return 0;}\n  virtual void min_step(double, double *) {}\n  virtual double max_alpha(double *) {return 0.0;}\n  virtual int min_dof() {return 0;}\n\n  virtual int pack_forward_comm(int, int *, double *, int, int *) {return 0;}\n  virtual void unpack_forward_comm(int, int, double *) {}\n  virtual int pack_reverse_comm_size(int, int) {return 0;}\n  virtual int pack_reverse_comm(int, int, double *) {return 0;}\n  virtual void unpack_reverse_comm(int, int *, double *) {}\n\n  virtual double compute_scalar() {return 0.0;}\n  virtual double compute_vector(int) {return 0.0;}\n  virtual double compute_array(int,int) {return 0.0;}\n\n  virtual int dof(int) {return 0;}\n  virtual void deform(int) {}\n  virtual void reset_target(double) {}\n  virtual void reset_dt() {}\n  virtual void enforce2d() {}\n\n  virtual void read_data_header(char *) {}\n  virtual void read_data_section(char *, int, char *, tagint) {}\n  virtual bigint read_data_skip_lines(char *) {return 0;}\n\n  virtual void write_data_header(FILE *, int) {}\n  virtual void write_data_section_size(int, int &, int &) {}\n  virtual void write_data_section_pack(int, double **) {}\n  virtual void write_data_section_keyword(int, FILE *) {}\n  virtual void write_data_section(int, FILE *, int, double **, int) {}\n\n  virtual void zero_momentum() {}\n  virtual void zero_rotation() {}\n\n  virtual void rebuild_special() {}\n\n  virtual int image(int *&, double **&) {return 0;}\n\n  virtual int modify_param(int, char **) {return 0;}\n  virtual void *extract(const char *, int &) {return NULL;}\n\n  virtual double memory_usage() {return 0.0;}\n\n protected:\n  int instance_me;        // which Fix class instantiation I am\n\n  int evflag;\n  int eflag_either,eflag_global,eflag_atom;\n  int vflag_either,vflag_global,vflag_atom;\n  int maxeatom,maxvatom;\n\n  int copymode;   // if set, do not deallocate during destruction\n                  // required when classes are used as functors by Kokkos\n\n  int dynamic;    // recount atoms for temperature computes\n\n  void ev_setup(int, int);\n  void ev_tally(int, int *, double, double, double *);\n  void v_setup(int);\n  void v_tally(int, int *, double, double *);\n\n  // union data struct for packing 32-bit and 64-bit ints into double bufs\n  // see atom_vec.h for documentation\n\n  union ubuf {\n    double d;\n    int64_t i;\n    ubuf(double arg) : d(arg) {}\n    ubuf(int64_t arg) : i(arg) {}\n    ubuf(int arg) : i(arg) {}\n  };\n};\n\nnamespace FixConst {\n  static const int INITIAL_INTEGRATE =       1<<0;\n  static const int POST_INTEGRATE =          1<<1;\n  static const int PRE_EXCHANGE =            1<<2;\n  static const int PRE_NEIGHBOR =            1<<3;\n  static const int PRE_FORCE =               1<<4;\n  static const int PRE_REVERSE =             1<<5;\n  static const int POST_FORCE =              1<<6;\n  static const int FINAL_INTEGRATE =         1<<7;\n  static const int END_OF_STEP =             1<<8;\n  static const int POST_RUN =                1<<9;\n  static const int THERMO_ENERGY =           1<<10;\n  static const int INITIAL_INTEGRATE_RESPA = 1<<11;\n  static const int POST_INTEGRATE_RESPA =    1<<12;\n  static const int PRE_FORCE_RESPA =         1<<13;\n  static const int POST_FORCE_RESPA =        1<<14;\n  static const int FINAL_INTEGRATE_RESPA =   1<<15;\n  static const int MIN_PRE_EXCHANGE =        1<<16;\n  static const int MIN_PRE_NEIGHBOR =        1<<17;\n  static const int MIN_PRE_FORCE =           1<<18;\n  static const int MIN_PRE_REVERSE =         1<<19;\n  static const int MIN_POST_FORCE =          1<<20;\n  static const int MIN_ENERGY =              1<<21;\n  static const int FIX_CONST_LAST =          1<<22;\n}\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Fix ID must be alphanumeric or underscore characters\n\nSelf-explanatory.\n\nE: Could not find fix group ID\n\nA group ID used in the fix command does not exist.\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_ATOM_H\n#define LMP_ATOM_H\n\n#include \"pointers.h\"\n#include <map>\n#include <string>\n\nnamespace LAMMPS_NS {\n\nclass Atom : protected Pointers {\n public:\n  char *atom_style;\n  class AtomVec *avec;\n\n  // atom counts\n\n  bigint natoms;                // total # of atoms in system, could be 0\n                                // natoms may not be current if atoms lost\n  int nlocal,nghost;            // # of owned and ghost atoms on this proc\n  int nmax;                     // max # of owned+ghost in arrays on this proc\n  int tag_enable;               // 0/1 if atom ID tags are defined\n  int molecular;                // 0 = atomic, 1 = standard molecular system,\n                                // 2 = molecule template system\n\n  bigint nbonds,nangles,ndihedrals,nimpropers;\n  int ntypes,nbondtypes,nangletypes,ndihedraltypes,nimpropertypes;\n  int bond_per_atom,angle_per_atom,dihedral_per_atom,improper_per_atom;\n  int extra_bond_per_atom,extra_angle_per_atom;\n  int extra_dihedral_per_atom,extra_improper_per_atom;\n\n  int firstgroup;               // store atoms in this group first, -1 if unset\n  int nfirst;                   // # of atoms in first group on this proc\n  char *firstgroupname;         // group-ID to store first, NULL if unset\n\n  // per-atom arrays\n  // customize by adding new array\n\n  tagint *tag;\n  int *type,*mask;\n  imageint *image;\n  double **x,**v,**f;\n\n  tagint *molecule;\n  int *molindex,*molatom;\n\n  double *q,**mu;\n  double **omega,**angmom,**torque;\n  double *radius,*rmass;\n  int *ellipsoid,*line,*tri,*body;\n\n  // PERI package\n\n  double *vfrac,*s0;\n  double **x0;\n\n  // USER-EFF and USER-AWPMD packages\n\n  int *spin;\n  double *eradius,*ervel,*erforce,*ervelforce;\n  double *cs,*csforce,*vforce;\n  int *etag;\n\n  // USER-SPH package\n\n  double *rho,*drho,*e,*de,*cv;\n  double **vest;\n\n  // USER-SMD package\n\n  double *contact_radius;\n  double **smd_data_9;\n  double **smd_stress;\n  double *eff_plastic_strain;\n  double *eff_plastic_strain_rate;\n  double *damage;\n\n  // USER-DPD package\n\n  double *uCond,*uMech,*uChem,*uCGnew,*uCG;\n  double *duChem;\n  double *dpdTheta;\n  int nspecies_dpd;\n\n  // USER-MESO package\n\n  double **cc, **cc_flux;        // cc = chemical concentration\n  double *edpd_temp,*edpd_flux;  // temperature and heat flux\n  double *edpd_cv;               // heat capacity \n  int cc_species;\n\n  // molecular info\n\n  int **nspecial;               // 0,1,2 = cumulative # of 1-2,1-3,1-4 neighs\n  tagint **special;             // IDs of 1-2,1-3,1-4 neighs of each atom\n  int maxspecial;               // special[nlocal][maxspecial]\n\n  int *num_bond;\n  int **bond_type;\n  tagint **bond_atom;\n\n  int *num_angle;\n  int **angle_type;\n  tagint **angle_atom1,**angle_atom2,**angle_atom3;\n\n  int *num_dihedral;\n  int **dihedral_type;\n  tagint **dihedral_atom1,**dihedral_atom2,**dihedral_atom3,**dihedral_atom4;\n\n  int *num_improper;\n  int **improper_type;\n  tagint **improper_atom1,**improper_atom2,**improper_atom3,**improper_atom4;\n\n  // custom arrays used by fix property/atom\n\n  int **ivector;\n  double **dvector;\n  char **iname,**dname;\n  int nivector,ndvector;\n\n  // atom style and per-atom array existence flags\n  // customize by adding new flag\n\n  int sphere_flag,ellipsoid_flag,line_flag,tri_flag,body_flag;\n  int peri_flag,electron_flag;\n  int ecp_flag;\n  int wavepacket_flag,sph_flag;\n\n  int molecule_flag,molindex_flag,molatom_flag;\n  int q_flag,mu_flag;\n  int rmass_flag,radius_flag,omega_flag,torque_flag,angmom_flag;\n  int vfrac_flag,spin_flag,eradius_flag,ervel_flag,erforce_flag;\n  int cs_flag,csforce_flag,vforce_flag,ervelforce_flag,etag_flag;\n  int rho_flag,e_flag,cv_flag,vest_flag;\n  int dpd_flag,edpd_flag,tdpd_flag;\n\n  // USER-SMD package\n\n  int smd_flag;\n  int contact_radius_flag;\n  int smd_data_9_flag;\n  int smd_stress_flag;\n  int x0_flag;\n  int eff_plastic_strain_flag;\n  int eff_plastic_strain_rate_flag;\n  int damage_flag;\n\n  // Peridynamics scale factor, used by dump cfg\n\n  double pdscale;\n\n  // molecule templates\n  // each template can be a set of consecutive molecules\n  // each with same ID (stored in molecules)\n  // 1st molecule in template stores nset = # in set\n\n  int nmolecule;\n  class Molecule **molecules;\n\n  // extra peratom info in restart file destined for fix & diag\n\n  double **extra;\n\n  // per-type arrays\n\n  double *mass;\n  int *mass_setflag;\n\n  // callback ptrs for atom arrays managed by fix classes\n\n  int nextra_grow,nextra_restart,nextra_border;  // # of callbacks of each type\n  int *extra_grow,*extra_restart,*extra_border;  // index of fix to callback to\n  int nextra_grow_max,nextra_restart_max;        // size of callback lists\n  int nextra_border_max;\n  int nextra_store;\n\n  int map_style;                  // style of atom map: 0=none, 1=array, 2=hash\n  int map_user;                   // user selected style = same 0,1,2\n  tagint map_tag_max;             // max atom ID that map() is setup for\n\n  // spatial sorting of atoms\n\n  int sortfreq;             // sort atoms every this many steps, 0 = off\n  bigint nextsort;          // next timestep to sort on\n  double userbinsize;       // requested sort bin size\n\n  // indices of atoms with same ID\n\n  int *sametag;      // sametag[I] = next atom with same ID, -1 if no more\n\n  // AtomVec factory types and map\n\n  typedef AtomVec *(*AtomVecCreator)(LAMMPS *);\n  typedef std::map<std::string,AtomVecCreator> AtomVecCreatorMap;\n  AtomVecCreatorMap *avec_map;\n\n  // functions\n\n  Atom(class LAMMPS *);\n  ~Atom();\n\n  void settings(class Atom *);\n  void create_avec(const char *, int, char **, int);\n  virtual class AtomVec *new_avec(const char *, int, int &);\n  void init();\n  void setup();\n\n  class AtomVec *style_match(const char *);\n  void modify_params(int, char **);\n  void tag_check();\n  void tag_extend();\n  int tag_consecutive();\n\n  int parse_data(const char *);\n  int count_words(const char *);\n  int count_words(const char *, char *);\n\n  void deallocate_topology();\n\n  void data_atoms(int, char *, tagint, int, int, double *);\n  void data_vels(int, char *, tagint);\n  void data_bonds(int, char *, int *, tagint, int);\n  void data_angles(int, char *, int *, tagint, int);\n  void data_dihedrals(int, char *, int *, tagint, int);\n  void data_impropers(int, char *, int *, tagint, int);\n  void data_bonus(int, char *, class AtomVec *, tagint);\n  void data_bodies(int, char *, class AtomVecBody *, tagint);\n  void data_fix_compute_variable(int, int);\n  \n  virtual void allocate_type_arrays();\n  void set_mass(const char *, int, const char *, int);\n  void set_mass(const char *, int, int, double);\n  void set_mass(const char *, int, int, char **);\n  void set_mass(double *);\n  void check_mass(const char *, int);\n\n  int radius_consistency(int, double &);\n  int shape_consistency(int, double &, double &, double &);\n\n  void add_molecule(int, char **);\n  int find_molecule(char *);\n  void add_molecule_atom(class Molecule *, int, int, tagint);\n\n  void first_reorder();\n  virtual void sort();\n\n  void add_callback(int);\n  void delete_callback(const char *, int);\n  void update_callback(int);\n\n  int find_custom(const char *, int &);\n  virtual int add_custom(const char *, int);\n  virtual void remove_custom(int, int);\n\n  virtual void sync_modify(ExecutionSpace, unsigned int, unsigned int) {}\n\n  void *extract(char *);\n\n  inline int* get_map_array() {return map_array;};\n  inline int get_map_size() {return map_tag_max+1;};\n\n  bigint memory_usage();\n  int memcheck(const char *);\n\n  // functions for global to local ID mapping\n  // map lookup function inlined for efficiency\n  // return -1 if no map defined\n\n  inline int map(tagint global) {\n    if (map_style == 1) return map_array[global];\n    else if (map_style == 2) return map_find_hash(global);\n    else return -1;\n  };\n\n  void map_init(int check = 1);\n  void map_clear();\n  void map_set();\n  void map_one(tagint, int);\n  int map_style_set();\n  void map_delete();\n  int map_find_hash(tagint);\n\n protected:\n\n  // global to local ID mapping\n\n  int *map_array;       // direct map via array that holds map_tag_max\n  int map_maxarray;     // allocated size of map_array (1 larger than this)\n\n  struct HashElem {     // hashed map\n    tagint global;      // key to search on = global ID\n    int local;          // value associated with key = local index\n    int next;           // next entry in this bucket, -1 if last\n  };\n  int map_nhash;        // # of entries hash table can hold\n  int map_nused;        // # of actual entries in hash table\n  int map_free;         // ptr to 1st unused entry in hash table\n  int map_nbucket;      // # of hash buckets\n  int *map_bucket;      // ptr to 1st entry in each bucket\n  HashElem *map_hash;   // hash table\n\n  int max_same;         // allocated size of sametag\n\n  // spatial sorting of atoms\n\n  int nbins;                      // # of sorting bins\n  int nbinx,nbiny,nbinz;          // bins in each dimension\n  int maxbin;                     // max # of bins\n  int maxnext;                    // max size of next,permute\n  int *binhead;                   // 1st atom in each bin\n  int *next;                      // next atom in bin\n  int *permute;                   // permutation vector\n  double bininvx,bininvy,bininvz; // inverse actual bin sizes\n  double bboxlo[3],bboxhi[3];     // bounding box of my sub-domain\n\n  int memlength;                  // allocated size of memstr\n  char *memstr;                   // string of array names already counted\n\n  void setup_sort_bins();\n  int next_prime(int);\n\n private:\n  template <typename T> static AtomVec *avec_creator(LAMMPS *);\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Atom IDs must be used for molecular systems\n\nAtom IDs are used to identify and find partner atoms in bonds.\n\nE: Unknown atom style\n\nThe choice of atom style is unknown.\n\nE: Could not find atom_modify first group ID\n\nSelf-explanatory.\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Atom_modify id command after simulation box is defined\n\nThe atom_modify id command cannot be used after a read_data,\nread_restart, or create_box command.\n\nE: Atom_modify map command after simulation box is defined\n\nThe atom_modify map command cannot be used after a read_data,\nread_restart, or create_box command.\n\nE: Atom_modify sort and first options cannot be used together\n\nSelf-explanatory.\n\nE: One or more Atom IDs is negative\n\nAtom IDs must be positive integers.\n\nE: One or more atom IDs is too big\n\nThe limit on atom IDs is set by the SMALLBIG, BIGBIG, SMALLSMALL\nsetting in your Makefile.  See Section_start 2.2 of the manual for\nmore details.\n\nE: One or more atom IDs is zero\n\nEither all atoms IDs must be zero or none of them.\n\nE: Non-zero atom IDs with atom_modify id = no\n\nSelf-explanatory.\n\nE: All atom IDs = 0 but atom_modify id = yes\n\nSelf-explanatory.\n\nE: Duplicate atom IDs exist\n\nSelf-explanatory.\n\nE: New atom IDs exceed maximum allowed ID\n\nSee the setting for tagint in the src/lmptype.h file.\n\nE: Incorrect atom format in data file\n\nNumber of values per atom line in the data file is not consistent with\nthe atom style.\n\nE: Invalid atom type in Atoms section of data file\n\nAtom types must range from 1 to specified # of types.\n\nE: Incorrect velocity format in data file\n\nEach atom style defines a format for the Velocity section\nof the data file.  The read-in lines do not match.\n\nE: Invalid atom ID in Velocities section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Invalid atom ID in Bonds section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Invalid bond type in Bonds section of data file\n\nBond type must be positive integer and within range of specified bond\ntypes.\n\nE: Invalid atom ID in Angles section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Invalid angle type in Angles section of data file\n\nAngle type must be positive integer and within range of specified angle\ntypes.\n\nE: Invalid atom ID in Dihedrals section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Invalid dihedral type in Dihedrals section of data file\n\nDihedral type must be positive integer and within range of specified\ndihedral types.\n\nE: Invalid atom ID in Impropers section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Invalid improper type in Impropers section of data file\n\nImproper type must be positive integer and within range of specified\nimproper types.\n\nE: Incorrect bonus data format in data file\n\nSee the read_data doc page for a description of how various kinds of\nbonus data must be formatted for certain atom styles.\n\nE: Invalid atom ID in Bonus section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Invalid atom ID in Bodies section of data file\n\nAtom IDs must be positive integers and within range of defined\natoms.\n\nE: Cannot set mass for this atom style\n\nThis atom style does not support mass settings for each atom type.\nInstead they are defined on a per-atom basis in the data file.\n\nE: Invalid mass line in data file\n\nSelf-explanatory.\n\nE: Invalid type for mass set\n\nMass command must set a type from 1-N where N is the number of atom\ntypes.\n\nE: Invalid mass value\n\nSelf-explanatory.\n\nE: All masses are not set\n\nFor atom styles that define masses for each atom type, all masses must\nbe set in the data file or by the mass command before running a\nsimulation.  They must also be set before using the velocity\ncommand.\n\nE: Reuse of molecule template ID\n\nThe template IDs must be unique.\n\nE: Atom sort did not operate correctly\n\nThis is an internal LAMMPS error.  Please report it to the\ndevelopers.\n\nE: Atom sorting has bin size = 0.0\n\nThe neighbor cutoff is being used as the bin size, but it is zero.\nThus you must explicitly list a bin size in the atom_modify sort\ncommand or turn off sorting.\n\nE: Too many atom sorting bins\n\nThis is likely due to an immense simulation box that has blown up\nto a large size.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(gw/zbl,PairGWZBL)\n\n#else\n\n#ifndef LMP_PAIR_GW_ZBL_H\n#define LMP_PAIR_GW_ZBL_H\n\n#include \"pair_gw.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairGWZBL : public PairGW {\n public:\n  PairGWZBL(class LAMMPS *);\n  ~PairGWZBL() {}\n\n private:\n  double global_a_0;                // Bohr radius for Coulomb repulsion\n  double global_epsilon_0;        // permittivity of vacuum for Coulomb repulsion\n  double global_e;                // proton charge (negative of electron charge)\n\n  void read_file(char *);\n  void repulsive(Param *, double, double &, int, double &);\n\n  double gw_fa(double, Param *);\n  double gw_fa_d(double, Param *);\n\n  double F_fermi(double, Param *);\n  double F_fermi_d(double, Param *);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Pair GW/zbl requires metal or real units\n\nThis is a current restriction of this pair potential.\n\nE: Cannot open GW potential file %s\n\nThe specified GW potential file cannot be opened.  Check that the\npath and name are correct.\n\nE: Incorrect format in GW potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal GW parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: German Samolyuk (ORNL)\n   Based on PairTersoffZBL by Aidan Thompson (SNL) and David Farrell (NWU)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_gw_zbl.h\"\n#include \"atom.h\"\n#include \"update.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairGWZBL::PairGWZBL(LAMMPS *lmp) : PairGW(lmp)\n{\n  // hard-wired constants in metal or real units\n  // a0 = Bohr radius\n  // epsilon0 = permittivity of vacuum = q / energy-distance units\n  // e = unit charge\n  // 1 Kcal/mole = 0.043365121 eV\n\n  if (strcmp(update->unit_style,\"metal\") == 0) {\n    global_a_0 = 0.529;\n    global_epsilon_0 = 0.00552635;\n    global_e = 1.0;\n  } else if (strcmp(update->unit_style,\"real\") == 0) {\n    global_a_0 = 0.529;\n    global_epsilon_0 = 0.00552635 * 0.043365121;\n    global_e = 1.0;\n  } else error->all(FLERR,\"Pair gw/zbl requires metal or real units\");\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGWZBL::read_file(char *file)\n{\n  int params_per_line = 21;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open GW potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in GW potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].gamma = atof(words[4]);\n    params[nparams].lam3 = atof(words[5]);\n    params[nparams].c = atof(words[6]);\n    params[nparams].d = atof(words[7]);\n    params[nparams].h = atof(words[8]);\n    params[nparams].powern = atof(words[9]);\n    params[nparams].beta = atof(words[10]);\n    params[nparams].lam2 = atof(words[11]);\n    params[nparams].bigb = atof(words[12]);\n    params[nparams].bigr = atof(words[13]);\n    params[nparams].bigd = atof(words[14]);\n    params[nparams].lam1 = atof(words[15]);\n    params[nparams].biga = atof(words[16]);\n    params[nparams].Z_i = atof(words[17]);\n    params[nparams].Z_j = atof(words[18]);\n    params[nparams].ZBLcut = atof(words[19]);\n    params[nparams].ZBLexpscale = atof(words[20]);\n\n    // currently only allow m exponent of 1 or 3\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    if (\n        params[nparams].lam3 < 0.0 || params[nparams].c < 0.0 ||\n        params[nparams].d < 0.0 || params[nparams].powern < 0.0 ||\n        params[nparams].beta < 0.0 || params[nparams].lam2 < 0.0 ||\n        params[nparams].bigb < 0.0 || params[nparams].bigr < 0.0 ||\n        params[nparams].bigd < 0.0 ||\n        params[nparams].bigd > params[nparams].bigr ||\n        params[nparams].lam3 < 0.0 || params[nparams].biga < 0.0 ||\n        params[nparams].powerm - params[nparams].powermint != 0.0 ||\n        (params[nparams].powermint != 3 && params[nparams].powermint != 1) ||\n        params[nparams].gamma < 0.0 ||\n        params[nparams].Z_i < 1.0 || params[nparams].Z_j < 1.0 ||\n        params[nparams].ZBLcut < 0.0 || params[nparams].ZBLexpscale < 0.0)\n      error->all(FLERR,\"Illegal GW parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGWZBL::repulsive(Param *param, double rsq, double &fforce,\n                               int eflag, double &eng)\n{\n  double r,tmp_fc,tmp_fc_d,tmp_exp;\n\n  // GW repulsive portion\n\n  r = sqrt(rsq);\n  tmp_fc = gw_fc(r,param);\n  tmp_fc_d = gw_fc_d(r,param);\n  tmp_exp = exp(-param->lam1 * r);\n  double fforce_gw = param->biga * tmp_exp * (tmp_fc_d - tmp_fc*param->lam1);\n  double eng_gw = tmp_fc * param->biga * tmp_exp;\n\n  // ZBL repulsive portion\n\n  double esq = pow(global_e,2.0);\n  double a_ij = (0.8854*global_a_0) /\n    (pow(param->Z_i,0.23) + pow(param->Z_j,0.23));\n  double premult = (param->Z_i * param->Z_j * esq)/(4.0*MY_PI*global_epsilon_0);\n  double r_ov_a = r/a_ij;\n  double phi = 0.1818*exp(-3.2*r_ov_a) + 0.5099*exp(-0.9423*r_ov_a) +\n    0.2802*exp(-0.4029*r_ov_a) + 0.02817*exp(-0.2016*r_ov_a);\n  double dphi = (1.0/a_ij) * (-3.2*0.1818*exp(-3.2*r_ov_a) -\n                              0.9423*0.5099*exp(-0.9423*r_ov_a) -\n                              0.4029*0.2802*exp(-0.4029*r_ov_a) -\n                              0.2016*0.02817*exp(-0.2016*r_ov_a));\n  double fforce_ZBL = premult*-phi/rsq + premult*dphi/r;\n  double eng_ZBL = premult*(1.0/r)*phi;\n\n  // combine two parts with smoothing by Fermi-like function\n\n  fforce = -(-F_fermi_d(r,param) * eng_ZBL +\n             (1.0 - F_fermi(r,param))*fforce_ZBL +\n             F_fermi_d(r,param)*eng_gw + F_fermi(r,param)*fforce_gw) / r;\n\n  if (eflag)\n    eng = (1.0 - F_fermi(r,param))*eng_ZBL + F_fermi(r,param)*eng_gw;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGWZBL::gw_fa(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return -param->bigb * exp(-param->lam2 * r) * gw_fc(r,param) *\n    F_fermi(r,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGWZBL::gw_fa_d(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return param->bigb * exp(-param->lam2 * r) *\n    (param->lam2 * gw_fc(r,param) * F_fermi(r,param) -\n     gw_fc_d(r,param) * F_fermi(r,param) - gw_fc(r,param) *\n     F_fermi_d(r,param));\n}\n\n/* ----------------------------------------------------------------------\n   Fermi-like smoothing function\n------------------------------------------------------------------------- */\n\ndouble PairGWZBL::F_fermi(double r, Param *param)\n{\n  return 1.0 / (1.0 + exp(-param->ZBLexpscale*(r-param->ZBLcut)));\n}\n\n/* ----------------------------------------------------------------------\n   Fermi-like smoothing function derivative with respect to r\n------------------------------------------------------------------------- */\n\ndouble PairGWZBL::F_fermi_d(double r, Param *param)\n{\n  return param->ZBLexpscale*exp(-param->ZBLexpscale*(r-param->ZBLcut)) /\n    pow(1.0 + exp(-param->ZBLexpscale*(r-param->ZBLcut)),2.0);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(lj/charmm/coul/charmm/implicit,PairLJCharmmCoulCharmmImplicit)\n\n#else\n\n#ifndef LMP_PAIR_LJ_CHARMM_COUL_CHARMM_IMPLICIT_H\n#define LMP_PAIR_LJ_CHARMM_COUL_CHARMM_IMPLICIT_H\n\n#include \"pair_lj_charmm_coul_charmm.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairLJCharmmCoulCharmmImplicit : public PairLJCharmmCoulCharmm {\n public:\n  PairLJCharmmCoulCharmmImplicit(class LAMMPS *);\n  virtual void compute(int, int);\n  double single(int, int, int, int, double, double, double, double &);\n};\n\n}\n\n#endif\n#endif\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <string.h>\n#include \"pair_lj_charmm_coul_charmm_implicit.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"neigh_list.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCharmmCoulCharmmImplicit::PairLJCharmmCoulCharmmImplicit(LAMMPS *lmp) :\n  PairLJCharmmCoulCharmm(lmp)\n{\n  implicit = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairLJCharmmCoulCharmmImplicit::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,inum,jnum,itype,jtype;\n  double qtmp,xtmp,ytmp,ztmp,delx,dely,delz,evdwl,ecoul,fpair;\n  double rsq,r2inv,r6inv,forcecoul,forcelj,factor_coul,factor_lj;\n  double philj,switch1,switch2;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  double *special_coul = force->special_coul;\n  double *special_lj = force->special_lj;\n  int newton_pair = force->newton_pair;\n  double qqrd2e = force->qqrd2e;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    qtmp = q[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_lj = special_lj[sbmask(j)];\n      factor_coul = special_coul[sbmask(j)];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cut_bothsq) {\n        r2inv = 1.0/rsq;\n\n        if (rsq < cut_coulsq) {\n          forcecoul = 2.0 * qqrd2e * qtmp*q[j]*r2inv;\n          if (rsq > cut_coul_innersq) {\n            switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n              (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) / denom_coul;\n            switch2 = 12.0*rsq * (cut_coulsq-rsq) *\n              (rsq-cut_coul_innersq) / denom_coul;\n             forcecoul *= switch1 + 0.5*switch2;\n          }\n        } else forcecoul = 0.0;\n\n        if (rsq < cut_ljsq) {\n          r6inv = r2inv*r2inv*r2inv;\n          jtype = type[j];\n          forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n          if (rsq > cut_lj_innersq) {\n            switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n              (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n            switch2 = 12.0*rsq * (cut_ljsq-rsq) *\n              (rsq-cut_lj_innersq) / denom_lj;\n            philj = r6inv * (lj3[itype][jtype]*r6inv - lj4[itype][jtype]);\n            forcelj = forcelj*switch1 + philj*switch2;\n          }\n        } else forcelj = 0.0;\n\n        fpair = (factor_coul*forcecoul + factor_lj*forcelj) * r2inv;\n\n        f[i][0] += delx*fpair;\n        f[i][1] += dely*fpair;\n        f[i][2] += delz*fpair;\n        if (newton_pair || j < nlocal) {\n          f[j][0] -= delx*fpair;\n          f[j][1] -= dely*fpair;\n          f[j][2] -= delz*fpair;\n        }\n\n        if (eflag) {\n          if (rsq < cut_coulsq) {\n            ecoul = qqrd2e * qtmp*q[j]*r2inv;\n            if (rsq > cut_coul_innersq) {\n              switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n                (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) /\n                denom_coul;\n              ecoul *= switch1;\n            }\n            ecoul *= factor_coul;\n          } else ecoul = 0.0;\n          if (rsq < cut_ljsq) {\n            evdwl = r6inv*(lj3[itype][jtype]*r6inv-lj4[itype][jtype]);\n            if (rsq > cut_lj_innersq) {\n              switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n                (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n              evdwl *= switch1;\n            }\n            evdwl *= factor_lj;\n          } else evdwl = 0.0;\n        }\n\n        if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                             evdwl,ecoul,fpair,delx,dely,delz);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairLJCharmmCoulCharmmImplicit::single(int i, int j,\n                                              int itype, int jtype,\n                                              double rsq,\n                                              double factor_coul,\n                                              double factor_lj,\n                                              double &fforce)\n{\n  double r2inv,r6inv,switch1,switch2,forcecoul,forcelj,phicoul,philj;\n\n  r2inv = 1.0/rsq;\n  if (rsq < cut_coulsq) {\n    forcecoul = 2.0 * force->qqrd2e * atom->q[i]*atom->q[j]*r2inv;\n    if (rsq > cut_coul_innersq) {\n      switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n        (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) / denom_coul;\n      switch2 = 12.0*rsq * (cut_coulsq-rsq) *\n        (rsq-cut_coul_innersq) / denom_coul;\n       forcecoul *= switch1 + 0.5*switch2;\n    }\n  } else forcecoul = 0.0;\n  if (rsq < cut_ljsq) {\n    r6inv = r2inv*r2inv*r2inv;\n    forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n    if (rsq > cut_lj_innersq) {\n      switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n        (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n      switch2 = 12.0*rsq * (cut_ljsq-rsq) *\n        (rsq-cut_lj_innersq) / denom_lj;\n      philj = r6inv * (lj3[itype][jtype]*r6inv - lj4[itype][jtype]);\n      forcelj = forcelj*switch1 + philj*switch2;\n    }\n  } else forcelj = 0.0;\n  fforce = (factor_coul*forcecoul + factor_lj*forcelj) * r2inv;\n\n  double eng = 0.0;\n  if (rsq < cut_coulsq) {\n    phicoul = force->qqrd2e * atom->q[i]*atom->q[j]*r2inv;\n    if (rsq > cut_coul_innersq) {\n      switch1 = (cut_coulsq-rsq) * (cut_coulsq-rsq) *\n        (cut_coulsq + 2.0*rsq - 3.0*cut_coul_innersq) /\n        denom_coul;\n      phicoul *= switch1;\n    }\n    eng += factor_coul*phicoul;\n  }\n  if (rsq < cut_ljsq) {\n    philj = r6inv*(lj3[itype][jtype]*r6inv-lj4[itype][jtype]);\n    if (rsq > cut_lj_innersq) {\n      switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n        (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n      philj *= switch1;\n    }\n    eng += factor_lj*philj;\n  }\n\n  return eng;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <string.h>\n#include <stdlib.h>\n#include <dirent.h>\n#include \"read_restart.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"irregular.h\"\n#include \"update.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"fix_read_restart.h\"\n#include \"group.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"bond.h\"\n#include \"angle.h\"\n#include \"dihedral.h\"\n#include \"improper.h\"\n#include \"special.h\"\n#include \"universe.h\"\n#include \"mpiio.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n// same as write_restart.cpp\n\n#define MAGIC_STRING \"LammpS RestartT\"\n#define ENDIAN 0x0001\n#define ENDIANSWAP 0x1000\n#define VERSION_NUMERIC 0\n\nenum{VERSION,SMALLINT,TAGINT,BIGINT,\n     UNITS,NTIMESTEP,DIMENSION,NPROCS,PROCGRID,\n     NEWTON_PAIR,NEWTON_BOND,\n     XPERIODIC,YPERIODIC,ZPERIODIC,BOUNDARY,\n     ATOM_STYLE,NATOMS,NTYPES,\n     NBONDS,NBONDTYPES,BOND_PER_ATOM,\n     NANGLES,NANGLETYPES,ANGLE_PER_ATOM,\n     NDIHEDRALS,NDIHEDRALTYPES,DIHEDRAL_PER_ATOM,\n     NIMPROPERS,NIMPROPERTYPES,IMPROPER_PER_ATOM,\n     TRICLINIC,BOXLO,BOXHI,XY,XZ,YZ,\n     SPECIAL_LJ,SPECIAL_COUL,\n     MASS,PAIR,BOND,ANGLE,DIHEDRAL,IMPROPER,\n     MULTIPROC,MPIIO,PROCSPERFILE,PERPROC,\n     IMAGEINT,BOUNDMIN,TIMESTEP,\n     ATOM_ID,ATOM_MAP_STYLE,ATOM_MAP_USER,ATOM_SORTFREQ,ATOM_SORTBIN,\n     COMM_MODE,COMM_CUTOFF,COMM_VEL};\n\n#define LB_FACTOR 1.1\n\n/* ---------------------------------------------------------------------- */\n\nReadRestart::ReadRestart(LAMMPS *lmp) : Pointers(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ReadRestart::command(int narg, char **arg)\n{\n  if (narg != 1 && narg != 2) error->all(FLERR,\"Illegal read_restart command\");\n\n  if (domain->box_exist)\n    error->all(FLERR,\"Cannot read_restart after simulation box is defined\");\n\n  MPI_Comm_rank(world,&me);\n  MPI_Comm_size(world,&nprocs);\n\n  // check for remap option\n\n  int remapflag = 0;\n  if (narg == 2) {\n    if (strcmp(arg[1],\"remap\") == 0) remapflag = 1;\n    else error->all(FLERR,\"Illegal read_restart command\");\n  }\n\n  // if filename contains \"*\", search dir for latest restart file\n\n  char *file = new char[strlen(arg[0]) + 16];\n  if (strchr(arg[0],'*')) {\n    int n;\n    if (me == 0) {\n      file_search(arg[0],file);\n      n = strlen(file) + 1;\n    }\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(file,n,MPI_CHAR,0,world);\n  } else strcpy(file,arg[0]);\n\n  // check for multiproc files and an MPI-IO filename\n\n  if (strchr(arg[0],'%')) multiproc = 1;\n  else multiproc = 0;\n  if (strstr(arg[0],\".mpiio\")) mpiioflag = 1;\n  else mpiioflag = 0;\n\n  if (multiproc && mpiioflag)\n    error->all(FLERR,\n               \"Read restart MPI-IO input not allowed with % in filename\");\n\n  if (mpiioflag) {\n    mpiio = new RestartMPIIO(lmp);\n    if (!mpiio->mpiio_exists)\n      error->all(FLERR,\"Reading from MPI-IO filename when \"\n                 \"MPIIO package is not installed\");\n  }\n\n  // open single restart file or base file for multiproc case\n\n  if (me == 0) {\n    if (screen) fprintf(screen,\"Reading restart file ...\\n\");\n    char *hfile;\n    if (multiproc) {\n      hfile = new char[strlen(file) + 16];\n      char *ptr = strchr(file,'%');\n      *ptr = '\\0';\n      sprintf(hfile,\"%s%s%s\",file,\"base\",ptr+1);\n      *ptr = '%';\n    } else hfile = file;\n    fp = fopen(hfile,\"rb\");\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open restart file %s\",hfile);\n      error->one(FLERR,str);\n    }\n    if (multiproc) delete [] hfile;\n  }\n\n  // read magic string, endian flag, numeric version\n\n  magic_string();\n  endian();\n  int incompatible = version_numeric();\n\n  // read header info which creates simulation box\n\n  header(incompatible);\n  domain->box_exist = 1;\n\n  // problem setup using info from header\n\n  int n;\n  if (nprocs == 1) n = static_cast<int> (atom->natoms);\n  else n = static_cast<int> (LB_FACTOR * atom->natoms / nprocs);\n\n  atom->allocate_type_arrays();\n  atom->deallocate_topology();\n  atom->avec->grow(n);\n  n = atom->nmax;\n\n  domain->print_box(\"  \");\n  domain->set_initial_box(0);\n  domain->set_global_box();\n  comm->set_proc_grid();\n  domain->set_local_box();\n\n  // read groups, ntype-length arrays, force field, fix info from file\n  // nextra = max # of extra quantities stored with each atom\n\n  group->read_restart(fp);\n  type_arrays();\n  force_fields();\n\n  int nextra = modify->read_restart(fp);\n  atom->nextra_store = nextra;\n  memory->create(atom->extra,n,nextra,\"atom:extra\");\n\n  // read file layout info\n\n  file_layout();\n\n  // close header file if in multiproc mode\n\n  if (multiproc && me == 0) {\n    fclose(fp);\n    fp = NULL;\n  }\n\n  // read per-proc info\n\n  AtomVec *avec = atom->avec;\n\n  int maxbuf = 0;\n  double *buf = NULL;\n  int m,flag;\n\n  // MPI-IO input from single file\n\n  if (mpiioflag) {\n    mpiio->openForRead(file);\n    memory->create(buf,assignedChunkSize,\"read_restart:buf\");\n    mpiio->read((headerOffset+assignedChunkOffset),assignedChunkSize,buf);\n    mpiio->close();\n    if (!nextra) { // We can actually calculate number of atoms from assignedChunkSize\n      atom->nlocal = 1; // temporarily claim there is one atom...\n      int perAtomSize = avec->size_restart(); // ...so we can get its size\n      atom->nlocal = 0; // restore nlocal to zero atoms\n      int atomCt = (int) (assignedChunkSize / perAtomSize);\n      if (atomCt > atom->nmax) avec->grow(atomCt);\n    }\n    m = 0;\n    while (m < assignedChunkSize) m += avec->unpack_restart(&buf[m]);\n  }\n\n  // input of single native file\n  // nprocs_file = # of chunks in file\n  // proc 0 reads a chunk and bcasts it to other procs\n  // each proc unpacks the atoms, saving ones in it's sub-domain\n  // if remapflag set, remap the atom to box before checking sub-domain\n  // check for atom in sub-domain differs for orthogonal vs triclinic box\n\n  else if (multiproc == 0) {\n\n    int triclinic = domain->triclinic;\n    imageint *iptr;\n    double *x,lamda[3];\n    double *coord,*sublo,*subhi;\n    if (triclinic == 0) {\n      sublo = domain->sublo;\n      subhi = domain->subhi;\n    } else {\n      sublo = domain->sublo_lamda;\n      subhi = domain->subhi_lamda;\n    }\n\n    for (int iproc = 0; iproc < nprocs_file; iproc++) {\n      if (read_int() != PERPROC)\n        error->all(FLERR,\"Invalid flag in peratom section of restart file\");\n\n      n = read_int();\n      if (n > maxbuf) {\n        maxbuf = n;\n        memory->destroy(buf);\n        memory->create(buf,maxbuf,\"read_restart:buf\");\n      }\n      read_double_vec(n,buf);\n\n      m = 0;\n      while (m < n) {\n        x = &buf[m+1];\n        if (remapflag) {\n          iptr = (imageint *) &buf[m+7];\n          domain->remap(x,*iptr);\n        }\n\n        if (triclinic) {\n          domain->x2lamda(x,lamda);\n          coord = lamda;\n        } else coord = x;\n\n        if (coord[0] >= sublo[0] && coord[0] < subhi[0] &&\n            coord[1] >= sublo[1] && coord[1] < subhi[1] &&\n            coord[2] >= sublo[2] && coord[2] < subhi[2]) {\n          m += avec->unpack_restart(&buf[m]);\n        } else m += static_cast<int> (buf[m]);\n      }\n    }\n\n    if (me == 0) {\n      fclose(fp);\n      fp = NULL;\n    }\n  }\n\n  // input of multiple native files with procs <= files\n  // # of files = multiproc_file\n  // each proc reads a subset of files, striding by nprocs\n  // each proc keeps all atoms in all perproc chunks in its files\n\n  else if (nprocs <= multiproc_file) {\n\n    char *procfile = new char[strlen(file) + 16];\n    char *ptr = strchr(file,'%');\n\n    for (int iproc = me; iproc < multiproc_file; iproc += nprocs) {\n      *ptr = '\\0';\n      sprintf(procfile,\"%s%d%s\",file,iproc,ptr+1);\n      *ptr = '%';\n      fp = fopen(procfile,\"rb\");\n      if (fp == NULL) {\n        char str[128];\n        sprintf(str,\"Cannot open restart file %s\",procfile);\n        error->one(FLERR,str);\n      }\n\n      fread(&flag,sizeof(int),1,fp);\n      if (flag != PROCSPERFILE)\n        error->one(FLERR,\"Invalid flag in peratom section of restart file\");\n      int procsperfile;\n      fread(&procsperfile,sizeof(int),1,fp);\n\n      for (int i = 0; i < procsperfile; i++) {\n        fread(&flag,sizeof(int),1,fp);\n        if (flag != PERPROC)\n          error->one(FLERR,\"Invalid flag in peratom section of restart file\");\n\n        fread(&n,sizeof(int),1,fp);\n        if (n > maxbuf) {\n          maxbuf = n;\n          memory->destroy(buf);\n          memory->create(buf,maxbuf,\"read_restart:buf\");\n        }\n        fread(buf,sizeof(double),n,fp);\n\n        m = 0;\n        while (m < n) m += avec->unpack_restart(&buf[m]);\n      }\n\n      fclose(fp);\n      fp = NULL;\n    }\n\n    delete [] procfile;\n  }\n\n  // input of multiple native files with procs > files\n  // # of files = multiproc_file\n  // cluster procs based on # of files\n  // 1st proc in each cluster reads per-proc chunks from file\n  // sends chunks round-robin to other procs in its cluster\n  // each proc keeps all atoms in its perproc chunks in file\n\n  else {\n\n    // nclusterprocs = # of procs in my cluster that read from one file\n    // filewriter = 1 if this proc reads file, else 0\n    // fileproc = ID of proc in my cluster who reads from file\n    // clustercomm = MPI communicator within my cluster of procs\n\n    int nfile = multiproc_file;\n    int icluster = static_cast<int> ((bigint) me * nfile/nprocs);\n    int fileproc = static_cast<int> ((bigint) icluster * nprocs/nfile);\n    int fcluster = static_cast<int> ((bigint) fileproc * nfile/nprocs);\n    if (fcluster < icluster) fileproc++;\n    int fileprocnext =\n      static_cast<int> ((bigint) (icluster+1) * nprocs/nfile);\n    fcluster = static_cast<int> ((bigint) fileprocnext * nfile/nprocs);\n    if (fcluster < icluster+1) fileprocnext++;\n    int nclusterprocs = fileprocnext - fileproc;\n    int filereader = 0;\n    if (me == fileproc) filereader = 1;\n    MPI_Comm clustercomm;\n    MPI_Comm_split(world,icluster,0,&clustercomm);\n\n    if (filereader) {\n      char *procfile = new char[strlen(file) + 16];\n      char *ptr = strchr(file,'%');\n      *ptr = '\\0';\n      sprintf(procfile,\"%s%d%s\",file,icluster,ptr+1);\n      *ptr = '%';\n      fp = fopen(procfile,\"rb\");\n      if (fp == NULL) {\n        char str[128];\n        sprintf(str,\"Cannot open restart file %s\",procfile);\n        error->one(FLERR,str);\n      }\n      delete [] procfile;\n    }\n\n    int flag,procsperfile;\n\n    if (filereader) {\n      fread(&flag,sizeof(int),1,fp);\n      if (flag != PROCSPERFILE)\n        error->one(FLERR,\"Invalid flag in peratom section of restart file\");\n      fread(&procsperfile,sizeof(int),1,fp);\n    }\n    MPI_Bcast(&procsperfile,1,MPI_INT,0,clustercomm);\n\n    int tmp,iproc;\n    MPI_Request request;\n\n    for (int i = 0; i < procsperfile; i++) {\n      if (filereader) {\n        fread(&flag,sizeof(int),1,fp);\n        if (flag != PERPROC)\n          error->one(FLERR,\"Invalid flag in peratom section of restart file\");\n\n        fread(&n,sizeof(int),1,fp);\n        if (n > maxbuf) {\n          maxbuf = n;\n          memory->destroy(buf);\n          memory->create(buf,maxbuf,\"read_restart:buf\");\n        }\n        fread(buf,sizeof(double),n,fp);\n\n        if (i % nclusterprocs) {\n          iproc = me + (i % nclusterprocs);\n          MPI_Send(&n,1,MPI_INT,iproc,0,world);\n          MPI_Recv(&tmp,0,MPI_INT,iproc,0,world,MPI_STATUS_IGNORE);\n          MPI_Rsend(buf,n,MPI_DOUBLE,iproc,0,world);\n        }\n\n      } else if (i % nclusterprocs == me - fileproc) {\n        MPI_Recv(&n,1,MPI_INT,fileproc,0,world,MPI_STATUS_IGNORE);\n        if (n > maxbuf) {\n          maxbuf = n;\n          memory->destroy(buf);\n          memory->create(buf,maxbuf,\"read_restart:buf\");\n        }\n        MPI_Irecv(buf,n,MPI_DOUBLE,fileproc,0,world,&request);\n        MPI_Send(&tmp,0,MPI_INT,fileproc,0,world);\n        MPI_Wait(&request,MPI_STATUS_IGNORE);\n      }\n\n      if (i % nclusterprocs == me - fileproc) {\n        m = 0;\n        while (m < n) m += avec->unpack_restart(&buf[m]);\n      }\n    }\n\n    if (filereader && fp != NULL) {\n      fclose(fp);\n      fp = NULL;\n    }\n    MPI_Comm_free(&clustercomm);\n  }\n\n  // clean-up memory\n\n  delete [] file;\n  memory->destroy(buf);\n\n  // for multiproc or MPI-IO files:\n  // perform irregular comm to migrate atoms to correct procs\n\n  if (multiproc || mpiioflag) {\n\n    // if remapflag set, remap all atoms I read back to box before migrating\n\n    if (remapflag) {\n      double **x = atom->x;\n      imageint *image = atom->image;\n      int nlocal = atom->nlocal;\n\n      for (int i = 0; i < nlocal; i++)\n        domain->remap(x[i],image[i]);\n    }\n\n    // create a temporary fix to hold and migrate extra atom info\n    // necessary b/c irregular will migrate atoms\n\n    if (nextra) {\n      char cextra[8],fixextra[8];\n      sprintf(cextra,\"%d\",nextra);\n      sprintf(fixextra,\"%d\",modify->nfix_restart_peratom);\n      char **newarg = new char*[5];\n      newarg[0] = (char *) \"_read_restart\";\n      newarg[1] = (char *) \"all\";\n      newarg[2] = (char *) \"READ_RESTART\";\n      newarg[3] = cextra;\n      newarg[4] = fixextra;\n      modify->add_fix(5,newarg);\n      delete [] newarg;\n    }\n\n    // move atoms to new processors via irregular()\n    // turn sorting on in migrate_atoms() to avoid non-reproducible restarts\n    // in case read by different proc than wrote restart file\n    // first do map_init() since irregular->migrate_atoms() will do map_clear()\n\n    if (atom->map_style) {\n      atom->map_init();\n      atom->map_set();\n    }\n    if (domain->triclinic) domain->x2lamda(atom->nlocal);\n    Irregular *irregular = new Irregular(lmp);\n    irregular->migrate_atoms(1);\n    delete irregular;\n    if (domain->triclinic) domain->lamda2x(atom->nlocal);\n\n    // put extra atom info held by fix back into atom->extra\n    // destroy temporary fix\n\n    if (nextra) {\n      memory->destroy(atom->extra);\n      memory->create(atom->extra,atom->nmax,nextra,\"atom:extra\");\n      int ifix = modify->find_fix(\"_read_restart\");\n      FixReadRestart *fix = (FixReadRestart *) modify->fix[ifix];\n      int *count = fix->count;\n      double **extra = fix->extra;\n      double **atom_extra = atom->extra;\n      int nlocal = atom->nlocal;\n      for (int i = 0; i < nlocal; i++)\n        for (int j = 0; j < count[i]; j++)\n          atom_extra[i][j] = extra[i][j];\n      modify->delete_fix(\"_read_restart\");\n    }\n  }\n\n  // check that all atoms were assigned to procs\n\n  bigint natoms;\n  bigint nblocal = atom->nlocal;\n  MPI_Allreduce(&nblocal,&natoms,1,MPI_LMP_BIGINT,MPI_SUM,world);\n\n  if (me == 0) {\n    if (screen) fprintf(screen,\"  \" BIGINT_FORMAT \" atoms\\n\",natoms);\n    if (logfile) fprintf(logfile,\"  \" BIGINT_FORMAT \" atoms\\n\",natoms);\n  }\n\n  if (natoms != atom->natoms)\n    error->all(FLERR,\"Did not assign all restart atoms correctly\");\n\n  if (me == 0) {\n    if (atom->nbonds) {\n      if (screen) fprintf(screen,\"  \" BIGINT_FORMAT \" bonds\\n\",atom->nbonds);\n      if (logfile) fprintf(logfile,\"  \" BIGINT_FORMAT \" bonds\\n\",atom->nbonds);\n    }\n    if (atom->nangles) {\n      if (screen) fprintf(screen,\"  \" BIGINT_FORMAT \" angles\\n\",\n                          atom->nangles);\n      if (logfile) fprintf(logfile,\"  \" BIGINT_FORMAT \" angles\\n\",\n                           atom->nangles);\n    }\n    if (atom->ndihedrals) {\n      if (screen) fprintf(screen,\"  \" BIGINT_FORMAT \" dihedrals\\n\",\n                          atom->ndihedrals);\n      if (logfile) fprintf(logfile,\"  \" BIGINT_FORMAT \" dihedrals\\n\",\n                           atom->ndihedrals);\n    }\n    if (atom->nimpropers) {\n      if (screen) fprintf(screen,\"  \" BIGINT_FORMAT \" impropers\\n\",\n                          atom->nimpropers);\n      if (logfile) fprintf(logfile,\"  \" BIGINT_FORMAT \" impropers\\n\",\n                           atom->nimpropers);\n    }\n  }\n\n  // check that atom IDs are valid\n\n  atom->tag_check();\n\n  // create global mapping of atoms\n\n  if (atom->map_style) {\n    atom->map_init();\n    atom->map_set();\n  }\n\n  // create special bond lists for molecular systems\n\n  if (atom->molecular == 1) {\n    Special special(lmp);\n    special.build();\n  }\n}\n\n/* ----------------------------------------------------------------------\n   infile contains a \"*\"\n   search for all files which match the infile pattern\n   replace \"*\" with latest timestep value to create outfile name\n   search dir referenced by initial pathname of file\n   if infile also contains \"%\", use \"base\" when searching directory\n   only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid ReadRestart::file_search(char *infile, char *outfile)\n{\n  char *ptr;\n\n  // separate infile into dir + filename\n\n  char *dirname = new char[strlen(infile) + 1];\n  char *filename = new char[strlen(infile) + 1];\n\n  if (strchr(infile,'/')) {\n    ptr = strrchr(infile,'/');\n    *ptr = '\\0';\n    strcpy(dirname,infile);\n    strcpy(filename,ptr+1);\n    *ptr = '/';\n  } else {\n    strcpy(dirname,\"./\");\n    strcpy(filename,infile);\n  }\n\n  // if filename contains \"%\" replace \"%\" with \"base\"\n\n  char *pattern = new char[strlen(filename) + 16];\n\n  if ((ptr = strchr(filename,'%'))) {\n    *ptr = '\\0';\n    sprintf(pattern,\"%s%s%s\",filename,\"base\",ptr+1);\n    *ptr = '%';\n  } else strcpy(pattern,filename);\n\n  // scan all files in directory, searching for files that match pattern\n  // maxnum = largest int that matches \"*\"\n\n  int n = strlen(pattern) + 16;\n  char *begin = new char[n];\n  char *middle = new char[n];\n  char *end = new char[n];\n\n  ptr = strchr(pattern,'*');\n  *ptr = '\\0';\n  strcpy(begin,pattern);\n  strcpy(end,ptr+1);\n  int nbegin = strlen(begin);\n  bigint maxnum = -1;\n\n  struct dirent *ep;\n  DIR *dp = opendir(dirname);\n  if (dp == NULL)\n    error->one(FLERR,\"Cannot open dir to search for restart file\");\n  while ((ep = readdir(dp))) {\n    if (strstr(ep->d_name,begin) != ep->d_name) continue;\n    if ((ptr = strstr(&ep->d_name[nbegin],end)) == NULL) continue;\n    if (strlen(end) == 0) ptr = ep->d_name + strlen(ep->d_name);\n    *ptr = '\\0';\n    if (strlen(&ep->d_name[nbegin]) < n) {\n      strcpy(middle,&ep->d_name[nbegin]);\n      if (ATOBIGINT(middle) > maxnum) maxnum = ATOBIGINT(middle);\n    }\n  }\n  closedir(dp);\n  if (maxnum < 0) error->one(FLERR,\"Found no restart file matching pattern\");\n\n  // create outfile with maxint substituted for \"*\"\n  // use original infile, not pattern, since need to retain \"%\" in filename\n\n  ptr = strchr(infile,'*');\n  *ptr = '\\0';\n  sprintf(outfile,\"%s\" BIGINT_FORMAT \"%s\",infile,maxnum,ptr+1);\n  *ptr = '*';\n\n  // clean up\n\n  delete [] dirname;\n  delete [] filename;\n  delete [] pattern;\n  delete [] begin;\n  delete [] middle;\n  delete [] end;\n}\n\n/* ----------------------------------------------------------------------\n   read header of restart file\n------------------------------------------------------------------------- */\n\nvoid ReadRestart::header(int incompatible)\n{\n  int xperiodic(-1),yperiodic(-1),zperiodic(-1);\n\n  // read flags and fields until flag = -1\n\n  int flag = read_int();\n  while (flag >= 0) {\n\n    // check restart file version, warn if different\n\n    if (flag == VERSION) {\n      char *version = read_string();\n      if (me == 0) {\n        if (screen) fprintf(screen,\"  restart file = %s, LAMMPS = %s\\n\",\n                            version,universe->version);\n      }\n      if (incompatible)\n        error->all(FLERR,\"Restart file incompatible with current version\");\n      delete [] version;\n\n    // check lmptype.h sizes, error if different\n\n    } else if (flag == SMALLINT) {\n      int size = read_int();\n      if (size != sizeof(smallint))\n        error->all(FLERR,\"Smallint setting in lmptype.h is not compatible\");\n    } else if (flag == IMAGEINT) {\n      int size = read_int();\n      if (size != sizeof(imageint))\n        error->all(FLERR,\"Imageint setting in lmptype.h is not compatible\");\n    } else if (flag == TAGINT) {\n      int size = read_int();\n      if (size != sizeof(tagint))\n        error->all(FLERR,\"Tagint setting in lmptype.h is not compatible\");\n    } else if (flag == BIGINT) {\n      int size = read_int();\n      if (size != sizeof(bigint))\n        error->all(FLERR,\"Bigint setting in lmptype.h is not compatible\");\n\n    // reset unit_style only if different\n    // so that timestep,neighbor-skin are not changed\n\n    } else if (flag == UNITS) {\n      char *style = read_string();\n      if (strcmp(style,update->unit_style) != 0) update->set_units(style);\n      delete [] style;\n\n    } else if (flag == NTIMESTEP) {\n      update->ntimestep = read_bigint();\n\n    // set dimension from restart file\n\n    } else if (flag == DIMENSION) {\n      int dimension = read_int();\n      domain->dimension = dimension;\n      if (domain->dimension == 2 && domain->zperiodic == 0)\n        error->all(FLERR,\n                   \"Cannot run 2d simulation with nonperiodic Z dimension\");\n\n    // read nprocs from restart file, warn if different\n\n    } else if (flag == NPROCS) {\n      nprocs_file = read_int();\n      if (nprocs_file != comm->nprocs && me == 0)\n        error->warning(FLERR,\"Restart file used different # of processors\");\n\n    // don't set procgrid, warn if different\n\n    } else if (flag == PROCGRID) {\n      int procgrid[3];\n      read_int();\n      read_int_vec(3,procgrid);\n      int flag = 0;\n      if (comm->user_procgrid[0] != 0 &&\n          procgrid[0] != comm->user_procgrid[0]) flag = 1;\n      if (comm->user_procgrid[1] != 0 &&\n          procgrid[1] != comm->user_procgrid[1]) flag = 1;\n      if (comm->user_procgrid[2] != 0 &&\n          procgrid[2] != comm->user_procgrid[2]) flag = 1;\n      if (flag && me == 0)\n        error->warning(FLERR,\"Restart file used different 3d processor grid\");\n\n    // don't set newton_pair, leave input script value unchanged\n    // set newton_bond from restart file\n    // warn if different and input script settings are not default\n\n    } else if (flag == NEWTON_PAIR) {\n      int newton_pair_file = read_int();\n      if (force->newton_pair != 1) {\n        if (newton_pair_file != force->newton_pair && me == 0)\n          error->warning(FLERR,\n                         \"Restart file used different newton pair setting, \"\n                         \"using input script value\");\n      }\n    } else if (flag == NEWTON_BOND) {\n      int newton_bond_file = read_int();\n      if (force->newton_bond != 1) {\n        if (newton_bond_file != force->newton_bond && me == 0)\n          error->warning(FLERR,\n                         \"Restart file used different newton bond setting, \"\n                         \"using restart file value\");\n      }\n      force->newton_bond = newton_bond_file;\n      if (force->newton_pair || force->newton_bond) force->newton = 1;\n      else force->newton = 0;\n\n    // set boundary settings from restart file\n    // warn if different and input script settings are not default\n\n    } else if (flag == XPERIODIC) {\n      xperiodic = read_int();\n    } else if (flag == YPERIODIC) {\n      yperiodic = read_int();\n    } else if (flag == ZPERIODIC) {\n      zperiodic = read_int();\n    } else if (flag == BOUNDARY) {\n      int boundary[3][2];\n      read_int();\n      read_int_vec(6,&boundary[0][0]);\n\n      if (domain->boundary[0][0] || domain->boundary[0][1] ||\n          domain->boundary[1][0] || domain->boundary[1][1] ||\n          domain->boundary[2][0] || domain->boundary[2][1]) {\n        if (boundary[0][0] != domain->boundary[0][0] ||\n            boundary[0][1] != domain->boundary[0][1] ||\n            boundary[1][0] != domain->boundary[1][0] ||\n            boundary[1][1] != domain->boundary[1][1] ||\n            boundary[2][0] != domain->boundary[2][0] ||\n            boundary[2][1] != domain->boundary[2][1]) {\n          if (me == 0)\n            error->warning(FLERR,\n                           \"Restart file used different boundary settings, \"\n                           \"using restart file values\");\n        }\n      }\n\n      domain->boundary[0][0] = boundary[0][0];\n      domain->boundary[0][1] = boundary[0][1];\n      domain->boundary[1][0] = boundary[1][0];\n      domain->boundary[1][1] = boundary[1][1];\n      domain->boundary[2][0] = boundary[2][0];\n      domain->boundary[2][1] = boundary[2][1];\n\n      if (xperiodic < 0 || yperiodic < 0 || zperiodic < 0)\n        error->all(FLERR,\"Illegal or unset periodicity in restart\");\n\n      domain->periodicity[0] = domain->xperiodic = xperiodic;\n      domain->periodicity[1] = domain->yperiodic = yperiodic;\n      domain->periodicity[2] = domain->zperiodic = zperiodic;\n\n      domain->nonperiodic = 0;\n      if (xperiodic == 0 || yperiodic == 0 || zperiodic == 0) {\n        domain->nonperiodic = 1;\n        if (boundary[0][0] >= 2 || boundary[0][1] >= 2 ||\n            boundary[1][0] >= 2 || boundary[1][1] >= 2 ||\n            boundary[2][0] >= 2 || boundary[2][1] >= 2)\n          domain->nonperiodic = 2;\n      }\n\n    } else if (flag == BOUNDMIN) {\n      double minbound[6];\n      read_int();\n      read_double_vec(6,minbound);\n      domain->minxlo = minbound[0]; domain->minxhi = minbound[1];\n      domain->minylo = minbound[2]; domain->minyhi = minbound[3];\n      domain->minzlo = minbound[4]; domain->minzhi = minbound[5];\n\n    // create new AtomVec class using any stored args\n\n    } else if (flag == ATOM_STYLE) {\n      char *style = read_string();\n      int nargcopy = read_int();\n      char **argcopy = new char*[nargcopy];\n      for (int i = 0; i < nargcopy; i++)\n        argcopy[i] = read_string();\n      atom->create_avec(style,nargcopy,argcopy,1);\n      for (int i = 0; i < nargcopy; i++) delete [] argcopy[i];\n      delete [] argcopy;\n      delete [] style;\n\n    } else if (flag == NATOMS) {\n      atom->natoms = read_bigint();\n    } else if (flag == NTYPES) {\n      atom->ntypes = read_int();\n    } else if (flag == NBONDS) {\n      atom->nbonds = read_bigint();\n    } else if (flag == NBONDTYPES) {\n      atom->nbondtypes = read_int();\n    } else if (flag == BOND_PER_ATOM) {\n      atom->bond_per_atom = read_int();\n    } else if (flag == NANGLES) {\n      atom->nangles = read_bigint();\n    } else if (flag == NANGLETYPES) {\n      atom->nangletypes = read_int();\n    } else if (flag == ANGLE_PER_ATOM) {\n      atom->angle_per_atom = read_int();\n    } else if (flag == NDIHEDRALS) {\n      atom->ndihedrals = read_bigint();\n    } else if (flag == NDIHEDRALTYPES) {\n      atom->ndihedraltypes = read_int();\n    } else if (flag == DIHEDRAL_PER_ATOM) {\n      atom->dihedral_per_atom = read_int();\n    } else if (flag == NIMPROPERS) {\n      atom->nimpropers = read_bigint();\n    } else if (flag == NIMPROPERTYPES) {\n      atom->nimpropertypes = read_int();\n    } else if (flag == IMPROPER_PER_ATOM) {\n      atom->improper_per_atom = read_int();\n\n    } else if (flag == TRICLINIC) {\n      domain->triclinic = read_int();\n    } else if (flag == BOXLO) {\n      read_int();\n      read_double_vec(3,domain->boxlo);\n    } else if (flag == BOXHI) {\n      read_int();\n      read_double_vec(3,domain->boxhi);\n    } else if (flag == XY) {\n      domain->xy = read_double();\n    } else if (flag == XZ) {\n      domain->xz = read_double();\n    } else if (flag == YZ) {\n      domain->yz = read_double();\n\n    } else if (flag == SPECIAL_LJ) {\n      read_int();\n      read_double_vec(3,&force->special_lj[1]);\n    } else if (flag == SPECIAL_COUL) {\n      read_int();\n      read_double_vec(3,&force->special_coul[1]);\n\n    } else if (flag == TIMESTEP) {\n      update->dt = read_double();\n\n    } else if (flag == ATOM_ID) {\n      atom->tag_enable = read_int();\n    } else if (flag == ATOM_MAP_STYLE) {\n      atom->map_style = read_int();\n    } else if (flag == ATOM_MAP_USER) {\n      atom->map_user  = read_int();\n    } else if (flag == ATOM_SORTFREQ) {\n      atom->sortfreq = read_int();\n    } else if (flag == ATOM_SORTBIN) {\n      atom->userbinsize = read_double();\n\n    } else if (flag == COMM_MODE) {\n      comm->mode = read_int();\n    } else if (flag == COMM_CUTOFF) {\n      comm->cutghostuser = read_double();\n    } else if (flag == COMM_VEL) {\n      comm->ghost_velocity = read_int();\n\n    } else error->all(FLERR,\"Invalid flag in header section of restart file\");\n\n    flag = read_int();\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ReadRestart::type_arrays()\n{\n  int flag = read_int();\n  while (flag >= 0) {\n\n    if (flag == MASS) {\n      read_int();\n      double *mass = new double[atom->ntypes+1];\n      read_double_vec(atom->ntypes,&mass[1]);\n      atom->set_mass(mass);\n      delete [] mass;\n\n    } else error->all(FLERR,\n                      \"Invalid flag in type arrays section of restart file\");\n\n    flag = read_int();\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ReadRestart::force_fields()\n{\n  char *style;\n\n  int flag = read_int();\n  while (flag >= 0) {\n\n    if (flag == PAIR) {\n      style = read_string();\n      force->create_pair(style,1);\n      delete [] style;\n      force->pair->read_restart(fp);\n\n    } else if (flag == BOND) {\n      style = read_string();\n      force->create_bond(style,1);\n      delete [] style;\n      force->bond->read_restart(fp);\n\n    } else if (flag == ANGLE) {\n      style = read_string();\n      force->create_angle(style,1);\n      delete [] style;\n      force->angle->read_restart(fp);\n\n    } else if (flag == DIHEDRAL) {\n      style = read_string();\n      force->create_dihedral(style,1);\n      delete [] style;\n      force->dihedral->read_restart(fp);\n\n    } else if (flag == IMPROPER) {\n      style = read_string();\n      force->create_improper(style,1);\n      delete [] style;\n      force->improper->read_restart(fp);\n\n    } else error->all(FLERR,\n                      \"Invalid flag in force field section of restart file\");\n\n    flag = read_int();\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ReadRestart::file_layout()\n{\n  int flag = read_int();\n  while (flag >= 0) {\n\n    if (flag == MULTIPROC) {\n      multiproc_file = read_int();\n      if (multiproc == 0 && multiproc_file)\n        error->all(FLERR,\"Restart file is not a multi-proc file\");\n      if (multiproc && multiproc_file == 0)\n        error->all(FLERR,\"Restart file is a multi-proc file\");\n\n    } else if (flag == MPIIO) {\n      int mpiioflag_file = read_int();\n      if (mpiioflag == 0 && mpiioflag_file)\n        error->all(FLERR,\"Restart file is a MPI-IO file\");\n      if (mpiioflag && mpiioflag_file == 0)\n        error->all(FLERR,\"Restart file is not a MPI-IO file\");\n\n      if (mpiioflag) {\n        bigint *nproc_chunk_offsets;\n        memory->create(nproc_chunk_offsets,nprocs,\n                       \"write_restart:nproc_chunk_offsets\");\n        bigint *nproc_chunk_sizes;\n        memory->create(nproc_chunk_sizes,nprocs,\n                       \"write_restart:nproc_chunk_sizes\");\n\n        // on rank 0 read in the chunk sizes that were written out\n        // then consolidate them and compute offsets relative to the\n        // end of the header info to fit the current partition size\n        // if the number of ranks that did the writing is different\n\n        if (me == 0) {\n          int ndx;\n          int *all_written_send_sizes;\n          memory->create(all_written_send_sizes,nprocs_file,\n                         \"write_restart:all_written_send_sizes\");\n          int *nproc_chunk_number;\n          memory->create(nproc_chunk_number,nprocs,\n                         \"write_restart:nproc_chunk_number\");\n\n          fread(all_written_send_sizes,sizeof(int),nprocs_file,fp);\n\n          if ((nprocs != nprocs_file) && !(atom->nextra_store)) {\n            // nprocs differ, but atom sizes are fixed length, yeah!\n            atom->nlocal = 1; // temporarily claim there is one atom...\n            int perAtomSize = atom->avec->size_restart(); // ...so we can get its size\n            atom->nlocal = 0; // restore nlocal to zero atoms\n\n            bigint total_size = 0;\n            for (int i = 0; i < nprocs_file; ++i) {\n              total_size += all_written_send_sizes[i];\n            }\n            bigint total_ct = total_size / perAtomSize;\n\n            bigint base_ct = total_ct / nprocs;\n            bigint leftover_ct = total_ct  - (base_ct * nprocs);\n            bigint current_ByteOffset = 0;\n            base_ct += 1;\n            bigint base_ByteOffset = base_ct * (perAtomSize * sizeof(double));\n            for (ndx = 0; ndx < leftover_ct; ++ndx) {\n              nproc_chunk_offsets[ndx] = current_ByteOffset;\n              nproc_chunk_sizes[ndx] = base_ct * perAtomSize;\n              current_ByteOffset += base_ByteOffset;\n            }\n            base_ct -= 1;\n            base_ByteOffset -= (perAtomSize * sizeof(double));\n            for (; ndx < nprocs; ++ndx) {\n              nproc_chunk_offsets[ndx] = current_ByteOffset;\n              nproc_chunk_sizes[ndx] = base_ct * perAtomSize;\n              current_ByteOffset += base_ByteOffset;\n            }\n          } else { // we have to read in based on how it was written\n            int init_chunk_number = nprocs_file/nprocs;\n            int num_extra_chunks = nprocs_file - (nprocs*init_chunk_number);\n\n            for (int i = 0; i < nprocs; i++) {\n              if (i < num_extra_chunks)\n                nproc_chunk_number[i] = init_chunk_number+1;\n              else\n                nproc_chunk_number[i] = init_chunk_number;\n            }\n\n            int all_written_send_sizes_index = 0;\n            bigint current_offset = 0;\n            for (int i=0;i<nprocs;i++) {\n              nproc_chunk_offsets[i] = current_offset;\n              nproc_chunk_sizes[i] = 0;\n              for (int j=0;j<nproc_chunk_number[i];j++) {\n                nproc_chunk_sizes[i] +=\n                  all_written_send_sizes[all_written_send_sizes_index];\n                current_offset +=\n                  (all_written_send_sizes[all_written_send_sizes_index] *\n                   sizeof(double));\n                all_written_send_sizes_index++;\n              }\n\n            }\n          }\n          memory->destroy(all_written_send_sizes);\n          memory->destroy(nproc_chunk_number);\n        }\n\n        // scatter chunk sizes and offsets to all procs\n\n        MPI_Scatter(nproc_chunk_sizes, 1, MPI_LMP_BIGINT,\n                    &assignedChunkSize , 1, MPI_LMP_BIGINT, 0,world);\n        MPI_Scatter(nproc_chunk_offsets, 1, MPI_LMP_BIGINT,\n                    &assignedChunkOffset , 1, MPI_LMP_BIGINT, 0,world);\n\n        memory->destroy(nproc_chunk_sizes);\n        memory->destroy(nproc_chunk_offsets);\n      }\n    }\n\n    flag = read_int();\n  }\n\n  // if MPI-IO file, broadcast the end of the header offste\n  // this allows all ranks to compute offset to their data\n\n  if (mpiioflag) {\n    if (me == 0) headerOffset = ftell(fp);\n    MPI_Bcast(&headerOffset,1,MPI_LMP_BIGINT,0,world);\n  }\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// low-level fread methods\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid ReadRestart::magic_string()\n{\n  int n = strlen(MAGIC_STRING) + 1;\n  char *str = new char[n];\n\n  int count;\n  if (me == 0) count = fread(str,sizeof(char),n,fp);\n  MPI_Bcast(&count,1,MPI_INT,0,world);\n  if (count < n)\n    error->all(FLERR,\"Invalid LAMMPS restart file\");\n  MPI_Bcast(str,n,MPI_CHAR,0,world);\n  if (strcmp(str,MAGIC_STRING) != 0)\n    error->all(FLERR,\"Invalid LAMMPS restart file\");\n  delete [] str;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid ReadRestart::endian()\n{\n  int endian = read_int();\n  if (endian == ENDIAN) return;\n  if (endian == ENDIANSWAP)\n    error->all(FLERR,\"Restart file byte ordering is swapped\");\n  else error->all(FLERR,\"Restart file byte ordering is not recognized\");\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nint ReadRestart::version_numeric()\n{\n  int vn = read_int();\n  if (vn != VERSION_NUMERIC) return 1;\n  return 0;\n}\n\n/* ----------------------------------------------------------------------\n   read an int from restart file and bcast it\n------------------------------------------------------------------------- */\n\nint ReadRestart::read_int()\n{\n  int value;\n  if ((me == 0) && (fread(&value,sizeof(int),1,fp) < 1))\n    value = -1;\n  MPI_Bcast(&value,1,MPI_INT,0,world);\n  return value;\n}\n\n/* ----------------------------------------------------------------------\n   read a bigint from restart file and bcast it\n------------------------------------------------------------------------- */\n\nbigint ReadRestart::read_bigint()\n{\n  bigint value;\n  if ((me == 0) && (fread(&value,sizeof(bigint),1,fp) < 1))\n    value = -1;\n  MPI_Bcast(&value,1,MPI_LMP_BIGINT,0,world);\n  return value;\n}\n\n/* ----------------------------------------------------------------------\n   read a double from restart file and bcast it\n------------------------------------------------------------------------- */\n\ndouble ReadRestart::read_double()\n{\n  double value;\n  if ((me == 0) && (fread(&value,sizeof(double),1,fp) < 1))\n    value = 0.0;\n  MPI_Bcast(&value,1,MPI_DOUBLE,0,world);\n  return value;\n}\n\n/* ----------------------------------------------------------------------\n   read a char string (including NULL) and bcast it\n   str is allocated here, ptr is returned, caller must deallocate\n------------------------------------------------------------------------- */\n\nchar *ReadRestart::read_string()\n{\n  int n = read_int();\n  if (n < 0) error->all(FLERR,\"Illegal size string or corrupt restart\");\n  char *value = new char[n];\n  if (me == 0) fread(value,sizeof(char),n,fp);\n  MPI_Bcast(value,n,MPI_CHAR,0,world);\n  return value;\n}\n\n/* ----------------------------------------------------------------------\n   read vector of N ints from restart file and bcast them\n------------------------------------------------------------------------- */\n\nvoid ReadRestart::read_int_vec(int n, int *vec)\n{\n  if (n < 0) error->all(FLERR,\"Illegal size integer vector read requested\");\n  if (me == 0) fread(vec,sizeof(int),n,fp);\n  MPI_Bcast(vec,n,MPI_INT,0,world);\n}\n\n/* ----------------------------------------------------------------------\n   read vector of N doubles from restart file and bcast them\n------------------------------------------------------------------------- */\n\nvoid ReadRestart::read_double_vec(int n, double *vec)\n{\n  if (n < 0) error->all(FLERR,\"Illegal size double vector read requested\");\n  if (me == 0) fread(vec,sizeof(double),n,fp);\n  MPI_Bcast(vec,n,MPI_DOUBLE,0,world);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n// Pointers class contains ptrs to master copy of\n//   fundamental LAMMPS class ptrs stored in lammps.h\n// every LAMMPS class inherits from Pointers to access lammps.h ptrs\n// these variables are auto-initialized by Pointer class constructor\n// *& variables are really pointers to the pointers in lammps.h\n// & enables them to be accessed directly in any class, e.g. atom->x\n\n#ifndef LMP_POINTERS_H\n#define LMP_POINTERS_H\n\n#include \"lmptype.h\"\n#include <mpi.h>\n#include \"lammps.h\"\n\nnamespace LAMMPS_NS {\n\n// universal defines inside namespace\n\n#define FLERR __FILE__,__LINE__\n\n#define MIN(A,B) ((A) < (B) ? (A) : (B))\n#define MAX(A,B) ((A) > (B) ? (A) : (B))\n\nclass Pointers {\n public:\n  Pointers(LAMMPS *ptr) :\n    lmp(ptr),\n    memory(ptr->memory),\n    error(ptr->error),\n    universe(ptr->universe),\n    input(ptr->input),\n    atom(ptr->atom),\n    update(ptr->update),\n    neighbor(ptr->neighbor),\n    comm(ptr->comm),\n    domain(ptr->domain),\n    force(ptr->force),\n    modify(ptr->modify),\n    group(ptr->group),\n    output(ptr->output),\n    timer(ptr->timer),\n    world(ptr->world),\n    infile(ptr->infile),\n    screen(ptr->screen),\n    logfile(ptr->logfile),\n    atomKK(ptr->atomKK),\n    python(ptr->python) {}\n  virtual ~Pointers() {}\n\n protected:\n  LAMMPS *lmp;\n  Memory *&memory;\n  Error *&error;\n  Universe *&universe;\n  Input *&input;\n\n  Atom *&atom;\n  Update *&update;\n  Neighbor *&neighbor;\n  Comm *&comm;\n  Domain *&domain;\n  Force *&force;\n  Modify *&modify;\n  Group *&group;\n  Output *&output;\n  Timer *&timer;\n\n  MPI_Comm &world;\n  FILE *&infile;\n  FILE *&screen;\n  FILE *&logfile;\n\n  class AtomKokkos *&atomKK;\n  class Python *&python;\n};\n\n}\n\n#endif\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef COMMAND_CLASS\n\nCommandStyle(read_restart,ReadRestart)\n\n#else\n\n#ifndef LMP_READ_RESTART_H\n#define LMP_READ_RESTART_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass ReadRestart : protected Pointers {\n public:\n  ReadRestart(class LAMMPS *);\n  void command(int, char **);\n\n private:\n  int me,nprocs,nprocs_file,multiproc_file;\n  FILE *fp;\n\n  int multiproc;             // 0 = proc 0 writes for all\n                             // else # of procs writing files\n\n  // MPI-IO values\n\n  int mpiioflag;               // 1 for MPIIO output, else 0\n  class RestartMPIIO *mpiio;   // MPIIO for restart file input\n  bigint assignedChunkSize;\n  MPI_Offset assignedChunkOffset,headerOffset;\n\n  void file_search(char *, char *);\n  void header(int);\n  void type_arrays();\n  void force_fields();\n\n  void magic_string();\n  void endian();\n  int version_numeric();\n  void file_layout();\n\n  int read_int();\n  bigint read_bigint();\n  double read_double();\n  char *read_string();\n  void read_int_vec(int, int *);\n  void read_double_vec(int, double *);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Cannot read_restart after simulation box is defined\n\nThe read_restart command cannot be used after a read_data,\nread_restart, or create_box command.\n\nE: Read restart MPI-IO input not allowed with % in filename\n\nThis is because a % signifies one file per processor and MPI-IO\ncreates one large file for all processors.\n\nE: Reading from MPI-IO filename when MPIIO package is not installed\n\nSelf-explanatory.\n\nE: Cannot open restart file %s\n\nSelf-explanatory.\n\nE: Invalid flag in peratom section of restart file\n\nThe format of this section of the file is not correct.\n\nE: Did not assign all restart atoms correctly\n\nAtoms read in from the restart file were not assigned correctly to\nprocessors.  This is likely due to some atom coordinates being outside\na non-periodic simulation box.  Normally this should not happen.  You\nmay wish to use the \"remap\" option on the read_restart command to see\nif this helps.\n\nE: Cannot open dir to search for restart file\n\nUsing a \"*\" in the name of the restart file will open the current\ndirectory to search for matching file names.\n\nE: Found no restart file matching pattern\n\nWhen using a \"*\" in the restart file name, no matching file was found.\n\nE: Restart file incompatible with current version\n\nThis is probably because you are trying to read a file created with a\nversion of LAMMPS that is too old compared to the current version.\nUse your older version of LAMMPS and convert the restart file\nto a data file.\n\nE: Smallint setting in lmptype.h is not compatible\n\nSmallint stored in restart file is not consistent with LAMMPS version\nyou are running.\n\nE: Imageint setting in lmptype.h is not compatible\n\nFormat of imageint stored in restart file is not consistent with\nLAMMPS version you are running.  See the settings in src/lmptype.h\n\nE: Tagint setting in lmptype.h is not compatible\n\nFormat of tagint stored in restart file is not consistent with LAMMPS\nversion you are running.  See the settings in src/lmptype.h\n\nE: Bigint setting in lmptype.h is not compatible\n\nFormat of bigint stored in restart file is not consistent with LAMMPS\nversion you are running.  See the settings in src/lmptype.h\n\nE: Cannot run 2d simulation with nonperiodic Z dimension\n\nUse the boundary command to make the z dimension periodic in order to\nrun a 2d simulation.\n\nW: Restart file used different # of processors\n\nThe restart file was written out by a LAMMPS simulation running on a\ndifferent number of processors.  Due to round-off, the trajectories of\nyour restarted simulation may diverge a little more quickly than if\nyou ran on the same # of processors.\n\nW: Restart file used different 3d processor grid\n\nThe restart file was written out by a LAMMPS simulation running on a\ndifferent 3d grid of processors.  Due to round-off, the trajectories\nof your restarted simulation may diverge a little more quickly than if\nyou ran on the same # of processors.\n\nW: Restart file used different newton pair setting, using input script value\n\nThe input script value will override the setting in the restart file.\n\nW: Restart file used different newton bond setting, using restart file value\n\nThe restart file value will override the setting in the input script.\n\nW: Restart file used different boundary settings, using restart file values\n\nYour input script cannot change these restart file settings.\n\nE: Illegal or unset periodicity in restart\n\nThis error should not normally occur unless the restart file is invalid.\n\nE: Invalid flag in header section of restart file\n\nUnrecognized entry in restart file.\n\nE: Invalid flag in type arrays section of restart file\n\nUnrecognized entry in restart file.\n\nE: Invalid flag in force field section of restart file\n\nUnrecognized entry in restart file.\n\nE: Restart file is not a multi-proc file\n\nThe file is inconsistent with the filename you specified for it.\n\nE: Restart file is a multi-proc file\n\nThe file is inconsistent with the filename you specified for it.\n\nE: Restart file is a MPI-IO file\n\nThe file is inconsistent with the filename you specified for it.\n\nE: Restart file is not a MPI-IO file\n\nThe file is inconsistent with the filename you specified for it.\n\nE: Invalid LAMMPS restart file\n\nThe file does not appear to be a LAMMPS restart file since\nit doesn't contain the correct magic string at the beginning.\n\nE: Restart file byte ordering is swapped\n\nThe file was written on a machine with different byte-ordering than\nthe machine you are reading it on.  Convert it to a text data file\ninstead, on the machine you wrote it on.\n\nE: Restart file byte ordering is not recognized\n\nThe file does not appear to be a LAMMPS restart file since it doesn't\ncontain a recognized byte-orderomg flag at the beginning.\n\nE: Illegal size string or corrupt restart\n\nThis error should not normally occur unless the restart file is invalid.\n\nE: Illegal size integer vector read requested\n\nThis error should not normally occur unless the restart file is invalid.\n\nE: Illegal size double vector read requested\n\nThis error should not normally occur unless the restart file is invalid.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_MPIIO_H\n#define LMP_MPIIO_H\n\n// true interface to MPIIO package\n// used when MPIIO package is installed\n\n#ifdef LMP_MPIIO\n\n#if defined(MPI_STUBS)\n#error \"The MPIIO package cannot be compiled in serial with MPI STUBS\"\n#endif\n\n#include \"restart_mpiio.h\"\n\n#else\n\n// dummy interface to MPIIO package\n// needed for compiling when MPIIO package is not installed\n\nnamespace LAMMPS_NS {\n\nclass RestartMPIIO {\n public:\n  int mpiio_exists;\n\n  RestartMPIIO(class LAMMPS *) {mpiio_exists = 0;}\n  ~RestartMPIIO() {}\n  void openForRead(char *) {}\n  void openForWrite(char *) {}\n  void write(MPI_Offset,int,double *) {}\n  void read(MPI_Offset,long,double *) {}\n  void close() {}\n};\n\n}\n\n#endif\n#endif\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Pavel Elkind (Gothenburg University)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"pair_tip4p_cut.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"domain.h\"\n#include \"angle.h\"\n#include \"bond.h\"\n#include \"comm.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n/* ---------------------------------------------------------------------- */\n\nPairTIP4PCut::PairTIP4PCut(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n\n  nmax = 0;\n  hneigh = NULL;\n  newsite = NULL;\n\n  // TIP4P cannot compute virial as F dot r\n  // due to finding bonded H atoms which are not near O atom\n\n  no_virial_fdotr_compute = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nPairTIP4PCut::~PairTIP4PCut()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n  }\n\n  memory->destroy(hneigh);\n  memory->destroy(newsite);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,inum,jnum,itype,jtype;\n  double qtmp,xtmp,ytmp,ztmp,delx,dely,delz,ecoul;\n  double rsq,r2inv,forcecoul,factor_coul;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  int key;\n  int n,vlist[6];\n  int iH1,iH2,jH1,jH2;\n  double cforce;\n  double fO[3],fH[3],fd[3],v[6];\n  double *x1,*x2,*xH1,*xH2;\n\n  ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  // reallocate hneigh & newsite if necessary\n  // initialize hneigh[0] to -1 on steps when reneighboring occurred\n  // initialize hneigh[2] to 0 every step\n\n  int nlocal = atom->nlocal;\n  int nall = nlocal + atom->nghost;\n\n  if (atom->nmax > nmax) {\n    nmax = atom->nmax;\n    memory->destroy(hneigh);\n    memory->create(hneigh,nmax,3,\"pair:hneigh\");\n    memory->destroy(newsite);\n    memory->create(newsite,nmax,3,\"pair:newsite\");\n  }\n  if (neighbor->ago == 0)\n    for (i = 0; i < nall; i++) hneigh[i][0] = -1;\n  for (i = 0; i < nall; i++) hneigh[i][2] = 0;\n\n  double **f = atom->f;\n  double **x = atom->x;\n  double *q = atom->q;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  double *special_coul = force->special_coul;\n  double qqrd2e = force->qqrd2e;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    qtmp = q[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n\n    if (itype == typeO) {\n      if (hneigh[i][0] < 0) {\n        iH1 = atom->map(tag[i] + 1);\n        iH2 = atom->map(tag[i] + 2);\n        if (iH1 == -1 || iH2 == -1)\n          error->one(FLERR,\"TIP4P hydrogen is missing\");\n        if (atom->type[iH1] != typeH || atom->type[iH2] != typeH)\n          error->one(FLERR,\"TIP4P hydrogen has incorrect atom type\");\n        // set iH1,iH2 to closest image to O\n        iH1 = domain->closest_image(i,iH1);\n        iH2 = domain->closest_image(i,iH2);\n        compute_newsite(x[i],x[iH1],x[iH2],newsite[i]);\n        hneigh[i][0] = iH1;\n        hneigh[i][1] = iH2;\n        hneigh[i][2] = 1;\n\n      } else {\n        iH1 = hneigh[i][0];\n        iH2 = hneigh[i][1];\n        if (hneigh[i][2] == 0) {\n          hneigh[i][2] = 1;\n          compute_newsite(x[i],x[iH1],x[iH2],newsite[i]);\n        }\n      }\n      x1 = newsite[i];\n    } else x1 = x[i];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_coul = special_coul[sbmask(j)];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      jtype = type[j];\n\n      // adjust rsq and delxyz for off-site O charge(s) if necessary\n      // but only if they are within reach\n\n      if (rsq < cut_coulsqplus) {\n        if (itype == typeO || jtype == typeO) {\n\n          // if atom J = water O, set x2 = offset charge site\n          // else x2 = x of atom J\n\n          if (jtype == typeO) {\n            if (hneigh[j][0] < 0) {\n              jH1 = atom->map(tag[j] + 1);\n              jH2 = atom->map(tag[j] + 2);\n              if (jH1 == -1 || jH2 == -1)\n                error->one(FLERR,\"TIP4P hydrogen is missing\");\n              if (atom->type[jH1] != typeH || atom->type[jH2] != typeH)\n                error->one(FLERR,\"TIP4P hydrogen has incorrect atom type\");\n              // set jH1,jH2 to closest image to O\n              jH1 = domain->closest_image(j,jH1);\n              jH2 = domain->closest_image(j,jH2);\n              compute_newsite(x[j],x[jH1],x[jH2],newsite[j]);\n              hneigh[j][0] = jH1;\n              hneigh[j][1] = jH2;\n              hneigh[j][2] = 1;\n\n            } else {\n              jH1 = hneigh[j][0];\n              jH2 = hneigh[j][1];\n              if (hneigh[j][2] == 0) {\n                hneigh[j][2] = 1;\n                compute_newsite(x[j],x[jH1],x[jH2],newsite[j]);\n              }\n            }\n            x2 = newsite[j];\n          } else x2 = x[j];\n\n          delx = x1[0] - x2[0];\n          dely = x1[1] - x2[1];\n          delz = x1[2] - x2[2];\n          rsq = delx*delx + dely*dely + delz*delz;\n        }\n\n        // Coulombic interaction based on modified rsq\n\n        if (rsq < cut_coulsq) {\n          r2inv = 1.0 / rsq;\n          forcecoul = qqrd2e * qtmp * q[j] * sqrt(r2inv);\n          cforce = factor_coul * forcecoul * r2inv;\n\n        // if i,j are not O atoms, force is applied directly;\n        // if i or j are O atoms, force is on fictitious atom & partitioned\n        // force partitioning due to Feenstra, J Comp Chem, 20, 786 (1999)\n        // f_f = fictitious force, fO = f_f (1 - 2 alpha), fH = alpha f_f\n        // preserves total force and torque on water molecule\n        // virial = sum(r x F) where each water's atoms are near xi and xj\n        // vlist stores 2,4,6 atoms whose forces contribute to virial\n\n          n = 0;\n          key = 0;\n\n          if (itype != typeO) {\n            f[i][0] += delx * cforce;\n            f[i][1] += dely * cforce;\n            f[i][2] += delz * cforce;\n\n            if (vflag) {\n              v[0] = x[i][0] * delx * cforce;\n              v[1] = x[i][1] * dely * cforce;\n              v[2] = x[i][2] * delz * cforce;\n              v[3] = x[i][0] * dely * cforce;\n              v[4] = x[i][0] * delz * cforce;\n              v[5] = x[i][1] * delz * cforce;\n            }\n            vlist[n++] = i;\n\n          } else {\n            key++;\n\n            fd[0] = delx*cforce;\n            fd[1] = dely*cforce;\n            fd[2] = delz*cforce;\n\n            fO[0] = fd[0]*(1.0 - alpha);\n            fO[1] = fd[1]*(1.0 - alpha);\n            fO[2] = fd[2]*(1.0 - alpha);\n\n            fH[0] = 0.5 * alpha * fd[0];\n            fH[1] = 0.5 * alpha * fd[1];\n            fH[2] = 0.5 * alpha * fd[2];\n\n            f[i][0] += fO[0];\n            f[i][1] += fO[1];\n            f[i][2] += fO[2];\n\n            f[iH1][0] += fH[0];\n            f[iH1][1] += fH[1];\n            f[iH1][2] += fH[2];\n\n            f[iH2][0] += fH[0];\n            f[iH2][1] += fH[1];\n            f[iH2][2] += fH[2];\n\n            if(vflag) {\n              xH1 = x[iH1];\n              xH2 = x[iH2];\n              v[0] = x[i][0]*fO[0] + xH1[0]*fH[0] + xH2[0]*fH[0];\n              v[1] = x[i][1]*fO[1] + xH1[1]*fH[1] + xH2[1]*fH[1];\n              v[2] = x[i][2]*fO[2] + xH1[2]*fH[2] + xH2[2]*fH[2];\n              v[3] = x[i][0]*fO[1] + xH1[0]*fH[1] + xH2[0]*fH[1];\n              v[4] = x[i][0]*fO[2] + xH1[0]*fH[2] + xH2[0]*fH[2];\n              v[5] = x[i][1]*fO[2] + xH1[1]*fH[2] + xH2[1]*fH[2];\n            }\n            vlist[n++] = i;\n            vlist[n++] = iH1;\n            vlist[n++] = iH2;\n          }\n\n          if (jtype != typeO) {\n            f[j][0] -= delx * cforce;\n            f[j][1] -= dely * cforce;\n            f[j][2] -= delz * cforce;\n\n            if (vflag) {\n              v[0] -= x[j][0] * delx * cforce;\n              v[1] -= x[j][1] * dely * cforce;\n              v[2] -= x[j][2] * delz * cforce;\n              v[3] -= x[j][0] * dely * cforce;\n              v[4] -= x[j][0] * delz * cforce;\n              v[5] -= x[j][1] * delz * cforce;\n            }\n            vlist[n++] = j;\n\n          } else {\n            key += 2;\n\n            fd[0] = -delx*cforce;\n            fd[1] = -dely*cforce;\n            fd[2] = -delz*cforce;\n\n            fO[0] = fd[0]*(1 - alpha);\n            fO[1] = fd[1]*(1 - alpha);\n            fO[2] = fd[2]*(1 - alpha);\n\n            fH[0] = 0.5 * alpha * fd[0];\n            fH[1] = 0.5 * alpha * fd[1];\n            fH[2] = 0.5 * alpha * fd[2];\n\n            f[j][0] += fO[0];\n            f[j][1] += fO[1];\n            f[j][2] += fO[2];\n\n            f[jH1][0] += fH[0];\n            f[jH1][1] += fH[1];\n            f[jH1][2] += fH[2];\n\n            f[jH2][0] += fH[0];\n            f[jH2][1] += fH[1];\n            f[jH2][2] += fH[2];\n\n            if (vflag) {\n              xH1 = x[jH1];\n              xH2 = x[jH2];\n              v[0] += x[j][0]*fO[0] + xH1[0]*fH[0] + xH2[0]*fH[0];\n              v[1] += x[j][1]*fO[1] + xH1[1]*fH[1] + xH2[1]*fH[1];\n              v[2] += x[j][2]*fO[2] + xH1[2]*fH[2] + xH2[2]*fH[2];\n              v[3] += x[j][0]*fO[1] + xH1[0]*fH[1] + xH2[0]*fH[1];\n              v[4] += x[j][0]*fO[2] + xH1[0]*fH[2] + xH2[0]*fH[2];\n              v[5] += x[j][1]*fO[2] + xH1[1]*fH[2] + xH2[1]*fH[2];\n            }\n            vlist[n++] = j;\n            vlist[n++] = jH1;\n            vlist[n++] = jH2;\n          }\n\n          if (eflag) {\n            ecoul = qqrd2e * qtmp * q[j] * sqrt(r2inv);\n            ecoul *= factor_coul;\n          } else ecoul = 0.0;\n\n          if (evflag) ev_tally_tip4p(key,vlist,v,ecoul,alpha);\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::settings(int narg, char **arg)\n{\n  if (narg != 6) error->all(FLERR,\"Illegal pair_style command\");\n\n  typeO = force->inumeric(FLERR,arg[0]);\n  typeH = force->inumeric(FLERR,arg[1]);\n  typeB = force->inumeric(FLERR,arg[2]);\n  typeA = force->inumeric(FLERR,arg[3]);\n  qdist = force->numeric(FLERR,arg[4]);\n  cut_coul = force->numeric(FLERR,arg[5]);\n\n  cut_coulsq = cut_coul * cut_coul;\n  cut_coulsqplus = (cut_coul + 2.0*qdist) * (cut_coul + 2.0*qdist);\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::coeff(int narg, char **arg)\n{\n  if (narg != 2)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    for (int j = MAX(jlo,i); j <= jhi; j++) {\n      setflag[i][j] = 1;\n      count++;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style tip4p/cut requires atom IDs\");\n  if (!force->newton_pair)\n    error->all(FLERR,\n               \"Pair style tip4p/cut requires newton pair on\");\n  if (!atom->q_flag)\n    error->all(FLERR,\n               \"Pair style tip4p/cut requires atom attribute q\");\n  if (force->bond == NULL)\n    error->all(FLERR,\"Must use a bond style with TIP4P potential\");\n  if (force->angle == NULL)\n    error->all(FLERR,\"Must use an angle style with TIP4P potential\");\n\n  neighbor->request(this,instance_me);\n\n  // set alpha parameter\n\n  double theta = force->angle->equilibrium_angle(typeA);\n  double blen = force->bond->equilibrium_distance(typeB);\n  alpha = qdist / (cos(0.5*theta) * blen);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairTIP4PCut::init_one(int i, int j)\n{\n  // include TIP4P qdist in full cutoff, qdist = 0.0 if not TIP4P\n\n  return cut_coul+2.0*qdist;\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::write_restart(FILE *fp)\n{\n  write_restart_settings(fp);\n\n  int i,j;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++)\n      fwrite(&setflag[i][j],sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::read_restart(FILE *fp)\n{\n  read_restart_settings(fp);\n  allocate();\n\n  int i,j;\n  int me = comm->me;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      if (me == 0) fread(&setflag[i][j],sizeof(int),1,fp);\n      MPI_Bcast(&setflag[i][j],1,MPI_INT,0,world);\n    }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::write_restart_settings(FILE *fp)\n{\n  fwrite(&typeO,sizeof(int),1,fp);\n  fwrite(&typeH,sizeof(int),1,fp);\n  fwrite(&typeB,sizeof(int),1,fp);\n  fwrite(&typeA,sizeof(int),1,fp);\n  fwrite(&qdist,sizeof(double),1,fp);\n\n  fwrite(&cut_coul,sizeof(double),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::read_restart_settings(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&typeO,sizeof(int),1,fp);\n    fread(&typeH,sizeof(int),1,fp);\n    fread(&typeB,sizeof(int),1,fp);\n    fread(&typeA,sizeof(int),1,fp);\n    fread(&qdist,sizeof(double),1,fp);\n\n    fread(&cut_coul,sizeof(double),1,fp);\n  }\n\n  MPI_Bcast(&typeO,1,MPI_INT,0,world);\n  MPI_Bcast(&typeH,1,MPI_INT,0,world);\n  MPI_Bcast(&typeB,1,MPI_INT,0,world);\n  MPI_Bcast(&typeA,1,MPI_INT,0,world);\n  MPI_Bcast(&qdist,1,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&cut_coul,1,MPI_DOUBLE,0,world);\n\n  cut_coulsq = cut_coul * cut_coul;\n  cut_coulsqplus = (cut_coul + 2.0*qdist) * (cut_coul + 2.0*qdist);\n}\n\n/* ----------------------------------------------------------------------\n  compute position xM of fictitious charge site for O atom and 2 H atoms\n  return it as xM\n------------------------------------------------------------------------- */\n\nvoid PairTIP4PCut::compute_newsite(double *xO,  double *xH1,\n                                        double *xH2, double *xM)\n{\n  double delx1 = xH1[0] - xO[0];\n  double dely1 = xH1[1] - xO[1];\n  double delz1 = xH1[2] - xO[2];\n\n  double delx2 = xH2[0] - xO[0];\n  double dely2 = xH2[1] - xO[1];\n  double delz2 = xH2[2] - xO[2];\n\n  xM[0] = xO[0] + alpha * 0.5 * (delx1 + delx2);\n  xM[1] = xO[1] + alpha * 0.5 * (dely1 + dely2);\n  xM[2] = xO[2] + alpha * 0.5 * (delz1 + delz2);\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of hneigh\n------------------------------------------------------------------------- */\n\ndouble PairTIP4PCut::memory_usage()\n{\n  double bytes = maxeatom * sizeof(double);\n  bytes += maxvatom*6 * sizeof(double);\n  bytes += 2 * nmax * sizeof(double);\n  return bytes;\n}\n","/* -----------------------------------------------------------------------\n   LAMMPS 2003 (July 31) - Molecular Dynamics Simulator\n   Sandia National Laboratories, www.cs.sandia.gov/~sjplimp/lammps.html\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------ */\n\n/* Single-processor \"stub\" versions of MPI routines */\n/* -I. in Makefile insures dummy mpi.h in this dir is included */\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdint.h>\n#include <sys/time.h>\n#include <mpi.h>\n\n/* data structure for double/int */\n\nstruct _mpi_double_int {\n  double value;\n  int proc;\n};\ntypedef struct _mpi_double_int double_int;\n\n/* extra MPI_Datatypes registered by MPI_Type_contiguous */\n\n#define MAXEXTRA_DATATYPE 16\n\nint nextra_datatype;\nMPI_Datatype *ptr_datatype[MAXEXTRA_DATATYPE];\nint index_datatype[MAXEXTRA_DATATYPE];\nint size_datatype[MAXEXTRA_DATATYPE];\n\nstatic int _mpi_is_initialized=0;\n\n/* ---------------------------------------------------------------------- */\n/* MPI Functions */\n/* ---------------------------------------------------------------------- */\n\nint MPI_Init(int *argc, char ***argv)\n{\n  if (_mpi_is_initialized > 0) {\n    printf(\"MPI Stub WARNING: MPI already initialized\\n\");\n    return 1;\n  }\n  if (_mpi_is_initialized < 0) {\n    printf(\"MPI Stub WARNING: MPI already finalized\\n\");\n    return 1;\n  }\n  _mpi_is_initialized = 1;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Initialized(int *flag)\n{\n  *flag = (_mpi_is_initialized > 0) ? 1 : 0;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Finalized(int *flag)\n{\n  *flag = (_mpi_is_initialized < 0) ? 1 : 0;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* return \"localhost\" as name of the processor */\n\nint MPI_Get_processor_name(char *name, int *resultlen)\n{\n  const char host[] = \"localhost\";\n  int len;\n\n  if (!name || !resultlen) return MPI_ERR_ARG;\n\n  len = strlen(host);\n  memcpy(name,host,len+1);\n  *resultlen = len;\n  return MPI_SUCCESS;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* return MPI version level. v1.2 is not 100% correct, but close enough */\n\nint MPI_Get_version(int *major, int *minor)\n{\n  if (!major || !minor) return MPI_ERR_ARG;\n\n  *major = 1;\n  *minor = 2;\n  return MPI_SUCCESS;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Comm_rank(MPI_Comm comm, int *me)\n{\n  *me = 0;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Comm_size(MPI_Comm comm, int *nprocs)\n{\n  *nprocs = 1;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Abort(MPI_Comm comm, int errorcode)\n{\n  exit(1);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Finalize()\n{\n  if (_mpi_is_initialized == 0) {\n    printf(\"MPI Stub WARNING: MPI not yet initialized\\n\");\n    return 1;\n  }\n  if (_mpi_is_initialized < 0) {\n    printf(\"MPI Stub WARNING: MPI already finalized\\n\");\n    return 1;\n  }\n  _mpi_is_initialized = -1;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble MPI_Wtime()\n{\n  double time;\n  struct timeval tv;\n\n  gettimeofday(&tv,NULL);\n  time = 1.0 * tv.tv_sec + 1.0e-6 * tv.tv_usec;\n  return time;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* include sizes of user defined datatypes, stored in extra lists */\n\nstatic int stubtypesize(MPI_Datatype datatype)\n{\n  if (datatype == MPI_INT)             return sizeof(int);\n  else if (datatype == MPI_FLOAT)      return sizeof(float);\n  else if (datatype == MPI_DOUBLE)     return sizeof(double);\n  else if (datatype == MPI_CHAR)       return sizeof(char);\n  else if (datatype == MPI_BYTE)       return sizeof(char);\n  else if (datatype == MPI_LONG)       return sizeof(long);\n  else if (datatype == MPI_LONG_LONG)  return sizeof(uint64_t);\n  else if (datatype == MPI_DOUBLE_INT) return sizeof(double_int);\n  else {\n    int i;\n    for (i = 0; i < nextra_datatype; i++)\n      if (datatype == index_datatype[i]) return size_datatype[i];\n  }\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Type_size(MPI_Datatype datatype, int *size)\n{\n  if (size == NULL) return MPI_ERR_ARG;\n\n  *size = stubtypesize(datatype);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Request_free(MPI_Request *request)\n{\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Send(const void *buf, int count, MPI_Datatype datatype,\n             int dest, int tag, MPI_Comm comm)\n{\n  printf(\"MPI Stub WARNING: Should not send message to self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Isend(const void *buf, int count, MPI_Datatype datatype,\n              int source, int tag, MPI_Comm comm, MPI_Request *request)\n{\n  printf(\"MPI Stub WARNING: Should not send message to self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Rsend(const void *buf, int count, MPI_Datatype datatype,\n              int dest, int tag, MPI_Comm comm)\n{\n  printf(\"MPI Stub WARNING: Should not rsend message to self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Recv(void *buf, int count, MPI_Datatype datatype,\n             int source, int tag, MPI_Comm comm, MPI_Status *status)\n{\n  printf(\"MPI Stub WARNING: Should not recv message from self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Irecv(void *buf, int count, MPI_Datatype datatype,\n              int source, int tag, MPI_Comm comm, MPI_Request *request)\n{\n  printf(\"MPI Stub WARNING: Should not recv message from self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Wait(MPI_Request *request, MPI_Status *status)\n{\n  printf(\"MPI Stub WARNING: Should not wait on message from self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Waitall(int n, MPI_Request *request, MPI_Status *status)\n{\n  printf(\"MPI Stub WARNING: Should not wait on message from self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Waitany(int count, MPI_Request *request, int *index,\n                MPI_Status *status)\n{\n  printf(\"MPI Stub WARNING: Should not wait on message from self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Sendrecv(const void *sbuf, int scount, MPI_Datatype sdatatype,\n                 int dest, int stag, void *rbuf, int rcount,\n                 MPI_Datatype rdatatype, int source, int rtag,\n                 MPI_Comm comm, MPI_Status *status)\n{\n  printf(\"MPI Stub WARNING: Should not send message to self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count)\n{\n  printf(\"MPI Stub WARNING: Should not get count of message to self\\n\");\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *comm_out)\n{\n  *comm_out = comm;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Comm_dup(MPI_Comm comm, MPI_Comm *comm_out)\n{\n  *comm_out = comm;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Comm_free(MPI_Comm *comm) {return 0;}\n\n/* ---------------------------------------------------------------------- */\n\nMPI_Fint MPI_Comm_c2f(MPI_Comm comm) { return comm; };\n\n/* ---------------------------------------------------------------------- */\n\nMPI_Comm MPI_Comm_f2c(MPI_Fint comm) { return comm; };\n\n//* ---------------------------------------------------------------------- */\n\nint MPI_Comm_group(MPI_Comm comm, MPI_Group *group)\n{\n   *group = comm;\n   return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm)\n{\n   *newcomm = group;\n   return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Group_incl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)\n{\n   if (n > 0)\n     *newgroup = MPI_COMM_WORLD;\n   else\n     *newgroup = group;\n   return 0;\n}\n/* ---------------------------------------------------------------------- */\n\nint MPI_Cart_create(MPI_Comm comm_old, int ndims, int *dims, int *periods,\n                    int reorder, MPI_Comm *comm_cart)\n{\n  *comm_cart = comm_old;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Cart_get(MPI_Comm comm, int maxdims, int *dims, int *periods,\n                 int *coords)\n{\n  dims[0] = dims[1] = dims[2] = 1;\n  periods[0] = periods[1] = periods[2] = 1;\n  coords[0] = coords[1] = coords[2] = 0;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Cart_shift(MPI_Comm comm, int direction, int displ,\n                   int *source, int *dest)\n{\n  *source = *dest = 0;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Cart_rank(MPI_Comm comm, int *coords, int *rank)\n{\n  *rank = 0;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* store size of user datatype in extra lists */\n\nint MPI_Type_contiguous(int count, MPI_Datatype oldtype,\n                        MPI_Datatype *newtype)\n{\n  if (nextra_datatype == MAXEXTRA_DATATYPE) return -1;\n  ptr_datatype[nextra_datatype] = newtype;\n  index_datatype[nextra_datatype] = -(nextra_datatype + 1);\n  size_datatype[nextra_datatype] = count * stubtypesize(oldtype);\n  nextra_datatype++;\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* set value of user datatype to internal negative index,\n   based on match of ptr */\n\nint MPI_Type_commit(MPI_Datatype *datatype)\n{\n  int i;\n  for (i = 0; i < nextra_datatype; i++)\n    if (datatype == ptr_datatype[i]) *datatype = index_datatype[i];\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* remove user datatype from extra lists */\n\nint MPI_Type_free(MPI_Datatype *datatype)\n{\n  int i;\n  for (i = 0; i < nextra_datatype; i++)\n    if (datatype == ptr_datatype[i]) {\n      ptr_datatype[i] = ptr_datatype[nextra_datatype-1];\n      index_datatype[i] = index_datatype[nextra_datatype-1];\n      size_datatype[i] = size_datatype[nextra_datatype-1];\n      nextra_datatype--;\n      break;\n    }\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op)\n{\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Op_free(MPI_Op *op)\n{\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Barrier(MPI_Comm comm) {return 0;}\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Bcast(void *buf, int count, MPI_Datatype datatype,\n              int root, MPI_Comm comm) {return 0;}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Allreduce(void *sendbuf, void *recvbuf, int count,\n                  MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)\n{\n  int n = count * stubtypesize(datatype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Reduce(void *sendbuf, void *recvbuf, int count,\n\t\t   MPI_Datatype datatype, MPI_Op op,\n\t\t   int root, MPI_Comm comm)\n{\n  int n = count * stubtypesize(datatype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n\n/* ---------------------------------------------------------------------- */\n\nint MPI_Scan(void *sendbuf, void *recvbuf, int count,\n             MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)\n{\n  int n = count * stubtypesize(datatype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype,\n                  void *recvbuf, int recvcount, MPI_Datatype recvtype,\n                  MPI_Comm comm)\n{\n  int n = sendcount * stubtypesize(sendtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,\n                   void *recvbuf, int *recvcounts, int *displs,\n                   MPI_Datatype recvtype, MPI_Comm comm)\n{\n  int n = sendcount * stubtypesize(sendtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcounts,\n                       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)\n{\n  int n = *recvcounts * stubtypesize(datatype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Gather(void *sendbuf, int sendcount, MPI_Datatype sendtype,\n               void *recvbuf, int recvcount, MPI_Datatype recvtype,\n               int root, MPI_Comm comm)\n{\n  int n = sendcount * stubtypesize(sendtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Gatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype,\n\t\tvoid *recvbuf, int *recvcounts, int *displs,\n\t\tMPI_Datatype recvtype, int root, MPI_Comm comm)\n{\n  int n = sendcount * stubtypesize(sendtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Scatter(void *sendbuf, int sendcount, MPI_Datatype sendtype,\n                void *recvbuf, int recvcount, MPI_Datatype recvtype,\n                int root, MPI_Comm comm)\n{\n  int n = recvcount * stubtypesize(recvtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Scatterv(void *sendbuf, int *sendcounts, int *displs,\n\t\t MPI_Datatype sendtype, void *recvbuf, int recvcount,\n\t\t MPI_Datatype recvtype, int root, MPI_Comm comm)\n{\n  int n = recvcount * stubtypesize(recvtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype,\n                 void *recvbuf, int recvcount, MPI_Datatype recvtype,\n                 MPI_Comm comm)\n{\n  int n = sendcount * stubtypesize(sendtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\n/* copy values from data1 to data2 */\n\nint MPI_Alltoallv(void *sendbuf, int *sendcounts, int *sdispls,\n                  MPI_Datatype sendtype,\n                  void *recvbuf, int *recvcounts, int *rdispls,\n                  MPI_Datatype recvtype, MPI_Comm comm)\n{\n  int n = *sendcounts * stubtypesize(sendtype);\n\n  if (sendbuf == MPI_IN_PLACE || recvbuf == MPI_IN_PLACE) return 0;\n  memcpy(recvbuf,sendbuf,n);\n  return 0;\n}\n\n/* ---------------------------------------------------------------------- */\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Tod A Pascal (Caltech)\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include \"improper_umbrella.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n\n/* ---------------------------------------------------------------------- */\n\nImproperUmbrella::ImproperUmbrella(LAMMPS *lmp) : Improper(lmp)\n{\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nImproperUmbrella::~ImproperUmbrella()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(kw);\n    memory->destroy(w0);\n    memory->destroy(C);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ImproperUmbrella::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,n,type;\n  double eimproper,f1[3],f2[3],f3[3],f4[3];\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z;\n  double domega,c,a,s,projhfg,dhax,dhay,dhaz,dahx,dahy,dahz,cotphi;\n  double ax,ay,az,ra2,rh2,ra,rh,rar,rhr,arx,ary,arz,hrx,hry,hrz;\n\n  eimproper = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **improperlist = neighbor->improperlist;\n  int nimproperlist = neighbor->nimproperlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nimproperlist; n++) {\n    i1 = improperlist[n][0];\n    i2 = improperlist[n][1];\n    i3 = improperlist[n][2];\n    i4 = improperlist[n][3];\n    type = improperlist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i2][0] - x[i1][0];\n    vb1y = x[i2][1] - x[i1][1];\n    vb1z = x[i2][2] - x[i1][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i1][0];\n    vb2y = x[i3][1] - x[i1][1];\n    vb2z = x[i3][2] - x[i1][2];\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i1][0];\n    vb3y = x[i4][1] - x[i1][1];\n    vb3z = x[i4][2] - x[i1][2];\n\n    // c0 calculation\n    // A = vb1 X vb2 is perpendicular to IJK plane\n\n    ax = vb1y*vb2z-vb1z*vb2y;\n    ay = vb1z*vb2x-vb1x*vb2z;\n    az = vb1x*vb2y-vb1y*vb2x;\n    ra2 = ax*ax+ay*ay+az*az;\n    rh2 = vb3x*vb3x+vb3y*vb3y+vb3z*vb3z;\n    ra = sqrt(ra2);\n    rh = sqrt(rh2);\n    if (ra < SMALL) ra = SMALL;\n    if (rh < SMALL) rh = SMALL;\n\n    rar = 1/ra;\n    rhr = 1/rh;\n    arx = ax*rar;\n    ary = ay*rar;\n    arz = az*rar;\n    hrx = vb3x*rhr;\n    hry = vb3y*rhr;\n    hrz = vb3z*rhr;\n\n    c = arx*hrx+ary*hry+arz*hrz;\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Improper problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n    cotphi = c/s;\n\n    projhfg = (vb3x*vb1x+vb3y*vb1y+vb3z*vb1z) /\n      sqrt(vb1x*vb1x+vb1y*vb1y+vb1z*vb1z);\n    projhfg += (vb3x*vb2x+vb3y*vb2y+vb3z*vb2z) /\n      sqrt(vb2x*vb2x+vb2y*vb2y+vb2z*vb2z);\n    if (projhfg > 0.0) {\n      s *= -1.0;\n      cotphi *= -1.0;\n    }\n\n    //  force and energy\n    // if w0 = 0: E = k * (1 - cos w)\n    // if w0 != 0: E = 0.5 * C (cos w - cos w0)^2, C = k/(sin(w0)^2\n\n    if (w0[type] == 0.0) {\n      if (eflag) eimproper = kw[type] * (1.0-s);\n      a = -kw[type];\n    } else {\n      domega = s - cos(w0[type]);\n      a = 0.5 * C[type] * domega;\n      if (eflag) eimproper = a * domega;\n      a *= 2.0;\n    }\n\n    // dhax = diffrence between H and A in X direction, etc\n\n    a = a*cotphi;\n    dhax = hrx-c*arx;\n    dhay = hry-c*ary;\n    dhaz = hrz-c*arz;\n\n    dahx = arx-c*hrx;\n    dahy = ary-c*hry;\n    dahz = arz-c*hrz;\n\n    f2[0] = (dhay*vb1z - dhaz*vb1y)*rar;\n    f2[1] = (dhaz*vb1x - dhax*vb1z)*rar;\n    f2[2] = (dhax*vb1y - dhay*vb1x)*rar;\n\n    f3[0] = (-dhay*vb2z + dhaz*vb2y)*rar;\n    f3[1] = (-dhaz*vb2x + dhax*vb2z)*rar;\n    f3[2] = (-dhax*vb2y + dhay*vb2x)*rar;\n\n    f4[0] = dahx*rhr;\n    f4[1] = dahy*rhr;\n    f4[2] = dahz*rhr;\n\n    f1[0] = -(f2[0] + f3[0] + f4[0]);\n    f1[1] = -(f2[1] + f3[1] + f4[1]);\n    f1[2] = -(f2[2] + f3[2] + f4[2]);\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0]*a;\n      f[i1][1] += f1[1]*a;\n      f[i1][2] += f1[2]*a;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f3[0]*a;\n      f[i2][1] += f3[1]*a;\n      f[i2][2] += f3[2]*a;\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f2[0]*a;\n      f[i3][1] += f2[1]*a;\n      f[i3][2] += f2[2]*a;\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0]*a;\n      f[i4][1] += f4[1]*a;\n      f[i4][2] += f4[2]*a;\n    }\n\n    if (evflag) {\n\n      // get correct 4-body geometry for virial tally\n\n      vb1x = x[i1][0] - x[i2][0];\n      vb1y = x[i1][1] - x[i2][1];\n      vb1z = x[i1][2] - x[i2][2];\n\n      vb2x = x[i3][0] - x[i2][0];\n      vb2y = x[i3][1] - x[i2][1];\n      vb2z = x[i3][2] - x[i2][2];\n\n      vb3x = x[i4][0] - x[i3][0];\n      vb3y = x[i4][1] - x[i3][1];\n      vb3z = x[i4][2] - x[i3][2];\n\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,eimproper,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ImproperUmbrella::allocate()\n{\n  allocated = 1;\n  int n = atom->nimpropertypes;\n\n  memory->create(kw,n+1,\"improper:kw\");\n  memory->create(w0,n+1,\"improper:w0\");\n  memory->create(C,n+1,\"improper:C\");\n\n  memory->create(setflag,n+1,\"improper:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid ImproperUmbrella::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Incorrect args for improper coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nimpropertypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double w_one = force->numeric(FLERR,arg[2]);\n\n  // convert w0 from degrees to radians\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    kw[i] = k_one;\n    w0[i] = w_one/180.0 * MY_PI;\n    if (w_one == 0) C[i] = 1.0;\n    else C[i] = kw[i]/(pow(sin(w0[i]),2.0));\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for improper coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid ImproperUmbrella::write_restart(FILE *fp)\n{\n  fwrite(&kw[1],sizeof(double),atom->nimpropertypes,fp);\n  fwrite(&w0[1],sizeof(double),atom->nimpropertypes,fp);\n  fwrite(&C[1],sizeof(double),atom->nimpropertypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid ImproperUmbrella::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&kw[1],sizeof(double),atom->nimpropertypes,fp);\n    fread(&w0[1],sizeof(double),atom->nimpropertypes,fp);\n    fread(&C[1],sizeof(double),atom->nimpropertypes,fp);\n  }\n  MPI_Bcast(&kw[1],atom->nimpropertypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&w0[1],atom->nimpropertypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&C[1],atom->nimpropertypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nimpropertypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid ImproperUmbrella::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nimpropertypes; i++)\n    fprintf(fp,\"%d %g %g\\n\",i,kw[i],w0[i]/MY_PI*180.0);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_IMPROPER_H\n#define LMP_IMPROPER_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass Improper : protected Pointers {\n  friend class ThrOMP;\n  friend class FixOMP;\n public:\n  int allocated;\n  int *setflag;\n  int writedata;                  // 1 if writes coeffs to data file\n  double energy;                  // accumulated energies\n  double virial[6];               // accumulated virial\n  double *eatom,**vatom;          // accumulated per-atom energy/virial\n\n  // KOKKOS host/device flag and data masks\n\n  ExecutionSpace execution_space;\n  unsigned int datamask_read,datamask_modify;\n  int copymode;\n\n  Improper(class LAMMPS *);\n  virtual ~Improper();\n  virtual void init();\n  virtual void init_style() {}\n  virtual void compute(int, int) = 0;\n  virtual void settings(int, char **) {}\n  virtual void coeff(int, char **) = 0;\n  virtual void write_restart(FILE *) = 0;\n  virtual void read_restart(FILE *) = 0;\n  virtual void write_data(FILE *) {}\n  virtual double memory_usage();\n\n protected:\n  int suffix_flag;             // suffix compatibility flag\n\n  int evflag;\n  int eflag_either,eflag_global,eflag_atom;\n  int vflag_either,vflag_global,vflag_atom;\n  int maxeatom,maxvatom;\n\n  void ev_setup(int, int, int alloc = 1);\n  void ev_tally(int, int, int, int, int, int, double,\n                double *, double *, double *, double, double, double,\n                double, double, double, double, double, double);\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Improper coeffs are not set\n\nNo improper coefficients have been assigned in the data file or via\nthe improper_coeff command.\n\nE: All improper coeffs are not set\n\nAll improper coefficients must be set in the data file or by the\nimproper_coeff command before running a simulation.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"bond_nonlinear.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nBondNonlinear::BondNonlinear(LAMMPS *lmp) : Bond(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nBondNonlinear::~BondNonlinear()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(epsilon);\n    memory->destroy(r0);\n    memory->destroy(lamda);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondNonlinear::compute(int eflag, int vflag)\n{\n  int i1,i2,n,type;\n  double delx,dely,delz,ebond,fbond;\n  double rsq,r,dr,drsq,lamdasq,denom,denomsq;\n\n  ebond = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    rsq = delx*delx + dely*dely + delz*delz;\n    r = sqrt(rsq);\n    dr = r - r0[type];\n    drsq = dr*dr;\n    lamdasq = lamda[type]*lamda[type];\n    denom = lamdasq - drsq;\n    denomsq = denom*denom;\n\n    // force & energy\n\n    fbond = -epsilon[type]/r * 2.0*dr*lamdasq/denomsq;\n    if (eflag) ebond = epsilon[type] * drsq / denom;\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondNonlinear::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(epsilon,n+1,\"bond:epsilon\");\n  memory->create(r0,n+1,\"bond:r0\");\n  memory->create(lamda,n+1,\"bond:lamda\");\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid BondNonlinear::coeff(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Incorrect args for bond coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  double epsilon_one = force->numeric(FLERR,arg[1]);\n  double r0_one = force->numeric(FLERR,arg[2]);\n  double lamda_one = force->numeric(FLERR,arg[3]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    epsilon[i] = epsilon_one;\n    r0[i] = r0_one;\n    lamda[i] = lamda_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for bond coefficients\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondNonlinear::equilibrium_distance(int i)\n{\n  return r0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid BondNonlinear::write_restart(FILE *fp)\n{\n  fwrite(&epsilon[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&r0[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&lamda[1],sizeof(double),atom->nbondtypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid BondNonlinear::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&epsilon[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&r0[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&lamda[1],sizeof(double),atom->nbondtypes,fp);\n  }\n  MPI_Bcast(&epsilon[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&lamda[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nbondtypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid BondNonlinear::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nbondtypes; i++)\n    fprintf(fp,\"%d %g %g %g\\n\",i,epsilon[i],r0[i],lamda[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondNonlinear::single(int type, double rsq, int i, int j,\n                             double &fforce)\n{\n  double r = sqrt(rsq);\n  double dr = r - r0[type];\n  double drsq = dr*dr;\n  double lamdasq = lamda[type]*lamda[type];\n  double denom = lamdasq - drsq;\n  double denomsq = denom*denom;\n  fforce = -epsilon[type]/r * 2.0*dr*lamdasq/denomsq;\n  return epsilon[type] * drsq / denom;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Chris Lorenz and Mark Stevens (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"bond_quartic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"update.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nBondQuartic::BondQuartic(LAMMPS *lmp) : Bond(lmp)\n{\n  TWO_1_3 = pow(2.0,(1.0/3.0));\n}\n\n/* ---------------------------------------------------------------------- */\n\nBondQuartic::~BondQuartic()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(b1);\n    memory->destroy(b2);\n    memory->destroy(rc);\n    memory->destroy(u0);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondQuartic::compute(int eflag, int vflag)\n{\n  int i1,i2,n,m,type,itype,jtype;\n  double delx,dely,delz,ebond,fbond,evdwl,fpair;\n  double r,rsq,dr,r2,ra,rb,sr2,sr6;\n\n  ebond = evdwl = sr6 = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  // insure pair->ev_tally() will use 1-4 virial contribution\n\n  if (vflag_global == 2)\n    force->pair->vflag_either = force->pair->vflag_global = 1;\n\n  double **cutsq = force->pair->cutsq;\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n\n    // skip bond if already broken\n\n    if (bondlist[n][2] <= 0) continue;\n\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    rsq = delx*delx + dely*dely + delz*delz;\n\n    // if bond breaks, set type to 0\n    //   both in temporary bondlist and permanent bond_type\n    // if this proc owns both atoms,\n    //   negate bond_type twice if other atom stores it\n    // if other proc owns 2nd atom, other proc will also break bond\n\n    if (rsq > rc[type]*rc[type]) {\n      bondlist[n][2] = 0;\n      for (m = 0; m < atom->num_bond[i1]; m++)\n        if (atom->bond_atom[i1][m] == atom->tag[i2])\n          atom->bond_type[i1][m] = 0;\n      if (i2 < atom->nlocal)\n        for (m = 0; m < atom->num_bond[i2]; m++)\n          if (atom->bond_atom[i2][m] == atom->tag[i1])\n            atom->bond_type[i2][m] = 0;\n      continue;\n    }\n\n    // quartic bond\n    // 1st portion is from quartic term\n    // 2nd portion is from LJ term cut at 2^(1/6) with eps = sigma = 1.0\n\n    r = sqrt(rsq);\n    dr = r - rc[type];\n    r2 = dr*dr;\n    ra = dr - b1[type];\n    rb = dr - b2[type];\n    fbond = -k[type]/r * (r2*(ra+rb) + 2.0*dr*ra*rb);\n\n    if (rsq < TWO_1_3) {\n      sr2 = 1.0/rsq;\n      sr6 = sr2*sr2*sr2;\n      fbond += 48.0*sr6*(sr6-0.5)/rsq;\n    }\n\n    if (eflag) {\n      ebond = k[type]*r2*ra*rb + u0[type];\n      if (rsq < TWO_1_3) ebond += 4.0*sr6*(sr6-1.0) + 1.0;\n    }\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n\n    // subtract out pairwise contribution from 2 atoms via pair->single()\n    // required since special_bond = 1,1,1\n    // tally energy/virial in pair, using newton_bond as newton flag\n\n    itype = atom->type[i1];\n    jtype = atom->type[i2];\n\n    if (rsq < cutsq[itype][jtype]) {\n      evdwl = -force->pair->single(i1,i2,itype,jtype,rsq,1.0,1.0,fpair);\n      fpair = -fpair;\n\n      if (newton_bond || i1 < nlocal) {\n        f[i1][0] += delx*fpair;\n        f[i1][1] += dely*fpair;\n        f[i1][2] += delz*fpair;\n      }\n      if (newton_bond || i2 < nlocal) {\n        f[i2][0] -= delx*fpair;\n        f[i2][1] -= dely*fpair;\n        f[i2][2] -= delz*fpair;\n      }\n\n      if (evflag) force->pair->ev_tally(i1,i2,nlocal,newton_bond,\n                                        evdwl,0.0,fpair,delx,dely,delz);\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondQuartic::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(k,n+1,\"bond:k\");\n  memory->create(b1,n+1,\"bond:b1\");\n  memory->create(b2,n+1,\"bond:b2\");\n  memory->create(rc,n+1,\"bond:rc\");\n  memory->create(u0,n+1,\"bond:u0\");\n\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more types\n------------------------------------------------------------------------- */\n\nvoid BondQuartic::coeff(int narg, char **arg)\n{\n  if (narg != 6) error->all(FLERR,\"Incorrect args for bond coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double b1_one = force->numeric(FLERR,arg[2]);\n  double b2_one = force->numeric(FLERR,arg[3]);\n  double rc_one = force->numeric(FLERR,arg[4]);\n  double u0_one = force->numeric(FLERR,arg[5]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    b1[i] = b1_one;\n    b2[i] = b2_one;\n    rc[i] = rc_one;\n    u0[i] = u0_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for bond coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   check if pair defined and special_bond settings are valid\n------------------------------------------------------------------------- */\n\nvoid BondQuartic::init_style()\n{\n  if (force->pair == NULL || force->pair->single_enable == 0)\n    error->all(FLERR,\"Pair style does not support bond_style quartic\");\n  if (force->angle || force->dihedral || force->improper)\n    error->all(FLERR,\n               \"Bond style quartic cannot be used with 3,4-body interactions\");\n  if (atom->molecular == 2)\n    error->all(FLERR,\n               \"Bond style quartic cannot be used with atom style template\");\n\n  // special bonds must be 1 1 1\n\n  if (force->special_lj[1] != 1.0 || force->special_lj[2] != 1.0 ||\n      force->special_lj[3] != 1.0)\n    error->all(FLERR,\"Bond style quartic requires special_bonds = 1,1,1\");\n}\n\n/* ----------------------------------------------------------------------\n   return an equilbrium bond length\n------------------------------------------------------------------------- */\n\ndouble BondQuartic::equilibrium_distance(int i)\n{\n  return 0.97;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid BondQuartic::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&b1[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&b2[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&rc[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&u0[1],sizeof(double),atom->nbondtypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid BondQuartic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&b1[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&b2[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&rc[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&u0[1],sizeof(double),atom->nbondtypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&b1[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&b2[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rc[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&u0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nbondtypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid BondQuartic::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nbondtypes; i++)\n    fprintf(fp,\"%d %g %g %g %g %g\\n\",i,k[i],b1[i],b2[i],rc[i],u0[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondQuartic::single(int type, double rsq, int i, int j,\n                           double &fforce)\n{\n  double r,dr,r2,ra,rb,sr2,sr6;\n\n  if (type <= 0) return 0.0;\n  double eng = 0.0;\n\n  // subtract out pairwise contribution from 2 atoms via pair->single()\n  // required since special_bond = 1,1,1\n\n  int itype = atom->type[i];\n  int jtype = atom->type[j];\n\n  if (rsq < force->pair->cutsq[itype][jtype]) {\n    double tmp;\n    eng = -force->pair->single(i,j,itype,jtype,rsq,1.0,1.0,tmp);\n  }\n\n  // quartic bond\n  // 1st portion is from quartic term\n  // 2nd portion is from LJ term cut at 2^(1/6) with eps = sigma = 1.0\n\n  r = sqrt(rsq);\n  dr = r - rc[type];\n  r2 = dr*dr;\n  ra = dr - b1[type];\n  rb = dr - b2[type];\n\n  eng += k[type]*r2*ra*rb + u0[type];\n  fforce = -k[type]/r * (r2*(ra+rb) + 2.0*dr*ra*rb);\n\n  if (rsq < TWO_1_3) {\n    sr2 = 1.0/rsq;\n    sr6 = sr2*sr2*sr2;\n    eng += 4.0*sr6*(sr6-1.0) + 1.0;\n    fforce += 48.0*sr6*(sr6-0.5)/rsq;\n  }\n\n  return eng;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n   \n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n   \n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n#include <cstring>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cstring>\n\n#include <fix_atomify.h>\n#include <modify.h>\n#include <lammps.h>\n#include <library.h>\n\nusing namespace LAMMPS_NS;\nusing namespace std;\n\ntypedef void (*FnPtr)(void *, int);\nstruct Box {\n    double boxlo[3];\n    double boxhi[3];\n    double xy;\n    double yz;\n    double xz;\n    int periodicity[3];\n    int box_change;\n};\n\nFnPtr callback;\nBox box;\nLAMMPS *lammps = 0;\n\nextern \"C\" {\nvoid* reset() {\n    if(lammps) {\n        lammps_close((void*)lammps);\n        lammps = 0;\n    }\n    lammps_open_no_mpi(0, 0, (void**)&lammps);\n    return lammps;\n}\n\nvoid addAtomifyFix()\n{\n    if(!lammps) {\n        printf(\"Error, could not add fix atomify since LAMMPS object is not created\");\n        exit(0);\n    }\n\n    lammps_command(lammps, \"fix atomify all atomify\");\n    \n    LAMMPS_NS::LAMMPS *lmp = static_cast<LAMMPS_NS::LAMMPS *>(lammps);\n    int ifix = lmp->modify->find_fix(\"atomify\");\n    if (ifix < 0) {\n        printf(\"Error, could not create fix atomify\");\n        exit(1);\n    }\n    LAMMPS_NS::FixAtomify *fix = static_cast<LAMMPS_NS::FixAtomify*>(lmp->modify->fix[ifix]);\n    fix->set_callback(callback, nullptr);\n}\n\nvoid setCallback(FnPtr cb) {\n    callback = cb;\n}\n\nint numberOfAtoms() {\n    return lammps_get_natoms(lammps);\n}\n\nbool active() {\n    return lammps != 0;\n}\n\ndouble systemSizeX() {\n    lammps_extract_box((void*)lammps, box.boxlo, box.boxhi, &box.xy, &box.yz, &box.xz, box.periodicity, &box.box_change);\n    return box.boxhi[0]-box.boxlo[0];\n}\n\ndouble systemSizeY() {\n    lammps_extract_box((void*)lammps, box.boxlo, box.boxhi, &box.xy, &box.yz, &box.xz, box.periodicity, &box.box_change);\n    return box.boxhi[1]-box.boxlo[1];\n}\n\ndouble systemSizeZ() {\n    lammps_extract_box((void*)lammps, box.boxlo, box.boxhi, &box.xy, &box.yz, &box.xz, box.periodicity, &box.box_change);\n    return box.boxhi[2]-box.boxlo[2];\n}\n\ndouble **x() {\n    return (double**)lammps_extract_atom((void*)lammps, \"x\");\n}\n\ndouble **v() {\n    return (double**)lammps_extract_atom((void*)lammps, \"v\");\n}\n\ndouble **f() {\n    return (double**)lammps_extract_atom((void*)lammps, \"f\");\n}\n\ndouble *positions() {\n    return x()[0];\n}\n\nvoid runCommands(char *commands) {\n    if(!lammps) {\n        reset();\n    }\n\n    lammps_commands_string((void*)lammps, commands);\n}\n\nvoid runDefaultScript() {\n    char * defaultScript = \n        \"# 3d Lennard-Jones melt\\n\"\n        \"variable    x index 1\\n\"\n        \"variable    y index 1\\n\"\n        \"variable    z index 1\\n\"\n        \"variable    xx equal 20*$x\\n\"\n        \"variable    yy equal 20*$y\\n\"\n        \"variable    zz equal 20*$z\\n\"\n        \"units       lj\\n\"\n        \"atom_style  atomic\\n\"\n        \"lattice     fcc 0.8442\\n\"\n        \"region      box block 0 ${xx} 0 ${yy} 0 ${zz}\\n\"\n        \"create_box  1 box\\n\"\n        \"create_atoms    1 box\\n\"\n        \"mass        1 1.0\\n\"\n        \"velocity    all create 1.44 87287 loop geom\\n\"\n        \"pair_style  lj/cut 2.5\\n\"\n        \"pair_coeff  1 1 1.0 1.0 2.5\\n\"\n        \"neighbor    0.3 bin\\n\"\n        \"neigh_modify    delay 0 every 20 check no\\n\"\n        \"fix     1 all nve\\n\"\n        \"run     10\\n\"\n        \"run     100\\n\";\n\n    runCommands(defaultScript);\n}\n\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Todd R. Zeitler (SNL)\n   (based on Stillinger-Weber pair style)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_nb3b_harmonic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n#define DELTA 4\n#define SMALL 0.001\n#define PI 3.141592653589793238462643383279\n\n/* ---------------------------------------------------------------------- */\n\nPairNb3bHarmonic::PairNb3bHarmonic(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n  map = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairNb3bHarmonic::~PairNb3bHarmonic()\n{\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n  memory->destroy(params);\n  memory->destroy(elem2param);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum,jnumm1;\n  int itype,jtype,ktype,ijparam,ikparam,ijkparam;\n  double xtmp,ytmp,ztmp,evdwl;\n  double rsq1,rsq2;\n  double delr1[3],delr2[3],fj[3],fk[3];\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int *type = atom->type;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    jnumm1 = jnum - 1;\n\n    for (jj = 0; jj < jnumm1; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n      if (rsq1 > params[ijparam].cutsq) continue;\n\n      for (kk = jj+1; kk < jnum; kk++) {\n\tk = jlist[kk];\n\tk &= NEIGHMASK;\n\tktype = map[type[k]];\n\tikparam = elem2param[itype][ktype][ktype];\n\tijkparam = elem2param[itype][jtype][ktype];\n\n\tdelr2[0] = x[k][0] - xtmp;\n\tdelr2[1] = x[k][1] - ytmp;\n\tdelr2[2] = x[k][2] - ztmp;\n\trsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n\tif (rsq2 > params[ikparam].cutsq) continue;\n\n        threebody(&params[ijparam],&params[ikparam],&params[ijkparam],\n                  rsq1,rsq2,delr1,delr2,fj,fk,eflag,evdwl);\n\n\tf[i][0] -= fj[0] + fk[0];\n\tf[i][1] -= fj[1] + fk[1];\n\tf[i][2] -= fj[2] + fk[2];\n\tf[j][0] += fj[0];\n\tf[j][1] += fj[1];\n\tf[j][2] += fj[2];\n\tf[k][0] += fk[0];\n\tf[k][1] += fk[1];\n\tf[k][2] += fk[2];\n\n\tif (evflag) ev_tally3(i,j,k,evdwl,0.0,fj,fk,delr1,delr2);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n\tsetflag[i][j] = 1;\n\tcount++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style nb3b/harmonic requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style nb3b/harmonic requires newton pair on\");\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairNb3bHarmonic::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::read_file(char *file)\n{\n  int params_per_line = 6;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp = NULL;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open nb3b/harmonic potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each set of params from potential file\n  // one set of params can span multiple lines\n  // store params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n\teof = 1;\n\tfclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n\t  eof = 1;\n\t  fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in nb3b/harmonic potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next entry in file\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n\t\t\t\t\t  \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].k_theta = atof(words[3]);\n    params[nparams].theta0 = atof(words[4]);\n    params[nparams].cutoff = atof(words[5]);\n\n    if (params[nparams].k_theta < 0.0 || params[nparams].theta0 < 0.0 ||\n        params[nparams].cutoff < 0.0)\n      error->all(FLERR,\"Illegal nb3b/harmonic parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairNb3bHarmonic::setup_params()\n{\n  int i,j,k,m,n;\n  double rtmp;\n\n  // set elem2param for all triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n\tn = -1;\n\tfor (m = 0; m < nparams; m++) {\n\t  if (i == params[m].ielement && j == params[m].jelement &&\n\t      k == params[m].kelement) {\n\t    if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n\t    n = m;\n\t  }\n\t}\n\tif (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n\telem2param[i][j][k] = n;\n      }\n\n  // compute parameter values derived from inputs\n\n  // set cutsq using shortcut to reduce neighbor list for accelerated\n  // calculations. cut must remain unchanged as it is a potential parameter\n  // (cut = a*sigma)\n\n  for (m = 0; m < nparams; m++) {\n\n    params[m].cut = params[m].cutoff;\n    params[m].cutsq = params[m].cut * params[m].cut;\n\n    params[m].theta0 = params[m].theta0 / 180.0 * PI;\n\n  }\n\n  // set cutmax to max of all params\n\n  cutmax = 0.0;\n  for (m = 0; m < nparams; m++) {\n    rtmp = sqrt(params[m].cutsq);\n    if (rtmp > cutmax) cutmax = rtmp;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\n\nvoid PairNb3bHarmonic::threebody(Param *paramij, Param *paramik,\n                                 Param *paramijk,\n                                 double rsq1, double rsq2,\n                                 double *delr1, double *delr2,\n                                 double *fj, double *fk, int eflag, double &eng)\n{\n  double dtheta,tk;\n  double r1,r2,c,s,a,a11,a12,a22;\n\n  // angle (cos and sin)\n\n  r1 = sqrt(rsq1);\n  r2 = sqrt(rsq2);\n\n  c = delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2];\n  c /= r1*r2;\n\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  s = sqrt(1.0 - c*c);\n  if (s < SMALL) s = SMALL;\n  s = 1.0/s;\n\n  // force & energy\n\n  dtheta = acos(c) - paramijk->theta0;\n  tk = paramijk->k_theta * dtheta;\n\n  if (eflag) eng = tk*dtheta;\n\n  a = -2.0 * tk * s;\n  a11 = a*c / rsq1;\n  a12 = -a / (r1*r2);\n  a22 = a*c / rsq2;\n\n  fj[0] = a11*delr1[0] + a12*delr2[0];\n  fj[1] = a11*delr1[1] + a12*delr2[1];\n  fj[2] = a11*delr1[2] + a12*delr2[2];\n  fk[0] = a22*delr2[0] + a12*delr1[0];\n  fk[1] = a22*delr2[1] + a12*delr1[1];\n  fk[2] = a22*delr2[2] + a12*delr1[2];\n}\n\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef ATOM_CLASS\n\nAtomStyle(bond,AtomVecBond)\n\n#else\n\n#ifndef LMP_ATOM_VEC_BOND_H\n#define LMP_ATOM_VEC_BOND_H\n\n#include \"atom_vec.h\"\n\nnamespace LAMMPS_NS {\n\nclass AtomVecBond : public AtomVec {\n public:\n  AtomVecBond(class LAMMPS *);\n  void grow(int);\n  void grow_reset();\n  void copy(int, int, int);\n  int pack_comm(int, int *, double *, int, int *);\n  int pack_comm_vel(int, int *, double *, int, int *);\n  void unpack_comm(int, int, double *);\n  void unpack_comm_vel(int, int, double *);\n  int pack_reverse(int, int, double *);\n  void unpack_reverse(int, int *, double *);\n  int pack_border(int, int *, double *, int, int *);\n  int pack_border_vel(int, int *, double *, int, int *);\n  int pack_border_hybrid(int, int *, double *);\n  void unpack_border(int, int, double *);\n  void unpack_border_vel(int, int, double *);\n  int unpack_border_hybrid(int, int, double *);\n  int pack_exchange(int, double *);\n  int unpack_exchange(double *);\n  int size_restart();\n  int pack_restart(int, double *);\n  int unpack_restart(double *);\n  void create_atom(int, double *);\n  void data_atom(double *, imageint, char **);\n  int data_atom_hybrid(int, char **);\n  void pack_data(double **);\n  int pack_data_hybrid(int, double *);\n  void write_data(FILE *, int, double **);\n  int write_data_hybrid(FILE *, double *);\n  bigint memory_usage();\n\n private:\n  tagint *tag;\n  int *type,*mask;\n  imageint *image;\n  double **x,**v,**f;\n  tagint *molecule;\n  int **nspecial;\n  tagint **special;\n  int *num_bond;\n  int **bond_type;\n  tagint **bond_atom;\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Per-processor system is too big\n\nThe number of owned atoms plus ghost atoms on a single\nprocessor must fit in 32-bit integer.\n\nE: Invalid atom type in Atoms section of data file\n\nAtom types must range from 1 to specified # of types.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <stdlib.h>\n#include \"atom_vec_bond.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nAtomVecBond::AtomVecBond(LAMMPS *lmp) : AtomVec(lmp)\n{\n  molecular = 1;\n  bonds_allow = 1;\n  mass_type = 1;\n\n  comm_x_only = comm_f_only = 1;\n  size_forward = 3;\n  size_reverse = 3;\n  size_border = 7;\n  size_velocity = 3;\n  size_data_atom = 6;\n  size_data_vel = 4;\n  xcol_data = 4;\n\n  atom->molecule_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   grow atom arrays\n   n = 0 grows arrays by a chunk\n   n > 0 allocates arrays to size n\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::grow(int n)\n{\n  if (n == 0) grow_nmax();\n  else nmax = n;\n  atom->nmax = nmax;\n  if (nmax < 0 || nmax > MAXSMALLINT)\n    error->one(FLERR,\"Per-processor system is too big\");\n\n  tag = memory->grow(atom->tag,nmax,\"atom:tag\");\n  type = memory->grow(atom->type,nmax,\"atom:type\");\n  mask = memory->grow(atom->mask,nmax,\"atom:mask\");\n  image = memory->grow(atom->image,nmax,\"atom:image\");\n  x = memory->grow(atom->x,nmax,3,\"atom:x\");\n  v = memory->grow(atom->v,nmax,3,\"atom:v\");\n  f = memory->grow(atom->f,nmax*comm->nthreads,3,\"atom:f\");\n\n  molecule = memory->grow(atom->molecule,nmax,\"atom:molecule\");\n\n  nspecial = memory->grow(atom->nspecial,nmax,3,\"atom:nspecial\");\n  special = memory->grow(atom->special,nmax,atom->maxspecial,\"atom:special\");\n\n  num_bond = memory->grow(atom->num_bond,nmax,\"atom:num_bond\");\n  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,\n                           \"atom:bond_type\");\n  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,\n                           \"atom:bond_atom\");\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);\n}\n\n/* ----------------------------------------------------------------------\n   reset local array ptrs\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::grow_reset()\n{\n  tag = atom->tag; type = atom->type;\n  mask = atom->mask; image = atom->image;\n  x = atom->x; v = atom->v; f = atom->f;\n  molecule = atom->molecule;\n  nspecial = atom->nspecial; special = atom->special;\n  num_bond = atom->num_bond; bond_type = atom->bond_type;\n  bond_atom = atom->bond_atom;\n}\n\n/* ----------------------------------------------------------------------\n   copy atom I info to atom J\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::copy(int i, int j, int delflag)\n{\n  int k;\n\n  tag[j] = tag[i];\n  type[j] = type[i];\n  mask[j] = mask[i];\n  image[j] = image[i];\n  x[j][0] = x[i][0];\n  x[j][1] = x[i][1];\n  x[j][2] = x[i][2];\n  v[j][0] = v[i][0];\n  v[j][1] = v[i][1];\n  v[j][2] = v[i][2];\n\n  molecule[j] = molecule[i];\n\n  num_bond[j] = num_bond[i];\n  for (k = 0; k < num_bond[j]; k++) {\n    bond_type[j][k] = bond_type[i][k];\n    bond_atom[j][k] = bond_atom[i][k];\n  }\n\n  nspecial[j][0] = nspecial[i][0];\n  nspecial[j][1] = nspecial[i][1];\n  nspecial[j][2] = nspecial[i][2];\n  for (k = 0; k < nspecial[j][2]; k++) special[j][k] = special[i][k];\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::pack_comm(int n, int *list, double *buf,\n                           int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::pack_comm_vel(int n, int *list, double *buf,\n                               int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecBond::unpack_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecBond::unpack_comm_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::pack_reverse(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    buf[m++] = f[i][0];\n    buf[m++] = f[i][1];\n    buf[m++] = f[i][2];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecBond::unpack_reverse(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    f[j][0] += buf[m++];\n    f[j][1] += buf[m++];\n    f[j][2] += buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::pack_border(int n, int *list, double *buf,\n                             int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::pack_border_vel(int n, int *list, double *buf,\n                                 int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::pack_border_hybrid(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = ubuf(molecule[j]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecBond::unpack_border(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecBond::unpack_border_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::unpack_border_hybrid(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++)\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   pack data for atom I for sending to another proc\n   xyz must be 1st 3 values, so comm::exchange() can test on them\n------------------------------------------------------------------------- */\n\nint AtomVecBond::pack_exchange(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(bond_type[i][k]).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(nspecial[i][0]).d;\n  buf[m++] = ubuf(nspecial[i][1]).d;\n  buf[m++] = ubuf(nspecial[i][2]).d;\n  for (k = 0; k < nspecial[i][2]; k++) buf[m++] = ubuf(special[i][k]).d;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecBond::unpack_exchange(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][1] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][2] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < nspecial[nlocal][2]; k++)\n    special[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->\n        unpack_exchange(nlocal,&buf[m]);\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   size of restart data for all atoms owned by this proc\n   include extra data stored by fixes\n------------------------------------------------------------------------- */\n\nint AtomVecBond::size_restart()\n{\n  int i;\n\n  int nlocal = atom->nlocal;\n  int n = 0;\n  for (i = 0; i < nlocal; i++)\n    n += 13 + 2*num_bond[i];\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      for (i = 0; i < nlocal; i++)\n        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);\n\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom I's data for restart file including extra quantities\n   xyz must be 1st 3 values, so that read_restart can test on them\n   molecular types may be negative, but write as positive\n------------------------------------------------------------------------- */\n\nint AtomVecBond::pack_restart(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(MAX(bond_type[i][k],-bond_type[i][k])).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   unpack data for one atom from restart file including extra quantities\n------------------------------------------------------------------------- */\n\nint AtomVecBond::unpack_restart(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) {\n    grow(0);\n    if (atom->nextra_store)\n      memory->grow(atom->extra,nmax,atom->nextra_store,\"atom:extra\");\n  }\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  double **extra = atom->extra;\n  if (atom->nextra_store) {\n    int size = static_cast<int> (buf[0]) - m;\n    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];\n  }\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   create one atom of itype at coord\n   set other values to defaults\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::create_atom(int itype, double *coord)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = 0;\n  type[nlocal] = itype;\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n  mask[nlocal] = 1;\n  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |\n    ((imageint) IMGMAX << IMGBITS) | IMGMAX;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n\n  molecule[nlocal] = 0;\n  num_bond[nlocal] = 0;\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack one line from Atoms section of data file\n   initialize other atom quantities\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::data_atom(double *coord, imageint imagetmp, char **values)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = ATOTAGINT(values[0]);\n  molecule[nlocal] = ATOTAGINT(values[1]);\n  type[nlocal] = atoi(values[2]);\n  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)\n    error->one(FLERR,\"Invalid atom type in Atoms section of data file\");\n\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n\n  image[nlocal] = imagetmp;\n\n  mask[nlocal] = 1;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n  num_bond[nlocal] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack hybrid quantities from one line in Atoms section of data file\n   initialize other atom quantities for this sub-style\n------------------------------------------------------------------------- */\n\nint AtomVecBond::data_atom_hybrid(int nlocal, char **values)\n{\n  molecule[nlocal] = ATOTAGINT(values[0]);\n\n  num_bond[nlocal] = 0;\n\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom info for data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::pack_data(double **buf)\n{\n  int nlocal = atom->nlocal;\n  for (int i = 0; i < nlocal; i++) {\n    buf[i][0] = ubuf(tag[i]).d;\n    buf[i][1] = ubuf(molecule[i]).d;\n    buf[i][2] = ubuf(type[i]).d;\n    buf[i][3] = x[i][0];\n    buf[i][4] = x[i][1];\n    buf[i][5] = x[i][2];\n    buf[i][6] = ubuf((image[i] & IMGMASK) - IMGMAX).d;\n    buf[i][7] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;\n    buf[i][8] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   pack hybrid atom info for data file\n------------------------------------------------------------------------- */\n\nint AtomVecBond::pack_data_hybrid(int i, double *buf)\n{\n  buf[0] = ubuf(molecule[i]).d;\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   write atom info to data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecBond::write_data(FILE *fp, int n, double **buf)\n{\n  for (int i = 0; i < n; i++)\n    fprintf(fp,TAGINT_FORMAT \" \" TAGINT_FORMAT\n            \" %d %-1.16e %-1.16e %-1.16e %d %d %d\\n\",\n            (tagint) ubuf(buf[i][0]).i,(tagint) ubuf(buf[i][1]).i,\n            (int) ubuf(buf[i][2]).i,\n            buf[i][3],buf[i][4],buf[i][5],\n            (int) ubuf(buf[i][6]).i,(int) ubuf(buf[i][7]).i,\n            (int) ubuf(buf[i][8]).i);\n}\n\n/* ----------------------------------------------------------------------\n   write hybrid atom info to data file\n------------------------------------------------------------------------- */\n\nint AtomVecBond::write_data_hybrid(FILE *fp, double *buf)\n{\n  fprintf(fp,\" \" TAGINT_FORMAT,(tagint) ubuf(buf[0]).i);\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   return # of bytes of allocated memory\n------------------------------------------------------------------------- */\n\nbigint AtomVecBond::memory_usage()\n{\n  bigint bytes = 0;\n\n  if (atom->memcheck(\"tag\")) bytes += memory->usage(tag,nmax);\n  if (atom->memcheck(\"type\")) bytes += memory->usage(type,nmax);\n  if (atom->memcheck(\"mask\")) bytes += memory->usage(mask,nmax);\n  if (atom->memcheck(\"image\")) bytes += memory->usage(image,nmax);\n  if (atom->memcheck(\"x\")) bytes += memory->usage(x,nmax,3);\n  if (atom->memcheck(\"v\")) bytes += memory->usage(v,nmax,3);\n  if (atom->memcheck(\"f\")) bytes += memory->usage(f,nmax*comm->nthreads,3);\n\n  if (atom->memcheck(\"molecule\")) bytes += memory->usage(molecule,nmax);\n  if (atom->memcheck(\"nspecial\")) bytes += memory->usage(nspecial,nmax,3);\n  if (atom->memcheck(\"special\"))\n    bytes += memory->usage(special,nmax,atom->maxspecial);\n\n  if (atom->memcheck(\"num_bond\")) bytes += memory->usage(num_bond,nmax);\n  if (atom->memcheck(\"bond_type\"))\n    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);\n  if (atom->memcheck(\"bond_atom\"))\n    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);\n\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(eam/alloy,PairEAMAlloy)\n\n#else\n\n#ifndef LMP_PAIR_EAM_ALLOY_H\n#define LMP_PAIR_EAM_ALLOY_H\n\n#include \"pair_eam.h\"\n\nnamespace LAMMPS_NS {\n\n// need virtual public b/c of how eam/alloy/opt inherits from it\n\nclass PairEAMAlloy : virtual public PairEAM {\n public:\n  PairEAMAlloy(class LAMMPS *);\n  virtual ~PairEAMAlloy() {}\n  void coeff(int, char **);\n\n protected:\n  void read_file(char *);\n  void file2array();\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: No matching element in EAM potential file\n\nThe EAM potential file does not contain elements that match the\nrequested elements.\n\nE: Cannot open EAM potential file %s\n\nThe specified EAM potential file cannot be opened.  Check that the\npath and name are correct.\n\nE: Incorrect element names in EAM potential file\n\nThe element names in the EAM file do not match those requested.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Stephen Foiles (SNL), Murray Daw (SNL)\n------------------------------------------------------------------------- */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_eam_alloy.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n\n/* ---------------------------------------------------------------------- */\n\nPairEAMAlloy::PairEAMAlloy(LAMMPS *lmp) : PairEAM(lmp)\n{\n  one_coeff = 1;\n  manybody_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n   read DYNAMO setfl file\n------------------------------------------------------------------------- */\n\nvoid PairEAMAlloy::coeff(int narg, char **arg)\n{\n  int i,j;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read EAM setfl file\n\n  if (setfl) {\n    for (i = 0; i < setfl->nelements; i++) delete [] setfl->elements[i];\n    delete [] setfl->elements;\n    delete [] setfl->mass;\n    memory->destroy(setfl->frho);\n    memory->destroy(setfl->rhor);\n    memory->destroy(setfl->z2r);\n    delete setfl;\n  }\n  setfl = new Setfl();\n  read_file(arg[2]);\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < setfl->nelements; j++)\n      if (strcmp(arg[i],setfl->elements[j]) == 0) break;\n    if (j < setfl->nelements) map[i-2] = j;\n    else error->all(FLERR,\"No matching element in EAM potential file\");\n  }\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  int n = atom->ntypes;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n  // set mass of atom type if i = j\n\n  int count = 0;\n  for (i = 1; i <= n; i++) {\n    for (j = i; j <= n; j++) {\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        if (i == j) atom->set_mass(FLERR,i,setfl->mass[map[i]]);\n        count++;\n      }\n      scale[i][j] = 1.0;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   read a multi-element DYNAMO setfl file\n------------------------------------------------------------------------- */\n\nvoid PairEAMAlloy::read_file(char *filename)\n{\n  Setfl *file = setfl;\n\n  // open potential file\n\n  int me = comm->me;\n  FILE *fptr;\n  char line[MAXLINE];\n\n  if (me == 0) {\n    fptr = force->open_potential(filename);\n    if (fptr == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open EAM potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read and broadcast header\n  // extract element names from nelements line\n\n  int n;\n  if (me == 0) {\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    n = strlen(line) + 1;\n  }\n  MPI_Bcast(&n,1,MPI_INT,0,world);\n  MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n  sscanf(line,\"%d\",&file->nelements);\n  int nwords = atom->count_words(line);\n  if (nwords != file->nelements + 1)\n    error->all(FLERR,\"Incorrect element names in EAM potential file\");\n\n  char **words = new char*[file->nelements+1];\n  nwords = 0;\n  strtok(line,\" \\t\\n\\r\\f\");\n  while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n  file->elements = new char*[file->nelements];\n  for (int i = 0; i < file->nelements; i++) {\n    n = strlen(words[i]) + 1;\n    file->elements[i] = new char[n];\n    strcpy(file->elements[i],words[i]);\n  }\n  delete [] words;\n\n  if (me == 0) {\n    fgets(line,MAXLINE,fptr);\n    nwords = sscanf(line,\"%d %lg %d %lg %lg\",\n           &file->nrho,&file->drho,&file->nr,&file->dr,&file->cut);\n  }\n\n  MPI_Bcast(&nwords,1,MPI_INT,0,world);\n  MPI_Bcast(&file->nrho,1,MPI_INT,0,world);\n  MPI_Bcast(&file->drho,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->nr,1,MPI_INT,0,world);\n  MPI_Bcast(&file->dr,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->cut,1,MPI_DOUBLE,0,world);\n\n  if ((nwords != 5) || (file->nrho <= 0) || (file->nr <= 0) || (file->dr <= 0.0))\n    error->all(FLERR,\"Invalid EAM potential file\");\n\n  file->mass = new double[file->nelements];\n  memory->create(file->frho,file->nelements,file->nrho+1,\"pair:frho\");\n  memory->create(file->rhor,file->nelements,file->nr+1,\"pair:rhor\");\n  memory->create(file->z2r,file->nelements,file->nelements,file->nr+1,\n                 \"pair:z2r\");\n\n  int i,j,tmp;\n  for (i = 0; i < file->nelements; i++) {\n    if (me == 0) {\n      fgets(line,MAXLINE,fptr);\n      sscanf(line,\"%d %lg\",&tmp,&file->mass[i]);\n    }\n    MPI_Bcast(&file->mass[i],1,MPI_DOUBLE,0,world);\n\n    if (me == 0) grab(fptr,file->nrho,&file->frho[i][1]);\n    MPI_Bcast(&file->frho[i][1],file->nrho,MPI_DOUBLE,0,world);\n    if (me == 0) grab(fptr,file->nr,&file->rhor[i][1]);\n    MPI_Bcast(&file->rhor[i][1],file->nr,MPI_DOUBLE,0,world);\n  }\n\n  for (i = 0; i < file->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      if (me == 0) grab(fptr,file->nr,&file->z2r[i][j][1]);\n      MPI_Bcast(&file->z2r[i][j][1],file->nr,MPI_DOUBLE,0,world);\n    }\n\n  // close the potential file\n\n  if (me == 0) fclose(fptr);\n}\n\n/* ----------------------------------------------------------------------\n   copy read-in setfl potential to standard array format\n------------------------------------------------------------------------- */\n\nvoid PairEAMAlloy::file2array()\n{\n  int i,j,m,n;\n  int ntypes = atom->ntypes;\n\n  // set function params directly from setfl file\n\n  nrho = setfl->nrho;\n  nr = setfl->nr;\n  drho = setfl->drho;\n  dr = setfl->dr;\n  rhomax = (nrho-1) * drho;\n\n  // ------------------------------------------------------------------\n  // setup frho arrays\n  // ------------------------------------------------------------------\n\n  // allocate frho arrays\n  // nfrho = # of setfl elements + 1 for zero array\n\n  nfrho = setfl->nelements + 1;\n  memory->destroy(frho);\n  memory->create(frho,nfrho,nrho+1,\"pair:frho\");\n\n  // copy each element's frho to global frho\n\n  for (i = 0; i < setfl->nelements; i++)\n    for (m = 1; m <= nrho; m++) frho[i][m] = setfl->frho[i][m];\n\n  // add extra frho of zeroes for non-EAM types to point to (pair hybrid)\n  // this is necessary b/c fp is still computed for non-EAM atoms\n\n  for (m = 1; m <= nrho; m++) frho[nfrho-1][m] = 0.0;\n\n  // type2frho[i] = which frho array (0 to nfrho-1) each atom type maps to\n  // if atom type doesn't point to element (non-EAM atom in pair hybrid)\n  // then map it to last frho array of zeroes\n\n  for (i = 1; i <= ntypes; i++)\n    if (map[i] >= 0) type2frho[i] = map[i];\n    else type2frho[i] = nfrho-1;\n\n  // ------------------------------------------------------------------\n  // setup rhor arrays\n  // ------------------------------------------------------------------\n\n  // allocate rhor arrays\n  // nrhor = # of setfl elements\n\n  nrhor = setfl->nelements;\n  memory->destroy(rhor);\n  memory->create(rhor,nrhor,nr+1,\"pair:rhor\");\n\n  // copy each element's rhor to global rhor\n\n  for (i = 0; i < setfl->nelements; i++)\n    for (m = 1; m <= nr; m++) rhor[i][m] = setfl->rhor[i][m];\n\n  // type2rhor[i][j] = which rhor array (0 to nrhor-1) each type pair maps to\n  // for setfl files, I,J mapping only depends on I\n  // OK if map = -1 (non-EAM atom in pair hybrid) b/c type2rhor not used\n\n  for (i = 1; i <= ntypes; i++)\n    for (j = 1; j <= ntypes; j++)\n      type2rhor[i][j] = map[i];\n\n  // ------------------------------------------------------------------\n  // setup z2r arrays\n  // ------------------------------------------------------------------\n\n  // allocate z2r arrays\n  // nz2r = N*(N+1)/2 where N = # of setfl elements\n\n  nz2r = setfl->nelements * (setfl->nelements+1) / 2;\n  memory->destroy(z2r);\n  memory->create(z2r,nz2r,nr+1,\"pair:z2r\");\n\n  // copy each element pair z2r to global z2r, only for I >= J\n\n  n = 0;\n  for (i = 0; i < setfl->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) z2r[n][m] = setfl->z2r[i][j][m];\n      n++;\n    }\n\n  // type2z2r[i][j] = which z2r array (0 to nz2r-1) each type pair maps to\n  // set of z2r arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // if map = -1 (non-EAM atom in pair hybrid):\n  //   type2z2r is not used by non-opt\n  //   but set type2z2r to 0 since accessed by opt\n\n  int irow,icol;\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) {\n        type2z2r[i][j] = 0;\n        continue;\n      }\n      if (irow < icol) {\n        irow = map[j];\n        icol = map[i];\n      }\n      n = 0;\n      for (m = 0; m < irow; m++) n += m + 1;\n      n += icol;\n      type2z2r[i][j] = n;\n    }\n  }\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Naveen Michaud-Agrawal (Johns Hopkins U)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"angle_cosine_squared.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define SMALL 0.001\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosineSquared::AngleCosineSquared(LAMMPS *lmp) : Angle(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosineSquared::~AngleCosineSquared()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(theta0);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosineSquared::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,n,type;\n  double delx1,dely1,delz1,delx2,dely2,delz2;\n  double eangle,f1[3],f3[3];\n  double dcostheta,tk;\n  double rsq1,rsq2,r1,r2,c,a,a11,a12,a22;\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // angle (cos and sin)\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    // force & energy\n\n    dcostheta = c - cos(theta0[type]);\n    tk = k[type] * dcostheta;\n\n    if (eflag) eangle = tk*dcostheta;\n\n    a = 2.0 * tk;\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    f1[0] = a11*delx1 + a12*delx2;\n    f1[1] = a11*dely1 + a12*dely2;\n    f1[2] = a11*delz1 + a12*delz2;\n    f3[0] = a22*delx2 + a12*delx1;\n    f3[1] = a22*dely2 + a12*dely1;\n    f3[2] = a22*delz2 + a12*delz1;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosineSquared::allocate()\n{\n  allocated = 1;\n  int n = atom->nangletypes;\n\n  memory->create(k,n+1,\"angle:k\");\n  memory->create(theta0,n+1,\"angle:theta0\");\n\n  memory->create(setflag,n+1,\"angle:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more types\n------------------------------------------------------------------------- */\n\nvoid AngleCosineSquared::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Incorrect args for angle coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nangletypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double theta0_one = force->numeric(FLERR,arg[2]);\n\n  // convert theta0 from degrees to radians\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    theta0[i] = theta0_one/180.0 * MY_PI;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for angle coefficients\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosineSquared::equilibrium_angle(int i)\n{\n  return theta0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid AngleCosineSquared::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nangletypes,fp);\n  fwrite(&theta0[1],sizeof(double),atom->nangletypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid AngleCosineSquared::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nangletypes,fp);\n    fread(&theta0[1],sizeof(double),atom->nangletypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nangletypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&theta0[1],atom->nangletypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nangletypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid AngleCosineSquared::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nangletypes; i++)\n    fprintf(fp,\"%d %g %g\\n\",i,k[i],theta0[i]/MY_PI*180.0);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosineSquared::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  double dcostheta = c - cos(theta0[type]);\n  double tk = k[type] * dcostheta;\n  return tk*dcostheta;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_ANGLE_H\n#define LMP_ANGLE_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass Angle : protected Pointers {\n  friend class ThrOMP;\n  friend class FixOMP;\n public:\n  int allocated;\n  int *setflag;\n  int writedata;                  // 1 if writes coeffs to data file\n  double energy;                  // accumulated energies\n  double virial[6];               // accumulated virial\n  double *eatom,**vatom;          // accumulated per-atom energy/virial\n\n  // KOKKOS host/device flag and data masks\n\n  ExecutionSpace execution_space;\n  unsigned int datamask_read,datamask_modify;\n  int copymode;\n\n  Angle(class LAMMPS *);\n  virtual ~Angle();\n  virtual void init();\n  virtual void compute(int, int) = 0;\n  virtual void settings(int, char **) {}\n  virtual void coeff(int, char **) = 0;\n  virtual void init_style() {};\n  virtual double equilibrium_angle(int) = 0;\n  virtual void write_restart(FILE *) = 0;\n  virtual void read_restart(FILE *) = 0;\n  virtual void write_data(FILE *) {}\n  virtual double single(int, int, int, int) = 0;\n  virtual double memory_usage();\n\n protected:\n  int suffix_flag;             // suffix compatibility flag\n\n  int evflag;\n  int eflag_either,eflag_global,eflag_atom;\n  int vflag_either,vflag_global,vflag_atom;\n  int maxeatom,maxvatom;\n\n  void ev_setup(int, int, int alloc = 1);\n  void ev_tally(int, int, int, int, int, double, double *, double *,\n                double, double, double, double, double, double);\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Angle coeffs are not set\n\nNo angle coefficients have been assigned in the data file or via the\nangle_coeff command.\n\nE: All angle coeffs are not set\n\nAll angle coefficients must be set in the data file or by the\nangle_coeff command before running a simulation.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: German Samolyuk (ORNL)\n   based on PairTersoff by Aidan Thompson (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_gw.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairGW::PairGW(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n  map = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairGW::~PairGW()\n{\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n  memory->destroy(params);\n  memory->destroy(elem2param);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum;\n  int itag,jtag,itype,jtype,ktype,iparam_ij,iparam_ijk;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2;\n  double delr1[3],delr2[3],fi[3],fj[3],fk[3];\n  double zeta_ij, prefactor;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n\n    // two-body interactions, skip half of them\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < x[i][2]) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      iparam_ij = elem2param[itype][jtype][jtype];\n      if (rsq > params[iparam_ij].cutsq) continue;\n\n      repulsive(&params[iparam_ij],rsq,fpair,eflag,evdwl);\n\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    // three-body interactions\n    // skip immediately if I-J is not within cutoff\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = map[type[j]];\n      iparam_ij = elem2param[itype][jtype][jtype];\n\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n      if (rsq1 > params[iparam_ij].cutsq) continue;\n\n      // accumulate bondorder zeta for each i-j interaction via loop over k\n\n      zeta_ij = 1.0;\n\n      for (kk = 0; kk < jnum; kk++) {\n        if (jj == kk) continue;\n        k = jlist[kk];\n        k &= NEIGHMASK;\n        ktype = map[type[k]];\n        iparam_ijk = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n        if (rsq2 > params[iparam_ijk].cutsq) continue;\n\n        zeta_ij += zeta(&params[iparam_ijk],rsq1,rsq2,delr1,delr2);\n      }\n\n      // pairwise force due to zeta\n\n      force_zeta(&params[iparam_ij],rsq1,zeta_ij,fpair,prefactor,eflag,evdwl);\n\n      f[i][0] += delr1[0]*fpair;\n      f[i][1] += delr1[1]*fpair;\n      f[i][2] += delr1[2]*fpair;\n      f[j][0] -= delr1[0]*fpair;\n      f[j][1] -= delr1[1]*fpair;\n      f[j][2] -= delr1[2]*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,-fpair,-delr1[0],-delr1[1],-delr1[2]);\n\n      // attractive term via loop over k\n\n      for (kk = 0; kk < jnum; kk++) {\n        if (jj == kk) continue;\n        k = jlist[kk];\n        k &= NEIGHMASK;\n        ktype = map[type[k]];\n        iparam_ijk = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n        if (rsq2 > params[iparam_ijk].cutsq) continue;\n\n        attractive(&params[iparam_ijk],prefactor,\n                   rsq1,rsq2,delr1,delr2,fi,fj,fk);\n\n        f[i][0] += fi[0];\n        f[i][1] += fi[1];\n        f[i][2] += fi[2];\n        f[j][0] += fj[0];\n        f[j][1] += fj[1];\n        f[j][2] += fj[2];\n        f[k][0] += fk[0];\n        f[k][1] += fk[1];\n        f[k][2] += fk[2];\n\n        if (vflag_atom) v_tally3(i,j,k,fj,fk,delr1,delr2);\n      } // kk\n    } // jj\n  } // ii\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairGW::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairGW::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairGW::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style GW requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style GW requires newton pair on\");\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairGW::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::read_file(char *file)\n{\n  int params_per_line = 17;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open GW potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in GW potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].gamma = atof(words[4]);\n    params[nparams].lam3 = atof(words[5]);\n    params[nparams].c = atof(words[6]);\n    params[nparams].d = atof(words[7]);\n    params[nparams].h = atof(words[8]);\n    params[nparams].powern = atof(words[9]);\n    params[nparams].beta = atof(words[10]);\n    params[nparams].lam2 = atof(words[11]);\n    params[nparams].bigb = atof(words[12]);\n    params[nparams].bigr = atof(words[13]);\n    params[nparams].bigd = atof(words[14]);\n    params[nparams].lam1 = atof(words[15]);\n    params[nparams].biga = atof(words[16]);\n\n    // currently only allow m exponent of 1 or 3\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    if (params[nparams].c < 0.0 || params[nparams].d < 0.0 ||\n        params[nparams].powern < 0.0 || params[nparams].beta < 0.0 ||\n        params[nparams].lam2 < 0.0 || params[nparams].bigb < 0.0 ||\n        params[nparams].bigr < 0.0 ||params[nparams].bigd < 0.0 ||\n        params[nparams].bigd > params[nparams].bigr ||\n        params[nparams].lam1 < 0.0 || params[nparams].biga < 0.0 ||\n        params[nparams].powerm - params[nparams].powermint != 0.0 ||\n        (params[nparams].powermint != 3 && params[nparams].powermint != 1) ||\n        params[nparams].gamma < 0.0)\n      error->all(FLERR,\"Illegal GW parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::setup_params()\n{\n  int i,j,k,m,n;\n\n  // set elem2param for all element triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n        n = -1;\n        for (m = 0; m < nparams; m++) {\n          if (i == params[m].ielement && j == params[m].jelement &&\n              k == params[m].kelement) {\n            if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n            n = m;\n          }\n        }\n        if (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n        elem2param[i][j][k] = n;\n      }\n\n\n  // compute parameter values derived from inputs\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cut = params[m].bigr + params[m].bigd;\n    params[m].cutsq = params[m].cut*params[m].cut;\n\n    params[m].c1 = pow(2.0*params[m].powern*1.0e-16,-1.0/params[m].powern);\n    params[m].c2 = pow(2.0*params[m].powern*1.0e-8,-1.0/params[m].powern);\n    params[m].c3 = 1.0/params[m].c2;\n    params[m].c4 = 1.0/params[m].c1;\n  }\n\n  // set cutmax to max of all params\n\n  cutmax = 0.0;\n  for (m = 0; m < nparams; m++)\n    if (params[m].cut > cutmax) cutmax = params[m].cut;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::repulsive(Param *param, double rsq, double &fforce,\n                            int eflag, double &eng)\n{\n  double r,tmp_fc,tmp_fc_d,tmp_exp;\n\n  r = sqrt(rsq);\n  tmp_fc = gw_fc(r,param);\n  tmp_fc_d = gw_fc_d(r,param);\n  tmp_exp = exp(-param->lam1 * r);\n  fforce = -param->biga * tmp_exp * (tmp_fc_d - tmp_fc*param->lam1) / r;\n  if (eflag) eng = tmp_fc * param->biga * tmp_exp;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::zeta(Param *param, double rsqij, double rsqik,\n                         double *delrij, double *delrik)\n{\n  double rij,rik,costheta,arg,ex_delr;\n\n  rij = sqrt(rsqij);\n  rik = sqrt(rsqik);\n  costheta = (delrij[0]*delrik[0] + delrij[1]*delrik[1] +\n              delrij[2]*delrik[2]) / (rij*rik);\n\n  if (param->powermint == 3) arg = pow(param->lam3 * (rij-rik),3.0);\n  else arg = param->lam3 * (rij-rik);\n\n  if (arg > 69.0776) ex_delr = 1.e30;\n  else if (arg < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(arg);\n\n  return gw_fc(rik,param) * gw_gijk(costheta,param) * ex_delr;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::force_zeta(Param *param_i, double rsq, double zeta_ij,\n                             double &fforce, double &prefactor,\n                             int eflag, double &eng)\n{\n  double r,fa,fa_d,bij;\n\n  r = sqrt(rsq);\n  fa = gw_fa(r,param_i);\n  fa_d = gw_fa_d(r,param_i);\n  bij = gw_bij(zeta_ij,param_i);\n  fforce = 0.5*bij*fa_d / r;\n  prefactor = -0.5*fa * gw_bij_d(zeta_ij,param_i);\n  if (eflag) eng = 0.5*bij*fa;\n}\n\n/* ----------------------------------------------------------------------\n   attractive term\n   use param_ij cutoff for rij test\n   use param_ijk cutoff for rik test\n------------------------------------------------------------------------- */\n\nvoid PairGW::attractive(Param *param, double prefactor,\n                             double rsqij, double rsqik,\n                             double *delrij, double *delrik,\n                             double *fi, double *fj, double *fk)\n{\n  double rij_hat[3],rik_hat[3];\n  double rij,rijinv,rik,rikinv;\n\n  rij = sqrt(rsqij);\n  rijinv = 1.0/rij;\n  vec3_scale(rijinv,delrij,rij_hat);\n\n  rik = sqrt(rsqik);\n  rikinv = 1.0/rik;\n  vec3_scale(rikinv,delrik,rik_hat);\n\n  gw_zetaterm_d(prefactor,rij_hat,rij,rik_hat,rik,fi,fj,fk,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::gw_fc(double r, Param *param)\n{\n  double gw_R = param->bigr;\n  double gw_D = param->bigd;\n\n  if (r < gw_R-gw_D) return 1.0;\n  if (r > gw_R+gw_D) return 0.0;\n  return 0.5*(1.0 - sin(MY_PI2*(r - gw_R)/gw_D));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::gw_fc_d(double r, Param *param)\n{\n  double gw_R = param->bigr;\n  double gw_D = param->bigd;\n\n  if (r < gw_R-gw_D) return 0.0;\n  if (r > gw_R+gw_D) return 0.0;\n  return -(MY_PI4/gw_D) * cos(MY_PI2*(r - gw_R)/gw_D);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::gw_fa(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return -param->bigb * exp(-param->lam2 * r) * gw_fc(r,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::gw_fa_d(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return param->bigb * exp(-param->lam2 * r) *\n    (param->lam2 * gw_fc(r,param) - gw_fc_d(r,param));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::gw_bij(double zeta_ij, Param *param_i)\n{\n  double tmp = param_i->beta * zeta_ij;\n  return pow(tmp,-param_i->powern);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairGW::gw_bij_d(double zeta_ij, Param *param_i)\n{\n  double tmp = param_i->beta * zeta_ij;\n  return - param_i->powern * pow(tmp,-param_i->powern-1)*tmp / zeta_ij;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::gw_zetaterm_d(double prefactor,\n                                  double *rij_hat, double rij,\n                                  double *rik_hat, double rik,\n                                  double *dri, double *drj, double *drk,\n                                  Param *param)\n{\n  double gijk,gijk_d,ex_delr,ex_delr_d,fc,dfc,cos_theta,tmp;\n  double dcosdri[3],dcosdrj[3],dcosdrk[3];\n\n  fc = gw_fc(rik,param);\n  dfc = gw_fc_d(rik,param);\n  if (param->powermint == 3) tmp = pow(param->lam3 * (rij-rik),3.0);\n  else tmp = param->lam3 * (rij-rik);\n\n  if (tmp > 69.0776) ex_delr = 1.e30;\n  else if (tmp < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(tmp);\n\n  if (param->powermint == 3)\n    ex_delr_d = 3.0*pow(param->lam3,3.0) * pow(rij-rik,2.0)*ex_delr;\n  else ex_delr_d = param->lam3 * ex_delr;\n\n  cos_theta = vec3_dot(rij_hat,rik_hat);\n  gijk = gw_gijk(cos_theta,param);\n  gijk_d = gw_gijk_d(cos_theta,param);\n  costheta_d(rij_hat,rij,rik_hat,rik,dcosdri,dcosdrj,dcosdrk);\n\n  // compute the derivative wrt Ri\n  // dri = -dfc*gijk*ex_delr*rik_hat;\n  // dri += fc*gijk_d*ex_delr*dcosdri;\n  // dri += fc*gijk*ex_delr_d*(rik_hat - rij_hat);\n\n  vec3_scale(-dfc*gijk*ex_delr,rik_hat,dri);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdri,dri,dri);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rik_hat,dri,dri);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rij_hat,dri,dri);\n  vec3_scale(prefactor,dri,dri);\n\n  // compute the derivative wrt Rj\n  // drj = fc*gijk_d*ex_delr*dcosdrj;\n  // drj += fc*gijk*ex_delr_d*rij_hat;\n\n  vec3_scale(fc*gijk_d*ex_delr,dcosdrj,drj);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rij_hat,drj,drj);\n  vec3_scale(prefactor,drj,drj);\n\n  // compute the derivative wrt Rk\n  // drk = dfc*gijk*ex_delr*rik_hat;\n  // drk += fc*gijk_d*ex_delr*dcosdrk;\n  // drk += -fc*gijk*ex_delr_d*rik_hat;\n\n  vec3_scale(dfc*gijk*ex_delr,rik_hat,drk);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdrk,drk,drk);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rik_hat,drk,drk);\n  vec3_scale(prefactor,drk,drk);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairGW::costheta_d(double *rij_hat, double rij,\n                             double *rik_hat, double rik,\n                             double *dri, double *drj, double *drk)\n{\n  // first element is devative wrt Ri, second wrt Rj, third wrt Rk\n\n  double cos_theta = vec3_dot(rij_hat,rik_hat);\n\n  vec3_scaleadd(-cos_theta,rij_hat,rik_hat,drj);\n  vec3_scale(1.0/rij,drj,drj);\n  vec3_scaleadd(-cos_theta,rik_hat,rij_hat,drk);\n  vec3_scale(1.0/rik,drk,drk);\n  vec3_add(drj,drk,dri);\n  vec3_scale(-1.0,dri,dri);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(gw,PairGW)\n\n#else\n\n#ifndef LMP_PAIR_GW_H\n#define LMP_PAIR_GW_H\n\n#include \"pair.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairGW : public Pair {\n public:\n  PairGW(class LAMMPS *);\n  virtual ~PairGW();\n  virtual void compute(int, int);\n  void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n\n protected:\n  struct Param {\n    double lam1,lam2,lam3;\n    double c,d,h;\n    double gamma,powerm;\n    double powern,beta;\n    double biga,bigb,bigd,bigr;\n    double cut,cutsq;\n    double c1,c2,c3,c4;\n    int ielement,jelement,kelement;\n    int powermint;\n    double Z_i,Z_j;\n    double ZBLcut,ZBLexpscale;\n  };\n\n  Param *params;                // parameter set for an I-J-K interaction\n  char **elements;              // names of unique elements\n  int ***elem2param;            // mapping from element triplets to paramegw\n  int *map;                     // mapping from atom types to elements\n  double cutmax;                // max cutoff for all elements\n  int nelements;                // # of unique elements\n  int nparams;                  // # of stored parameter sets\n  int maxparam;                 // max # of parameter sets\n\n  int **pages;                     // neighbor list pages\n  int maxlocal;                    // size of numneigh, firstneigh arrays\n  int maxpage;                     // # of pages currently allocated\n  int pgsize;                      // size of neighbor page\n  int oneatom;                     // max # of neighbors for one atom\n\n\n  int *GW_numneigh;             // # of pair neighbors for each atom\n  int **GW_firstneigh;          // ptr to 1st neighbor of each atom\n\n  void GW_neigh();\n  void add_pages(int howmany = 1);\n\n  void allocate();\n  virtual void read_file(char *);\n  void setup_params();\n  virtual void repulsive(Param *, double, double &, int, double &);\n  double zeta(Param *, double, double, double *, double *);\n  virtual void force_zeta(Param *, double, double, double &,\n                          double &, int, double &);\n  void attractive(Param *, double, double, double, double *, double *,\n                  double *, double *, double *);\n\n  double gw_fc(double, Param *);\n  double gw_fc_d(double, Param *);\n  virtual double gw_fa(double, Param *);\n  virtual double gw_fa_d(double, Param *);\n  double gw_bij(double, Param *);\n  double gw_bij_d(double, Param *);\n\n  void gw_zetaterm_d(double, double *, double, double *, double,\n                               double *, double *, double *, Param *);\n  void costheta_d(double *, double, double *, double,\n                  double *, double *, double *);\n\n  // inlined functions for efficiency\n\n  inline double gw_gijk(const double costheta,\n                          const Param * const param) const {\n    const double gw_c = param->c * param->c;\n    const double gw_d = param->d * param->d;\n    const double hcth = param->h - costheta;\n\n\t  //printf(\"gw_gijk: gw_c=%f gw_d=%f hcth=%f=%f-%f\\n\", gw_c, gw_d, hcth, param->h, costheta);\n\n    return param->gamma*(1.0 + gw_c/gw_d - gw_c / (gw_d + hcth*hcth));\n  }\n\n  inline double gw_gijk_d(const double costheta,\n                            const Param * const param) const {\n    const double gw_c = param->c * param->c;\n    const double gw_d = param->d * param->d;\n    const double hcth = param->h - costheta;\n    const double numerator = -2.0 * gw_c * hcth;\n    const double denominator = 1.0/(gw_d + hcth*hcth);\n    return param->gamma*numerator*denominator*denominator;\n  }\n\n  inline double vec3_dot(const double x[3], const double y[3]) const {\n    return x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n  }\n\n  inline void vec3_add(const double x[3], const double y[3],\n                       double * const z) const {\n    z[0] = x[0]+y[0];  z[1] = x[1]+y[1];  z[2] = x[2]+y[2];\n  }\n\n  inline void vec3_scale(const double k, const double x[3],\n                         double y[3]) const {\n    y[0] = k*x[0];  y[1] = k*x[1];  y[2] = k*x[2];\n  }\n\n  inline void vec3_scaleadd(const double k, const double x[3],\n                            const double y[3], double * const z) const {\n    z[0] = k*x[0]+y[0];\n    z[1] = k*x[1]+y[1];\n    z[2] = k*x[2]+y[2];\n  }\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style GW requires atom IDs\n\nThis is a requirement to use the GW potential.\n\nE: Pair style GW requires newton pair on\n\nSee the newton command.  This is a restriction to use the GW\npotential.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Cannot open GW potential file %s\n\nThe specified GW potential file cannot be opened.  Check that the\npath and name are correct.\n\nE: Incorrect format in GW potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal GW parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\nE: Potential file has duplicate entry\n\nThe potential file for a SW or GW potential has more than\none entry for the same 3 ordered elements.\n\nE: Potential file is missing an entry\n\nThe potential file for a SW or GW potential does not have a\nneeded entry.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"bond_harmonic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nBondHarmonic::BondHarmonic(LAMMPS *lmp) : Bond(lmp)\n{\n  reinitflag = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nBondHarmonic::~BondHarmonic()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(r0);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondHarmonic::compute(int eflag, int vflag)\n{\n  int i1,i2,n,type;\n  double delx,dely,delz,ebond,fbond;\n  double rsq,r,dr,rk;\n\n  ebond = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    rsq = delx*delx + dely*dely + delz*delz;\n    r = sqrt(rsq);\n    dr = r - r0[type];\n    rk = k[type] * dr;\n\n    // force & energy\n\n    if (r > 0.0) fbond = -2.0*rk/r;\n    else fbond = 0.0;\n\n    if (eflag) ebond = rk*dr;\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondHarmonic::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(k,n+1,\"bond:k\");\n  memory->create(r0,n+1,\"bond:r0\");\n\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more types\n------------------------------------------------------------------------- */\n\nvoid BondHarmonic::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Incorrect args for bond coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double r0_one = force->numeric(FLERR,arg[2]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    r0[i] = r0_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for bond coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   return an equilbrium bond length\n------------------------------------------------------------------------- */\n\ndouble BondHarmonic::equilibrium_distance(int i)\n{\n  return r0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid BondHarmonic::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&r0[1],sizeof(double),atom->nbondtypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid BondHarmonic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&r0[1],sizeof(double),atom->nbondtypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nbondtypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid BondHarmonic::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nbondtypes; i++)\n    fprintf(fp,\"%d %g %g\\n\",i,k[i],r0[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondHarmonic::single(int type, double rsq, int i, int j,\n                        double &fforce)\n{\n  double r = sqrt(rsq);\n  double dr = r - r0[type];\n  double rk = k[type] * dr;\n  fforce = 0;\n  if (r > 0.0) fforce = -2.0*rk/r;\n  return rk*dr;\n}\n\n/* ----------------------------------------------------------------------\n    Return ptr to internal members upon request.\n------------------------------------------------------------------------ */\nvoid *BondHarmonic::extract( char *str, int &dim )\n{\n  dim = 1;\n  if( strcmp(str,\"kappa\")==0) return (void*) k;\n  if( strcmp(str,\"r0\")==0) return (void*) r0;\n  return NULL;\n}\n\n\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <mpi.h>\n#include <string.h>\n#include <stdlib.h>\n#include \"fix_bond_break.h\"\n#include \"update.h\"\n#include \"respa.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"random_mars.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\n\n#define DELTA 16\n\n/* ---------------------------------------------------------------------- */\n\nFixBondBreak::FixBondBreak(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg),\n  partner(NULL), finalpartner(NULL), distsq(NULL), probability(NULL), broken(NULL), copy(NULL), random(NULL)\n{\n  if (narg < 6) error->all(FLERR,\"Illegal fix bond/break command\");\n\n  MPI_Comm_rank(world,&me);\n  MPI_Comm_size(world,&nprocs);\n\n  nevery = force->inumeric(FLERR,arg[3]);\n  if (nevery <= 0) error->all(FLERR,\"Illegal fix bond/break command\");\n\n  force_reneighbor = 1;\n  next_reneighbor = -1;\n  vector_flag = 1;\n  size_vector = 2;\n  global_freq = 1;\n  extvector = 0;\n\n  btype = force->inumeric(FLERR,arg[4]);\n  cutoff = force->numeric(FLERR,arg[5]);\n\n  if (btype < 1 || btype > atom->nbondtypes)\n    error->all(FLERR,\"Invalid bond type in fix bond/break command\");\n  if (cutoff < 0.0) error->all(FLERR,\"Illegal fix bond/break command\");\n\n  cutsq = cutoff*cutoff;\n\n  // optional keywords\n\n  fraction = 1.0;\n  int seed = 12345;\n\n  int iarg = 6;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"prob\") == 0) {\n      if (iarg+3 > narg) error->all(FLERR,\"Illegal fix bond/break command\");\n      fraction = force->numeric(FLERR,arg[iarg+1]);\n      seed = force->inumeric(FLERR,arg[iarg+2]);\n      if (fraction < 0.0 || fraction > 1.0)\n        error->all(FLERR,\"Illegal fix bond/break command\");\n      if (seed <= 0) error->all(FLERR,\"Illegal fix bond/break command\");\n      iarg += 3;\n    } else error->all(FLERR,\"Illegal fix bond/break command\");\n  }\n\n  // error check\n\n  if (atom->molecular != 1)\n    error->all(FLERR,\"Cannot use fix bond/break with non-molecular systems\");\n\n  // initialize Marsaglia RNG with processor-unique seed\n\n  random = new RanMars(lmp,seed + me);\n\n  // set comm sizes needed by this fix\n  // forward is big due to comm of broken bonds and 1-2 neighbors\n\n  comm_forward = MAX(2,2+atom->maxspecial);\n  comm_reverse = 2;\n\n  // allocate arrays local to this fix\n\n  nmax = 0;\n\n  maxbreak = 0;\n\n  // copy = special list for one atom\n  // size = ms^2 + ms is sufficient\n  // b/c in rebuild_special_one() neighs of all 1-2s are added,\n  //   then a dedup(), then neighs of all 1-3s are added, then final dedup()\n  // this means intermediate size cannot exceed ms^2 + ms\n\n  int maxspecial = atom->maxspecial;\n  copy = new tagint[maxspecial*maxspecial + maxspecial];\n\n  // zero out stats\n\n  breakcount = 0;\n  breakcounttotal = 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixBondBreak::~FixBondBreak()\n{\n  delete random;\n\n  // delete locally stored arrays\n\n  memory->destroy(partner);\n  memory->destroy(finalpartner);\n  memory->destroy(distsq);\n  memory->destroy(broken);\n  delete [] copy;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondBreak::setmask()\n{\n  int mask = 0;\n  mask |= POST_INTEGRATE;\n  mask |= POST_INTEGRATE_RESPA;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::init()\n{\n  if (strstr(update->integrate_style,\"respa\"))\n    nlevels_respa = ((Respa *) update->integrate)->nlevels;\n\n  // enable angle/dihedral/improper breaking if any defined\n\n  if (atom->nangles) angleflag = 1;\n  else angleflag = 0;\n  if (atom->ndihedrals) dihedralflag = 1;\n  else dihedralflag = 0;\n  if (atom->nimpropers) improperflag = 1;\n  else improperflag = 0;\n\n  if (force->improper) {\n    if (force->improper_match(\"class2\") || force->improper_match(\"ring\"))\n      error->all(FLERR,\"Cannot yet use fix bond/break with this \"\n                 \"improper style\");\n  }\n\n  lastcheck = -1;\n\n  // DEBUG\n  //print_bb();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::post_integrate()\n{\n  int i,j,k,m,n,i1,i2,n1,n3,type;\n  double delx,dely,delz,rsq;\n  tagint *slist;\n\n  if (update->ntimestep % nevery) return;\n\n  // check that all procs have needed ghost atoms within ghost cutoff\n  // only if neighbor list has changed since last check\n\n  if (lastcheck < neighbor->lastcall) check_ghosts();\n\n  // acquire updated ghost atom positions\n  // necessary b/c are calling this after integrate, but before Verlet comm\n\n  comm->forward_comm();\n\n  // resize bond partner list and initialize it\n  // probability array overlays distsq array\n  // needs to be atom->nmax in length\n\n  if (atom->nmax > nmax) {\n    memory->destroy(partner);\n    memory->destroy(finalpartner);\n    memory->destroy(distsq);\n    nmax = atom->nmax;\n    memory->create(partner,nmax,\"bond/break:partner\");\n    memory->create(finalpartner,nmax,\"bond/break:finalpartner\");\n    memory->create(distsq,nmax,\"bond/break:distsq\");\n    probability = distsq;\n  }\n\n  int nlocal = atom->nlocal;\n  int nall = atom->nlocal + atom->nghost;\n\n  for (i = 0; i < nall; i++) {\n    partner[i] = 0;\n    finalpartner[i] = 0;\n    distsq[i] = 0.0;\n  }\n\n  // loop over bond list\n  // setup possible partner list of bonds to break\n\n  double **x = atom->x;\n  tagint *tag = atom->tag;\n  int *mask = atom->mask;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n    if (!(mask[i1] & groupbit)) continue;\n    if (!(mask[i2] & groupbit)) continue;\n    if (type != btype) continue;\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n    rsq = delx*delx + dely*dely + delz*delz;\n    if (rsq <= cutsq) continue;\n\n    if (rsq > distsq[i1]) {\n      partner[i1] = tag[i2];\n      distsq[i1] = rsq;\n    }\n    if (rsq > distsq[i2]) {\n      partner[i2] = tag[i1];\n      distsq[i2] = rsq;\n    }\n  }\n\n  // reverse comm of partner info\n\n  if (force->newton_bond) comm->reverse_comm_fix(this);\n\n  // each atom now knows its winning partner\n  // for prob check, generate random value for each atom with a bond partner\n  // forward comm of partner and random value, so ghosts have it\n\n  if (fraction < 1.0) {\n    for (i = 0; i < nlocal; i++)\n      if (partner[i]) probability[i] = random->uniform();\n  }\n\n  commflag = 1;\n  comm->forward_comm_fix(this,2);\n\n  // break bonds\n  // if both atoms list each other as winning bond partner\n  // and probability constraint is satisfied\n\n  int **bond_type = atom->bond_type;\n  tagint **bond_atom = atom->bond_atom;\n  int *num_bond = atom->num_bond;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  nbreak = 0;\n  for (i = 0; i < nlocal; i++) {\n    if (partner[i] == 0) continue;\n    j = atom->map(partner[i]);\n    if (partner[j] != tag[i]) continue;\n\n    // apply probability constraint using RN for atom with smallest ID\n\n    if (fraction < 1.0) {\n      if (tag[i] < tag[j]) {\n        if (probability[i] >= fraction) continue;\n      } else {\n        if (probability[j] >= fraction) continue;\n      }\n    }\n\n    // delete bond from atom I if I stores it\n    // atom J will also do this\n\n    for (m = 0; m < num_bond[i]; m++) {\n      if (bond_atom[i][m] == partner[i]) {\n        for (k = m; k < num_bond[i]-1; k++) {\n          bond_atom[i][k] = bond_atom[i][k+1];\n          bond_type[i][k] = bond_type[i][k+1];\n        }\n        num_bond[i]--;\n        break;\n      }\n    }\n\n    // remove J from special bond list for atom I\n    // atom J will also do this, whatever proc it is on\n\n    slist = special[i];\n    n1 = nspecial[i][0];\n    for (m = 0; m < n1; m++)\n      if (slist[m] == partner[i]) break;\n    n3 = nspecial[i][2];\n    for (; m < n3-1; m++) slist[m] = slist[m+1];\n    nspecial[i][0]--;\n    nspecial[i][1]--;\n    nspecial[i][2]--;\n\n    // store final broken bond partners and count the broken bond once\n\n    finalpartner[i] = tag[j];\n    finalpartner[j] = tag[i];\n    if (tag[i] < tag[j]) nbreak++;\n  }\n\n  // tally stats\n\n  MPI_Allreduce(&nbreak,&breakcount,1,MPI_INT,MPI_SUM,world);\n  breakcounttotal += breakcount;\n  atom->nbonds -= breakcount;\n\n  // trigger reneighboring if any bonds were broken\n  // this insures neigh lists will immediately reflect the topology changes\n  // done if no bonds broken\n\n  if (breakcount) next_reneighbor = update->ntimestep;\n  if (!breakcount) return;\n\n  // communicate final partner and 1-2 special neighbors\n  // 1-2 neighs already reflect broken bonds\n\n  commflag = 2;\n  comm->forward_comm_fix(this);\n\n  // create list of broken bonds that influence my owned atoms\n  //   even if between owned-ghost or ghost-ghost atoms\n  // finalpartner is now set for owned and ghost atoms so loop over nall\n  // OK if duplicates in broken list due to ghosts duplicating owned atoms\n  // check J < 0 to insure a broken bond to unknown atom is included\n  //   i.e. bond partner outside of cutoff length\n\n  nbreak = 0;\n  for (i = 0; i < nall; i++) {\n    if (finalpartner[i] == 0) continue;\n    j = atom->map(finalpartner[i]);\n    if (j < 0 || tag[i] < tag[j]) {\n      if (nbreak == maxbreak) {\n        maxbreak += DELTA;\n        memory->grow(broken,maxbreak,2,\"bond/break:broken\");\n      }\n      broken[nbreak][0] = tag[i];\n      broken[nbreak][1] = finalpartner[i];\n      nbreak++;\n    }\n  }\n\n  // update special neigh lists of all atoms affected by any broken bond\n  // also remove angles/dihedrals/impropers broken by broken bonds\n\n  update_topology();\n\n  // DEBUG\n  // print_bb();\n}\n\n/* ----------------------------------------------------------------------\n   insure all atoms 2 hops away from owned atoms are in ghost list\n   this allows dihedral 1-2-3-4 to be properly deleted\n     and special list of 1 to be properly updated\n   if I own atom 1, but not 2,3,4, and bond 3-4 is deleted\n     then 2,3 will be ghosts and 3 will store 4 as its finalpartner\n------------------------------------------------------------------------- */\n\nvoid FixBondBreak::check_ghosts()\n{\n  int i,j,n;\n  tagint *slist;\n\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n  int nlocal = atom->nlocal;\n\n  int flag = 0;\n  for (i = 0; i < nlocal; i++) {\n    slist = special[i];\n    n = nspecial[i][1];\n    for (j = 0; j < n; j++)\n      if (atom->map(slist[j]) < 0) flag = 1;\n  }\n\n  int flagall;\n  MPI_Allreduce(&flag,&flagall,1,MPI_INT,MPI_SUM,world);\n  if (flagall)\n    error->all(FLERR,\"Fix bond/break needs ghost atoms from further away\");\n  lastcheck = update->ntimestep;\n}\n\n/* ----------------------------------------------------------------------\n   double loop over my atoms and broken bonds\n   influenced = 1 if atom's topology is affected by any broken bond\n     yes if is one of 2 atoms in bond\n     yes if both atom IDs appear in atom's special list\n     else no\n   if influenced:\n     check for angles/dihedrals/impropers to break due to specific broken bonds\n     rebuild the atom's special list of 1-2,1-3,1-4 neighs\n------------------------------------------------------------------------- */\n\nvoid FixBondBreak::update_topology()\n{\n  int i,j,k,n,influence,influenced,found;\n  tagint id1,id2;\n  tagint *slist;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n  int nlocal = atom->nlocal;\n\n  nangles = 0;\n  ndihedrals = 0;\n  nimpropers = 0;\n\n  //printf(\"NBREAK %d: \",nbreak);\n  //for (i = 0; i < nbreak; i++)\n  //  printf(\" %d %d,\",broken[i][0],broken[i][1]);\n  //printf(\"\\n\");\n\n  for (i = 0; i < nlocal; i++) {\n    influenced = 0;\n    slist = special[i];\n\n    for (j = 0; j < nbreak; j++) {\n      id1 = broken[j][0];\n      id2 = broken[j][1];\n\n      influence = 0;\n      if (tag[i] == id1 || tag[i] == id2) influence = 1;\n      else {\n        n = nspecial[i][2];\n        found = 0;\n        for (k = 0; k < n; k++)\n          if (slist[k] == id1 || slist[k] == id2) found++;\n        if (found == 2) influence = 1;\n      }\n      if (!influence) continue;\n      influenced = 1;\n\n      if (angleflag) break_angles(i,id1,id2);\n      if (dihedralflag) break_dihedrals(i,id1,id2);\n      if (improperflag) break_impropers(i,id1,id2);\n    }\n\n    if (influenced) rebuild_special_one(i);\n  }\n\n  int newton_bond = force->newton_bond;\n\n  int all;\n  if (angleflag) {\n    MPI_Allreduce(&nangles,&all,1,MPI_INT,MPI_SUM,world);\n    if (!newton_bond) all /= 3;\n    atom->nangles -= all;\n  }\n  if (dihedralflag) {\n    MPI_Allreduce(&ndihedrals,&all,1,MPI_INT,MPI_SUM,world);\n    if (!newton_bond) all /= 4;\n    atom->ndihedrals -= all;\n  }\n  if (improperflag) {\n    MPI_Allreduce(&nimpropers,&all,1,MPI_INT,MPI_SUM,world);\n    if (!newton_bond) all /= 4;\n    atom->nimpropers -= all;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   re-build special list of atom M\n   does not affect 1-2 neighs (already include effects of new bond)\n   affects 1-3 and 1-4 neighs due to other atom's augmented 1-2 neighs\n------------------------------------------------------------------------- */\n\nvoid FixBondBreak::rebuild_special_one(int m)\n{\n  int i,j,n,n1,cn1,cn2,cn3;\n  tagint *slist;\n\n  tagint *tag = atom->tag;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  // existing 1-2 neighs of atom M\n\n  slist = special[m];\n  n1 = nspecial[m][0];\n  cn1 = 0;\n  for (i = 0; i < n1; i++)\n    copy[cn1++] = slist[i];\n\n  // new 1-3 neighs of atom M, based on 1-2 neighs of 1-2 neighs\n  // exclude self\n  // remove duplicates after adding all possible 1-3 neighs\n\n  cn2 = cn1;\n  for (i = 0; i < cn1; i++) {\n    n = atom->map(copy[i]);\n    slist = special[n];\n    n1 = nspecial[n][0];\n    for (j = 0; j < n1; j++)\n      if (slist[j] != tag[m]) copy[cn2++] = slist[j];\n  }\n\n  cn2 = dedup(cn1,cn2,copy);\n\n  // new 1-4 neighs of atom M, based on 1-2 neighs of 1-3 neighs\n  // exclude self\n  // remove duplicates after adding all possible 1-4 neighs\n\n  cn3 = cn2;\n  for (i = cn1; i < cn2; i++) {\n    n = atom->map(copy[i]);\n    slist = special[n];\n    n1 = nspecial[n][0];\n    for (j = 0; j < n1; j++)\n      if (slist[j] != tag[m]) copy[cn3++] = slist[j];\n  }\n\n  cn3 = dedup(cn2,cn3,copy);\n\n  // store new special list with atom M\n\n  nspecial[m][0] = cn1;\n  nspecial[m][1] = cn2;\n  nspecial[m][2] = cn3;\n  memcpy(special[m],copy,cn3*sizeof(int));\n}\n\n/* ----------------------------------------------------------------------\n   break any angles owned by atom M that include atom IDs 1 and 2\n   angle is broken if ID1-ID2 is one of 2 bonds in angle (I-J,J-K)\n------------------------------------------------------------------------- */\n\nvoid FixBondBreak::break_angles(int m, tagint id1, tagint id2)\n{\n  int j,found;\n\n  int num_angle = atom->num_angle[m];\n  int *angle_type = atom->angle_type[m];\n  tagint *angle_atom1 = atom->angle_atom1[m];\n  tagint *angle_atom2 = atom->angle_atom2[m];\n  tagint *angle_atom3 = atom->angle_atom3[m];\n\n  int i = 0;\n  while (i < num_angle) {\n    found = 0;\n    if (angle_atom1[i] == id1 && angle_atom2[i] == id2) found = 1;\n    else if (angle_atom2[i] == id1 && angle_atom3[i] == id2) found = 1;\n    else if (angle_atom1[i] == id2 && angle_atom2[i] == id1) found = 1;\n    else if (angle_atom2[i] == id2 && angle_atom3[i] == id1) found = 1;\n    if (!found) i++;\n    else {\n      for (j = i; j < num_angle-1; j++) {\n        angle_type[j] = angle_type[j+1];\n        angle_atom1[j] = angle_atom1[j+1];\n        angle_atom2[j] = angle_atom2[j+1];\n        angle_atom3[j] = angle_atom3[j+1];\n      }\n      num_angle--;\n      nangles++;\n    }\n  }\n\n  atom->num_angle[m] = num_angle;\n}\n\n/* ----------------------------------------------------------------------\n   break any dihedrals owned by atom M that include atom IDs 1 and 2\n   dihedral is broken if ID1-ID2 is one of 3 bonds in dihedral (I-J,J-K.K-L)\n------------------------------------------------------------------------- */\n\nvoid FixBondBreak::break_dihedrals(int m, tagint id1, tagint id2)\n{\n  int j,found;\n\n  int num_dihedral = atom->num_dihedral[m];\n  int *dihedral_type = atom->dihedral_type[m];\n  tagint *dihedral_atom1 = atom->dihedral_atom1[m];\n  tagint *dihedral_atom2 = atom->dihedral_atom2[m];\n  tagint *dihedral_atom3 = atom->dihedral_atom3[m];\n  tagint *dihedral_atom4 = atom->dihedral_atom4[m];\n\n  int i = 0;\n  while (i < num_dihedral) {\n    found = 0;\n    if (dihedral_atom1[i] == id1 && dihedral_atom2[i] == id2) found = 1;\n    else if (dihedral_atom2[i] == id1 && dihedral_atom3[i] == id2) found = 1;\n    else if (dihedral_atom3[i] == id1 && dihedral_atom4[i] == id2) found = 1;\n    else if (dihedral_atom1[i] == id2 && dihedral_atom2[i] == id1) found = 1;\n    else if (dihedral_atom2[i] == id2 && dihedral_atom3[i] == id1) found = 1;\n    else if (dihedral_atom3[i] == id2 && dihedral_atom4[i] == id1) found = 1;\n    if (!found) i++;\n    else {\n      for (j = i; j < num_dihedral-1; j++) {\n        dihedral_type[j] = dihedral_type[j+1];\n        dihedral_atom1[j] = dihedral_atom1[j+1];\n        dihedral_atom2[j] = dihedral_atom2[j+1];\n        dihedral_atom3[j] = dihedral_atom3[j+1];\n        dihedral_atom4[j] = dihedral_atom4[j+1];\n      }\n      num_dihedral--;\n      ndihedrals++;\n    }\n  }\n\n  atom->num_dihedral[m] = num_dihedral;\n}\n\n/* ----------------------------------------------------------------------\n   break any impropers owned by atom M that include atom IDs 1 and 2\n   improper is broken if ID1-ID2 is one of 3 bonds in improper (I-J,I-K,I-L)\n------------------------------------------------------------------------- */\n\nvoid FixBondBreak::break_impropers(int m, tagint id1, tagint id2)\n{\n  int j,found;\n\n  int num_improper = atom->num_improper[m];\n  int *improper_type = atom->improper_type[m];\n  tagint *improper_atom1 = atom->improper_atom1[m];\n  tagint *improper_atom2 = atom->improper_atom2[m];\n  tagint *improper_atom3 = atom->improper_atom3[m];\n  tagint *improper_atom4 = atom->improper_atom4[m];\n\n  int i = 0;\n  while (i < num_improper) {\n    found = 0;\n    if (improper_atom1[i] == id1 && improper_atom2[i] == id2) found = 1;\n    else if (improper_atom1[i] == id1 && improper_atom3[i] == id2) found = 1;\n    else if (improper_atom1[i] == id1 && improper_atom4[i] == id2) found = 1;\n    else if (improper_atom1[i] == id2 && improper_atom2[i] == id1) found = 1;\n    else if (improper_atom1[i] == id2 && improper_atom3[i] == id1) found = 1;\n    else if (improper_atom1[i] == id2 && improper_atom4[i] == id1) found = 1;\n    if (!found) i++;\n    else {\n      for (j = i; j < num_improper-1; j++) {\n        improper_type[j] = improper_type[j+1];\n        improper_atom1[j] = improper_atom1[j+1];\n        improper_atom2[j] = improper_atom2[j+1];\n        improper_atom3[j] = improper_atom3[j+1];\n        improper_atom4[j] = improper_atom4[j+1];\n      }\n      num_improper--;\n      nimpropers++;\n    }\n  }\n\n  atom->num_improper[m] = num_improper;\n}\n\n/* ----------------------------------------------------------------------\n   remove all ID duplicates in copy from Nstart:Nstop-1\n   compare to all previous values in copy\n   return N decremented by any discarded duplicates\n------------------------------------------------------------------------- */\n\nint FixBondBreak::dedup(int nstart, int nstop, tagint *copy)\n{\n  int i;\n\n  int m = nstart;\n  while (m < nstop) {\n    for (i = 0; i < m; i++)\n      if (copy[i] == copy[m]) {\n        copy[m] = copy[nstop-1];\n        nstop--;\n        break;\n      }\n    if (i == m) m++;\n  }\n\n  return nstop;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::post_integrate_respa(int ilevel, int iloop)\n{\n  if (ilevel == nlevels_respa-1) post_integrate();\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondBreak::pack_forward_comm(int n, int *list, double *buf,\n                                    int pbc_flag, int *pbc)\n{\n  int i,j,k,m,ns;\n\n  if (commflag == 1) {\n    m = 0;\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = ubuf(partner[j]).d;\n      buf[m++] = probability[j];\n    }\n    return m;\n  }\n\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = ubuf(finalpartner[j]).d;\n    ns = nspecial[j][0];\n    buf[m++] = ubuf(ns).d;\n    for (k = 0; k < ns; k++)\n      buf[m++] = ubuf(special[j][k]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,j,m,ns,last;\n\n  if (commflag == 1) {\n    m = 0;\n    last = first + n;\n    for (i = first; i < last; i++) {\n      partner[i] = (tagint) ubuf(buf[m++]).i;\n      probability[i] = buf[m++];\n    }\n\n  } else {\n\n    int **nspecial = atom->nspecial;\n    tagint **special = atom->special;\n\n    m = 0;\n    last = first + n;\n    for (i = first; i < last; i++) {\n      finalpartner[i] = (tagint) ubuf(buf[m++]).i;\n      ns = (int) ubuf(buf[m++]).i;\n      nspecial[i][0] = ns;\n      for (j = 0; j < ns; j++)\n        special[i][j] = (tagint) ubuf(buf[m++]).i;\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondBreak::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    buf[m++] = ubuf(partner[i]).d;\n    buf[m++] = distsq[i];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    if (buf[m+1] > distsq[j]) {\n      partner[j] = (tagint) ubuf(buf[m++]).i;\n      distsq[j] = buf[m++];\n    } else m += 2;\n  }\n}\n\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::print_bb()\n{\n  for (int i = 0; i < atom->nlocal; i++) {\n    printf(\"TAG \" TAGINT_FORMAT \": %d nbonds: \",atom->tag[i],atom->num_bond[i]);\n    for (int j = 0; j < atom->num_bond[i]; j++) {\n      printf(\" %d\",atom->bond_atom[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d nangles: \",atom->tag[i],atom->num_angle[i]);\n    for (int j = 0; j < atom->num_angle[i]; j++) {\n      printf(\" %d %d %d,\",atom->angle_atom1[i][j],\n\t     atom->angle_atom2[i][j],atom->angle_atom3[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d ndihedrals: \",atom->tag[i],atom->num_dihedral[i]);\n    for (int j = 0; j < atom->num_dihedral[i]; j++) {\n      printf(\" %d %d %d %d,\",atom->dihedral_atom1[i][j],\n\t     atom->dihedral_atom2[i][j],atom->dihedral_atom3[i][j],\n\t     atom->dihedral_atom4[i][j]);\n    }\n    printf(\"\\n\");\n    printf(\"TAG \" TAGINT_FORMAT \": %d %d %d nspecial: \",atom->tag[i],\n\t   atom->nspecial[i][0],atom->nspecial[i][1],atom->nspecial[i][2]);\n    for (int j = 0; j < atom->nspecial[i][2]; j++) {\n      printf(\" %d\",atom->special[i][j]);\n    }\n    printf(\"\\n\");\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondBreak::print_copy(const char *str, tagint m,\n                              int n1, int n2, int n3, int *v)\n{\n  printf(\"%s %i: %d %d %d nspecial: \",str,m,n1,n2,n3);\n  for (int j = 0; j < n3; j++) printf(\" %d\",v[j]);\n  printf(\"\\n\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble FixBondBreak::compute_vector(int n)\n{\n  if (n == 0) return (double) breakcount;\n  return (double) breakcounttotal;\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble FixBondBreak::memory_usage()\n{\n  int nmax = atom->nmax;\n  double bytes = 2*nmax * sizeof(tagint);\n  bytes += nmax * sizeof(double);\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Pavel Elkind (Gothenburg University)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_lj_cut_tip4p_cut.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"domain.h\"\n#include \"angle.h\"\n#include \"bond.h\"\n#include \"comm.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCutTIP4PCut::PairLJCutTIP4PCut(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  writedata = 1;\n\n  nmax = 0;\n  hneigh = NULL;\n  newsite = NULL;\n\n  // TIP4P cannot compute virial as F dot r\n  // due to finding bonded H atoms which are not near O atom\n\n  no_virial_fdotr_compute = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCutTIP4PCut::~PairLJCutTIP4PCut()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n\n    memory->destroy(cut_lj);\n    memory->destroy(cut_ljsq);\n    memory->destroy(epsilon);\n    memory->destroy(sigma);\n    memory->destroy(lj1);\n    memory->destroy(lj2);\n    memory->destroy(lj3);\n    memory->destroy(lj4);\n    memory->destroy(offset);\n  }\n\n  memory->destroy(hneigh);\n  memory->destroy(newsite);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,inum,jnum,itype,jtype;\n  double qtmp,xtmp,ytmp,ztmp,delx,dely,delz,evdwl,ecoul;\n  double rsq,r2inv,r6inv,forcecoul,forcelj,factor_lj,factor_coul;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  int key;\n  int n,vlist[6];\n  int iH1,iH2,jH1,jH2;\n  double cforce;\n  double fO[3],fH[3],fd[3],v[6];\n  double *x1,*x2,*xH1,*xH2;\n\n  evdwl = ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  // reallocate hneigh & newsite if necessary\n  // initialize hneigh[0] to -1 on steps when reneighboring occurred\n  // initialize hneigh[2] to 0 every step\n\n  int nlocal = atom->nlocal;\n  int nall = nlocal + atom->nghost;\n\n  if (atom->nmax > nmax) {\n    nmax = atom->nmax;\n    memory->destroy(hneigh);\n    memory->create(hneigh,nmax,3,\"pair:hneigh\");\n    memory->destroy(newsite);\n    memory->create(newsite,nmax,3,\"pair:newsite\");\n  }\n  if (neighbor->ago == 0)\n    for (i = 0; i < nall; i++) hneigh[i][0] = -1;\n  for (i = 0; i < nall; i++) hneigh[i][2] = 0;\n\n  double **f = atom->f;\n  double **x = atom->x;\n  double *q = atom->q;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  double *special_lj = force->special_lj;\n  double *special_coul = force->special_coul;\n  int newton_pair = force->newton_pair;\n  double qqrd2e = force->qqrd2e;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    qtmp = q[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n\n    if (itype == typeO) {\n      if (hneigh[i][0] < 0) {\n        iH1 = atom->map(tag[i] + 1);\n        iH2 = atom->map(tag[i] + 2);\n        if (iH1 == -1 || iH2 == -1)\n          error->one(FLERR,\"TIP4P hydrogen is missing\");\n        if (atom->type[iH1] != typeH || atom->type[iH2] != typeH)\n          error->one(FLERR,\"TIP4P hydrogen has incorrect atom type\");\n        // set iH1,iH2 to index of closest image to O\n        iH1 = domain->closest_image(i,iH1);\n        iH2 = domain->closest_image(i,iH2);\n        compute_newsite(x[i],x[iH1],x[iH2],newsite[i]);\n        hneigh[i][0] = iH1;\n        hneigh[i][1] = iH2;\n        hneigh[i][2] = 1;\n\n      } else {\n        iH1 = hneigh[i][0];\n        iH2 = hneigh[i][1];\n        if (hneigh[i][2] == 0) {\n          hneigh[i][2] = 1;\n          compute_newsite(x[i],x[iH1],x[iH2],newsite[i]);\n        }\n      }\n      x1 = newsite[i];\n    } else x1 = x[i];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_lj = special_lj[sbmask(j)];\n      factor_coul = special_coul[sbmask(j)];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      jtype = type[j];\n\n      // LJ interaction based on true rsq\n\n      if (rsq < cut_ljsq[itype][jtype]) {\n        r2inv = 1.0/rsq;\n        r6inv = r2inv*r2inv*r2inv;\n        forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n        forcelj *= factor_lj * r2inv;\n\n        f[i][0] += delx*forcelj;\n        f[i][1] += dely*forcelj;\n        f[i][2] += delz*forcelj;\n        f[j][0] -= delx*forcelj;\n        f[j][1] -= dely*forcelj;\n        f[j][2] -= delz*forcelj;\n\n        if (eflag) {\n          evdwl = r6inv*(lj3[itype][jtype]*r6inv-lj4[itype][jtype]) -\n            offset[itype][jtype];\n          evdwl *= factor_lj;\n        } else evdwl = 0.0;\n\n        if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                             evdwl,0.0,forcelj,delx,dely,delz);\n      }\n\n      // adjust rsq and delxyz for off-site O charge(s) if necessary\n      // but only if they are within reach\n\n      if (rsq < cut_coulsqplus) {\n        if (itype == typeO || jtype == typeO) {\n\n          // if atom J = water O, set x2 = offset charge site\n          // else x2 = x of atom J\n\n          if (jtype == typeO) {\n            if (hneigh[j][0] < 0) {\n              jH1 = atom->map(tag[j] + 1);\n              jH2 = atom->map(tag[j] + 2);\n              if (jH1 == -1 || jH2 == -1)\n                error->one(FLERR,\"TIP4P hydrogen is missing\");\n              if (atom->type[jH1] != typeH || atom->type[jH2] != typeH)\n                error->one(FLERR,\"TIP4P hydrogen has incorrect atom type\");\n              // set jH1,jH2 to closest image to O\n              jH1 = domain->closest_image(j,jH1);\n              jH2 = domain->closest_image(j,jH2);\n              compute_newsite(x[j],x[jH1],x[jH2],newsite[j]);\n              hneigh[j][0] = jH1;\n              hneigh[j][1] = jH2;\n              hneigh[j][2] = 1;\n\n            } else {\n              jH1 = hneigh[j][0];\n              jH2 = hneigh[j][1];\n              if (hneigh[j][2] == 0) {\n                hneigh[j][2] = 1;\n                compute_newsite(x[j],x[jH1],x[jH2],newsite[j]);\n              }\n            }\n            x2 = newsite[j];\n          } else x2 = x[j];\n\n          delx = x1[0] - x2[0];\n          dely = x1[1] - x2[1];\n          delz = x1[2] - x2[2];\n          rsq = delx*delx + dely*dely + delz*delz;\n        }\n\n        // Coulombic interaction based on modified rsq\n\n        if (rsq < cut_coulsq) {\n          r2inv = 1.0 / rsq;\n          forcecoul = qqrd2e * qtmp * q[j] * sqrt(r2inv);\n          cforce = factor_coul * forcecoul * r2inv;\n\n        // if i,j are not O atoms, force is applied directly;\n        // if i or j are O atoms, force is on fictitious atom & partitioned\n        // force partitioning due to Feenstra, J Comp Chem, 20, 786 (1999)\n        // f_f = fictitious force, fO = f_f (1 - 2 alpha), fH = alpha f_f\n        // preserves total force and torque on water molecule\n        // virial = sum(r x F) where each water's atoms are near xi and xj\n        // vlist stores 2,4,6 atoms whose forces contribute to virial\n\n          n = 0;\n          key = 0;\n\n          if (itype != typeO) {\n            f[i][0] += delx * cforce;\n            f[i][1] += dely * cforce;\n            f[i][2] += delz * cforce;\n\n            if (vflag) {\n              v[0] = x[i][0] * delx * cforce;\n              v[1] = x[i][1] * dely * cforce;\n              v[2] = x[i][2] * delz * cforce;\n              v[3] = x[i][0] * dely * cforce;\n              v[4] = x[i][0] * delz * cforce;\n              v[5] = x[i][1] * delz * cforce;\n            }\n            vlist[n++] = i;\n\n          } else {\n            key++;\n\n            fd[0] = delx*cforce;\n            fd[1] = dely*cforce;\n            fd[2] = delz*cforce;\n\n            fO[0] = fd[0]*(1.0 - alpha);\n            fO[1] = fd[1]*(1.0 - alpha);\n            fO[2] = fd[2]*(1.0 - alpha);\n\n            fH[0] = 0.5 * alpha * fd[0];\n            fH[1] = 0.5 * alpha * fd[1];\n            fH[2] = 0.5 * alpha * fd[2];\n\n            f[i][0] += fO[0];\n            f[i][1] += fO[1];\n            f[i][2] += fO[2];\n\n            f[iH1][0] += fH[0];\n            f[iH1][1] += fH[1];\n            f[iH1][2] += fH[2];\n\n            f[iH2][0] += fH[0];\n            f[iH2][1] += fH[1];\n            f[iH2][2] += fH[2];\n\n            if (vflag) {\n              xH1 = x[iH1];\n              xH2 = x[iH2];\n              v[0] = x[i][0]*fO[0] + xH1[0]*fH[0] + xH2[0]*fH[0];\n              v[1] = x[i][1]*fO[1] + xH1[1]*fH[1] + xH2[1]*fH[1];\n              v[2] = x[i][2]*fO[2] + xH1[2]*fH[2] + xH2[2]*fH[2];\n              v[3] = x[i][0]*fO[1] + xH1[0]*fH[1] + xH2[0]*fH[1];\n              v[4] = x[i][0]*fO[2] + xH1[0]*fH[2] + xH2[0]*fH[2];\n              v[5] = x[i][1]*fO[2] + xH1[1]*fH[2] + xH2[1]*fH[2];\n            }\n            vlist[n++] = i;\n            vlist[n++] = iH1;\n            vlist[n++] = iH2;\n          }\n\n          if (jtype != typeO) {\n            f[j][0] -= delx * cforce;\n            f[j][1] -= dely * cforce;\n            f[j][2] -= delz * cforce;\n\n            if (vflag) {\n              v[0] -= x[j][0] * delx * cforce;\n              v[1] -= x[j][1] * dely * cforce;\n              v[2] -= x[j][2] * delz * cforce;\n              v[3] -= x[j][0] * dely * cforce;\n              v[4] -= x[j][0] * delz * cforce;\n              v[5] -= x[j][1] * delz * cforce;\n            }\n            vlist[n++] = j;\n\n          } else {\n            key += 2;\n\n            fd[0] = -delx*cforce;\n            fd[1] = -dely*cforce;\n            fd[2] = -delz*cforce;\n\n            fO[0] = fd[0]*(1 - alpha);\n            fO[1] = fd[1]*(1 - alpha);\n            fO[2] = fd[2]*(1 - alpha);\n\n            fH[0] = 0.5 * alpha * fd[0];\n            fH[1] = 0.5 * alpha * fd[1];\n            fH[2] = 0.5 * alpha * fd[2];\n\n            f[j][0] += fO[0];\n            f[j][1] += fO[1];\n            f[j][2] += fO[2];\n\n            f[jH1][0] += fH[0];\n            f[jH1][1] += fH[1];\n            f[jH1][2] += fH[2];\n\n            f[jH2][0] += fH[0];\n            f[jH2][1] += fH[1];\n            f[jH2][2] += fH[2];\n\n            if (vflag) {\n              xH1 = x[jH1];\n              xH2 = x[jH2];\n              v[0] += x[j][0]*fO[0] + xH1[0]*fH[0] + xH2[0]*fH[0];\n              v[1] += x[j][1]*fO[1] + xH1[1]*fH[1] + xH2[1]*fH[1];\n              v[2] += x[j][2]*fO[2] + xH1[2]*fH[2] + xH2[2]*fH[2];\n              v[3] += x[j][0]*fO[1] + xH1[0]*fH[1] + xH2[0]*fH[1];\n              v[4] += x[j][0]*fO[2] + xH1[0]*fH[2] + xH2[0]*fH[2];\n              v[5] += x[j][1]*fO[2] + xH1[1]*fH[2] + xH2[1]*fH[2];\n            }\n            vlist[n++] = j;\n            vlist[n++] = jH1;\n            vlist[n++] = jH2;\n          }\n\n          if (eflag) {\n            ecoul = qqrd2e * qtmp * q[j] * sqrt(r2inv);\n            ecoul *= factor_coul;\n          } else ecoul = 0.0;\n\n          if (evflag) ev_tally_tip4p(key,vlist,v,ecoul,alpha);\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  memory->create(cut_lj,n+1,n+1,\"pair:cut_lj\");\n  memory->create(cut_ljsq,n+1,n+1,\"pair:cut_ljsq\");\n  memory->create(epsilon,n+1,n+1,\"pair:epsilon\");\n  memory->create(sigma,n+1,n+1,\"pair:sigma\");\n  memory->create(lj1,n+1,n+1,\"pair:lj1\");\n  memory->create(lj2,n+1,n+1,\"pair:lj2\");\n  memory->create(lj3,n+1,n+1,\"pair:lj3\");\n  memory->create(lj4,n+1,n+1,\"pair:lj4\");\n  memory->create(offset,n+1,n+1,\"pair:offset\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::settings(int narg, char **arg)\n{\n  if (narg < 6 || narg > 7) error->all(FLERR,\"Illegal pair_style command\");\n\n  typeO = force->inumeric(FLERR,arg[0]);\n  typeH = force->inumeric(FLERR,arg[1]);\n  typeB = force->inumeric(FLERR,arg[2]);\n  typeA = force->inumeric(FLERR,arg[3]);\n  qdist = force->numeric(FLERR,arg[4]);\n\n  cut_lj_global = force->numeric(FLERR,arg[5]);\n  if (narg == 6) cut_coul = cut_lj_global;\n  else cut_coul = force->numeric(FLERR,arg[6]);\n\n  cut_coulsq = cut_coul * cut_coul;\n  cut_coulsqplus = (cut_coul + 2.0*qdist) * (cut_coul + 2.0*qdist);\n\n  if (allocated) {\n    int i,j;\n    for (i = 1; i <= atom->ntypes; i++)\n      for (j = i; j <= atom->ntypes; j++)\n        if (setflag[i][j]) cut_lj[i][j] = cut_lj_global;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::coeff(int narg, char **arg)\n{\n  if (narg < 4 || narg > 5)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n\n  double epsilon_one = force->numeric(FLERR,arg[2]);\n  double sigma_one = force->numeric(FLERR,arg[3]);\n\n  double cut_lj_one = cut_lj_global;\n  if (narg == 5) cut_lj_one = force->numeric(FLERR,arg[4]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    for (int j = MAX(jlo,i); j <= jhi; j++) {\n      epsilon[i][j] = epsilon_one;\n      sigma[i][j] = sigma_one;\n      cut_lj[i][j] = cut_lj_one;\n      setflag[i][j] = 1;\n      count++;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style lj/cut/tip4p/cut requires atom IDs\");\n  if (!force->newton_pair)\n    error->all(FLERR,\n               \"Pair style lj/cut/tip4p/cut requires newton pair on\");\n  if (!atom->q_flag)\n    error->all(FLERR,\n               \"Pair style lj/cut/tip4p/cut requires atom attribute q\");\n  if (force->bond == NULL)\n    error->all(FLERR,\"Must use a bond style with TIP4P potential\");\n  if (force->angle == NULL)\n    error->all(FLERR,\"Must use an angle style with TIP4P potential\");\n\n  neighbor->request(this,instance_me);\n\n  // set alpha parameter\n\n  double theta = force->angle->equilibrium_angle(typeA);\n  double blen = force->bond->equilibrium_distance(typeB);\n  alpha = qdist / (cos(0.5*theta) * blen);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairLJCutTIP4PCut::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) {\n    epsilon[i][j] = mix_energy(epsilon[i][i],epsilon[j][j],\n                               sigma[i][i],sigma[j][j]);\n    sigma[i][j] = mix_distance(sigma[i][i],sigma[j][j]);\n    cut_lj[i][j] = mix_distance(cut_lj[i][i],cut_lj[j][j]);\n  }\n\n  // include TIP4P qdist in full cutoff, qdist = 0.0 if not TIP4P\n\n  double cut = MAX(cut_lj[i][j],cut_coul+2.0*qdist);\n  cut_ljsq[i][j] = cut_lj[i][j] * cut_lj[i][j];\n\n  lj1[i][j] = 48.0 * epsilon[i][j] * pow(sigma[i][j],12.0);\n  lj2[i][j] = 24.0 * epsilon[i][j] * pow(sigma[i][j],6.0);\n  lj3[i][j] = 4.0 * epsilon[i][j] * pow(sigma[i][j],12.0);\n  lj4[i][j] = 4.0 * epsilon[i][j] * pow(sigma[i][j],6.0);\n\n  if (offset_flag && (cut_lj[i][j] > 0.0)) {\n    double ratio = sigma[i][j] / cut_lj[i][j];\n    offset[i][j] = 4.0 * epsilon[i][j] * (pow(ratio,12.0) - pow(ratio,6.0));\n  } else offset[i][j] = 0.0;\n\n  cut_ljsq[j][i] = cut_ljsq[i][j];\n  lj1[j][i] = lj1[i][j];\n  lj2[j][i] = lj2[i][j];\n  lj3[j][i] = lj3[i][j];\n  lj4[j][i] = lj4[i][j];\n  offset[j][i] = offset[i][j];\n\n  // compute I,J contribution to long-range tail correction\n  // count total # of atoms of type I and J via Allreduce\n\n  if (tail_flag) {\n    int *type = atom->type;\n    int nlocal = atom->nlocal;\n\n    double count[2],all[2];\n    count[0] = count[1] = 0.0;\n    for (int k = 0; k < nlocal; k++) {\n      if (type[k] == i) count[0] += 1.0;\n      if (type[k] == j) count[1] += 1.0;\n    }\n    MPI_Allreduce(count,all,2,MPI_DOUBLE,MPI_SUM,world);\n\n    double sig2 = sigma[i][j]*sigma[i][j];\n    double sig6 = sig2*sig2*sig2;\n    double rc3 = cut_lj[i][j]*cut_lj[i][j]*cut_lj[i][j];\n    double rc6 = rc3*rc3;\n    double rc9 = rc3*rc6;\n    etail_ij = 8.0*MY_PI*all[0]*all[1]*epsilon[i][j] *\n      sig6 * (sig6 - 3.0*rc6) / (9.0*rc9);\n    ptail_ij = 16.0*MY_PI*all[0]*all[1]*epsilon[i][j] *\n      sig6 * (2.0*sig6 - 3.0*rc6) / (9.0*rc9);\n  }\n\n  // check that LJ epsilon = 0.0 for water H\n  // set LJ cutoff to 0.0 for any interaction involving water H\n  // so LJ term isn't calculated in compute()\n\n  if ((i == typeH && epsilon[i][i] != 0.0) ||\n      (j == typeH && epsilon[j][j] != 0.0))\n    error->all(FLERR,\"Water H epsilon must be 0.0 for \"\n               \"pair style lj/cut/tip4p/cut\");\n\n  if (i == typeH || j == typeH)\n    cut_ljsq[j][i] = cut_ljsq[i][j] = 0.0;\n\n  return cut;\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::write_restart(FILE *fp)\n{\n  write_restart_settings(fp);\n\n  int i,j;\n  for (i = 1; i <= atom->ntypes; i++) {\n    for (j = i; j <= atom->ntypes; j++) {\n      fwrite(&setflag[i][j],sizeof(int),1,fp);\n      if (setflag[i][j]) {\n        fwrite(&epsilon[i][j],sizeof(double),1,fp);\n        fwrite(&sigma[i][j],sizeof(double),1,fp);\n        fwrite(&cut_lj[i][j],sizeof(double),1,fp);\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::read_restart(FILE *fp)\n{\n  read_restart_settings(fp);\n  allocate();\n\n  int i,j;\n  int me = comm->me;\n  for (i = 1; i <= atom->ntypes; i++) {\n    for (j = i; j <= atom->ntypes; j++) {\n      if (me == 0) fread(&setflag[i][j],sizeof(int),1,fp);\n      MPI_Bcast(&setflag[i][j],1,MPI_INT,0,world);\n      if (setflag[i][j]) {\n        if (me == 0) {\n          fread(&epsilon[i][j],sizeof(double),1,fp);\n          fread(&sigma[i][j],sizeof(double),1,fp);\n          fread(&cut_lj[i][j],sizeof(double),1,fp);\n        }\n        MPI_Bcast(&epsilon[i][j],1,MPI_DOUBLE,0,world);\n        MPI_Bcast(&sigma[i][j],1,MPI_DOUBLE,0,world);\n        MPI_Bcast(&cut_lj[i][j],1,MPI_DOUBLE,0,world);\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::write_restart_settings(FILE *fp)\n{\n  fwrite(&typeO,sizeof(int),1,fp);\n  fwrite(&typeH,sizeof(int),1,fp);\n  fwrite(&typeB,sizeof(int),1,fp);\n  fwrite(&typeA,sizeof(int),1,fp);\n  fwrite(&qdist,sizeof(double),1,fp);\n\n  fwrite(&cut_lj_global,sizeof(double),1,fp);\n  fwrite(&cut_coul,sizeof(double),1,fp);\n  fwrite(&offset_flag,sizeof(int),1,fp);\n  fwrite(&mix_flag,sizeof(int),1,fp);\n  fwrite(&tail_flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::read_restart_settings(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&typeO,sizeof(int),1,fp);\n    fread(&typeH,sizeof(int),1,fp);\n    fread(&typeB,sizeof(int),1,fp);\n    fread(&typeA,sizeof(int),1,fp);\n    fread(&qdist,sizeof(double),1,fp);\n\n    fread(&cut_lj_global,sizeof(double),1,fp);\n    fread(&cut_coul,sizeof(double),1,fp);\n    fread(&offset_flag,sizeof(int),1,fp);\n    fread(&mix_flag,sizeof(int),1,fp);\n    fread(&tail_flag,sizeof(int),1,fp);\n  }\n\n  MPI_Bcast(&typeO,1,MPI_INT,0,world);\n  MPI_Bcast(&typeH,1,MPI_INT,0,world);\n  MPI_Bcast(&typeB,1,MPI_INT,0,world);\n  MPI_Bcast(&typeA,1,MPI_INT,0,world);\n  MPI_Bcast(&qdist,1,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&cut_lj_global,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cut_coul,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&offset_flag,1,MPI_INT,0,world);\n  MPI_Bcast(&mix_flag,1,MPI_INT,0,world);\n  MPI_Bcast(&tail_flag,1,MPI_INT,0,world);\n\n  cut_coulsq = cut_coul * cut_coul;\n  cut_coulsqplus = (cut_coul + 2.0*qdist) * (cut_coul + 2.0*qdist);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ntypes; i++)\n    fprintf(fp,\"%d %g %g\\n\",i,epsilon[i][i],sigma[i][i]);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes all pairs to data file\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::write_data_all(FILE *fp)\n{\n  for (int i = 1; i <= atom->ntypes; i++)\n    for (int j = i; j <= atom->ntypes; j++)\n      fprintf(fp,\"%d %d %g %g %g\\n\",i,j,epsilon[i][j],sigma[i][j],cut_lj[i][j]);\n}\n\n/* ----------------------------------------------------------------------\n  compute position xM of fictitious charge site for O atom and 2 H atoms\n  return it as xM\n------------------------------------------------------------------------- */\n\nvoid PairLJCutTIP4PCut::compute_newsite(double *xO,  double *xH1,\n                                        double *xH2, double *xM)\n{\n  double delx1 = xH1[0] - xO[0];\n  double dely1 = xH1[1] - xO[1];\n  double delz1 = xH1[2] - xO[2];\n\n  double delx2 = xH2[0] - xO[0];\n  double dely2 = xH2[1] - xO[1];\n  double delz2 = xH2[2] - xO[2];\n\n  xM[0] = xO[0] + alpha * 0.5 * (delx1 + delx2);\n  xM[1] = xO[1] + alpha * 0.5 * (dely1 + dely2);\n  xM[2] = xO[2] + alpha * 0.5 * (delz1 + delz2);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid *PairLJCutTIP4PCut::extract(const char *str, int &dim)\n{\n  dim = 0;\n  if (strcmp(str,\"cut_coul\") == 0) return (void *) &cut_coul;\n  dim = 2;\n  if (strcmp(str,\"epsilon\") == 0) return (void *) epsilon;\n  if (strcmp(str,\"sigma\") == 0) return (void *) sigma;\n  return NULL;\n}\n/* ----------------------------------------------------------------------\n   memory usage of hneigh\n------------------------------------------------------------------------- */\n\ndouble PairLJCutTIP4PCut::memory_usage()\n{\n  double bytes = maxeatom * sizeof(double);\n  bytes += maxvatom*6 * sizeof(double);\n  bytes += 2 * nmax * sizeof(double);\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier (SNL)\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include \"dihedral_harmonic.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n\n/* ---------------------------------------------------------------------- */\n\nDihedralHarmonic::DihedralHarmonic(LAMMPS *lmp) : Dihedral(lmp)\n{\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nDihedralHarmonic::~DihedralHarmonic()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(sign);\n    memory->destroy(multiplicity);\n    memory->destroy(cos_shift);\n    memory->destroy(sin_shift);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralHarmonic::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,i,m,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double edihedral,f1[3],f2[3],f3[3],f4[3];\n  double ax,ay,az,bx,by,bz,rasq,rbsq,rgsq,rg,rginv,ra2inv,rb2inv,rabinv;\n  double df,df1,ddf1,fg,hg,fga,hgb,gaa,gbb;\n  double dtfx,dtfy,dtfz,dtgx,dtgy,dtgz,dthx,dthy,dthz;\n  double c,s,p,sx2,sy2,sz2;\n\n  edihedral = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **dihedrallist = neighbor->dihedrallist;\n  int ndihedrallist = neighbor->ndihedrallist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < ndihedrallist; n++) {\n    i1 = dihedrallist[n][0];\n    i2 = dihedrallist[n][1];\n    i3 = dihedrallist[n][2];\n    i4 = dihedrallist[n][3];\n    type = dihedrallist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    // c,s calculation\n\n    ax = vb1y*vb2zm - vb1z*vb2ym;\n    ay = vb1z*vb2xm - vb1x*vb2zm;\n    az = vb1x*vb2ym - vb1y*vb2xm;\n    bx = vb3y*vb2zm - vb3z*vb2ym;\n    by = vb3z*vb2xm - vb3x*vb2zm;\n    bz = vb3x*vb2ym - vb3y*vb2xm;\n\n    rasq = ax*ax + ay*ay + az*az;\n    rbsq = bx*bx + by*by + bz*bz;\n    rgsq = vb2xm*vb2xm + vb2ym*vb2ym + vb2zm*vb2zm;\n    rg = sqrt(rgsq);\n\n    rginv = ra2inv = rb2inv = 0.0;\n    if (rg > 0) rginv = 1.0/rg;\n    if (rasq > 0) ra2inv = 1.0/rasq;\n    if (rbsq > 0) rb2inv = 1.0/rbsq;\n    rabinv = sqrt(ra2inv*rb2inv);\n\n    c = (ax*bx + ay*by + az*bz)*rabinv;\n    s = rg*rabinv*(ax*vb3x + ay*vb3y + az*vb3z);\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Dihedral problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    m = multiplicity[type];\n    p = 1.0;\n    ddf1 = df1 = 0.0;\n\n    for (i = 0; i < m; i++) {\n      ddf1 = p*c - df1*s;\n      df1 = p*s + df1*c;\n      p = ddf1;\n    }\n\n    p = p*cos_shift[type] + df1*sin_shift[type];\n    df1 = df1*cos_shift[type] - ddf1*sin_shift[type];\n    df1 *= -m;\n    p += 1.0;\n\n    if (m == 0) {\n      p = 1.0 + cos_shift[type];\n      df1 = 0.0;\n    }\n\n    if (eflag) edihedral = k[type] * p;\n\n    fg = vb1x*vb2xm + vb1y*vb2ym + vb1z*vb2zm;\n    hg = vb3x*vb2xm + vb3y*vb2ym + vb3z*vb2zm;\n    fga = fg*ra2inv*rginv;\n    hgb = hg*rb2inv*rginv;\n    gaa = -ra2inv*rg;\n    gbb = rb2inv*rg;\n\n    dtfx = gaa*ax;\n    dtfy = gaa*ay;\n    dtfz = gaa*az;\n    dtgx = fga*ax - hgb*bx;\n    dtgy = fga*ay - hgb*by;\n    dtgz = fga*az - hgb*bz;\n    dthx = gbb*bx;\n    dthy = gbb*by;\n    dthz = gbb*bz;\n\n    df = -k[type] * df1;\n\n    sx2 = df*dtgx;\n    sy2 = df*dtgy;\n    sz2 = df*dtgz;\n\n    f1[0] = df*dtfx;\n    f1[1] = df*dtfy;\n    f1[2] = df*dtfz;\n\n    f2[0] = sx2 - f1[0];\n    f2[1] = sy2 - f1[1];\n    f2[2] = sz2 - f1[2];\n\n    f4[0] = df*dthx;\n    f4[1] = df*dthy;\n    f4[2] = df*dthz;\n\n    f3[0] = -sx2 - f4[0];\n    f3[1] = -sy2 - f4[1];\n    f3[2] = -sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,edihedral,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralHarmonic::allocate()\n{\n  allocated = 1;\n  int n = atom->ndihedraltypes;\n\n  memory->create(k,n+1,\"dihedral:k\");\n  memory->create(sign,n+1,\"dihedral:sign\");\n  memory->create(multiplicity,n+1,\"dihedral:multiplicity\");\n  memory->create(cos_shift,n+1,\"dihedral:cos_shift\");\n  memory->create(sin_shift,n+1,\"dihedral:sin_shift\");\n\n  memory->create(setflag,n+1,\"dihedral:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid DihedralHarmonic::coeff(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->ndihedraltypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  int sign_one = force->inumeric(FLERR,arg[2]);\n  int multiplicity_one = force->inumeric(FLERR,arg[3]);\n\n  // require sign = +/- 1 for backwards compatibility\n  // arbitrary phase angle shift could be allowed, but would break\n  //   backwards compatibility and is probably not needed\n\n  if (sign_one != -1 && sign_one != 1)\n    error->all(FLERR,\"Incorrect sign arg for dihedral coefficients\");\n  if (multiplicity_one < 0)\n    error->all(FLERR,\"Incorrect multiplicity arg for dihedral coefficients\");\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    sign[i] = sign_one;\n    if (sign[i] == 1) {\n      cos_shift[i] = 1;\n      sin_shift[i] = 0;\n    } else {\n      cos_shift[i] = -1;\n      sin_shift[i] = 0;\n    }\n    multiplicity[i] = multiplicity_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid DihedralHarmonic::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&sign[1],sizeof(int),atom->ndihedraltypes,fp);\n  fwrite(&multiplicity[1],sizeof(int),atom->ndihedraltypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid DihedralHarmonic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&sign[1],sizeof(int),atom->ndihedraltypes,fp);\n    fread(&multiplicity[1],sizeof(int),atom->ndihedraltypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sign[1],atom->ndihedraltypes,MPI_INT,0,world);\n  MPI_Bcast(&multiplicity[1],atom->ndihedraltypes,MPI_INT,0,world);\n\n  for (int i = 1; i <= atom->ndihedraltypes; i++) {\n    setflag[i] = 1;\n    if (sign[i] == 1) {\n      cos_shift[i] = 1;\n      sin_shift[i] = 0;\n    } else {\n      cos_shift[i] = -1;\n      sin_shift[i] = 0;\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid DihedralHarmonic::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ndihedraltypes; i++)\n    fprintf(fp,\"%d %g %d %d\\n\",i,k[i],sign[i],multiplicity[i]);\n}\n\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifndef LMP_DIHEDRAL_H\n#define LMP_DIHEDRAL_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass Dihedral : protected Pointers {\n  friend class ThrOMP;\n  friend class FixOMP;\n public:\n  int allocated;\n  int *setflag;\n  int writedata;                     // 1 if writes coeffs to data file\n  double energy;                     // accumulated energy\n  double virial[6];                  // accumulated virial\n  double *eatom,**vatom;             // accumulated per-atom energy/virial\n\n  // KOKKOS host/device flag and data masks\n\n  ExecutionSpace execution_space;\n  unsigned int datamask_read,datamask_modify;\n  int copymode;\n\n  Dihedral(class LAMMPS *);\n  virtual ~Dihedral();\n  virtual void init();\n  virtual void init_style() {}\n  virtual void compute(int, int) = 0;\n  virtual void settings(int, char **) {}\n  virtual void coeff(int, char **) = 0;\n  virtual void write_restart(FILE *) = 0;\n  virtual void read_restart(FILE *) = 0;\n  virtual void write_data(FILE *) {}\n  virtual double memory_usage();\n\n protected:\n  int suffix_flag;             // suffix compatibility flag\n\n  int evflag;\n  int eflag_either,eflag_global,eflag_atom;\n  int vflag_either,vflag_global,vflag_atom;\n  int maxeatom,maxvatom;\n\n  void ev_setup(int, int, int alloc = 1);\n  void ev_tally(int, int, int, int, int, int, double,\n                double *, double *, double *, double, double, double,\n                double, double, double, double, double, double);\n};\n\n}\n\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Dihedral coeffs are not set\n\nNo dihedral coefficients have been assigned in the data file or via\nthe dihedral_coeff command.\n\nE: All dihedral coeffs are not set\n\nAll dihedral coefficients must be set in the data file or by the\ndihedral_coeff command before running a simulation.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier (SNL)\n     The lj-fsw/coul-fsh (force-switched and force-shifted) sections\n     were provided by Robert Meissner \n     and Lucio Colombi Ciacchi of Bremen University, Bremen, Germany,\n     with additional assistance from Robert A. Latour, Clemson University \n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_lj_charmmfsw_coul_charmmfsh.h\"\n#include \"atom.h\"\n#include \"update.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCharmmfswCoulCharmmfsh::PairLJCharmmfswCoulCharmmfsh(LAMMPS *lmp) : \n  Pair(lmp)\n{\n  implicit = 0;\n  mix_flag = ARITHMETIC;\n  writedata = 1;\n\n  // short-range/long-range flag accessed by DihedralCharmmfsw\n\n  dihedflag = 0;\n\n  // switch qqr2e from LAMMPS value to CHARMM value\n\n  if (strcmp(update->unit_style,\"real\") == 0) {\n    if ((comm->me == 0) && (force->qqr2e != force->qqr2e_charmm_real))\n      error->message(FLERR,\"Switching to CHARMM coulomb energy\"\n                     \" conversion constant\");\n    force->qqr2e = force->qqr2e_charmm_real;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nPairLJCharmmfswCoulCharmmfsh::~PairLJCharmmfswCoulCharmmfsh()\n{\n  if (!copymode) {\n    if (allocated) {\n      memory->destroy(setflag);\n      memory->destroy(cutsq);\n\n      memory->destroy(epsilon);\n      memory->destroy(sigma);\n      memory->destroy(eps14);\n      memory->destroy(sigma14);\n      memory->destroy(lj1);\n      memory->destroy(lj2);\n      memory->destroy(lj3);\n      memory->destroy(lj4);\n      memory->destroy(lj14_1);\n      memory->destroy(lj14_2);\n      memory->destroy(lj14_3);\n      memory->destroy(lj14_4);\n    }\n  }\n\n  // switch qqr2e back from CHARMM value to LAMMPS value\n\n  if (update && strcmp(update->unit_style,\"real\") == 0) {\n    if ((comm->me == 0) && (force->qqr2e == force->qqr2e_charmm_real))\n      error->message(FLERR,\"Restoring original LAMMPS coulomb energy\"\n                     \" conversion constant\");\n    force->qqr2e = force->qqr2e_lammps_real;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,inum,jnum,itype,jtype;\n  double qtmp,xtmp,ytmp,ztmp,delx,dely,delz,evdwl,evdwl12,evdwl6,ecoul,fpair;\n  double r,rinv,r3inv,rsq,r2inv,r6inv,forcecoul,forcelj,factor_coul,factor_lj;\n  double switch1;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  double *special_coul = force->special_coul;\n  double *special_lj = force->special_lj;\n  int newton_pair = force->newton_pair;\n  double qqrd2e = force->qqrd2e;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    qtmp = q[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_lj = special_lj[sbmask(j)];\n      factor_coul = special_coul[sbmask(j)];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cut_bothsq) {\n\tr2inv = 1.0/rsq;\n\tr = sqrt(rsq);\n\n\tif (rsq < cut_coulsq) {\n\t  forcecoul = qqrd2e * qtmp*q[j]*\n            (sqrt(r2inv) - r*cut_coulinv*cut_coulinv);\n\t} else forcecoul = 0.0;\n\n\tif (rsq < cut_ljsq) {\n\t  r6inv = r2inv*r2inv*r2inv;\n\t  jtype = type[j];\n\t  forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n\t  if (rsq > cut_lj_innersq) {\n\t    switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n\t      (cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n\t    forcelj = forcelj*switch1;\n\t  }\n\t} else forcelj = 0.0;\n\n\tfpair = (factor_coul*forcecoul + factor_lj*forcelj) * r2inv;\n\n\tf[i][0] += delx*fpair;\n\tf[i][1] += dely*fpair;\n\tf[i][2] += delz*fpair;\n\tif (newton_pair || j < nlocal) {\n\t  f[j][0] -= delx*fpair;\n\t  f[j][1] -= dely*fpair;\n\t  f[j][2] -= delz*fpair;\n\t}\n\n\tif (eflag) {\n\t  if (rsq < cut_coulsq) {\n\t    ecoul = qqrd2e * qtmp*q[j]*\n              (sqrt(r2inv) + cut_coulinv*cut_coulinv*r - 2.0*cut_coulinv);\n\t    ecoul *= factor_coul;\n\t  } else ecoul = 0.0;\n\t  if (rsq < cut_ljsq) {\n            if (rsq > cut_lj_innersq) {\n              rinv = 1.0/r;\n              r3inv = rinv*rinv*rinv;\n              evdwl12 = lj3[itype][jtype]*cut_lj6*denom_lj12 * \n                (r6inv - cut_lj6inv)*(r6inv - cut_lj6inv);\n              evdwl6 = -lj4[itype][jtype]*cut_lj3*denom_lj6 * \n                (r3inv - cut_lj3inv)*(r3inv - cut_lj3inv);;\n              evdwl = evdwl12 + evdwl6;\n            } else {\n              evdwl12 = r6inv*lj3[itype][jtype]*r6inv - \n                lj3[itype][jtype]*cut_lj_inner6inv*cut_lj6inv;\n              evdwl6 = -lj4[itype][jtype]*r6inv + \n                lj4[itype][jtype]*cut_lj_inner3inv*cut_lj3inv;\n              evdwl = evdwl12 + evdwl6;\n            }\n\t    evdwl *= factor_lj;\n\t  } else evdwl = 0.0;\n\t}\n\n\tif (evflag) ev_tally(i,j,nlocal,newton_pair,\n\t\t\t     evdwl,ecoul,fpair,delx,dely,delz);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  memory->create(epsilon,n+1,n+1,\"pair:epsilon\");\n  memory->create(sigma,n+1,n+1,\"pair:sigma\");\n  memory->create(eps14,n+1,n+1,\"pair:eps14\");\n  memory->create(sigma14,n+1,n+1,\"pair:sigma14\");\n  memory->create(lj1,n+1,n+1,\"pair:lj1\");\n  memory->create(lj2,n+1,n+1,\"pair:lj2\");\n  memory->create(lj3,n+1,n+1,\"pair:lj3\");\n  memory->create(lj4,n+1,n+1,\"pair:lj4\");\n  memory->create(lj14_1,n+1,n+1,\"pair:lj14_1\");\n  memory->create(lj14_2,n+1,n+1,\"pair:lj14_2\");\n  memory->create(lj14_3,n+1,n+1,\"pair:lj14_3\");\n  memory->create(lj14_4,n+1,n+1,\"pair:lj14_4\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n   unlike other pair styles,\n     there are no individual pair settings that these override\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::settings(int narg, char **arg)\n{\n  if (narg != 2 && narg != 3) \n    error->all(FLERR,\"Illegal pair_style command\");\n\n  cut_lj_inner = force->numeric(FLERR,arg[0]);\n  cut_lj = force->numeric(FLERR,arg[1]);\n  if (narg == 2) {\n    cut_coul = cut_lj;\n  } else {\n    cut_coul = force->numeric(FLERR,arg[2]);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::coeff(int narg, char **arg)\n{\n  if (narg != 4 && narg != 6) \n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n\n  double epsilon_one = force->numeric(FLERR,arg[2]);\n  double sigma_one = force->numeric(FLERR,arg[3]);\n  double eps14_one = epsilon_one;\n  double sigma14_one = sigma_one;\n  if (narg == 6) {\n    eps14_one = force->numeric(FLERR,arg[4]);\n    sigma14_one = force->numeric(FLERR,arg[5]);\n  }\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    for (int j = MAX(jlo,i); j <= jhi; j++) {\n      epsilon[i][j] = epsilon_one;\n      sigma[i][j] = sigma_one;\n      eps14[i][j] = eps14_one;\n      sigma14[i][j] = sigma14_one;\n      setflag[i][j] = 1;\n      count++;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::init_style()\n{\n  if (!atom->q_flag)\n    error->all(FLERR,\"Pair style lj/charmmfsw/coul/charmmfsh \"\n               \"requires atom attribute q\");\n\n  neighbor->request(this,instance_me);\n\n  // require cut_lj_inner < cut_lj\n\n  if (cut_lj_inner >= cut_lj)\n    error->all(FLERR,\"Pair inner lj cutoff >= Pair outer lj cutoff\");\n\n  cut_lj_innersq = cut_lj_inner * cut_lj_inner;\n  cut_ljsq = cut_lj * cut_lj;\n  cut_ljinv = 1.0/cut_lj;\n  cut_lj_innerinv = 1.0/cut_lj_inner;\n  cut_lj3 = cut_lj * cut_lj * cut_lj;\n  cut_lj3inv = cut_ljinv * cut_ljinv * cut_ljinv;\n  cut_lj_inner3inv = cut_lj_innerinv * cut_lj_innerinv * cut_lj_innerinv;\n  cut_lj_inner3 = cut_lj_inner * cut_lj_inner * cut_lj_inner;\n  cut_lj6 = cut_ljsq * cut_ljsq * cut_ljsq;\n  cut_lj6inv = cut_lj3inv * cut_lj3inv;\n  cut_lj_inner6inv = cut_lj_inner3inv * cut_lj_inner3inv;\n  cut_lj_inner6 = cut_lj_innersq * cut_lj_innersq * cut_lj_innersq;\n  cut_coulsq = cut_coul * cut_coul;\n  cut_coulinv = 1.0/cut_coul;\n  cut_bothsq = MAX(cut_ljsq,cut_coulsq);\n\n  denom_lj = (cut_ljsq-cut_lj_innersq) * (cut_ljsq-cut_lj_innersq) * \n    (cut_ljsq-cut_lj_innersq);\n  denom_lj12 = 1.0/(cut_lj6 - cut_lj_inner6);\n  denom_lj6 = 1.0/(cut_lj3 - cut_lj_inner3);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairLJCharmmfswCoulCharmmfsh::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) {\n    epsilon[i][j] = mix_energy(epsilon[i][i],epsilon[j][j],\n\t\t\t       sigma[i][i],sigma[j][j]);\n    sigma[i][j] = mix_distance(sigma[i][i],sigma[j][j]);\n    eps14[i][j] = mix_energy(eps14[i][i],eps14[j][j],\n\t\t\t       sigma14[i][i],sigma14[j][j]);\n    sigma14[i][j] = mix_distance(sigma14[i][i],sigma14[j][j]);\n  }\n\n  double cut = MAX(cut_lj,cut_coul);\n\n  lj1[i][j] = 48.0 * epsilon[i][j] * pow(sigma[i][j],12.0);\n  lj2[i][j] = 24.0 * epsilon[i][j] * pow(sigma[i][j],6.0);\n  lj3[i][j] = 4.0 * epsilon[i][j] * pow(sigma[i][j],12.0);\n  lj4[i][j] = 4.0 * epsilon[i][j] * pow(sigma[i][j],6.0);\n  lj14_1[i][j] = 48.0 * eps14[i][j] * pow(sigma14[i][j],12.0);\n  lj14_2[i][j] = 24.0 * eps14[i][j] * pow(sigma14[i][j],6.0);\n  lj14_3[i][j] = 4.0 * eps14[i][j] * pow(sigma14[i][j],12.0);\n  lj14_4[i][j] = 4.0 * eps14[i][j] * pow(sigma14[i][j],6.0);\n     \n  lj1[j][i] = lj1[i][j];\n  lj2[j][i] = lj2[i][j];\n  lj3[j][i] = lj3[i][j];\n  lj4[j][i] = lj4[i][j];\n  lj14_1[j][i] = lj14_1[i][j];\n  lj14_2[j][i] = lj14_2[i][j];\n  lj14_3[j][i] = lj14_3[i][j];\n  lj14_4[j][i] = lj14_4[i][j];\n\n  return cut;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ntypes; i++)\n    fprintf(fp,\"%d %g %g %g %g\\n\",\n            i,epsilon[i][i],sigma[i][i],eps14[i][i],sigma14[i][i]);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes all pairs to data file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::write_data_all(FILE *fp)\n{\n  for (int i = 1; i <= atom->ntypes; i++)\n    for (int j = i; j <= atom->ntypes; j++)\n      fprintf(fp,\"%d %d %g %g %g %g\\n\",i,j,\n              epsilon[i][j],sigma[i][j],eps14[i][j],sigma14[i][j]);\n}\n\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::write_restart(FILE *fp)\n{\n  write_restart_settings(fp);\n\n  int i,j;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      fwrite(&setflag[i][j],sizeof(int),1,fp);\n      if (setflag[i][j]) {\n        fwrite(&epsilon[i][j],sizeof(double),1,fp);\n        fwrite(&sigma[i][j],sizeof(double),1,fp);\n        fwrite(&eps14[i][j],sizeof(double),1,fp);\n        fwrite(&sigma14[i][j],sizeof(double),1,fp);\n      }\n    }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::read_restart(FILE *fp)\n{\n  read_restart_settings(fp);\n\n  allocate();\n\n  int i,j;\n  int me = comm->me;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      if (me == 0) fread(&setflag[i][j],sizeof(int),1,fp);\n      MPI_Bcast(&setflag[i][j],1,MPI_INT,0,world);\n      if (setflag[i][j]) {\n\tif (me == 0) {\n\t  fread(&epsilon[i][j],sizeof(double),1,fp);\n\t  fread(&sigma[i][j],sizeof(double),1,fp);\n\t  fread(&eps14[i][j],sizeof(double),1,fp);\n\t  fread(&sigma14[i][j],sizeof(double),1,fp);\n\t}\n\tMPI_Bcast(&epsilon[i][j],1,MPI_DOUBLE,0,world);\n\tMPI_Bcast(&sigma[i][j],1,MPI_DOUBLE,0,world);\n\tMPI_Bcast(&eps14[i][j],1,MPI_DOUBLE,0,world);\n\tMPI_Bcast(&sigma14[i][j],1,MPI_DOUBLE,0,world);\n      }\n    }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::write_restart_settings(FILE *fp)\n{\n  fwrite(&cut_lj_inner,sizeof(double),1,fp);\n  fwrite(&cut_lj,sizeof(double),1,fp);\n  fwrite(&cut_coul,sizeof(double),1,fp);\n  fwrite(&offset_flag,sizeof(int),1,fp);\n  fwrite(&mix_flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairLJCharmmfswCoulCharmmfsh::read_restart_settings(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&cut_lj_inner,sizeof(double),1,fp);\n    fread(&cut_lj,sizeof(double),1,fp);\n    fread(&cut_coul,sizeof(double),1,fp);\n    fread(&offset_flag,sizeof(int),1,fp);\n    fread(&mix_flag,sizeof(int),1,fp);\n  }\n  MPI_Bcast(&cut_lj_inner,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cut_lj,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cut_coul,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&offset_flag,1,MPI_INT,0,world);\n  MPI_Bcast(&mix_flag,1,MPI_INT,0,world);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairLJCharmmfswCoulCharmmfsh::\nsingle(int i, int j, int itype, int jtype,\n       double rsq, double factor_coul, double factor_lj, double &fforce)\n{\n  double r,rinv,r2inv,r3inv,r6inv,forcecoul,forcelj;\n  double phicoul,philj,philj12,philj6;\n  double switch1;\n\n  r2inv = 1.0/rsq;\n  r = sqrt(rsq);\n  rinv = 1.0/r;\n  if (rsq < cut_coulsq) {\n    forcecoul = force->qqrd2e * atom->q[i]*atom->q[j] * \n      (sqrt(r2inv) - r*cut_coulinv*cut_coulinv);\n  } else forcecoul = 0.0;\n\n  if (rsq < cut_ljsq) {\n    r6inv = r2inv*r2inv*r2inv;\n    r3inv = rinv*rinv*rinv;\n    forcelj = r6inv * (lj1[itype][jtype]*r6inv - lj2[itype][jtype]);\n    if (rsq > cut_lj_innersq) {\n      switch1 = (cut_ljsq-rsq) * (cut_ljsq-rsq) *\n\t(cut_ljsq + 2.0*rsq - 3.0*cut_lj_innersq) / denom_lj;\n      forcelj = forcelj*switch1;\n    }\n  } else forcelj = 0.0;\n\n  fforce = (factor_coul*forcecoul + factor_lj*forcelj) * r2inv;\n\n  double eng = 0.0;\n  if (rsq < cut_coulsq) {\n    phicoul = force->qqrd2e * atom->q[i]*atom->q[j] * \n      (sqrt(r2inv) + cut_coulinv*cut_coulinv*r - 2.0*cut_coulinv);\n    eng += factor_coul*phicoul;\n  }\n  if (rsq < cut_ljsq) {\n    if (rsq > cut_lj_innersq) {\n      philj12 = lj3[itype][jtype]*cut_lj6*denom_lj12 * \n        (r6inv - cut_lj6inv)*(r6inv - cut_lj6inv);\n      philj6 = -lj4[itype][jtype]*cut_lj3*denom_lj6 * \n        (r3inv - cut_lj3inv)*(r3inv - cut_lj3inv);;\n      philj = philj12 + philj6;\n    } else {\n      philj12 = r6inv*lj3[itype][jtype]*r6inv - \n        lj3[itype][jtype]*cut_lj_inner6inv*cut_lj6inv;\n      philj6 = -lj4[itype][jtype]*r6inv + \n        lj4[itype][jtype]*cut_lj_inner3inv*cut_lj3inv;\n      philj = philj12 + philj6;\n    }\n    eng += factor_lj*philj;\n  }\n\n  return eng;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid *PairLJCharmmfswCoulCharmmfsh::extract(const char *str, int &dim)\n{\n  dim = 2;\n  if (strcmp(str,\"lj14_1\") == 0) return (void *) lj14_1;\n  if (strcmp(str,\"lj14_2\") == 0) return (void *) lj14_2;\n  if (strcmp(str,\"lj14_3\") == 0) return (void *) lj14_3;\n  if (strcmp(str,\"lj14_4\") == 0) return (void *) lj14_4;\n\n  dim = 0;\n  if (strcmp(str,\"implicit\") == 0) return (void *) &implicit;\n\n  // info extracted by dihedral_charmmfsw\n\n  if (strcmp(str,\"cut_coul\") == 0) return (void *) &cut_coul;\n  if (strcmp(str,\"cut_lj_inner\") == 0) return (void *) &cut_lj_inner;\n  if (strcmp(str,\"cut_lj\") == 0) return (void *) &cut_lj;\n  if (strcmp(str,\"dihedflag\") == 0) return (void *) &dihedflag;\n\n  return NULL;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Kristof Bal (University of Antwerp, Belgium)\n------------------------------------------------------------------------- */\n\n#include \"fix_tfmc.h\"\n#include <mpi.h>\n#include <string.h>\n#include <math.h>\n#include <float.h>\n#include \"atom.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"group.h\"\n#include \"random_mars.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"memory.h\"\n#include \"modify.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\n\n/* ---------------------------------------------------------------------- */\n\nFixTFMC::FixTFMC(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg),\n  xd(NULL), rotflag(0), random_num(NULL)\n{\n  if (narg < 6) error->all(FLERR,\"Illegal fix tfmc command\");\n\n  // although we are not doing MD, we would like to use tfMC as an MD \"drop in\"\n  time_integrate = 1;\n\n  d_max = force->numeric(FLERR,arg[3]);\n  T_set = force->numeric(FLERR,arg[4]);\n  seed = force->inumeric(FLERR,arg[5]);\n\n  if (d_max <= 0) error->all(FLERR,\"Fix tfmc displacement length must be > 0\");\n  if (T_set <= 0) error->all(FLERR,\"Fix tfmc temperature must be > 0\");\n  if (seed <= 0) error->all(FLERR,\"Illegal fix tfmc random seed\");\n\n  // additional keywords\n\n  comflag = 0;\n  rotflag = 0;\n\n  int iarg = 6;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"com\") == 0) {\n      if (iarg+4 > narg) error->all(FLERR,\"Illegal fix tfmc command\");\n      comflag = 1;\n      xflag = force->inumeric(FLERR,arg[iarg+1]);\n      yflag = force->inumeric(FLERR,arg[iarg+2]);\n      zflag = force->inumeric(FLERR,arg[iarg+3]);\n      iarg += 4;\n    } else if (strcmp(arg[iarg],\"rot\") == 0) {\n      if (iarg+1 > narg) error->all(FLERR,\"Illegal fix tfmc command\");\n      rotflag = 1;\n      iarg += 1;\n    } else error->all(FLERR,\"Illegal fix tfmc command\");\n  }\n\n  // error checks\n  if (comflag)\n    if (xflag < 0 || xflag > 1 || yflag < 0 || yflag > 1 ||\n        zflag < 0 || zflag > 1)\n      error->all(FLERR,\"Illegal fix tfmc command\");\n\n  if (xflag + yflag + zflag == 0)\n    comflag = 0;\n\n  if (rotflag) {\n    xd = NULL;\n    nmax = -1;\n  }\n\n  random_num = new RanMars(lmp,seed + comm->me);\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixTFMC::~FixTFMC()\n{\n  delete random_num;\n  if (rotflag) {\n    memory->destroy(xd);\n    xd = NULL;\n    nmax = -1;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixTFMC::setmask()\n{\n  int mask = 0;\n  mask |= INITIAL_INTEGRATE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixTFMC::init()\n{\n  // shake cannot be handled because it requires velocities\n  // (and real MD in general)\n  int has_shake = 0;\n  for (int i = 0; i < modify->nfix; i++)\n    if (strcmp(modify->fix[i]->style,\"shake\") == 0) ++has_shake;\n\n  if (has_shake > 0)\n    error->all(FLERR,\"Fix tfmc is not compatible with fix shake\");\n\n  // obtain lowest mass in the system\n  // We do this here, in init(), rather than in initial_integrate().\n  // This might seem somewhat odd: after all, another atom could be added with a\n  // mass smaller than mass_min (in the case of a per-particle mass), so mass_min\n  // should change during the run. However, this would imply that the overall\n  // meaning of the input Delta is not very well-defined, because its meaning\n  // can change during the run. So we'll assume all particle types (in terms of\n  // possible masses) are defined before the run starts\n\n  double *rmass = atom->rmass;\n  double *mass = atom->mass;\n  int *type = atom->type;\n  int *mask = atom->mask;\n  int nlocal = atom->nlocal;\n  if (igroup == atom->firstgroup) nlocal = atom->nfirst;\n\n  double mass_min_local = DBL_MAX;\n  if (rmass) {\n    for (int i = 0; i < nlocal; i++)\n      if (mask[i] & groupbit) {\n        if (mass_min_local > rmass[i]) mass_min_local = rmass[i];\n      }\n  } else {\n    for (int i = 0; i < nlocal; i++)\n      if (mask[i] & groupbit) {\n        if (mass_min_local > mass[type[i]]) mass_min_local = mass[type[i]];\n      }\n  }\n  MPI_Allreduce(&mass_min_local,&mass_min,1,MPI_DOUBLE,MPI_MIN,world);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixTFMC::initial_integrate(int vflag)\n{\n  double boltz = force->boltz;\n  double **x = atom->x;\n  double **f = atom->f;\n  double *rmass = atom->rmass;\n  double *mass = atom->mass;\n  double massone;\n  double masstotal;\n  double xcm_d[3], xcm_dall[3];\n  double d_i, xi;\n  double gamma, gamma_exp, gamma_expi;\n  double P_acc, P_ran;\n  int *type = atom->type;\n  int *mask = atom->mask;\n  int nlocal = atom->nlocal;\n  if (igroup == atom->firstgroup) nlocal = atom->nfirst;\n\n  // in case we wish to track (and zero) the com movement\n  if (comflag) {\n    xcm_d[0] = 0.0;\n    xcm_d[1] = 0.0;\n    xcm_d[2] = 0.0;\n  }\n\n  // displacement vector, needed to calculate (and zero) rotation\n  if (rotflag && nmax < nlocal) {\n    nmax = nlocal + 1;\n    memory->destroy(xd);\n    memory->create(xd,nmax,3,\"tfmc:xd\");\n  }\n\n  // generate displacements for each atom\n  for (int i = 0; i < nlocal; i++) {\n    if (mask[i] & groupbit) {\n      if (rmass) massone = rmass[i];\n      else massone = mass[type[i]];\n      d_i = d_max * pow(mass_min/massone, 0.25);\n      for (int j = 0; j < 3; j++) {\n        P_acc = 0.0;\n        P_ran = 1.0;\n        gamma = f[i][j] * d_i / (2.0*boltz*T_set);\n        gamma_exp = exp(gamma);\n        gamma_expi = 1.0/gamma_exp;\n        // generate displacements according to the tfMC distribution\n        while (P_acc < P_ran) {\n          xi = 2.0*random_num->uniform() - 1.0;\n          P_ran = random_num->uniform();\n          if (xi < 0) {\n            P_acc = exp(2.0*xi*gamma) * gamma_exp - gamma_expi;\n            P_acc = P_acc / (gamma_exp - gamma_expi);\n          } else if (xi > 0) {\n            P_acc = gamma_exp - exp(2.0*xi*gamma) * gamma_expi;\n            P_acc = P_acc / (gamma_exp - gamma_expi);\n          } else {\n            P_acc = 1.0;\n          }\n        }\n        // displace\n        x[i][j] += xi * d_i;\n        if (comflag) xcm_d[j] += xi * d_i * massone;\n        if (rotflag) xd[i][j] = xi * d_i;\n      }\n    }\n  }\n\n  // if post factum zeroing of linear or rotational motion\n  if (comflag || rotflag) masstotal = group->mass(igroup);\n\n  // zero com motion\n  if (comflag == 1 && group->count(igroup) != 0) {\n    MPI_Allreduce(xcm_d,xcm_dall,3,MPI_DOUBLE,MPI_SUM,world);\n    if (masstotal > 0.0) {\n      xcm_dall[0] /= masstotal;\n      xcm_dall[1] /= masstotal;\n      xcm_dall[2] /= masstotal;\n    } else xcm_dall[0] = xcm_dall[1] = xcm_dall[2] = 0.0;\n    \n    for (int i = 0; i < nlocal; i++) {\n      if (mask[i] & groupbit) {\n        if (xflag) x[i][0] -= xcm_dall[0];\n        if (yflag) x[i][1] -= xcm_dall[1];\n        if (zflag) x[i][2] -= xcm_dall[2];\n      }\n    }\n  }\n\n  // zero rotation\n  if (rotflag == 1 && group->count(igroup) != 0) {\n\n    double dx, dy, dz;\n    double unwrap[3];\n    double cm[3], angmom[3], inertia[3][3], omega[3];\n    tagint *image = atom->image;\n    group->xcm(igroup,masstotal,cm);\n\n    // to zero rotations, we can employ the same principles the\n\t// velocity command uses to zero the angular momentum. of course,\n\t// there is no (conserved) momentum in MC, but we can substitute\n\t// \"velocities\" by a displacement vector and proceed from there.\n\t// this of course requires \"forking\" group->angmom(), which is\n\t// what we do here.\n\n    double p[3];\n    p[0] = p[1] = p[2] = 0.0;\n\n    for (int i = 0; i < nlocal; i++) {\n      if (mask[i] & groupbit) {\n        domain->unmap(x[i],image[i],unwrap);\n        dx = unwrap[0] - cm[0];\n        dy = unwrap[1] - cm[1];\n        dz = unwrap[2] - cm[2];\n        if (rmass) massone = rmass[i];\n        else massone = mass[type[i]];\n        p[0] += massone * (dy*xd[i][2] - dz*xd[i][1]);\n        p[1] += massone * (dz*xd[i][0] - dx*xd[i][2]);\n        p[2] += massone * (dx*xd[i][1] - dy*xd[i][0]);\n      }\n    }\n    MPI_Allreduce(p,angmom,3,MPI_DOUBLE,MPI_SUM,world);\n   // end \"angmom\" calculation\n\n    group->inertia(igroup,cm,inertia);\n    group->omega(angmom,inertia,omega);\n\n    // now, get rid of the rotation\n    for (int i = 0; i < nlocal; i++) {\n      if (mask[i] & groupbit) {\n        domain->unmap(x[i],image[i],unwrap);\n        dx = unwrap[0] - cm[0];\n        dy = unwrap[1] - cm[1];\n        dz = unwrap[2] - cm[2];\n        x[i][0] -= omega[1]*dz - omega[2]*dy;\n        x[i][1] -= omega[2]*dx - omega[0]*dz;\n        x[i][2] -= omega[0]*dy - omega[1]*dx;\n      }\n    }\n  }\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Anders Hafreager (UiO), andershaf@gmail.com\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_vashishta_table.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairVashishtaTable::PairVashishtaTable(LAMMPS *lmp) : PairVashishta(lmp)\n{\n  forceTable = NULL;\n  potentialTable = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairVashishtaTable::~PairVashishtaTable()\n{\n  memory->destroy(forceTable);\n  memory->destroy(potentialTable);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishtaTable::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum,jnumm1;\n  int itype,jtype,ktype,ijparam,ikparam,ijkparam;\n  tagint itag,jtag;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2;\n  double delr1[3],delr2[3],fj[3],fk[3];\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n  const double cutshortsq = r0max*r0max;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  double fxtmp,fytmp,fztmp;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    fxtmp = fytmp = fztmp = 0.0;\n\n    // two-body interactions, skip half of them\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    int numshort = 0;\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutshortsq) {\n        neighshort[numshort++] = j;\n        if (numshort >= maxshort) {\n          maxshort += maxshort/2;\n          memory->grow(neighshort,maxshort,\"pair:neighshort\");\n        }\n      }\n\n      jtag = tag[j];\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      if (rsq >= params[ijparam].cutsq) continue;\n\n      twobody_table(params[ijparam],rsq,fpair,eflag,evdwl);\n\n      fxtmp += delx*fpair;\n      fytmp += dely*fpair;\n      fztmp += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n      \t\t\t   evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    jnumm1 = numshort - 1;\n\n    for (jj = 0; jj < jnumm1; jj++) {\n      j = neighshort[jj];\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n      if (rsq1 >= params[ijparam].cutsq2) continue;\n\n      double fjxtmp,fjytmp,fjztmp;\n      fjxtmp = fjytmp = fjztmp = 0.0;\n\n      for (kk = jj+1; kk < numshort; kk++) {\n        k = neighshort[kk];\n        ktype = map[type[k]];\n        ikparam = elem2param[itype][ktype][ktype];\n        ijkparam = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n        if (rsq2 >= params[ikparam].cutsq2) continue;\n\n        threebody(&params[ijparam],&params[ikparam],&params[ijkparam],\n                  rsq1,rsq2,delr1,delr2,fj,fk,eflag,evdwl);\n\n        fxtmp -= fj[0] + fk[0];\n        fytmp -= fj[1] + fk[1];\n        fztmp -= fj[2] + fk[2];\n        fjxtmp += fj[0];\n        fjytmp += fj[1];\n        fjztmp += fj[2];\n        f[k][0] += fk[0];\n        f[k][1] += fk[1];\n        f[k][2] += fk[2];\n\n        if (evflag) ev_tally3(i,j,k,evdwl,0.0,fj,fk,delr1,delr2);\n      }\n      f[j][0] += fjxtmp;\n      f[j][1] += fjytmp;\n      f[j][2] += fjztmp;\n    }\n    f[i][0] += fxtmp;\n    f[i][1] += fytmp;\n    f[i][2] += fztmp;\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishtaTable::twobody_table(const Param &param, double rsq, \n                                       double &fforce, int eflag, double &eng)\n{\n  // use analytic form if rsq is inside inner cutoff\n\n  if (rsq < tabinnersq) {\n    Param *pparam = const_cast<Param *> (&param);\n    PairVashishta::twobody(pparam,rsq,fforce,eflag,eng);\n    return;\n  }\n\n  // double -> int will only keep the 0.xxxx part\n  \n  const int tableIndex = (rsq - tabinnersq)*oneOverDeltaR2;\n  const double fraction = (rsq - tabinnersq)*oneOverDeltaR2 - tableIndex;\n  \n  // force/energy are linearly interpolated between two adjacent values\n\n  double force0 = forceTable[param.ielement][param.jelement][tableIndex];\n  double force1 = forceTable[param.ielement][param.jelement][tableIndex+1];\n  fforce = (1.0 - fraction)*force0 + fraction*force1; \n\n  if (evflag) {\n    double energy0 = potentialTable[param.ielement][param.jelement][tableIndex];\n    double energy1 = potentialTable[param.ielement][param.jelement]\n      [tableIndex+1];\n    eng = (1.0 - fraction)*energy0 + fraction*energy1;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairVashishtaTable::settings(int narg, char **arg)\n{\n  if (narg != 2) error->all(FLERR,\"Illegal pair_style command\");\n\n  ntable = force->inumeric(FLERR,arg[0]);\n  tabinner = force->numeric(FLERR,arg[1]);\n\n  if (tabinner <= 0.0)\n    error->all(FLERR,\"Illegal inner cutoff for tabulation\");\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishtaTable::setup_params()\n{\n  PairVashishta::setup_params();\n\n  create_tables();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishtaTable::create_tables()\n{\n  memory->destroy(forceTable);\n  memory->destroy(potentialTable);\n  forceTable = NULL;\n  potentialTable = NULL;\n\n  tabinnersq = tabinner*tabinner;\n\n  deltaR2 = (cutmax*cutmax - tabinnersq) / (ntable-1);\n  oneOverDeltaR2 = 1.0/deltaR2;\n\n  memory->create(forceTable,nelements,nelements,ntable+1,\n                 \"pair:vashishta:forceTable\");\n  memory->create(potentialTable,nelements,nelements,ntable+1,\n                 \"pair:vashishta:potentialTable\");\n\n  // tabulalate energy/force via analytic twobody() in parent\n\n  int i,j,idx;\n  double rsq,fpair,eng;\n\n  for (i = 0; i < nelements; i++) {\n    for (j = 0; j < nelements; j++) {\n      int ijparam = elem2param[i][j][j];\n      for (idx = 0; idx <= ntable; idx++) {\n        rsq = tabinnersq + idx*deltaR2;\n        PairVashishta::twobody(&params[ijparam],rsq,fpair,1,eng);\n        forceTable[i][j][idx] = fpair;\n        potentialTable[i][j][idx] = eng;\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of tabulation arrays\n------------------------------------------------------------------------- */\n\ndouble PairVashishtaTable::memory_usage()\n{\n  double bytes = 2*nelements*nelements*sizeof(double)*ntable;\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(tersoff/mod/c,PairTersoffMODC)\n\n#else\n\n#ifndef LMP_PAIR_TERSOFF_MOD_C_H\n#define LMP_PAIR_TERSOFF_MOD_C_H\n\n#include \"pair_tersoff_mod.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairTersoffMODC : public PairTersoffMOD {\n public:\n  PairTersoffMODC(class LAMMPS *lmp) : PairTersoffMOD(lmp) {};\n  ~PairTersoffMODC() {}\n\n protected:\n  void read_file(char *);\n  void repulsive(Param *, double, double &, int, double &);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Cannot open Tersoff potential file %s\n\nThe specified potential file cannot be opened.  Check that the path\nand name are correct.\n\nE: Incorrect format in Tersoff potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal Tersoff parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\nE: Potential file has duplicate entry\n\nThe potential file has more than one entry for the same element.\n\nE: Potential file is missing an entry\n\nThe potential file does not have a needed entry.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Ganga P Purja Pun (George Mason University, Fairfax)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_tersoff_mod_c.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffMODC::read_file(char *file)\n{\n  int params_per_line = 21;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open Tersoff potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n\t    eof = 1;\n\t    fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n\t      eof = 1;\n\t      fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in Tersoff potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n\t\t\t\t\t  \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].lam3 = atof(words[4]);\n    params[nparams].h = atof(words[5]);\n    params[nparams].powern = atof(words[6]);\n    params[nparams].beta = atof(words[7]);\n    params[nparams].lam2 = atof(words[8]);\n    params[nparams].bigb = atof(words[9]);\n    params[nparams].bigr = atof(words[10]);\n    params[nparams].bigd = atof(words[11]);\n    params[nparams].lam1 = atof(words[12]);\n    params[nparams].biga = atof(words[13]);\n    params[nparams].powern_del = atof(words[14]);\n    params[nparams].c1 = atof(words[15]);\n    params[nparams].c2 = atof(words[16]);\n    params[nparams].c3 = atof(words[17]);\n    params[nparams].c4 = atof(words[18]);\n    params[nparams].c5 = atof(words[19]);\n    params[nparams].c0 = atof(words[20]);\n\n    // currently only allow m exponent of 1\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    if (\n\tparams[nparams].lam3 < 0.0 || params[nparams].powern < 0.0 ||\n\tparams[nparams].beta < 0.0 || params[nparams].lam2 < 0.0 ||\n\tparams[nparams].bigb < 0.0 || params[nparams].bigr < 0.0 ||\n\tparams[nparams].bigd < 0.0 ||\n                               params[nparams].bigd > params[nparams].bigr ||\n\tparams[nparams].lam3 < 0.0 || params[nparams].biga < 0.0 ||\n\tparams[nparams].powerm - params[nparams].powermint != 0.0 ||\n    (params[nparams].powermint != 3 && params[nparams].powermint != 1))\n      error->all(FLERR,\"Illegal Tersoff parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffMODC::repulsive(Param *param, double rsq, double &fforce,\n                                int eflag, double &eng)\n{\n  double r,tmp_fc,tmp_fc_d,tmp_exp;\n\n  r = sqrt(rsq);\n  tmp_fc = ters_fc(r,param);\n  tmp_fc_d = ters_fc_d(r,param);\n  tmp_exp = exp(-param->lam1 * r);\n  fforce = -param->biga * tmp_exp * (tmp_fc_d - tmp_fc * param->lam1) / r - param->c0 * tmp_fc_d / r;\n  if (eflag) eng = tmp_fc * param->biga * tmp_exp + param->c0 * tmp_fc;\n}\n\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <string.h>\n#include \"write_restart.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"atom_vec_hybrid.h\"\n#include \"group.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"bond.h\"\n#include \"angle.h\"\n#include \"dihedral.h\"\n#include \"improper.h\"\n#include \"update.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"universe.h\"\n#include \"comm.h\"\n#include \"output.h\"\n#include \"thermo.h\"\n#include \"mpiio.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n// same as read_restart.cpp\n\n#define MAGIC_STRING \"LammpS RestartT\"\n#define ENDIAN 0x0001\n#define ENDIANSWAP 0x1000\n#define VERSION_NUMERIC 0\n\nenum{VERSION,SMALLINT,TAGINT,BIGINT,\n     UNITS,NTIMESTEP,DIMENSION,NPROCS,PROCGRID,\n     NEWTON_PAIR,NEWTON_BOND,\n     XPERIODIC,YPERIODIC,ZPERIODIC,BOUNDARY,\n     ATOM_STYLE,NATOMS,NTYPES,\n     NBONDS,NBONDTYPES,BOND_PER_ATOM,\n     NANGLES,NANGLETYPES,ANGLE_PER_ATOM,\n     NDIHEDRALS,NDIHEDRALTYPES,DIHEDRAL_PER_ATOM,\n     NIMPROPERS,NIMPROPERTYPES,IMPROPER_PER_ATOM,\n     TRICLINIC,BOXLO,BOXHI,XY,XZ,YZ,\n     SPECIAL_LJ,SPECIAL_COUL,\n     MASS,PAIR,BOND,ANGLE,DIHEDRAL,IMPROPER,\n     MULTIPROC,MPIIO,PROCSPERFILE,PERPROC,\n     IMAGEINT,BOUNDMIN,TIMESTEP,\n     ATOM_ID,ATOM_MAP_STYLE,ATOM_MAP_USER,ATOM_SORTFREQ,ATOM_SORTBIN,\n     COMM_MODE,COMM_CUTOFF,COMM_VEL};\n\nenum{IGNORE,WARN,ERROR};                    // same as thermo.cpp\n\n/* ---------------------------------------------------------------------- */\n\nWriteRestart::WriteRestart(LAMMPS *lmp) : Pointers(lmp)\n{\n  MPI_Comm_rank(world,&me);\n  MPI_Comm_size(world,&nprocs);\n  multiproc = 0;\n  noinit = 0;\n  fp = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   called as write_restart command in input script\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::command(int narg, char **arg)\n{\n  if (domain->box_exist == 0)\n    error->all(FLERR,\"Write_restart command before simulation box is defined\");\n  if (narg < 1) error->all(FLERR,\"Illegal write_restart command\");\n\n  // if filename contains a \"*\", replace with current timestep\n\n  char *ptr;\n  int n = strlen(arg[0]) + 16;\n  char *file = new char[n];\n\n  if ((ptr = strchr(arg[0],'*'))) {\n    *ptr = '\\0';\n    sprintf(file,\"%s\" BIGINT_FORMAT \"%s\",arg[0],update->ntimestep,ptr+1);\n  } else strcpy(file,arg[0]);\n\n  // check for multiproc output and an MPI-IO filename\n\n  if (strchr(arg[0],'%')) multiproc = nprocs;\n  else multiproc = 0;\n  if (strstr(arg[0],\".mpiio\")) mpiioflag = 1;\n  else mpiioflag = 0;\n\n  // setup output style and process optional args\n  // also called by Output class for periodic restart files\n\n  multiproc_options(multiproc,mpiioflag,narg-1,&arg[1]);\n\n  // init entire system since comm->exchange is done\n  // comm::init needs neighbor::init needs pair::init needs kspace::init, etc\n\n  if (noinit == 0) {\n    if (comm->me == 0 && screen)\n      fprintf(screen,\"System init for write_restart ...\\n\");\n    lmp->init();\n\n    // move atoms to new processors before writing file\n    // enforce PBC in case atoms are outside box\n    // call borders() to rebuild atom map since exchange() destroys map\n    // NOTE: removed call to setup_pre_exchange\n    //   used to be needed by fixShearHistory for granular\n    //   to move history info from neigh list to atoms between runs\n    //   but now that is done via FIx::post_run()\n    //   don't think any other fix needs this or should do it\n    //   e.g. fix evaporate should not delete more atoms\n\n    // modify->setup_pre_exchange();\n    if (domain->triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    domain->reset_box();\n    comm->setup();\n    comm->exchange();\n    comm->borders();\n    if (domain->triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n  }\n\n  // write single restart file\n\n  write(file);\n  delete [] file;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid WriteRestart::multiproc_options(int multiproc_caller, int mpiioflag_caller,\n                                     int narg, char **arg)\n{\n  multiproc = multiproc_caller;\n  mpiioflag = mpiioflag_caller;\n\n  // error checks\n\n  if (multiproc && mpiioflag)\n    error->all(FLERR,\n               \"Restart file MPI-IO output not allowed with % in filename\");\n\n  if (mpiioflag) {\n    mpiio = new RestartMPIIO(lmp);\n    if (!mpiio->mpiio_exists)\n      error->all(FLERR,\"Writing to MPI-IO filename when \"\n                 \"MPIIO package is not installed\");\n  }\n\n  // defaults for multiproc file writing\n\n  nclusterprocs = nprocs;\n  filewriter = 0;\n  if (me == 0) filewriter = 1;\n  fileproc = 0;\n\n  if (multiproc) {\n    nclusterprocs = 1;\n    filewriter = 1;\n    fileproc = me;\n    icluster = me;\n  }\n\n  // optional args\n\n  int iarg = 0;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"fileper\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal write_restart command\");\n      if (!multiproc)\n        error->all(FLERR,\"Cannot use write_restart fileper \"\n                   \"without % in restart file name\");\n      int nper = force->inumeric(FLERR,arg[iarg+1]);\n      if (nper <= 0) error->all(FLERR,\"Illegal write_restart command\");\n\n      multiproc = nprocs/nper;\n      if (nprocs % nper) multiproc++;\n      fileproc = me/nper * nper;\n      int fileprocnext = MIN(fileproc+nper,nprocs);\n      nclusterprocs = fileprocnext - fileproc;\n      if (me == fileproc) filewriter = 1;\n      else filewriter = 0;\n      icluster = fileproc/nper;\n      iarg += 2;\n\n    } else if (strcmp(arg[iarg],\"nfile\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal write_restart command\");\n      if (!multiproc)\n        error->all(FLERR,\"Cannot use write_restart nfile \"\n                   \"without % in restart file name\");\n      int nfile = force->inumeric(FLERR,arg[iarg+1]);\n      if (nfile <= 0) error->all(FLERR,\"Illegal write_restart command\");\n      nfile = MIN(nfile,nprocs);\n\n      multiproc = nfile;\n      icluster = static_cast<int> ((bigint) me * nfile/nprocs);\n      fileproc = static_cast<int> ((bigint) icluster * nprocs/nfile);\n      int fcluster = static_cast<int> ((bigint) fileproc * nfile/nprocs);\n      if (fcluster < icluster) fileproc++;\n      int fileprocnext =\n        static_cast<int> ((bigint) (icluster+1) * nprocs/nfile);\n      fcluster = static_cast<int> ((bigint) fileprocnext * nfile/nprocs);\n      if (fcluster < icluster+1) fileprocnext++;\n      nclusterprocs = fileprocnext - fileproc;\n      if (me == fileproc) filewriter = 1;\n      else filewriter = 0;\n      iarg += 2;\n\n    } else if (strcmp(arg[iarg],\"noinit\") == 0) {\n      noinit = 1;\n      iarg++;\n    } else error->all(FLERR,\"Illegal write_restart command\");\n  }\n}\n\n/* ----------------------------------------------------------------------\n   called from command() and directly from output within run/minimize loop\n   file = final file name to write, except may contain a \"%\"\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write(char *file)\n{\n  // special case where reneighboring is not done in integrator\n  //   on timestep restart file is written (due to build_once being set)\n  // if box is changing, must be reset, else restart file will have\n  //   wrong box size and atoms will be lost when restart file is read\n  // other calls to pbc and domain and comm are not made,\n  //   b/c they only make sense if reneighboring is actually performed\n\n  if (neighbor->build_once) domain->reset_box();\n\n  // natoms = sum of nlocal = value to write into restart file\n  // if unequal and thermo lostflag is \"error\", don't write restart file\n\n  bigint nblocal = atom->nlocal;\n  MPI_Allreduce(&nblocal,&natoms,1,MPI_LMP_BIGINT,MPI_SUM,world);\n  if (natoms != atom->natoms && output->thermo->lostflag == ERROR)\n    error->all(FLERR,\"Atom count is inconsistent, cannot write restart file\");\n\n  // open single restart file or base file for multiproc case\n\n  if (me == 0) {\n    char *hfile;\n    if (multiproc) {\n      hfile = new char[strlen(file) + 16];\n      char *ptr = strchr(file,'%');\n      *ptr = '\\0';\n      sprintf(hfile,\"%s%s%s\",file,\"base\",ptr+1);\n      *ptr = '%';\n    } else hfile = file;\n    fp = fopen(hfile,\"wb\");\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open restart file %s\",hfile);\n      error->one(FLERR,str);\n    }\n    if (multiproc) delete [] hfile;\n  }\n\n  // proc 0 writes magic string, endian flag, numeric version\n\n  if (me == 0) {\n    magic_string();\n    endian();\n    version_numeric();\n  }\n\n  // proc 0 writes header, groups, pertype info, force field info\n\n  if (me == 0) {\n    header();\n    group->write_restart(fp);\n    type_arrays();\n    force_fields();\n  }\n\n  // all procs write fix info\n\n  modify->write_restart(fp);\n\n  // communication buffer for my atom info\n  // max_size = largest buffer needed by any proc\n  // NOTE: are assuming size_restart() returns 32-bit int\n  //   for a huge one-proc problem, nlocal could be 32-bit\n  //   but nlocal * doubles-peratom could oveflow\n\n  int max_size;\n  int send_size = atom->avec->size_restart();\n  MPI_Allreduce(&send_size,&max_size,1,MPI_INT,MPI_MAX,world);\n\n  double *buf;\n  memory->create(buf,max_size,\"write_restart:buf\");\n\n  // all procs write file layout info which may include per-proc sizes\n\n  file_layout(send_size);\n\n  // header info is complete\n  // if multiproc output:\n  //   close header file, open multiname file on each writing proc,\n  //   write PROCSPERFILE into new file\n\n  if (multiproc) {\n    if (me == 0 && fp) {\n      fclose(fp);\n      fp = NULL;\n    }\n\n    char *multiname = new char[strlen(file) + 16];\n    char *ptr = strchr(file,'%');\n    *ptr = '\\0';\n    sprintf(multiname,\"%s%d%s\",file,icluster,ptr+1);\n    *ptr = '%';\n\n    if (filewriter) {\n      fp = fopen(multiname,\"wb\");\n      if (fp == NULL) {\n        char str[128];\n        sprintf(str,\"Cannot open restart file %s\",multiname);\n        error->one(FLERR,str);\n      }\n      write_int(PROCSPERFILE,nclusterprocs);\n    }\n\n    delete [] multiname;\n  }\n\n  // pack my atom data into buf\n\n  AtomVec *avec = atom->avec;\n  int n = 0;\n  for (int i = 0; i < atom->nlocal; i++) n += avec->pack_restart(i,&buf[n]);\n\n  // if any fix requires it, remap each atom's coords via PBC\n  // is because fix changes atom coords (excepting an integrate fix)\n  // just remap in buffer, not actual atoms\n\n  if (modify->restart_pbc_any) {\n    int triclinic = domain->triclinic;\n    double *lo,*hi,*period;\n\n    if (triclinic == 0) {\n      lo = domain->boxlo;\n      hi = domain->boxhi;\n      period = domain->prd;\n    } else {\n      lo = domain->boxlo_lamda;\n      hi = domain->boxhi_lamda;\n      period = domain->prd_lamda;\n    }\n\n    int xperiodic = domain->xperiodic;\n    int yperiodic = domain->yperiodic;\n    int zperiodic = domain->zperiodic;\n\n    double *x;\n    int m = 0;\n    for (int i = 0; i < atom->nlocal; i++) {\n      x = &buf[m+1];\n      if (triclinic) domain->x2lamda(x,x);\n\n      if (xperiodic) {\n        if (x[0] < lo[0]) x[0] += period[0];\n        if (x[0] >= hi[0]) x[0] -= period[0];\n        x[0] = MAX(x[0],lo[0]);\n      }\n      if (yperiodic) {\n        if (x[1] < lo[1]) x[1] += period[1];\n        if (x[1] >= hi[1]) x[1] -= period[1];\n        x[1] = MAX(x[1],lo[1]);\n      }\n      if (zperiodic) {\n        if (x[2] < lo[2]) x[2] += period[2];\n        if (x[2] >= hi[2]) x[2] -= period[2];\n        x[2] = MAX(x[2],lo[2]);\n      }\n\n      if (triclinic) domain->lamda2x(x,x);\n      m += static_cast<int> (buf[m]);\n    }\n  }\n\n  // MPI-IO output to single file\n\n  if (mpiioflag) {\n    if (me == 0 && fp) {\n      fclose(fp);\n      fp = NULL;\n    }\n    mpiio->openForWrite(file);\n    mpiio->write(headerOffset,send_size,buf);\n    mpiio->close();\n  }\n\n  // output of one or more native files\n  // filewriter = 1 = this proc writes to file\n  // ping each proc in my cluster, receive its data, write data to file\n  // else wait for ping from fileproc, send my data to fileproc\n\n  else {\n    int tmp,recv_size;\n\n    if (filewriter) {\n      MPI_Status status;\n      MPI_Request request;\n      for (int iproc = 0; iproc < nclusterprocs; iproc++) {\n        if (iproc) {\n          MPI_Irecv(buf,max_size,MPI_DOUBLE,me+iproc,0,world,&request);\n          MPI_Send(&tmp,0,MPI_INT,me+iproc,0,world);\n          MPI_Wait(&request,&status);\n          MPI_Get_count(&status,MPI_DOUBLE,&recv_size);\n        } else recv_size = send_size;\n\n        write_double_vec(PERPROC,recv_size,buf);\n      }\n      fclose(fp);\n      fp = NULL;\n\n    } else {\n      MPI_Recv(&tmp,0,MPI_INT,fileproc,0,world,MPI_STATUS_IGNORE);\n      MPI_Rsend(buf,send_size,MPI_DOUBLE,fileproc,0,world);\n    }\n  }\n\n  // clean up\n\n  memory->destroy(buf);\n\n  // invoke any fixes that write their own restart file\n\n  for (int ifix = 0; ifix < modify->nfix; ifix++)\n    if (modify->fix[ifix]->restart_file)\n      modify->fix[ifix]->write_restart_file(file);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out problem description\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::header()\n{\n  write_string(VERSION,universe->version);\n  write_int(SMALLINT,sizeof(smallint));\n  write_int(IMAGEINT,sizeof(imageint));\n  write_int(TAGINT,sizeof(tagint));\n  write_int(BIGINT,sizeof(bigint));\n  write_string(UNITS,update->unit_style);\n  write_bigint(NTIMESTEP,update->ntimestep);\n  write_int(DIMENSION,domain->dimension);\n  write_int(NPROCS,nprocs);\n  write_int_vec(PROCGRID,3,comm->procgrid);\n  write_int(NEWTON_PAIR,force->newton_pair);\n  write_int(NEWTON_BOND,force->newton_bond);\n  write_int(XPERIODIC,domain->xperiodic);\n  write_int(YPERIODIC,domain->yperiodic);\n  write_int(ZPERIODIC,domain->zperiodic);\n  write_int_vec(BOUNDARY,6,&domain->boundary[0][0]);\n\n  // added field for shrink-wrap boundaries with minimum - 2 Jul 2015\n\n  double minbound[6];\n  minbound[0] = domain->minxlo; minbound[1] = domain->minxhi;\n  minbound[2] = domain->minylo; minbound[3] = domain->minyhi;\n  minbound[4] = domain->minzlo; minbound[5] = domain->minzhi;\n  write_double_vec(BOUNDMIN,6,minbound);\n\n  // write atom_style and its args\n\n  write_string(ATOM_STYLE,atom->atom_style);\n  fwrite(&atom->avec->nargcopy,sizeof(int),1,fp);\n  for (int i = 0; i < atom->avec->nargcopy; i++) {\n    int n = strlen(atom->avec->argcopy[i]) + 1;\n    fwrite(&n,sizeof(int),1,fp);\n    fwrite(atom->avec->argcopy[i],sizeof(char),n,fp);\n  }\n\n  write_bigint(NATOMS,natoms);\n  write_int(NTYPES,atom->ntypes);\n  write_bigint(NBONDS,atom->nbonds);\n  write_int(NBONDTYPES,atom->nbondtypes);\n  write_int(BOND_PER_ATOM,atom->bond_per_atom);\n  write_bigint(NANGLES,atom->nangles);\n  write_int(NANGLETYPES,atom->nangletypes);\n  write_int(ANGLE_PER_ATOM,atom->angle_per_atom);\n  write_bigint(NDIHEDRALS,atom->ndihedrals);\n  write_int(NDIHEDRALTYPES,atom->ndihedraltypes);\n  write_int(DIHEDRAL_PER_ATOM,atom->dihedral_per_atom);\n  write_bigint(NIMPROPERS,atom->nimpropers);\n  write_int(NIMPROPERTYPES,atom->nimpropertypes);\n  write_int(IMPROPER_PER_ATOM,atom->improper_per_atom);\n\n  write_int(TRICLINIC,domain->triclinic);\n  write_double_vec(BOXLO,3,domain->boxlo);\n  write_double_vec(BOXHI,3,domain->boxhi);\n  write_double(XY,domain->xy);\n  write_double(XZ,domain->xz);\n  write_double(YZ,domain->yz);\n\n  write_double_vec(SPECIAL_LJ,3,&force->special_lj[1]);\n  write_double_vec(SPECIAL_COUL,3,&force->special_coul[1]);\n\n  write_double(TIMESTEP,update->dt);\n\n  write_int(ATOM_ID,atom->tag_enable);\n  write_int(ATOM_MAP_STYLE,atom->map_style);\n  write_int(ATOM_MAP_USER,atom->map_user);\n  write_int(ATOM_SORTFREQ,atom->sortfreq);\n  write_double(ATOM_SORTBIN,atom->userbinsize);\n\n  write_int(COMM_MODE,comm->mode);\n  write_double(COMM_CUTOFF,comm->cutghostuser);\n  write_int(COMM_VEL,comm->ghost_velocity);\n\n  // -1 flag signals end of header\n\n  int flag = -1;\n  fwrite(&flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out any type-based arrays that are defined\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::type_arrays()\n{\n  if (atom->mass) write_double_vec(MASS,atom->ntypes,&atom->mass[1]);\n\n  // -1 flag signals end of type arrays\n\n  int flag = -1;\n  fwrite(&flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out and force field styles and data that are defined\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::force_fields()\n{\n  if (force->pair && force->pair->restartinfo) {\n    write_string(PAIR,force->pair_style);\n    force->pair->write_restart(fp);\n  }\n  if (atom->avec->bonds_allow && force->bond) {\n    write_string(BOND,force->bond_style);\n    force->bond->write_restart(fp);\n  }\n  if (atom->avec->angles_allow && force->angle) {\n    write_string(ANGLE,force->angle_style);\n    force->angle->write_restart(fp);\n  }\n  if (atom->avec->dihedrals_allow && force->dihedral) {\n    write_string(DIHEDRAL,force->dihedral_style);\n    force->dihedral->write_restart(fp);\n  }\n  if (atom->avec->impropers_allow && force->improper) {\n    write_string(IMPROPER,force->improper_style);\n    force->improper->write_restart(fp);\n  }\n\n  // -1 flag signals end of force field info\n\n  int flag = -1;\n  fwrite(&flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out file layout info\n   all procs call this method, only proc 0 writes to file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::file_layout(int send_size)\n{\n  if (me == 0) {\n    write_int(MULTIPROC,multiproc);\n    write_int(MPIIO,mpiioflag);\n  }\n\n  if (mpiioflag) {\n    int *all_send_sizes;\n    memory->create(all_send_sizes,nprocs,\"write_restart:all_send_sizes\");\n    MPI_Gather(&send_size, 1, MPI_INT, all_send_sizes, 1, MPI_INT, 0,world);\n    if (me == 0) fwrite(all_send_sizes,sizeof(int),nprocs,fp);\n    memory->destroy(all_send_sizes);\n  }\n\n  // -1 flag signals end of file layout info\n\n  if (me == 0) {\n    int flag = -1;\n    fwrite(&flag,sizeof(int),1,fp);\n  }\n\n  // if MPI-IO file, broadcast the end of the header offste\n  // this allows all ranks to compute offset to their data\n\n  if (mpiioflag) {\n    if (me == 0) headerOffset = ftell(fp);\n    MPI_Bcast(&headerOffset,1,MPI_LMP_BIGINT,0,world);\n  }\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// low-level fwrite methods\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n/* ---------------------------------------------------------------------- */\n\nvoid WriteRestart::magic_string()\n{\n  int n = strlen(MAGIC_STRING) + 1;\n  char *str = new char[n];\n  strcpy(str,MAGIC_STRING);\n  fwrite(str,sizeof(char),n,fp);\n  delete [] str;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid WriteRestart::endian()\n{\n  int endian = ENDIAN;\n  fwrite(&endian,sizeof(int),1,fp);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid WriteRestart::version_numeric()\n{\n  int vn = VERSION_NUMERIC;\n  fwrite(&vn,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   write a flag and an int into restart file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write_int(int flag, int value)\n{\n  fwrite(&flag,sizeof(int),1,fp);\n  fwrite(&value,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   write a flag and a bigint into restart file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write_bigint(int flag, bigint value)\n{\n  fwrite(&flag,sizeof(int),1,fp);\n  fwrite(&value,sizeof(bigint),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   write a flag and a double into restart file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write_double(int flag, double value)\n{\n  fwrite(&flag,sizeof(int),1,fp);\n  fwrite(&value,sizeof(double),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   write a flag and a char string (including NULL) into restart file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write_string(int flag, const char *value)\n{\n  int n = strlen(value) + 1;\n  fwrite(&flag,sizeof(int),1,fp);\n  fwrite(&n,sizeof(int),1,fp);\n  fwrite(value,sizeof(char),n,fp);\n}\n\n/* ----------------------------------------------------------------------\n   write a flag and vector of N ints into restart file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write_int_vec(int flag, int n, int *vec)\n{\n  fwrite(&flag,sizeof(int),1,fp);\n  fwrite(&n,sizeof(int),1,fp);\n  fwrite(vec,sizeof(int),n,fp);\n}\n\n/* ----------------------------------------------------------------------\n   write a flag and vector of N doubles into restart file\n------------------------------------------------------------------------- */\n\nvoid WriteRestart::write_double_vec(int flag, int n, double *vec)\n{\n  fwrite(&flag,sizeof(int),1,fp);\n  fwrite(&n,sizeof(int),1,fp);\n  fwrite(vec,sizeof(double),n,fp);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef COMMAND_CLASS\n\nCommandStyle(write_restart,WriteRestart)\n\n#else\n\n#ifndef LMP_WRITE_RESTART_H\n#define LMP_WRITE_RESTART_H\n\n#include <stdio.h>\n#include \"pointers.h\"\n\nnamespace LAMMPS_NS {\n\nclass WriteRestart : protected Pointers {\n public:\n  WriteRestart(class LAMMPS *);\n  void command(int, char **);\n  void multiproc_options(int, int, int, char **);\n  void write(char *);\n\n private:\n  int me,nprocs;\n  FILE *fp;\n  bigint natoms;         // natoms (sum of nlocal) to write into file\n  int noinit;\n\n  int multiproc;             // 0 = proc 0 writes for all\n                             // else # of procs writing files\n  int nclusterprocs;         // # of procs in my cluster that write to one file\n  int filewriter;            // 1 if this proc writes a file, else 0\n  int fileproc;              // ID of proc in my cluster who writes to file\n  int icluster;              // which cluster I am in\n\n  // MPI-IO values\n\n  int mpiioflag;               // 1 for MPIIO output, else 0\n  class RestartMPIIO *mpiio;   // MPIIO for restart file output\n  MPI_Offset headerOffset;\n\n  void header();\n  void type_arrays();\n  void force_fields();\n  void file_layout(int);\n\n  void magic_string();\n  void endian();\n  void version_numeric();\n\n  void write_int(int, int);\n  void write_bigint(int, bigint);\n  void write_double(int, double);\n  void write_string(int, const char *);\n  void write_int_vec(int, int, int *);\n  void write_double_vec(int, int, double *);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Write_restart command before simulation box is defined\n\nThe write_restart command cannot be used before a read_data,\nread_restart, or create_box command.\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Restart file MPI-IO output not allowed with % in filename\n\nThis is because a % signifies one file per processor and MPI-IO\ncreates one large file for all processors.\n\nE: Writing to MPI-IO filename when MPIIO package is not installed\n\nSelf-explanatory.\n\nE: Cannot use write_restart fileper without % in restart file name\n\nSelf-explanatory.\n\nE: Cannot use write_restart nfile without % in restart file name\n\nSelf-explanatory.\n\nE: Atom count is inconsistent, cannot write restart file\n\nSum of atoms across processors does not equal initial total count.\nThis is probably because you have lost some atoms.\n\nE: Cannot open restart file %s\n\nSelf-explanatory.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Mathias Puetz (SNL) and friends\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"dihedral_multi_harmonic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n\n/* ---------------------------------------------------------------------- */\n\nDihedralMultiHarmonic::DihedralMultiHarmonic(LAMMPS *lmp) : Dihedral(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nDihedralMultiHarmonic::~DihedralMultiHarmonic()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(a1);\n    memory->destroy(a2);\n    memory->destroy(a3);\n    memory->destroy(a4);\n    memory->destroy(a5);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralMultiHarmonic::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double edihedral,f1[3],f2[3],f3[3],f4[3];\n  double sb1,sb2,sb3,rb1,rb3,c0,b1mag2,b1mag,b2mag2;\n  double b2mag,b3mag2,b3mag,ctmp,r12c1,c1mag,r12c2;\n  double c2mag,sc1,sc2,s1,s12,c,p,pd,a,a11,a22;\n  double a33,a12,a13,a23,sx2,sy2,sz2;\n  double s2,sin2;\n\n  edihedral = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **dihedrallist = neighbor->dihedrallist;\n  int ndihedrallist = neighbor->ndihedrallist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < ndihedrallist; n++) {\n    i1 = dihedrallist[n][0];\n    i2 = dihedrallist[n][1];\n    i3 = dihedrallist[n][2];\n    i4 = dihedrallist[n][3];\n    type = dihedrallist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    // c0 calculation\n\n    sb1 = 1.0 / (vb1x*vb1x + vb1y*vb1y + vb1z*vb1z);\n    sb2 = 1.0 / (vb2x*vb2x + vb2y*vb2y + vb2z*vb2z);\n    sb3 = 1.0 / (vb3x*vb3x + vb3y*vb3y + vb3z*vb3z);\n\n    rb1 = sqrt(sb1);\n    rb3 = sqrt(sb3);\n\n    c0 = (vb1x*vb3x + vb1y*vb3y + vb1z*vb3z) * rb1*rb3;\n\n    // 1st and 2nd angle\n\n    b1mag2 = vb1x*vb1x + vb1y*vb1y + vb1z*vb1z;\n    b1mag = sqrt(b1mag2);\n    b2mag2 = vb2x*vb2x + vb2y*vb2y + vb2z*vb2z;\n    b2mag = sqrt(b2mag2);\n    b3mag2 = vb3x*vb3x + vb3y*vb3y + vb3z*vb3z;\n    b3mag = sqrt(b3mag2);\n\n    ctmp = vb1x*vb2x + vb1y*vb2y + vb1z*vb2z;\n    r12c1 = 1.0 / (b1mag*b2mag);\n    c1mag = ctmp * r12c1;\n\n    ctmp = vb2xm*vb3x + vb2ym*vb3y + vb2zm*vb3z;\n    r12c2 = 1.0 / (b2mag*b3mag);\n    c2mag = ctmp * r12c2;\n\n    // cos and sin of 2 angles and final c\n\n    sin2 = MAX(1.0 - c1mag*c1mag,0.0);\n    sc1 = sqrt(sin2);\n    if (sc1 < SMALL) sc1 = SMALL;\n    sc1 = 1.0/sc1;\n\n    sin2 = MAX(1.0 - c2mag*c2mag,0.0);\n    sc2 = sqrt(sin2);\n    if (sc2 < SMALL) sc2 = SMALL;\n    sc2 = 1.0/sc2;\n\n    s1 = sc1 * sc1;\n    s2 = sc2 * sc2;\n    s12 = sc1 * sc2;\n    c = (c0 + c1mag*c2mag) * s12;\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Dihedral problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    // force & energy\n    // p = sum (i=1,5) a_i * c**(i-1)\n    // pd = dp/dc\n\n    p = a1[type] + c*(a2[type] + c*(a3[type] + c*(a4[type] + c*a5[type])));\n    pd = a2[type] + c*(2.0*a3[type] + c*(3.0*a4[type] + c*4.0*a5[type]));\n\n    if (eflag) edihedral = p;\n\n    a = pd;\n    c = c * a;\n    s12 = s12 * a;\n    a11 = c*sb1*s1;\n    a22 = -sb2 * (2.0*c0*s12 - c*(s1+s2));\n    a33 = c*sb3*s2;\n    a12 = -r12c1*(c1mag*c*s1 + c2mag*s12);\n    a13 = -rb1*rb3*s12;\n    a23 = r12c2*(c2mag*c*s2 + c1mag*s12);\n\n    sx2  = a12*vb1x + a22*vb2x + a23*vb3x;\n    sy2  = a12*vb1y + a22*vb2y + a23*vb3y;\n    sz2  = a12*vb1z + a22*vb2z + a23*vb3z;\n\n    f1[0] = a11*vb1x + a12*vb2x + a13*vb3x;\n    f1[1] = a11*vb1y + a12*vb2y + a13*vb3y;\n    f1[2] = a11*vb1z + a12*vb2z + a13*vb3z;\n\n    f2[0] = -sx2 - f1[0];\n    f2[1] = -sy2 - f1[1];\n    f2[2] = -sz2 - f1[2];\n\n    f4[0] = a13*vb1x + a23*vb2x + a33*vb3x;\n    f4[1] = a13*vb1y + a23*vb2y + a33*vb3y;\n    f4[2] = a13*vb1z + a23*vb2z + a33*vb3z;\n\n    f3[0] = sx2 - f4[0];\n    f3[1] = sy2 - f4[1];\n    f3[2] = sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,edihedral,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralMultiHarmonic::allocate()\n{\n  allocated = 1;\n  int n = atom->ndihedraltypes;\n\n  memory->create(a1,n+1,\"dihedral:a1\");\n  memory->create(a2,n+1,\"dihedral:a2\");\n  memory->create(a3,n+1,\"dihedral:a3\");\n  memory->create(a4,n+1,\"dihedral:a4\");\n  memory->create(a5,n+1,\"dihedral:a5\");\n\n  memory->create(setflag,n+1,\"dihedral:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid DihedralMultiHarmonic::coeff(int narg, char **arg)\n{\n  if (narg != 6) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->ndihedraltypes,ilo,ihi);\n\n  double a1_one = force->numeric(FLERR,arg[1]);\n  double a2_one = force->numeric(FLERR,arg[2]);\n  double a3_one = force->numeric(FLERR,arg[3]);\n  double a4_one = force->numeric(FLERR,arg[4]);\n  double a5_one = force->numeric(FLERR,arg[5]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    a1[i] = a1_one;\n    a2[i] = a2_one;\n    a3[i] = a3_one;\n    a4[i] = a4_one;\n    a5[i] = a5_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid DihedralMultiHarmonic::write_restart(FILE *fp)\n{\n  fwrite(&a1[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&a2[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&a3[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&a4[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&a5[1],sizeof(double),atom->ndihedraltypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid DihedralMultiHarmonic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&a1[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&a2[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&a3[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&a4[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&a5[1],sizeof(double),atom->ndihedraltypes,fp);\n  }\n  MPI_Bcast(&a1[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&a2[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&a3[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&a4[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&a5[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->ndihedraltypes; i++) setflag[i] = 1;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include \"improper_cvff.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n\n/* ---------------------------------------------------------------------- */\n\nImproperCvff::ImproperCvff(LAMMPS *lmp) : Improper(lmp)\n{\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nImproperCvff::~ImproperCvff()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(sign);\n    memory->destroy(multiplicity);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ImproperCvff::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,m,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double eimproper,f1[3],f2[3],f3[3],f4[3];\n  double sb1,sb2,sb3,rb1,rb3,c0,b1mag2,b1mag,b2mag2;\n  double b2mag,b3mag2,b3mag,ctmp,r12c1,c1mag,r12c2;\n  double c2mag,sc1,sc2,s1,s2,s12,c,p,pd,rc2,a,a11,a22;\n  double a33,a12,a13,a23,sx2,sy2,sz2;\n\n  eimproper = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **improperlist = neighbor->improperlist;\n  int nimproperlist = neighbor->nimproperlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nimproperlist; n++) {\n    i1 = improperlist[n][0];\n    i2 = improperlist[n][1];\n    i3 = improperlist[n][2];\n    i4 = improperlist[n][3];\n    type = improperlist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    // c0 calculation\n\n    sb1 = 1.0 / (vb1x*vb1x + vb1y*vb1y + vb1z*vb1z);\n    sb2 = 1.0 / (vb2x*vb2x + vb2y*vb2y + vb2z*vb2z);\n    sb3 = 1.0 / (vb3x*vb3x + vb3y*vb3y + vb3z*vb3z);\n\n    rb1 = sqrt(sb1);\n    rb3 = sqrt(sb3);\n\n    c0 = (vb1x*vb3x + vb1y*vb3y + vb1z*vb3z) * rb1*rb3;\n\n    // 1st and 2nd angle\n\n    b1mag2 = vb1x*vb1x + vb1y*vb1y + vb1z*vb1z;\n    b1mag = sqrt(b1mag2);\n    b2mag2 = vb2x*vb2x + vb2y*vb2y + vb2z*vb2z;\n    b2mag = sqrt(b2mag2);\n    b3mag2 = vb3x*vb3x + vb3y*vb3y + vb3z*vb3z;\n    b3mag = sqrt(b3mag2);\n\n    ctmp = vb1x*vb2x + vb1y*vb2y + vb1z*vb2z;\n    r12c1 = 1.0 / (b1mag*b2mag);\n    c1mag = ctmp * r12c1;\n\n    ctmp = vb2xm*vb3x + vb2ym*vb3y + vb2zm*vb3z;\n    r12c2 = 1.0 / (b2mag*b3mag);\n    c2mag = ctmp * r12c2;\n\n    // cos and sin of 2 angles and final c\n\n    sc1 = sqrt(1.0 - c1mag*c1mag);\n    if (sc1 < SMALL) sc1 = SMALL;\n    sc1 = 1.0/sc1;\n\n    sc2 = sqrt(1.0 - c2mag*c2mag);\n    if (sc2 < SMALL) sc2 = SMALL;\n    sc2 = 1.0/sc2;\n\n    s1 = sc1 * sc1;\n    s2 = sc2 * sc2;\n    s12 = sc1 * sc2;\n    c = (c0 + c1mag*c2mag) * s12;\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Improper problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    // force & energy\n    // p = 1 + cos(n*phi) for d = 1\n    // p = 1 - cos(n*phi) for d = -1\n    // pd = dp/dc / 2\n\n    m = multiplicity[type];\n\n    if (m == 2) {\n      p = 2.0*c*c;\n      pd = 2.0*c;\n    } else if (m == 3) {\n      rc2 = c*c;\n      p = (4.0*rc2-3.0)*c + 1.0;\n      pd = 6.0*rc2 - 1.5;\n    } else if (m == 4) {\n      rc2 = c*c;\n      p = 8.0*(rc2-1)*rc2 + 2.0;\n      pd = (16.0*rc2-8.0)*c;\n    } else if (m == 6) {\n      rc2 = c*c;\n      p = ((32.0*rc2-48.0)*rc2 + 18.0)*rc2;\n      pd = (96.0*(rc2-1.0)*rc2 + 18.0)*c;\n    } else if (m == 1) {\n      p = c + 1.0;\n      pd = 0.5;\n    } else if (m == 5) {\n      rc2 = c*c;\n      p = ((16.0*rc2-20.0)*rc2 + 5.0)*c + 1.0;\n      pd = (40.0*rc2-30.0)*rc2 + 2.5;\n    } else if (m == 0) {\n      p = 2.0;\n      pd = 0.0;\n    }\n\n    if (sign[type] == -1) {\n      p = 2.0 - p;\n      pd = -pd;\n    }\n\n    if (eflag) eimproper = k[type]*p;\n\n    a = 2.0 * k[type] * pd;\n    c = c * a;\n    s12 = s12 * a;\n    a11 = c*sb1*s1;\n    a22 = -sb2*(2.0*c0*s12 - c*(s1+s2));\n    a33 = c*sb3*s2;\n    a12 = -r12c1*(c1mag*c*s1 + c2mag*s12);\n    a13 = -rb1*rb3*s12;\n    a23 = r12c2*(c2mag*c*s2 + c1mag*s12);\n\n    sx2  = a12*vb1x + a22*vb2x + a23*vb3x;\n    sy2  = a12*vb1y + a22*vb2y + a23*vb3y;\n    sz2  = a12*vb1z + a22*vb2z + a23*vb3z;\n\n    f1[0] = a11*vb1x + a12*vb2x + a13*vb3x;\n    f1[1] = a11*vb1y + a12*vb2y + a13*vb3y;\n    f1[2] = a11*vb1z + a12*vb2z + a13*vb3z;\n\n    f2[0] = -sx2 - f1[0];\n    f2[1] = -sy2 - f1[1];\n    f2[2] = -sz2 - f1[2];\n\n    f4[0] = a13*vb1x + a23*vb2x + a33*vb3x;\n    f4[1] = a13*vb1y + a23*vb2y + a33*vb3y;\n    f4[2] = a13*vb1z + a23*vb2z + a33*vb3z;\n\n    f3[0] = sx2 - f4[0];\n    f3[1] = sy2 - f4[1];\n    f3[2] = sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,eimproper,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ImproperCvff::allocate()\n{\n  allocated = 1;\n  int n = atom->nimpropertypes;\n\n  memory->create(k,n+1,\"improper:k\");\n  memory->create(sign,n+1,\"improper:sign\");\n  memory->create(multiplicity,n+1,\"improper:multiplicity\");\n\n  memory->create(setflag,n+1,\"improper:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid ImproperCvff::coeff(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Incorrect args for improper coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nimpropertypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  int sign_one = force->inumeric(FLERR,arg[2]);\n  int multiplicity_one = force->inumeric(FLERR,arg[3]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    sign[i] = sign_one;\n    multiplicity[i] = multiplicity_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for improper coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid ImproperCvff::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nimpropertypes,fp);\n  fwrite(&sign[1],sizeof(int),atom->nimpropertypes,fp);\n  fwrite(&multiplicity[1],sizeof(int),atom->nimpropertypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid ImproperCvff::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nimpropertypes,fp);\n    fread(&sign[1],sizeof(int),atom->nimpropertypes,fp);\n    fread(&multiplicity[1],sizeof(int),atom->nimpropertypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nimpropertypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sign[1],atom->nimpropertypes,MPI_INT,0,world);\n  MPI_Bcast(&multiplicity[1],atom->nimpropertypes,MPI_INT,0,world);\n\n  for (int i = 1; i <= atom->nimpropertypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid ImproperCvff::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nimpropertypes; i++)\n    fprintf(fp,\"%d %g %d %d\\n\",i,k[i],sign[i],multiplicity[i]);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"angle_harmonic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define SMALL 0.001\n\n/* ---------------------------------------------------------------------- */\n\nAngleHarmonic::AngleHarmonic(LAMMPS *lmp) : Angle(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nAngleHarmonic::~AngleHarmonic()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(theta0);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleHarmonic::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,n,type;\n  double delx1,dely1,delz1,delx2,dely2,delz2;\n  double eangle,f1[3],f3[3];\n  double dtheta,tk;\n  double rsq1,rsq2,r1,r2,c,s,a,a11,a12,a22;\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // angle (cos and sin)\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n    s = 1.0/s;\n\n    // force & energy\n\n    dtheta = acos(c) - theta0[type];\n    tk = k[type] * dtheta;\n\n    if (eflag) eangle = tk*dtheta;\n\n    a = -2.0 * tk * s;\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    f1[0] = a11*delx1 + a12*delx2;\n    f1[1] = a11*dely1 + a12*dely2;\n    f1[2] = a11*delz1 + a12*delz2;\n    f3[0] = a22*delx2 + a12*delx1;\n    f3[1] = a22*dely2 + a12*dely1;\n    f3[2] = a22*delz2 + a12*delz1;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleHarmonic::allocate()\n{\n  allocated = 1;\n  int n = atom->nangletypes;\n\n  memory->create(k,n+1,\"angle:k\");\n  memory->create(theta0,n+1,\"angle:theta0\");\n\n  memory->create(setflag,n+1,\"angle:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more types\n------------------------------------------------------------------------- */\n\nvoid AngleHarmonic::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Incorrect args for angle coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nangletypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double theta0_one = force->numeric(FLERR,arg[2]);\n\n  // convert theta0 from degrees to radians\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    theta0[i] = theta0_one/180.0 * MY_PI;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for angle coefficients\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleHarmonic::equilibrium_angle(int i)\n{\n  return theta0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid AngleHarmonic::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nangletypes,fp);\n  fwrite(&theta0[1],sizeof(double),atom->nangletypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid AngleHarmonic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nangletypes,fp);\n    fread(&theta0[1],sizeof(double),atom->nangletypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nangletypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&theta0[1],atom->nangletypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nangletypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid AngleHarmonic::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nangletypes; i++)\n    fprintf(fp,\"%d %g %g\\n\",i,k[i],theta0[i]/MY_PI*180.0);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleHarmonic::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  double dtheta = acos(c) - theta0[type];\n  double tk = k[type] * dtheta;\n  return tk*dtheta;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(hbond/dreiding/morse,PairHbondDreidingMorse)\n\n#else\n\n#ifndef LMP_PAIR_HBOND_DREIDING_MORSE_H\n#define LMP_PAIR_HBOND_DREIDING_MORSE_H\n\n#include \"pair_hbond_dreiding_lj.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairHbondDreidingMorse : public PairHbondDreidingLJ {\n public:\n  PairHbondDreidingMorse(class LAMMPS *);\n  virtual ~PairHbondDreidingMorse() {};\n  virtual void compute(int, int);\n  void coeff(int, char **);\n  void init_style();\n  double single(int, int, int, int, double, double, double, double &);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair inner cutoff >= Pair outer cutoff\n\nThe specified cutoffs for the pair style are inconsistent.\n\nE: Pair style hbond/dreiding requires molecular system\n\nSelf-explanatory.\n\nE: Pair style hbond/dreiding requires atom IDs\n\nSelf-explanatory.\n\nE: Pair style hbond/dreiding requires an atom map, see atom_modify\n\nSelf-explanatory.\n\nE: Pair style hbond/dreiding requires newton pair on\n\nSee the newton command for details.\n\nE: No pair hbond/dreiding coefficients set\n\nSelf-explanatory.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n   ------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Tod A Pascal (Caltech)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_hbond_dreiding_morse.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"molecule.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"neigh_list.h\"\n#include \"domain.h\"\n#include \"math_const.h\"\n#include \"math_special.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\nusing namespace MathSpecial;\n\n#define SMALL 0.001\n#define CHUNK 8\n\n/* ---------------------------------------------------------------------- */\n\nPairHbondDreidingMorse::PairHbondDreidingMorse(LAMMPS *lmp) :\n  PairHbondDreidingLJ(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairHbondDreidingMorse::compute(int eflag, int vflag)\n{\n  int i,j,k,m,ii,jj,kk,inum,jnum,knum,itype,jtype,ktype,imol,iatom;\n  tagint tagprev;\n  double delx,dely,delz,rsq,rsq1,rsq2,r1,r2;\n  double factor_hb,force_angle,force_kernel,force_switch,evdwl,ehbond;\n  double c,s,a,b,d,ac,a11,a12,a22,vx1,vx2,vy1,vy2,vz1,vz2;\n  double fi[3],fj[3],delr1[3],delr2[3];\n  double r,dr,dexp,eng_morse,switch1,switch2;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  tagint *klist;\n\n  evdwl = ehbond = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *molindex = atom->molindex;\n  int *molatom = atom->molatom;\n  tagint **special = atom->special;\n  int **nspecial = atom->nspecial;\n  int *type = atom->type;\n  double *special_lj = force->special_lj;\n  int molecular = atom->molecular;\n  Molecule **onemols = atom->avec->onemols;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // ii = loop over donors\n  // jj = loop over acceptors\n  // kk = loop over hydrogens bonded to donor\n\n  int hbcount = 0;\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itype = type[i];\n    if (!donor[itype]) continue;\n    if (molecular == 1) {\n      klist = special[i];\n      knum = nspecial[i][0];\n    } else {\n      if (molindex[i] < 0) continue;\n      imol = molindex[i];\n      iatom = molatom[i];\n      klist = onemols[imol]->special[iatom];\n      knum = onemols[imol]->nspecial[iatom][0];\n      tagprev = tag[i] - iatom - 1;\n    }\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_hb = special_lj[sbmask(j)];\n      j &= NEIGHMASK;\n\n      jtype = type[j];\n      if (!acceptor[jtype]) continue;\n\n      delx = x[i][0] - x[j][0];\n      dely = x[i][1] - x[j][1];\n      delz = x[i][2] - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      for (kk = 0; kk < knum; kk++) {\n        if (molecular == 1) k = atom->map(klist[kk]);\n        else k = atom->map(klist[kk]+tagprev);\n        if (k < 0) continue;\n        ktype = type[k];\n        m = type2param[itype][jtype][ktype];\n        if (m < 0) continue;\n        const Param &pm = params[m];\n\n        if (rsq < pm.cut_outersq) {\n          delr1[0] = x[i][0] - x[k][0];\n          delr1[1] = x[i][1] - x[k][1];\n          delr1[2] = x[i][2] - x[k][2];\n          domain->minimum_image(delr1);\n          rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n          r1 = sqrt(rsq1);\n\n          delr2[0] = x[j][0] - x[k][0];\n          delr2[1] = x[j][1] - x[k][1];\n          delr2[2] = x[j][2] - x[k][2];\n          domain->minimum_image(delr2);\n          rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n          r2 = sqrt(rsq2);\n\n          // angle (cos and sin)\n\n          c = delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2];\n          c /= r1*r2;\n          if (c > 1.0) c = 1.0;\n          if (c < -1.0) c = -1.0;\n          ac = acos(c);\n\n          if (ac > pm.cut_angle && ac < (2.0*MY_PI - pm.cut_angle)) {\n            s = sqrt(1.0 - c*c);\n            if (s < SMALL) s = SMALL;\n\n            // Morse-specific kernel\n\n            r = sqrt(rsq);\n            dr = r - pm.r0;\n            dexp = exp(-pm.alpha * dr);\n            eng_morse = pm.d0 * (dexp*dexp - 2.0*dexp);\n            force_kernel = pm.morse1*(dexp*dexp - dexp)/r * powint(c,pm.ap);\n            force_angle = pm.ap * eng_morse * powint(c,pm.ap-1)*s;\n\t    force_switch = 0.0;\n\n            if (rsq > pm.cut_innersq) {\n              switch1 = (pm.cut_outersq-rsq) * (pm.cut_outersq-rsq) *\n                        (pm.cut_outersq + 2.0*rsq - 3.0*pm.cut_innersq) /\n                        pm.denom_vdw;\n              switch2 = 12.0*rsq * (pm.cut_outersq-rsq) *\n                        (rsq-pm.cut_innersq) / pm.denom_vdw;\n\n              force_kernel *= switch1;\n\t      force_angle  *= switch1;\n\t      force_switch  = eng_morse*switch2/rsq;\n              eng_morse    *= switch1;\n            }\n\n            if (eflag) {\n              evdwl = eng_morse * powint(c,pm.ap);\n              evdwl *= factor_hb;\n              ehbond += evdwl;\n            }\n\n            a = factor_hb*force_angle/s;\n            b = factor_hb*force_kernel;\n            d = factor_hb*force_switch;\n\n            a11 = a*c / rsq1;\n            a12 = -a / (r1*r2);\n            a22 = a*c / rsq2;\n\n            vx1 = a11*delr1[0] + a12*delr2[0];\n            vx2 = a22*delr2[0] + a12*delr1[0];\n            vy1 = a11*delr1[1] + a12*delr2[1];\n            vy2 = a22*delr2[1] + a12*delr1[1];\n            vz1 = a11*delr1[2] + a12*delr2[2];\n            vz2 = a22*delr2[2] + a12*delr1[2];\n\n            fi[0] = vx1 + (b+d)*delx;\n            fi[1] = vy1 + (b+d)*dely;\n            fi[2] = vz1 + (b+d)*delz;\n            fj[0] = vx2 - (b+d)*delx;\n            fj[1] = vy2 - (b+d)*dely;\n            fj[2] = vz2 - (b+d)*delz;\n\n            f[i][0] += fi[0];\n            f[i][1] += fi[1];\n            f[i][2] += fi[2];\n\n            f[j][0] += fj[0];\n            f[j][1] += fj[1];\n            f[j][2] += fj[2];\n\n            f[k][0] -= vx1 + vx2;\n            f[k][1] -= vy1 + vy2;\n            f[k][2] -= vz1 + vz2;\n\n            // KIJ instead of IJK b/c delr1/delr2 are both with respect to k\n\n            if (evflag) ev_tally3(k,i,j,evdwl,0.0,fi,fj,delr1,delr2);\n\n            hbcount++;\n          }\n        }\n      }\n    }\n  }\n\n  if (eflag_global) {\n    pvector[0] = hbcount;\n    pvector[1] = ehbond;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairHbondDreidingMorse::coeff(int narg, char **arg)\n{\n  if (narg < 7 || narg > 11)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi,klo,khi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n  force->bounds(FLERR,arg[2],atom->ntypes,klo,khi);\n\n  int donor_flag;\n  if (strcmp(arg[3],\"i\") == 0) donor_flag = 0;\n  else if (strcmp(arg[3],\"j\") == 0) donor_flag = 1;\n  else error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  double d0_one = force->numeric(FLERR,arg[4]);\n  double alpha_one = force->numeric(FLERR,arg[5]);\n  double r0_one = force->numeric(FLERR,arg[6]);\n\n  int ap_one = ap_global;\n  if (narg > 7) ap_one = force->inumeric(FLERR,arg[7]);\n  double cut_inner_one = cut_inner_global;\n  double cut_outer_one = cut_outer_global;\n  if (narg > 9) {\n    cut_inner_one = force->numeric(FLERR,arg[8]);\n    cut_outer_one = force->numeric(FLERR,arg[9]);\n  }\n  if (cut_inner_one>cut_outer_one)\n    error->all(FLERR,\"Pair inner cutoff >= Pair outer cutoff\");\n  double cut_angle_one = cut_angle_global;\n  if (narg > 10) cut_angle_one = force->numeric(FLERR,arg[10]) * MY_PI/180.0;\n\n  // grow params array if necessary\n\n  if (nparams == maxparam) {\n    maxparam += CHUNK;\n    params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                        \"pair:params\");\n  }\n\n  params[nparams].d0 = d0_one;\n  params[nparams].alpha = alpha_one;\n  params[nparams].r0 = r0_one;\n  params[nparams].ap = ap_one;\n  params[nparams].cut_inner = cut_inner_one;\n  params[nparams].cut_outer = cut_outer_one;\n  params[nparams].cut_innersq = cut_inner_one*cut_inner_one;\n  params[nparams].cut_outersq = cut_outer_one*cut_outer_one;\n  params[nparams].cut_angle = cut_angle_one;\n  params[nparams].denom_vdw =\n    (params[nparams].cut_outersq-params[nparams].cut_innersq) *\n    (params[nparams].cut_outersq-params[nparams].cut_innersq) *\n    (params[nparams].cut_outersq-params[nparams].cut_innersq);\n\n  // flag type2param with either i,j = D,A or j,i = D,A\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++)\n    for (int j = MAX(jlo,i); j <= jhi; j++)\n      for (int k = klo; k <= khi; k++) {\n        if (donor_flag == 0) type2param[i][j][k] = nparams;\n        else type2param[j][i][k] = nparams;\n        count++;\n      }\n  nparams++;\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairHbondDreidingMorse::init_style()\n{\n  // molecular system required to use special list to find H atoms\n  // tags required to use special list\n  // pair newton on required since are looping over D atoms\n  //   and computing forces on A,H which may be on different procs\n\n  if (atom->molecular == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires molecular system\");\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires atom IDs\");\n  if (atom->map_style == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires an atom map, \"\n               \"see atom_modify\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires newton pair on\");\n\n  // set donor[M]/acceptor[M] if any atom of type M is a donor/acceptor\n\n  int anyflag = 0;\n  int n = atom->ntypes;\n  for (int m = 1; m <= n; m++) donor[m] = acceptor[m] = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= n; j++)\n      for (int k = 1; k <= n; k++)\n        if (type2param[i][j][k] >= 0) {\n          anyflag = 1;\n          donor[i] = 1;\n          acceptor[j] = 1;\n        }\n\n  if (!anyflag) error->all(FLERR,\"No pair hbond/dreiding coefficients set\");\n\n  // set additional param values\n  // offset is for Morse only, angle term is not included\n\n  for (int m = 0; m < nparams; m++) {\n    params[m].morse1 = 2.0*params[m].d0*params[m].alpha;\n\n    /*\n    if (offset_flag) {\n      double alpha_dr = -params[m].alpha * (params[m].cut - params[m].r0);\n      params[m].offset = params[m].d0 *\n        ((exp(2.0*alpha_dr)) - (2.0*exp(alpha_dr)));\n    } else params[m].offset = 0.0;\n    */\n  }\n\n  // full neighbor list request\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairHbondDreidingMorse::single(int i, int j, int itype, int jtype,\n                                     double rsq,\n                                     double factor_coul, double factor_lj,\n                                     double &fforce)\n{\n  int k,kk,ktype,knum,m;\n  tagint tagprev;\n  double eng,eng_morse,force_kernel,force_angle;\n  double rsq1,rsq2,r1,r2,c,s,ac,r,dr,dexp,factor_hb;\n  double switch1,switch2;\n  double delr1[3],delr2[3];\n  tagint *klist;\n\n  double **x = atom->x;\n  int *type = atom->type;\n  double *special_lj = force->special_lj;\n\n  eng = 0.0;\n  fforce = 0;\n\n  //sanity check\n\n  if (!donor[itype]) return 0.0;\n  if (!acceptor[jtype]) return 0.0;\n\n  int molecular = atom->molecular;\n  if (molecular == 1) {\n    klist = atom->special[i];\n    knum = atom->nspecial[i][0];\n  } else {\n    if (atom->molindex[i] < 0) return 0.0;\n    int imol = atom->molindex[i];\n    int iatom = atom->molatom[i];\n    Molecule **onemols = atom->avec->onemols;\n    klist = onemols[imol]->special[iatom];\n    knum = onemols[imol]->nspecial[iatom][0];\n    tagprev = atom->tag[i] - iatom - 1;\n  }\n\n  factor_hb = special_lj[sbmask(j)];\n\n  for (kk = 0; kk < knum; kk++) {\n    if (molecular == 1) k = atom->map(klist[kk]);\n    else k = atom->map(klist[kk]+tagprev);\n\n    if (k < 0) continue;\n    ktype = type[k];\n    m = type2param[itype][jtype][ktype];\n    if (m < 0) continue;\n    const Param &pm = params[m];\n\n    delr1[0] = x[i][0] - x[k][0];\n    delr1[1] = x[i][1] - x[k][1];\n    delr1[2] = x[i][2] - x[k][2];\n    domain->minimum_image(delr1);\n    rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n    r1 = sqrt(rsq1);\n\n    delr2[0] = x[j][0] - x[k][0];\n    delr2[1] = x[j][1] - x[k][1];\n    delr2[2] = x[j][2] - x[k][2];\n    domain->minimum_image(delr2);\n    rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n    r2 = sqrt(rsq2);\n\n    // angle (cos and sin)\n\n    c = delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2];\n    c /= r1*r2;\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n    ac = acos(c);\n\n    if (ac < pm.cut_angle || ac > (2.0*MY_PI - pm.cut_angle)) return 0.0;\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n\n    // Morse-specific kernel\n\n    r = sqrt(rsq);\n    dr = r - pm.r0;\n    dexp = exp(-pm.alpha * dr);\n    eng_morse = pm.d0 * (dexp*dexp - 2.0*dexp);  //<-- BUGFIX 2012-11-14\n    force_kernel = pm.morse1*(dexp*dexp - dexp)/r * powint(c,pm.ap);\n    force_angle = pm.ap * eng_morse * powint(c,pm.ap-1)*s;\n\n    if (rsq > pm.cut_innersq) {\n      switch1 = (pm.cut_outersq-rsq) * (pm.cut_outersq-rsq) *\n                (pm.cut_outersq + 2.0*rsq - 3.0*pm.cut_innersq) /\n                pm.denom_vdw;\n      switch2 = 12.0*rsq * (pm.cut_outersq-rsq) *\n                (rsq-pm.cut_innersq) / pm.denom_vdw;\n      force_kernel = force_kernel*switch1 + eng_morse*switch2;\n      eng_morse *= switch1;\n    }\n\n    eng += eng_morse * powint(c,pm.ap)* factor_hb;\n    fforce += force_kernel*powint(c,pm.ap) + eng_morse*force_angle;\n  }\n\n  return eng;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"angle_charmm.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define SMALL 0.001\n\n/* ---------------------------------------------------------------------- */\n\nAngleCharmm::AngleCharmm(LAMMPS *lmp) : Angle(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nAngleCharmm::~AngleCharmm()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(theta0);\n    memory->destroy(k_ub);\n    memory->destroy(r_ub);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCharmm::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,n,type;\n  double delx1,dely1,delz1,delx2,dely2,delz2;\n  double eangle,f1[3],f3[3];\n  double dtheta,tk;\n  double rsq1,rsq2,r1,r2,c,s,a,a11,a12,a22;\n  double delxUB,delyUB,delzUB,rsqUB,rUB,dr,rk,forceUB;\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // Urey-Bradley bond\n\n    delxUB = x[i3][0] - x[i1][0];\n    delyUB = x[i3][1] - x[i1][1];\n    delzUB = x[i3][2] - x[i1][2];\n\n    rsqUB = delxUB*delxUB + delyUB*delyUB + delzUB*delzUB;\n    rUB = sqrt(rsqUB);\n\n    // Urey-Bradley force & energy\n\n    dr = rUB - r_ub[type];\n    rk = k_ub[type] * dr;\n\n    if (rUB > 0.0) forceUB = -2.0*rk/rUB;\n    else forceUB = 0.0;\n\n    if (eflag) eangle = rk*dr;\n\n    // angle (cos and sin)\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n    s = 1.0/s;\n\n    // harmonic force & energy\n\n    dtheta = acos(c) - theta0[type];\n    tk = k[type] * dtheta;\n\n    if (eflag) eangle += tk*dtheta;\n\n    a = -2.0 * tk * s;\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    f1[0] = a11*delx1 + a12*delx2 - delxUB*forceUB;\n    f1[1] = a11*dely1 + a12*dely2 - delyUB*forceUB;\n    f1[2] = a11*delz1 + a12*delz2 - delzUB*forceUB;\n\n    f3[0] = a22*delx2 + a12*delx1 + delxUB*forceUB;\n    f3[1] = a22*dely2 + a12*dely1 + delyUB*forceUB;\n    f3[2] = a22*delz2 + a12*delz1 + delzUB*forceUB;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCharmm::allocate()\n{\n  allocated = 1;\n  int n = atom->nangletypes;\n\n  memory->create(k,n+1,\"angle:k\");\n  memory->create(theta0,n+1,\"angle:theta0\");\n  memory->create(k_ub,n+1,\"angle:k_ub\");\n  memory->create(r_ub,n+1,\"angle:r_ub\");\n  memory->create(setflag,n+1,\"angle:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid AngleCharmm::coeff(int narg, char **arg)\n{\n  if (narg != 5) error->all(FLERR,\"Incorrect args for angle coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nangletypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double theta0_one = force->numeric(FLERR,arg[2]);\n  double k_ub_one = force->numeric(FLERR,arg[3]);\n  double r_ub_one = force->numeric(FLERR,arg[4]);\n\n  // convert theta0 from degrees to radians\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    theta0[i] = theta0_one/180.0 * MY_PI;\n    k_ub[i] = k_ub_one;\n    r_ub[i] = r_ub_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for angle coefficients\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCharmm::equilibrium_angle(int i)\n{\n  return theta0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid AngleCharmm::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nangletypes,fp);\n  fwrite(&theta0[1],sizeof(double),atom->nangletypes,fp);\n  fwrite(&k_ub[1],sizeof(double),atom->nangletypes,fp);\n  fwrite(&r_ub[1],sizeof(double),atom->nangletypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid AngleCharmm::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nangletypes,fp);\n    fread(&theta0[1],sizeof(double),atom->nangletypes,fp);\n    fread(&k_ub[1],sizeof(double),atom->nangletypes,fp);\n    fread(&r_ub[1],sizeof(double),atom->nangletypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nangletypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&theta0[1],atom->nangletypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&k_ub[1],atom->nangletypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r_ub[1],atom->nangletypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nangletypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid AngleCharmm::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nangletypes; i++)\n    fprintf(fp,\"%d %g %g %g %g\\n\",\n            i,k[i],theta0[i]/MY_PI*180.0,k_ub[i],r_ub[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCharmm::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double delxUB = x[i3][0] - x[i1][0];\n  double delyUB = x[i3][1] - x[i1][1];\n  double delzUB = x[i3][2] - x[i1][2];\n  domain->minimum_image(delxUB,delyUB,delzUB);\n  double rUB = sqrt(delxUB*delxUB + delyUB*delyUB + delzUB*delzUB);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  double dtheta = acos(c) - theta0[type];\n  double tk = k[type] * dtheta;\n  double dr = rUB - r_ub[type];\n  double rk = k_ub[type] * dr;\n\n  return (tk*dtheta + rk*dr);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#include \"fix_atomify.h\"\n#include \"memory.h\"\n#include \"compute.h\"\n#include \"modify.h\"\n#include \"error.h\"\n#include \"update.h\"\n#include \"compute_pe_atom.h\"\n#include \"compute_stress_atom.h\"\n#include <iostream>\nusing namespace std;\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\n\n/* ---------------------------------------------------------------------- */\n\nFixAtomify::FixAtomify(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg)\n{\n  callback = NULL;\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixAtomify::~FixAtomify() { }\n\n/* ---------------------------------------------------------------------- */\n\nint FixAtomify::setmask()\n{\n  int mask = 0;\n  mask |= END_OF_STEP;\n  mask |= MIN_POST_FORCE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixAtomify::init()\n{\n  if (callback == NULL)\n    error->all(FLERR,\"Fix atomify callback function not set\");\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixAtomify::update_computes()\n{\n  for(int i=0; i<modify->ncompute; i++) {\n    Compute *compute = modify->compute[i];\n    if(compute->peatomflag || compute->peflag || compute->pressatomflag || compute->pressflag) {\n      // Taken out for now. This gives poor performance and we should only do it if we need it.\n      // compute->addstep(update->ntimestep+1); \n    }\n  }\n}\n\nvoid FixAtomify::end_of_step()\n{\n    (this->callback)(ptr_caller,END_OF_STEP);\n    update_computes();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixAtomify::min_post_force(int vflag)\n{\n  (this->callback)(ptr_caller,MIN_POST_FORCE);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixAtomify::set_callback(FnPtr caller_callback, void *caller_ptr)\n{\n  callback = caller_callback;\n  ptr_caller = caller_ptr;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Chuanfu Luo (luochuanfu@gmail.com)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"bond_table.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\nenum{NONE,LINEAR,SPLINE};\n\n#define MAXLINE 1024\n#define BIGNUM 1.0e300\n\n/* ---------------------------------------------------------------------- */\n\nBondTable::BondTable(LAMMPS *lmp) : Bond(lmp)\n{\n  writedata = 0;\n  ntables = 0;\n  tables = NULL;\n}\n\n/* ---------------------------------------------------------------------- */\n\nBondTable::~BondTable()\n{\n  for (int m = 0; m < ntables; m++) free_table(&tables[m]);\n  memory->sfree(tables);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(r0);\n    memory->destroy(tabindex);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondTable::compute(int eflag, int vflag)\n{\n  int i1,i2,n,type;\n  double delx,dely,delz,ebond,fbond;\n  double rsq,r;\n  double u,mdu;\n\n  ebond = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    rsq = delx*delx + dely*dely + delz*delz;\n    r = sqrt(rsq);\n\n    // force & energy\n\n    uf_lookup(type,r,u,mdu);\n    fbond = mdu/r;\n    ebond = u;\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondTable::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(tabindex,n+1,\"bond:tabindex\");\n  memory->create(r0,n+1,\"bond:r0\");\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid BondTable::settings(int narg, char **arg)\n{\n  if (narg != 2) error->all(FLERR,\"Illegal bond_style command\");\n\n  tabstyle = NONE;\n  if (strcmp(arg[0],\"linear\") == 0) tabstyle = LINEAR;\n  else if (strcmp(arg[0],\"spline\") == 0) tabstyle = SPLINE;\n  else error->all(FLERR,\"Unknown table style in bond style table\");\n\n  tablength = force->inumeric(FLERR,arg[1]);\n  if (tablength < 2) error->all(FLERR,\"Illegal number of bond table entries\");\n\n  // delete old tables, since cannot just change settings\n\n  for (int m = 0; m < ntables; m++) free_table(&tables[m]);\n  memory->sfree(tables);\n\n  if (allocated) {\n     memory->destroy(setflag);\n     memory->destroy(tabindex);\n  }\n  allocated = 0;\n\n  ntables = 0;\n  tables = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid BondTable::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Illegal bond_coeff command\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  int me;\n  MPI_Comm_rank(world,&me);\n  tables = (Table *)\n    memory->srealloc(tables,(ntables+1)*sizeof(Table),\"bond:tables\");\n  Table *tb = &tables[ntables];\n  null_table(tb);\n  if (me == 0) read_table(tb,arg[1],arg[2]);\n  bcast_table(tb);\n\n  // error check on table parameters\n\n  if (tb->ninput <= 1) error->one(FLERR,\"Invalid bond table length\");\n\n  tb->lo = tb->rfile[0];\n  tb->hi = tb->rfile[tb->ninput-1];\n  if (tb->lo >= tb->hi) error->all(FLERR,\"Bond table values are not increasing\");\n\n  // spline read-in and compute r,e,f vectors within table\n\n  spline_table(tb);\n  compute_table(tb);\n\n  // store ptr to table in tabindex\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    tabindex[i] = ntables;\n    r0[i] = tb->r0;\n    setflag[i] = 1;\n    count++;\n  }\n  ntables++;\n\n  if (count == 0) error->all(FLERR,\"Illegal bond_coeff command\");\n}\n\n/* ----------------------------------------------------------------------\n   return an equilbrium bond length\n   should not be used, since don't know minimum of tabulated function\n------------------------------------------------------------------------- */\n\ndouble BondTable::equilibrium_distance(int i)\n{\n  return r0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to restart file\n ------------------------------------------------------------------------- */\n\nvoid BondTable::write_restart(FILE *fp)\n{\n  fwrite(&tabstyle,sizeof(int),1,fp);\n  fwrite(&tablength,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n    proc 0 reads from restart file, bcasts\n ------------------------------------------------------------------------- */\n\nvoid BondTable::read_restart(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&tabstyle,sizeof(int),1,fp);\n    fread(&tablength,sizeof(int),1,fp);\n  }\n  MPI_Bcast(&tabstyle,1,MPI_INT,0,world);\n  MPI_Bcast(&tablength,1,MPI_INT,0,world);\n\n  allocate();\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondTable::single(int type, double rsq, int i, int j,\n                         double &fforce)\n{\n  double r = sqrt(rsq);\n  double u;\n  double mdu;\n  uf_lookup(type,r,u,mdu);\n  fforce = mdu/r;\n  return u;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondTable::null_table(Table *tb)\n{\n  tb->rfile = tb->efile = tb->ffile = NULL;\n  tb->e2file = tb->f2file = NULL;\n  tb->r = tb->e = tb->de = NULL;\n  tb->f = tb->df = tb->e2 = tb->f2 = NULL;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondTable::free_table(Table *tb)\n{\n  memory->destroy(tb->rfile);\n  memory->destroy(tb->efile);\n  memory->destroy(tb->ffile);\n  memory->destroy(tb->e2file);\n  memory->destroy(tb->f2file);\n\n  memory->destroy(tb->r);\n  memory->destroy(tb->e);\n  memory->destroy(tb->de);\n  memory->destroy(tb->f);\n  memory->destroy(tb->df);\n  memory->destroy(tb->e2);\n  memory->destroy(tb->f2);\n}\n\n/* ----------------------------------------------------------------------\n   read table file, only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid BondTable::read_table(Table *tb, char *file, char *keyword)\n{\n  char line[MAXLINE];\n  double emin = BIGNUM;\n\n  // open file\n\n  FILE *fp = force->open_potential(file);\n  if (fp == NULL) {\n    char str[128];\n    sprintf(str,\"Cannot open file %s\",file);\n    error->one(FLERR,str);\n  }\n\n  // loop until section found with matching keyword\n\n  while (1) {\n    if (fgets(line,MAXLINE,fp) == NULL)\n      error->one(FLERR,\"Did not find keyword in table file\");\n    if (strspn(line,\" \\t\\n\\r\") == strlen(line)) continue;    // blank line\n    if (line[0] == '#') continue;                          // comment\n    char *word = strtok(line,\" \\t\\n\\r\");\n    if (strcmp(word,keyword) == 0) break;           // matching keyword\n    fgets(line,MAXLINE,fp);                         // no match, skip section\n    param_extract(tb,line);\n    fgets(line,MAXLINE,fp);\n    for (int i = 0; i < tb->ninput; i++) fgets(line,MAXLINE,fp);\n  }\n\n  // read args on 2nd line of section\n  // allocate table arrays for file values\n\n  fgets(line,MAXLINE,fp);\n  param_extract(tb,line);\n  memory->create(tb->rfile,tb->ninput,\"bond:rfile\");\n  memory->create(tb->efile,tb->ninput,\"bond:efile\");\n  memory->create(tb->ffile,tb->ninput,\"bond:ffile\");\n\n  // read r,e,f table values from file\n\n  int itmp;\n  int cerror = 0;\n  int r0idx = -1;\n\n  fgets(line,MAXLINE,fp);\n  for (int i = 0; i < tb->ninput; i++) {\n    if (NULL == fgets(line,MAXLINE,fp))\n      error->one(FLERR,\"Premature end of file in bond table\");\n    if (4 != sscanf(line,\"%d %lg %lg %lg\",\n                    &itmp,&tb->rfile[i],&tb->efile[i],&tb->ffile[i])) ++cerror;\n    if (tb->efile[i] < emin) {\n      emin = tb->efile[i];\n      r0idx = i;\n    }\n  }\n  fclose(fp);\n\n  // infer r0 from minimum of potential, if not given explicitly\n\n  if ((tb->r0 == 0.0) && (r0idx >= 0)) tb->r0 = tb->rfile[r0idx];\n\n  // warn if force != dE/dr at any point that is not an inflection point\n  // check via secant approximation to dE/dr\n  // skip two end points since do not have surrounding secants\n  // inflection point is where curvature changes sign\n\n  double r,e,f,rprev,rnext,eprev,enext,fleft,fright;\n\n  int ferror = 0;\n  for (int i = 1; i < tb->ninput-1; i++) {\n    r = tb->rfile[i];\n    rprev = tb->rfile[i-1];\n    rnext = tb->rfile[i+1];\n    e = tb->efile[i];\n    eprev = tb->efile[i-1];\n    enext = tb->efile[i+1];\n    f = tb->ffile[i];\n    fleft = - (e-eprev) / (r-rprev);\n    fright = - (enext-e) / (rnext-r);\n    if (f < fleft && f < fright) ferror++;\n    if (f > fleft && f > fright) ferror++;\n    //printf(\"Values %d: %g %g %g\\n\",i,r,e,f);\n    //printf(\"  secant %d %d %g: %g %g %g\\n\",i,ferror,r,fleft,fright,f);\n  }\n\n  if (ferror) {\n    char str[128];\n    sprintf(str,\"%d of %d force values in table are inconsistent with -dE/dr.\\n\"\n            \"  Should only be flagged at inflection points\",ferror,tb->ninput);\n    error->warning(FLERR,str);\n  }\n\n  // warn if data was read incompletely, e.g. columns were missing\n\n  if (cerror) {\n    char str[128];\n    sprintf(str,\"%d of %d lines in table were incomplete or could not be\"\n            \" parsed completely\",cerror,tb->ninput);\n    error->warning(FLERR,str);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   build spline representation of e,f over entire range of read-in table\n   this function sets these values in e2file,f2file\n------------------------------------------------------------------------- */\n\nvoid BondTable::spline_table(Table *tb)\n{\n  memory->create(tb->e2file,tb->ninput,\"bond:e2file\");\n  memory->create(tb->f2file,tb->ninput,\"bond:f2file\");\n\n  double ep0 = - tb->ffile[0];\n  double epn = - tb->ffile[tb->ninput-1];\n  spline(tb->rfile,tb->efile,tb->ninput,ep0,epn,tb->e2file);\n\n  if (tb->fpflag == 0) {\n    tb->fplo = (tb->ffile[1] - tb->ffile[0]) / (tb->rfile[1] - tb->rfile[0]);\n    tb->fphi = (tb->ffile[tb->ninput-1] - tb->ffile[tb->ninput-2]) /\n      (tb->rfile[tb->ninput-1] - tb->rfile[tb->ninput-2]);\n  }\n\n  double fp0 = tb->fplo;\n  double fpn = tb->fphi;\n  spline(tb->rfile,tb->ffile,tb->ninput,fp0,fpn,tb->f2file);\n\n}\n\n/* ----------------------------------------------------------------------\n   compute r,e,f vectors from splined values\n------------------------------------------------------------------------- */\n\nvoid BondTable::compute_table(Table *tb)\n{\n  // delta = table spacing for N-1 bins\n  int tlm1 = tablength-1;\n\n  tb->delta = (tb->hi - tb->lo)/ tlm1;\n  tb->invdelta = 1.0/tb->delta;\n  tb->deltasq6 = tb->delta*tb->delta / 6.0;\n\n  // N-1 evenly spaced bins in r from min to max\n  // r,e,f = value at lower edge of bin\n  // de,df values = delta values of e,f\n  // r,e,f are N in length so de,df arrays can compute difference\n\n  memory->create(tb->r,tablength,\"bond:r\");\n  memory->create(tb->e,tablength,\"bond:e\");\n  memory->create(tb->de,tlm1,\"bond:de\");\n  memory->create(tb->f,tablength,\"bond:f\");\n  memory->create(tb->df,tlm1,\"bond:df\");\n  memory->create(tb->e2,tablength,\"bond:e2\");\n  memory->create(tb->f2,tablength,\"bond:f2\");\n\n  double a;\n  for (int i = 0; i < tablength; i++) {\n    a = tb->lo + i*tb->delta;\n    tb->r[i] = a;\n    tb->e[i] = splint(tb->rfile,tb->efile,tb->e2file,tb->ninput,a);\n    tb->f[i] = splint(tb->rfile,tb->ffile,tb->f2file,tb->ninput,a);\n  }\n\n  for (int i = 0; i < tlm1; i++) {\n    tb->de[i] = tb->e[i+1] - tb->e[i];\n    tb->df[i] = tb->f[i+1] - tb->f[i];\n  }\n\n  double ep0 = - tb->f[0];\n  double epn = - tb->f[tlm1];\n  spline(tb->r,tb->e,tablength,ep0,epn,tb->e2);\n  spline(tb->r,tb->f,tablength,tb->fplo,tb->fphi,tb->f2);\n}\n\n/* ----------------------------------------------------------------------\n   extract attributes from parameter line in table section\n   format of line: N value FP fplo fphi EQ r0\n   N is required, other params are optional\n------------------------------------------------------------------------- */\n\nvoid BondTable::param_extract(Table *tb, char *line)\n{\n  tb->ninput = 0;\n  tb->fpflag = 0;\n  tb->r0 = 0.0;\n\n  char *word = strtok(line,\" \\t\\n\\r\\f\");\n  while (word) {\n    if (strcmp(word,\"N\") == 0) {\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->ninput = atoi(word);\n    } else if (strcmp(word,\"FP\") == 0) {\n      tb->fpflag = 1;\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->fplo = atof(word);\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->fphi = atof(word);\n    } else if (strcmp(word,\"EQ\") == 0) {\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->r0 = atof(word);\n    } else {\n      error->one(FLERR,\"Invalid keyword in bond table parameters\");\n    }\n    word = strtok(NULL,\" \\t\\n\\r\\f\");\n  }\n\n  if (tb->ninput == 0) error->one(FLERR,\"Bond table parameters did not set N\");\n}\n\n/* ----------------------------------------------------------------------\n   broadcast read-in table info from proc 0 to other procs\n   this function communicates these values in Table:\n     ninput,rfile,efile,ffile,fpflag,fplo,fphi,r0\n------------------------------------------------------------------------- */\n\nvoid BondTable::bcast_table(Table *tb)\n{\n  MPI_Bcast(&tb->ninput,1,MPI_INT,0,world);\n  MPI_Bcast(&tb->r0,1,MPI_INT,0,world);\n\n  int me;\n  MPI_Comm_rank(world,&me);\n  if (me > 0) {\n    memory->create(tb->rfile,tb->ninput,\"angle:rfile\");\n    memory->create(tb->efile,tb->ninput,\"angle:efile\");\n    memory->create(tb->ffile,tb->ninput,\"angle:ffile\");\n  }\n\n  MPI_Bcast(tb->rfile,tb->ninput,MPI_DOUBLE,0,world);\n  MPI_Bcast(tb->efile,tb->ninput,MPI_DOUBLE,0,world);\n  MPI_Bcast(tb->ffile,tb->ninput,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&tb->fpflag,1,MPI_INT,0,world);\n  if (tb->fpflag) {\n    MPI_Bcast(&tb->fplo,1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&tb->fphi,1,MPI_DOUBLE,0,world);\n  }\n  MPI_Bcast(&tb->r0,1,MPI_INT,0,world);\n}\n\n/* ----------------------------------------------------------------------\n   spline and splint routines modified from Numerical Recipes\n------------------------------------------------------------------------- */\n\nvoid BondTable::spline(double *x, double *y, int n,\n                       double yp1, double ypn, double *y2)\n{\n  int i,k;\n  double p,qn,sig,un;\n  double *u = new double[n];\n\n  if (yp1 > 0.99e30) y2[0] = u[0] = 0.0;\n  else {\n    y2[0] = -0.5;\n    u[0] = (3.0/(x[1]-x[0])) * ((y[1]-y[0]) / (x[1]-x[0]) - yp1);\n  }\n  for (i = 1; i < n-1; i++) {\n    sig = (x[i]-x[i-1]) / (x[i+1]-x[i-1]);\n    p = sig*y2[i-1] + 2.0;\n    y2[i] = (sig-1.0) / p;\n    u[i] = (y[i+1]-y[i]) / (x[i+1]-x[i]) - (y[i]-y[i-1]) / (x[i]-x[i-1]);\n    u[i] = (6.0*u[i] / (x[i+1]-x[i-1]) - sig*u[i-1]) / p;\n  }\n  if (ypn > 0.99e30) qn = un = 0.0;\n  else {\n    qn = 0.5;\n    un = (3.0/(x[n-1]-x[n-2])) * (ypn - (y[n-1]-y[n-2]) / (x[n-1]-x[n-2]));\n  }\n  y2[n-1] = (un-qn*u[n-2]) / (qn*y2[n-2] + 1.0);\n  for (k = n-2; k >= 0; k--) y2[k] = y2[k]*y2[k+1] + u[k];\n\n  delete [] u;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondTable::splint(double *xa, double *ya, double *y2a, int n, double x)\n{\n  int klo,khi,k;\n  double h,b,a,y;\n\n  klo = 0;\n  khi = n-1;\n  while (khi-klo > 1) {\n    k = (khi+klo) >> 1;\n    if (xa[k] > x) khi = k;\n    else klo = k;\n  }\n  h = xa[khi]-xa[klo];\n  a = (xa[khi]-x) / h;\n  b = (x-xa[klo]) / h;\n  y = a*ya[klo] + b*ya[khi] +\n    ((a*a*a-a)*y2a[klo] + (b*b*b-b)*y2a[khi]) * (h*h)/6.0;\n  return y;\n}\n\n/* ----------------------------------------------------------------------\n   calculate potential u and force f at distance x\n   insure x is between bond min/max, exit with error if not\n------------------------------------------------------------------------- */\n\nvoid BondTable::uf_lookup(int type, double x, double &u, double &f)\n{\n  int itable;\n  double fraction,a,b;\n  char estr[128];\n\n  Table *tb = &tables[tabindex[type]];\n  if (x < tb->lo) {\n    sprintf(estr,\"Bond length < table inner cutoff: \"\n            \"type %d length %g\",type,x);\n    error->one(FLERR,estr);\n  }\n  if (x > tb->hi) {\n    sprintf(estr,\"Bond length > table outer cutoff: \"\n            \"type %d length %g\",type,x);\n    error->one(FLERR,estr);\n  }\n\n  if (tabstyle == LINEAR) {\n    itable = static_cast<int> ((x - tb->lo) * tb->invdelta);\n    fraction = (x - tb->r[itable]) * tb->invdelta;\n    u = tb->e[itable] + fraction*tb->de[itable];\n    f = tb->f[itable] + fraction*tb->df[itable];\n  } else if (tabstyle == SPLINE) {\n    itable = static_cast<int> ((x - tb->lo) * tb->invdelta);\n    fraction = (x - tb->r[itable]) * tb->invdelta;\n\n    b = (x - tb->r[itable]) * tb->invdelta;\n    a = 1.0 - b;\n    u = a * tb->e[itable] + b * tb->e[itable+1] +\n      ((a*a*a-a)*tb->e2[itable] + (b*b*b-b)*tb->e2[itable+1]) *\n      tb->deltasq6;\n    f = a * tb->f[itable] + b * tb->f[itable+1] +\n      ((a*a*a-a)*tb->f2[itable] + (b*b*b-b)*tb->f2[itable+1]) *\n      tb->deltasq6;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   calculate potential u at distance x\n   insure x is between bond min/max\n------------------------------------------------------------------------- */\n\nvoid BondTable::u_lookup(int type, double x, double &u)\n{\n  int itable;\n  double fraction,a,b;\n\n  Table *tb = &tables[tabindex[type]];\n  x = MAX(x,tb->lo);\n  x = MIN(x,tb->hi);\n\n  if (tabstyle == LINEAR) {\n    itable = static_cast<int> ((x - tb->lo) * tb->invdelta);\n    fraction = (x - tb->r[itable]) * tb->invdelta;\n    u = tb->e[itable] + fraction*tb->de[itable];\n  } else if (tabstyle == SPLINE) {\n    itable = static_cast<int> ((x - tb->lo) * tb->invdelta);\n    fraction = (x - tb->r[itable]) * tb->invdelta;\n\n    b = (x - tb->r[itable]) * tb->invdelta;\n    a = 1.0 - b;\n    u = a * tb->e[itable] + b * tb->e[itable+1] +\n      ((a*a*a-a)*tb->e2[itable] + (b*b*b-b)*tb->e2[itable+1]) *\n      tb->deltasq6;\n  }\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Tod A Pascal (Caltech)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_hbond_dreiding_lj.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"molecule.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"neigh_list.h\"\n#include \"domain.h\"\n#include \"math_const.h\"\n#include \"math_special.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\nusing namespace MathSpecial;\n\n#define SMALL 0.001\n#define CHUNK 8\n\n/* ---------------------------------------------------------------------- */\n\nPairHbondDreidingLJ::PairHbondDreidingLJ(LAMMPS *lmp) : Pair(lmp)\n{\n  // hbond cannot compute virial as F dot r\n  // due to using map() to find bonded H atoms which are not near donor atom\n\n  no_virial_fdotr_compute = 1;\n  restartinfo = 0;\n\n  nparams = maxparam = 0;\n  params = NULL;\n\n  nextra = 2;\n  pvector = new double[2];\n}\n\n/* ---------------------------------------------------------------------- */\n\nPairHbondDreidingLJ::~PairHbondDreidingLJ()\n{\n  memory->sfree(params);\n  delete [] pvector;\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n\n    delete [] donor;\n    delete [] acceptor;\n    memory->destroy(type2param);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairHbondDreidingLJ::compute(int eflag, int vflag)\n{\n  int i,j,k,m,ii,jj,kk,inum,jnum,knum,itype,jtype,ktype,iatom,imol;\n  tagint tagprev;\n  double delx,dely,delz,rsq,rsq1,rsq2,r1,r2;\n  double factor_hb,force_angle,force_kernel,evdwl,eng_lj,ehbond,force_switch;\n  double c,s,a,b,ac,a11,a12,a22,vx1,vx2,vy1,vy2,vz1,vz2,d;\n  double fi[3],fj[3],delr1[3],delr2[3];\n  double r2inv,r10inv;\n  double switch1,switch2;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  tagint *klist;\n\n  evdwl = ehbond = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *molindex = atom->molindex;\n  int *molatom = atom->molatom;\n  tagint **special = atom->special;\n  int **nspecial = atom->nspecial;\n  int *type = atom->type;\n  double *special_lj = force->special_lj;\n  int molecular = atom->molecular;\n  Molecule **onemols = atom->avec->onemols;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // ii = loop over donors\n  // jj = loop over acceptors\n  // kk = loop over hydrogens bonded to donor\n\n  int hbcount = 0;\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itype = type[i];\n    if (!donor[itype]) continue;\n    if (molecular == 1) {\n      klist = special[i];\n      knum = nspecial[i][0];\n    } else {\n      if (molindex[i] < 0) continue;\n      imol = molindex[i];\n      iatom = molatom[i];\n      klist = onemols[imol]->special[iatom];\n      knum = onemols[imol]->nspecial[iatom][0];\n      tagprev = tag[i] - iatom - 1;\n    }\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      factor_hb = special_lj[sbmask(j)];\n      j &= NEIGHMASK;\n\n      jtype = type[j];\n      if (!acceptor[jtype]) continue;\n\n      delx = x[i][0] - x[j][0];\n      dely = x[i][1] - x[j][1];\n      delz = x[i][2] - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      for (kk = 0; kk < knum; kk++) {\n        if (molecular == 1) k = atom->map(klist[kk]);\n        else k = atom->map(klist[kk]+tagprev);\n        if (k < 0) continue;\n        ktype = type[k];\n        m = type2param[itype][jtype][ktype];\n        if (m < 0) continue;\n        const Param &pm = params[m];\n\n        if (rsq < pm.cut_outersq) {\n          delr1[0] = x[i][0] - x[k][0];\n          delr1[1] = x[i][1] - x[k][1];\n          delr1[2] = x[i][2] - x[k][2];\n          domain->minimum_image(delr1);\n          rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n          r1 = sqrt(rsq1);\n\n          delr2[0] = x[j][0] - x[k][0];\n          delr2[1] = x[j][1] - x[k][1];\n          delr2[2] = x[j][2] - x[k][2];\n          domain->minimum_image(delr2);\n          rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n          r2 = sqrt(rsq2);\n\n          // angle (cos and sin)\n\n          c = delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2];\n          c /= r1*r2;\n          if (c > 1.0) c = 1.0;\n          if (c < -1.0) c = -1.0;\n          ac = acos(c);\n\n          if (ac > pm.cut_angle && ac < (2.0*MY_PI - pm.cut_angle)) {\n            s = sqrt(1.0 - c*c);\n            if (s < SMALL) s = SMALL;\n\n            // LJ-specific kernel\n\n            r2inv = 1.0/rsq;\n            r10inv = r2inv*r2inv*r2inv*r2inv*r2inv;\n            force_kernel = r10inv*(pm.lj1*r2inv - pm.lj2)*r2inv *\n              powint(c,pm.ap);\n            force_angle = pm.ap * r10inv*(pm.lj3*r2inv - pm.lj4) *\n              powint(c,pm.ap-1)*s;\n\n            eng_lj = r10inv*(pm.lj3*r2inv - pm.lj4);\n\n            force_switch=0.0;\n\n            if (rsq > pm.cut_innersq) {\n              switch1 = (pm.cut_outersq-rsq) * (pm.cut_outersq-rsq) *\n                        (pm.cut_outersq + 2.0*rsq - 3.0*pm.cut_innersq) /\n                        pm.denom_vdw;\n              switch2 = 12.0*rsq * (pm.cut_outersq-rsq) *\n                        (rsq-pm.cut_innersq) / pm.denom_vdw;\n\n              force_kernel *= switch1;\n              force_angle  *= switch1;\n              force_switch  = eng_lj*switch2/rsq;\n              eng_lj       *= switch1;\n            }\n\n            if (eflag) {\n              evdwl = eng_lj * powint(c,pm.ap);\n              evdwl *= factor_hb;\n              ehbond += evdwl;\n            }\n\n            a = factor_hb*force_angle/s;\n            b = factor_hb*force_kernel;\n            d = factor_hb*force_switch;\n\n            a11 = a*c / rsq1;\n            a12 = -a / (r1*r2);\n            a22 = a*c / rsq2;\n\n            vx1 = a11*delr1[0] + a12*delr2[0];\n            vx2 = a22*delr2[0] + a12*delr1[0];\n            vy1 = a11*delr1[1] + a12*delr2[1];\n            vy2 = a22*delr2[1] + a12*delr1[1];\n            vz1 = a11*delr1[2] + a12*delr2[2];\n            vz2 = a22*delr2[2] + a12*delr1[2];\n\n            fi[0] = vx1 + b*delx + d*delx;\n            fi[1] = vy1 + b*dely + d*dely;\n            fi[2] = vz1 + b*delz + d*delz;\n            fj[0] = vx2 - b*delx - d*delx;\n            fj[1] = vy2 - b*dely - d*dely;\n            fj[2] = vz2 - b*delz - d*delz;\n\n            f[i][0] += fi[0];\n            f[i][1] += fi[1];\n            f[i][2] += fi[2];\n\n            f[j][0] += fj[0];\n            f[j][1] += fj[1];\n            f[j][2] += fj[2];\n\n            f[k][0] -= vx1 + vx2;\n            f[k][1] -= vy1 + vy2;\n            f[k][2] -= vz1 + vz2;\n\n            // KIJ instead of IJK b/c delr1/delr2 are both with respect to k\n\n            if (evflag) ev_tally3(k,i,j,evdwl,0.0,fi,fj,delr1,delr2);\n\n            hbcount++;\n          }\n        }\n      }\n    }\n  }\n\n  if (eflag_global) {\n    pvector[0] = hbcount;\n    pvector[1] = ehbond;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairHbondDreidingLJ::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  // mark all setflag as set, since don't require pair_coeff of all I,J\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 1;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  donor = new int[n+1];\n  acceptor = new int[n+1];\n  memory->create(type2param,n+1,n+1,n+1,\"pair:type2param\");\n\n  int i,j,k;\n  for (i = 1; i <= n; i++)\n    for (j = 1; j <= n; j++)\n      for (k = 1; k <= n; k++)\n        type2param[i][j][k] = -1;\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairHbondDreidingLJ::settings(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Illegal pair_style command\");\n\n  ap_global = force->inumeric(FLERR,arg[0]);\n  cut_inner_global = force->numeric(FLERR,arg[1]);\n  cut_outer_global = force->numeric(FLERR,arg[2]);\n  cut_angle_global = force->numeric(FLERR,arg[3]) * MY_PI/180.0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairHbondDreidingLJ::coeff(int narg, char **arg)\n{\n  if (narg < 6 || narg > 10)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi,klo,khi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n  force->bounds(FLERR,arg[2],atom->ntypes,klo,khi);\n\n  int donor_flag;\n  if (strcmp(arg[3],\"i\") == 0) donor_flag = 0;\n  else if (strcmp(arg[3],\"j\") == 0) donor_flag = 1;\n  else error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  double epsilon_one = force->numeric(FLERR,arg[4]);\n  double sigma_one = force->numeric(FLERR,arg[5]);\n\n  int ap_one = ap_global;\n  if (narg > 6) ap_one = force->inumeric(FLERR,arg[6]);\n  double cut_inner_one = cut_inner_global;\n  double cut_outer_one = cut_outer_global;\n  if (narg > 8) {\n    cut_inner_one = force->numeric(FLERR,arg[7]);\n    cut_outer_one = force->numeric(FLERR,arg[8]);\n  }\n  if (cut_inner_one>cut_outer_one)\n    error->all(FLERR,\"Pair inner cutoff >= Pair outer cutoff\");\n  double cut_angle_one = cut_angle_global;\n  if (narg == 10) cut_angle_one = force->numeric(FLERR,arg[9]) * MY_PI/180.0;\n  // grow params array if necessary\n\n  if (nparams == maxparam) {\n    maxparam += CHUNK;\n    params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                        \"pair:params\");\n  }\n\n  params[nparams].epsilon = epsilon_one;\n  params[nparams].sigma = sigma_one;\n  params[nparams].ap = ap_one;\n  params[nparams].cut_inner = cut_inner_one;\n  params[nparams].cut_outer = cut_outer_one;\n  params[nparams].cut_innersq = cut_inner_one*cut_inner_one;\n  params[nparams].cut_outersq = cut_outer_one*cut_outer_one;\n  params[nparams].cut_angle = cut_angle_one;\n  params[nparams].denom_vdw =\n    (params[nparams].cut_outersq-params[nparams].cut_innersq) *\n    (params[nparams].cut_outersq-params[nparams].cut_innersq) *\n    (params[nparams].cut_outersq-params[nparams].cut_innersq);\n\n  // flag type2param with either i,j = D,A or j,i = D,A\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++)\n    for (int j = MAX(jlo,i); j <= jhi; j++)\n      for (int k = klo; k <= khi; k++) {\n        if (donor_flag == 0) type2param[i][j][k] = nparams;\n        else type2param[j][i][k] = nparams;\n        count++;\n      }\n  nparams++;\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairHbondDreidingLJ::init_style()\n{\n  // molecular system required to use special list to find H atoms\n  // tags required to use special list\n  // pair newton on required since are looping over D atoms\n  //   and computing forces on A,H which may be on different procs\n\n  if (atom->molecular == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires molecular system\");\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires atom IDs\");\n  if (atom->map_style == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires an atom map, \"\n               \"see atom_modify\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style hbond/dreiding requires newton pair on\");\n\n  // set donor[M]/acceptor[M] if any atom of type M is a donor/acceptor\n\n  int anyflag = 0;\n  int n = atom->ntypes;\n  for (int m = 1; m <= n; m++) donor[m] = acceptor[m] = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= n; j++)\n      for (int k = 1; k <= n; k++)\n        if (type2param[i][j][k] >= 0) {\n          anyflag = 1;\n          donor[i] = 1;\n          acceptor[j] = 1;\n        }\n\n  if (!anyflag) error->all(FLERR,\"No pair hbond/dreiding coefficients set\");\n\n  // set additional param values\n  // offset is for LJ only, angle term is not included\n\n  for (int m = 0; m < nparams; m++) {\n    params[m].lj1 = 60.0*params[m].epsilon*pow(params[m].sigma,12.0);\n    params[m].lj2 = 60.0*params[m].epsilon*pow(params[m].sigma,10.0);\n    params[m].lj3 = 5.0*params[m].epsilon*pow(params[m].sigma,12.0);\n    params[m].lj4 = 6.0*params[m].epsilon*pow(params[m].sigma,10.0);\n\n    /*\n    if (offset_flag) {\n      double ratio = params[m].sigma / params[m].cut_outer;\n      params[m].offset = params[m].epsilon *\n        ((2.0*pow(ratio,9.0)) - (3.0*pow(ratio,6.0)));\n    } else params[m].offset = 0.0;\n    */\n  }\n\n  // full neighbor list request\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairHbondDreidingLJ::init_one(int i, int j)\n{\n  int m;\n\n  // return maximum cutoff for any K with I,J = D,A or J,I = D,A\n  // donor/acceptor is not symmetric, IJ interaction != JI interaction\n\n  double cut = 0.0;\n  for (int k = 1; k <= atom->ntypes; k++) {\n    m = type2param[i][j][k];\n    if (m >= 0) cut = MAX(cut,params[m].cut_outer);\n    m = type2param[j][i][k];\n    if (m >= 0) cut = MAX(cut,params[m].cut_outer);\n  }\n  return cut;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairHbondDreidingLJ::single(int i, int j, int itype, int jtype,\n                                   double rsq,\n                                   double factor_coul, double factor_lj,\n                                   double &fforce)\n{\n  int k,kk,ktype,knum,m;\n  tagint tagprev;\n  double eng,eng_lj,force_kernel,force_angle;\n  double rsq1,rsq2,r1,r2,c,s,ac,r2inv,r10inv,factor_hb;\n  double switch1,switch2;\n  double delr1[3],delr2[3];\n  tagint *klist;\n\n  double **x = atom->x;\n  int *type = atom->type;\n  double *special_lj = force->special_lj;\n\n  eng = 0.0;\n  fforce = 0;\n\n  // sanity check\n\n  if (!donor[itype]) return 0.0;\n  if (!acceptor[jtype]) return 0.0;\n\n  int molecular = atom->molecular;\n  if (molecular == 1) {\n    klist = atom->special[i];\n    knum = atom->nspecial[i][0];\n  } else {\n    if (atom->molindex[i] < 0) return 0.0;\n    int imol = atom->molindex[i];\n    int iatom = atom->molatom[i];\n    Molecule **onemols = atom->avec->onemols;\n    klist = onemols[imol]->special[iatom];\n    knum = onemols[imol]->nspecial[iatom][0];\n    tagprev = atom->tag[i] - iatom - 1;\n  }\n\n  factor_hb = special_lj[sbmask(j)];\n\n  for (kk = 0; kk < knum; kk++) {\n    if (molecular == 1) k = atom->map(klist[kk]);\n    else k = atom->map(klist[kk]+tagprev);\n\n    if (k < 0) continue;\n    ktype = type[k];\n    m = type2param[itype][jtype][ktype];\n    if (m < 0) continue;\n    const Param &pm = params[m];\n\n    delr1[0] = x[i][0] - x[k][0];\n    delr1[1] = x[i][1] - x[k][1];\n    delr1[2] = x[i][2] - x[k][2];\n    domain->minimum_image(delr1);\n    rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n    r1 = sqrt(rsq1);\n\n    delr2[0] = x[j][0] - x[k][0];\n    delr2[1] = x[j][1] - x[k][1];\n    delr2[2] = x[j][2] - x[k][2];\n    domain->minimum_image(delr2);\n    rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n    r2 = sqrt(rsq2);\n\n    // angle (cos and sin)\n\n    c = delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2];\n    c /= r1*r2;\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n    ac = acos(c);\n\n    if (ac < pm.cut_angle || ac > (2.0*MY_PI - pm.cut_angle)) return 0.0;\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n\n    // LJ-specific kernel\n\n    r2inv = 1.0/rsq;\n    r10inv = r2inv*r2inv*r2inv*r2inv*r2inv;\n    force_kernel = r10inv*(pm.lj1*r2inv - pm.lj2)*r2inv * powint(c,pm.ap);\n    force_angle = pm.ap * r10inv*(pm.lj3*r2inv - pm.lj4) *\n      powint(c,pm.ap-1)*s;\n\n    // only lj part for now\n\n    eng_lj = r10inv*(pm.lj3*r2inv - pm.lj4);\n    if (rsq > pm.cut_innersq) {\n      switch1 = (pm.cut_outersq-rsq) * (pm.cut_outersq-rsq) *\n                (pm.cut_outersq + 2.0*rsq - 3.0*pm.cut_innersq) / pm.denom_vdw;\n      switch2 = 12.0*rsq * (pm.cut_outersq-rsq) *\n                (rsq-pm.cut_innersq) / pm.denom_vdw;\n      force_kernel = force_kernel*switch1 + eng_lj*switch2;\n      eng_lj *= switch1;\n    }\n\n    fforce += force_kernel*powint(c,pm.ap) + eng_lj*force_angle;\n    eng += eng_lj * powint(c,pm.ap) * factor_hb;\n  }\n\n  return eng;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(airebo/morse,PairAIREBOMorse)\n\n#else\n\n#ifndef LMP_PAIR_AIREBO_MORSE_H\n#define LMP_PAIR_AIREBO_MORSE_H\n\n#include \"pair_airebo.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairAIREBOMorse : public PairAIREBO {\n public:\n  PairAIREBOMorse(class LAMMPS *);\n  void settings(int, char **);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include \"pair_airebo_morse.h\"\n#include \"force.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairAIREBOMorse::PairAIREBOMorse(LAMMPS *lmp) : PairAIREBO(lmp) {}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairAIREBOMorse::settings(int narg, char **arg)\n{\n  PairAIREBO::settings(narg,arg);\n\n  morseflag = 1;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Ray Shan (Sandia, tnshan@sandia.gov)\n   Updates and debug: Tao Liang (U Florida, liang75@ufl.edu)\n                      Dundar Yilmaz (dundar.yilmaz@zirve.edu.tr)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_comb3.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"group.h\"\n#include \"update.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n#define PGDELTA 1\n#define MAXNEIGH 24\n\n/* ---------------------------------------------------------------------- */\n\nPairComb3::PairComb3(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  ghostneigh = 1;\n\n  nmax = 0;\n  NCo = NULL;\n  bbij = NULL;\n  map = NULL;\n  esm = NULL;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = 0;\n  maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n\n  intype = NULL;\n  afb = NULL;\n  dafb = NULL;\n  fafb = NULL;\n  dfafb = NULL;\n  ddfafb = NULL;\n  phin = NULL;\n  dphin = NULL;\n  erpaw = NULL;\n  vvdw = NULL;\n  vdvdw = NULL;\n  dpl = NULL;\n  xcctmp = NULL;\n  xchtmp = NULL;\n  xcotmp = NULL;\n\n  sht_num = NULL;\n  sht_first = NULL;\n\n  ipage = NULL;\n  pgsize = oneatom = 0;\n\n  cflag = 0;\n\n  // set comm size needed by this Pair\n  comm_forward = 1;\n  comm_reverse = 1;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairComb3::~PairComb3()\n{\n  memory->destroy(NCo);\n\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n\n  delete [] elements;\n  memory->sfree(params);\n  memory->destroy(elem2param);\n\n  memory->destroy(afb);\n  memory->destroy(dpl);\n  memory->destroy(dafb);\n  memory->destroy(fafb);\n  memory->destroy(phin);\n  memory->destroy(bbij);\n  memory->destroy(vvdw);\n  memory->destroy(vdvdw);\n  memory->destroy(dphin);\n  memory->destroy(erpaw);\n  memory->destroy(dfafb);\n  memory->destroy(ddfafb);\n  memory->destroy(xcctmp);\n  memory->destroy(xchtmp);\n  memory->destroy(xcotmp);\n  memory->destroy(intype);\n  memory->destroy(sht_num);\n  memory->sfree(sht_first);\n\n  delete [] ipage;\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(cutghost);\n    delete [] map;\n    delete [] esm;\n  }\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::allocate()\n{\n allocated = 1;\n int n = atom->ntypes;\n\n memory->create(setflag,n+1,n+1,\"pair:setflag\");\n memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n memory->create(cutghost,n+1,n+1,\"pair:cutghost\");\n\n map = new int[n+1];\n esm = new double[n];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairComb3::settings(int narg, char **arg)\n{\n\n  if (narg != 1) error->all(FLERR,\"Illegal pair_style command\");\n\n  if (strcmp(arg[0],\"polar_on\") == 0) {\n    pol_flag = 1;\n    if (comm->me == 0 && screen) fprintf(screen,\n\t\t    \"\tPairComb3: polarization is on \\n\");\n  } else if (strcmp(arg[0],\"polar_off\") == 0) {\n    pol_flag = 0;\n    if (comm->me == 0 && screen) fprintf(screen,\n\t\t    \"\tPairComb3: polarization is off \\n\");\n  } else {\n    error->all(FLERR,\"Illegal pair_style command\");\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairComb3::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if ((strcmp(arg[i],\"C\") == 0) && (cflag == 0)) {\n      if( comm->me == 0 && screen) fprintf(screen,\n      \"\tPairComb3: Found C: reading additional library file\\n\");\n    read_lib();\n    cflag = 1;\n    }\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  n = atom->ntypes;\n\n  // generate Wolf 1/r energy and van der Waals look-up tables\n  tables();\n\n  // clear setflag since coeff() called once with I,J = * *\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n\tsetflag[i][j] = 1;\n\tcount++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairComb3::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style COMB3 requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style COMB3 requires newton pair on\");\n  if (!atom->q_flag)\n    error->all(FLERR,\"Pair style COMB3 requires atom attribute q\");\n\n  // need a full neighbor list\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n  neighbor->requests[irequest]->ghost = 1;\n\n  // local Comb neighbor list\n  // create pages if first time or if neighbor pgsize/oneatom has changed\n\n  int create = 0;\n  if (ipage == NULL) create = 1;\n  if (pgsize != neighbor->pgsize) create = 1;\n  if (oneatom != neighbor->oneatom) create = 1;\n\n  if (create) {\n    delete [] ipage;\n    pgsize = neighbor->pgsize;\n    oneatom = neighbor->oneatom;\n\n    int nmypage = comm->nthreads;\n    ipage = new MyPage<int>[nmypage];\n    for (int i = 0; i < nmypage; i++)\n      ipage[i].init(oneatom,pgsize);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairComb3::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n  cutghost[j][i] = cutghost[i][j] = cutmax;\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::read_lib()\n{\n  unsigned int maxlib = 1024;\n  int i,j,k,l,nwords,m;\n  int ii,jj,kk,ll,mm,iii;\n  char s[maxlib];\n  char **words = new char*[80];\n\n  // open libraray file on proc 0\n\n  if (comm->me == 0) {\n    FILE *fp = force->open_potential(\"lib.comb3\");\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open COMB3 lib.comb3 file\");\n      error->one(FLERR,str);\n    }\n\n    // read and store at the same time\n    fgets(s,maxlib,fp);\n    fgets(s,maxlib,fp);\n    nwords = 0;\n    words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n    ccutoff[0] = atof(words[0]);\n    ccutoff[1] = atof(words[1]);\n    ccutoff[2] = atof(words[2]);\n    ccutoff[3] = atof(words[3]);\n    ccutoff[4] = atof(words[4]);\n    ccutoff[5] = atof(words[5]);\n\n    fgets(s,maxlib,fp);\n    nwords = 0;\n    words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n    ch_a[0] = atof(words[0]);\n    ch_a[1] = atof(words[1]);\n    ch_a[2] = atof(words[2]);\n    ch_a[3] = atof(words[3]);\n    ch_a[4] = atof(words[4]);\n    ch_a[5] = atof(words[5]);\n    ch_a[6] = atof(words[6]);\n\n    fgets(s,maxlib,fp);\n    nwords = 0;\n    words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n    nsplpcn = atoi(words[0]);\n    nsplrad = atoi(words[1]);\n    nspltor = atoi(words[2]);\n\n    fgets(s,maxlib,fp);\n    nwords = 0;\n    words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n    maxx = atoi(words[0]);\n    maxy = atoi(words[1]);\n    maxz = atoi(words[2]);\n\n    fgets(s,maxlib,fp);\n    nwords = 0;\n    words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n    maxxc = atoi(words[0]);\n    maxyc = atoi(words[1]);\n    maxconj = atoi(words[2]);\n\n    for (l=0; l<nsplpcn; l++) {\n      fgets(s,maxlib,fp);\n      nwords = 0;\n      words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n      while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n      maxxcn[l] = atoi(words[1]);\n      vmaxxcn[l] = atof(words[2]);\n      dvmaxxcn[l] = atof(words[3]);\n    }\n\n    fgets(s,maxlib,fp);\n    nwords = 0;\n    words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n    ntab = atoi(words[0]);\n\n    for (i=0; i<ntab+1; i++){\n      fgets(s,maxlib,fp);\n      nwords = 0;\n      words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n      while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n      pang[i]    = atof(words[1]);\n      dpang[i]   = atof(words[2]);\n      ddpang[i]  = atof(words[3]);\n    }\n\n    for (l=0; l<nsplpcn; l++)\n      for (i=0; i<maxx+1; i++)\n        for (j=0; j<maxy+1; j++)\n          for (k=0; k<maxz+1; k++) {\n            fgets(s,maxlib,fp);\n            nwords = 0;\n            words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n            while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n            ll = atoi(words[0])-1;\n            ii = atoi(words[1]);\n            jj = atoi(words[2]);\n            kk = atoi(words[3]);\n            pcn_grid[ll][ii][jj][kk]     = atof(words[4]);\n            pcn_gridx[ll][ii][jj][kk]    = atof(words[5]);\n            pcn_gridy[ll][ii][jj][kk]    = atof(words[6]);\n            pcn_gridz[ll][ii][jj][kk]    = atof(words[7]);\n\t  }\n\n    for (l=0; l<nsplpcn; l++)\n      for (i=0; i<maxx; i++)\n        for (j=0; j<maxy; j++)\n          for (k=0; k<maxz; k++) {\n            fgets(s,maxlib,fp);\n            nwords = 0;\n            words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n            while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n           ll = atoi(words[0])-1;\n           ii = atoi(words[1]);\n           jj = atoi(words[2]);\n           kk = atoi(words[3]);\n           for(iii=0; iii<2; iii++) {\n             fgets(s,maxlib,fp);\n             nwords = 0;\n             words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n             while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n             for(m=0; m<32 ; m++) {\n               mm=iii*32+m;\n               pcn_cubs[ll][ii][jj][kk][mm] = atof(words[m]);\n\t     }\n\t   }\n\t  }\n\n    for (l=0; l<nsplrad; l++)\n      for (i=0; i<maxxc+1; i++)\n        for (j=0; j<maxyc+1; j++)\n          for (k=0; k<maxconj; k++) {\n            fgets(s,maxlib,fp);\n            nwords = 0;\n            words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n            while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n            ll = atoi(words[0])-1;\n            ii = atoi(words[1]);\n            jj = atoi(words[2]);\n            kk = atoi(words[3])-1;\n            rad_grid[ll][ii][jj][kk]     = atof(words[4]);\n            rad_gridx[ll][ii][jj][kk]    = atof(words[5]);\n            rad_gridy[ll][ii][jj][kk]    = atof(words[6]);\n            rad_gridz[ll][ii][jj][kk]    = atof(words[7]);\n\t  }\n\n    for (l=0; l<nsplrad; l++)\n      for (i=0; i<maxxc; i++)\n        for (j=0; j<maxyc; j++)\n          for (k=0; k<maxconj-1; k++) {\n            fgets(s,maxlib,fp);\n            nwords = 0;\n            words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n            while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n            ll = atoi(words[0])-1;\n            ii = atoi(words[1]);\n            jj = atoi(words[2]);\n            kk = atoi(words[3])-1;\n            for (iii=0; iii<2; iii++) {\n              fgets(s,maxlib,fp);\n              nwords = 0;\n              words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n              while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n              for(m=0; m<32 ; m++){\n                mm=iii*32+m;\n                rad_spl[ll][ii][jj][kk][mm] = atof(words[m]);\n\t      }\n\t    }\n\t  }\n\n    for (l=0; l<nspltor; l++)\n      for (i=0; i<maxxc+1; i++)\n        for (j=0; j<maxyc+1; j++)\n          for (k=0; k<maxconj; k++) {\n            fgets(s,maxlib,fp);\n            nwords = 0;\n            words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n            while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n            ll = atoi(words[0])-1;\n            ii = atoi(words[1]);\n            jj = atoi(words[2]);\n            kk = atoi(words[3])-1;\n            tor_grid[ll][ii][jj][kk]     = atof(words[4]);\n            tor_gridx[ll][ii][jj][kk]    = atof(words[5]);\n            tor_gridy[ll][ii][jj][kk]    = atof(words[6]);\n            tor_gridz[ll][ii][jj][kk]    = atof(words[7]);\n\t  }\n\n    for (l=0; l<nspltor; l++)\n      for (i=0; i<maxxc; i++)\n        for (j=0; j<maxyc; j++)\n          for (k=0; k<maxconj-1; k++) {\n            fgets(s,maxlib,fp);\n            nwords = 0;\n            words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n            while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n            ll = atoi(words[0])-1;\n            ii = atoi(words[1]);\n            jj = atoi(words[2]);\n            kk = atoi(words[3])-1;\n            for(iii=0; iii<2; iii++) {\n              fgets(s,maxlib,fp);\n              nwords = 0;\n              words[nwords++] = strtok(s,\" \\t\\n\\r\\f\");\n              while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\")))continue;\n              for (m=0; m<32 ; m++){\n                mm=iii*32+m;\n                tor_spl[ll][ii][jj][kk][mm] = atof(words[m]);\n\t      }\n\t    }\n\t  }\n\n    fclose(fp);\n  }\n\n  k = 0;\n  for (i=0; i<4; i++)\n    for (j=0; j<4; j++) {\n      iin2[k][0] = i;\n      iin2[k][1] = j;\n      k ++;\n    }\n\n  l = 0;\n  for (i=0; i<4; i++)\n    for (j=0; j<4; j++)\n      for (k=0; k<4; k++) {\n        iin3[l][0] = i;\n        iin3[l][1] = j;\n        iin3[l][2] = k;\n        l ++;\n      }\n\n  MPI_Bcast(&ccutoff[0],6,MPI_DOUBLE,0,world);\n  MPI_Bcast(&ch_a[0],7,MPI_DOUBLE,0,world);\n  MPI_Bcast(&nsplpcn,1,MPI_INT,0,world);\n  MPI_Bcast(&nsplrad,1,MPI_INT,0,world);\n  MPI_Bcast(&nspltor,1,MPI_INT,0,world);\n  MPI_Bcast(&maxx,1,MPI_INT,0,world);\n  MPI_Bcast(&maxy,1,MPI_INT,0,world);\n  MPI_Bcast(&maxz,1,MPI_INT,0,world);\n  MPI_Bcast(&maxxc,1,MPI_INT,0,world);\n  MPI_Bcast(&maxyc,1,MPI_INT,0,world);\n  MPI_Bcast(&maxconj,1,MPI_INT,0,world);\n  MPI_Bcast(&maxxcn,4,MPI_INT,0,world);\n  MPI_Bcast(&vmaxxcn,4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&dvmaxxcn,4,MPI_DOUBLE,0,world);\n  MPI_Bcast(&ntab,1,MPI_INT,0,world);\n  MPI_Bcast(&pang[0],20001,MPI_DOUBLE,0,world);\n  MPI_Bcast(&dpang[0],20001,MPI_DOUBLE,0,world);\n  MPI_Bcast(&ddpang[0],20001,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pcn_grid[0][0][0][0],500,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pcn_gridx[0][0][0][0],500,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pcn_gridy[0][0][0][0],500,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pcn_gridz[0][0][0][0],500,MPI_DOUBLE,0,world);\n  MPI_Bcast(&pcn_cubs[0][0][0][0][0],16384,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&rad_grid[0][0][0][0],825,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rad_gridx[0][0][0][0],825,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rad_gridy[0][0][0][0],825,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rad_gridz[0][0][0][0],825,MPI_DOUBLE,0,world);\n  MPI_Bcast(&rad_spl[0][0][0][0][0],30720,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&tor_grid[0][0][0][0],275,MPI_DOUBLE,0,world);\n  MPI_Bcast(&tor_gridx[0][0][0][0],275,MPI_DOUBLE,0,world);\n  MPI_Bcast(&tor_gridy[0][0][0][0],275,MPI_DOUBLE,0,world);\n  MPI_Bcast(&tor_gridz[0][0][0][0],275,MPI_DOUBLE,0,world);\n  MPI_Bcast(&tor_spl[0][0][0][0][0],10240,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&iin2[0][0],32,MPI_INT,0,world);\n  MPI_Bcast(&iin3[0][0],192,MPI_INT,0,world);\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::read_file(char *file)\n{\n  int params_per_line = 74;\n  char **words = new char*[params_per_line+1];\n\n  if (params) delete [] params;\n  params = NULL;\n  nparams = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open COMB3 potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n  nwords=0;\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n\teof = 1;\n\tfclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n\t  eof = 1;\n\t  fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n    if (nwords != params_per_line){\n      error->all(FLERR,\"Incorrect format in COMB3 potential file\");\n}\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((nwords <= params_per_line)\n           && (words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) {\n      continue;\n    }\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n\t\t\t\t\t  \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].ielementgp = atoi(words[3]);\n    params[nparams].jelementgp = atoi(words[4]);\n    params[nparams].kelementgp = atoi(words[5]);\n    params[nparams].ang_flag = atoi(words[6]);\n    params[nparams].pcn_flag = atoi(words[7]);\n    params[nparams].rad_flag = atoi(words[8]);\n    params[nparams].tor_flag = atoi(words[9]);\n    params[nparams].vdwflag = atof(words[10]);\n    params[nparams].powerm = atof(words[11]);\n    params[nparams].veps = atof(words[12]);\n    params[nparams].vsig = atof(words[13]);\n    params[nparams].paaa = atof(words[14]);\n    params[nparams].pbbb = atof(words[15]);\n    params[nparams].lami = atof(words[16]);\n    params[nparams].alfi = atof(words[17]);\n    params[nparams].powern = atof(words[18]);\n    params[nparams].QL = atof(words[19]);\n    params[nparams].QU = atof(words[20]);\n    params[nparams].DL = atof(words[21]);\n    params[nparams].DU = atof(words[22]);\n    params[nparams].qmin = atof(words[23]);\n    params[nparams].qmax = atof(words[24]);\n    params[nparams].chi = atof(words[25]);\n    params[nparams].dj  = atof(words[26]);\n    params[nparams].dk  = atof(words[27]);\n    params[nparams].dl  = atof(words[28]);\n    params[nparams].esm = atof(words[29]);\n    params[nparams].cmn1 = atof(words[30]);\n    params[nparams].cmn2 = atof(words[31]);\n    params[nparams].pcmn1 = atof(words[32]);\n    params[nparams].pcmn2 = atof(words[33]);\n    params[nparams].coulcut = atof(words[34]);\n    params[nparams].polz = atof(words[35]);\n    params[nparams].curl = atof(words[36]);\n    params[nparams].curlcut1 = atof(words[37]);\n    params[nparams].curlcut2 = atof(words[38]);\n    params[nparams].curl0 = atof(words[39]);\n    params[nparams].alpha1 = atof(words[40]);\n    params[nparams].bigB1 = atof(words[41]);\n    params[nparams].alpha2 = atof(words[42]);\n    params[nparams].bigB2 = atof(words[43]);\n    params[nparams].alpha3 = atof(words[44]);\n    params[nparams].bigB3 = atof(words[45]);\n    params[nparams].lambda = atof(words[46]);\n    params[nparams].bigA = atof(words[47]);\n    params[nparams].beta = atof(words[48]);\n    params[nparams].bigr = atof(words[49]);\n    params[nparams].bigd = atof(words[50]);\n    params[nparams].pcos6 = atof(words[51]);\n    params[nparams].pcos5 = atof(words[52]);\n    params[nparams].pcos4 = atof(words[53]);\n    params[nparams].pcos3 = atof(words[54]);\n    params[nparams].pcos2 = atof(words[55]);\n    params[nparams].pcos1 = atof(words[56]);\n    params[nparams].pcos0 = atof(words[57]);\n    params[nparams].pcna = atof(words[58]);\n    params[nparams].pcnb = atof(words[59]);\n    params[nparams].pcnc = atof(words[60]);\n    params[nparams].pcnd = atof(words[61]);\n    params[nparams].p6p0 = atof(words[62]);\n    params[nparams].p6p1 = atof(words[63]);\n    params[nparams].p6p2 = atof(words[64]);\n    params[nparams].p6p3 = atof(words[65]);\n    params[nparams].p6p4 = atof(words[66]);\n    params[nparams].p6p5 = atof(words[67]);\n    params[nparams].p6p6 = atof(words[68]);\n    params[nparams].ptork1=atof(words[69]);\n    params[nparams].ptork2=atof(words[70]);\n    params[nparams].addrepr=atof(words[71]);\n    params[nparams].addrep=atof(words[72]);\n    params[nparams].pcross = atof(words[73]);\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    // parameter sanity checks\n\n    if (params[nparams].lambda < 0.0 || params[nparams].powern < 0.0 ||\n\tparams[nparams].beta < 0.0 || params[nparams].alpha1 < 0.0 ||\n\tparams[nparams].bigB1< 0.0 || params[nparams].bigA< 0.0 ||\n\tparams[nparams].bigB2< 0.0 || params[nparams].alpha2 <0.0 ||\n\tparams[nparams].bigB3< 0.0 || params[nparams].alpha3 <0.0 ||\n\tparams[nparams].bigr < 0.0 || params[nparams].bigd < 0.0 ||\n\tparams[nparams].bigd > params[nparams].bigr ||\n\tparams[nparams].powerm - params[nparams].powermint != 0.0 ||\n\tparams[nparams].addrepr < 0.0 || params[nparams].powermint < 1.0 ||\n\tparams[nparams].QL > 0.0 || params[nparams].QU < 0.0 ||\n\tparams[nparams].DL < 0.0 || params[nparams].DU > 0.0 ||\n\tparams[nparams].pcross < 0.0 ||\n\tparams[nparams].esm < 0.0 || params[nparams].veps < 0.0 ||\n\tparams[nparams].vsig < 0.0 || params[nparams].vdwflag < 0.0\n\t)\n      error->all(FLERR,\"Illegal COMB3 parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::setup_params()\n{\n  int i,j,k,m,n;\n\n  // set elem2param for all element triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n\tn = -1;\n\tfor (m = 0; m < nparams; m++) {\n\t  if (i == params[m].ielement && j == params[m].jelement &&\n\t      k == params[m].kelement) {\n\t    if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n\t    n = m;\n\t  }\n\t}\n\tif (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n\telem2param[i][j][k] = n;\n      }\n\n  // compute parameter values derived from inputs\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cut = params[m].bigr + params[m].bigd;\n    params[m].cutsq = params[m].cut*params[m].cut;\n    params[m].c1 = pow(2.0*params[m].powern*1.0e-16,-1.0/params[m].powern);\n    params[m].c2 = pow(2.0*params[m].powern*1.00e-8,-1.0/params[m].powern);\n    params[m].c3 = 1.0/params[m].c2;\n    params[m].c4 = 1.0/params[m].c1;\n\n    params[m].Qo = (params[m].QU+params[m].QL)/2.0; // (A22)\n    params[m].dQ = (params[m].QU-params[m].QL)/2.0; // (A21)\n    params[m].aB = 1.0 /\n      (1.0-pow(fabs(params[m].Qo/params[m].dQ),10)); // (A20)\n    params[m].bB = pow(fabs(params[m].aB),0.1)/params[m].dQ; // (A19)\n    params[m].nD = log(params[m].DU/(params[m].DU-params[m].DL))/\n\t\t    log(params[m].QU/(params[m].QU-params[m].QL));\n    params[m].bD = (pow((params[m].DL-params[m].DU),(1.0/params[m].nD)))/\n\t\t    (params[m].QU-params[m].QL);\n\n    params[m].lcut = params[m].coulcut;\n    params[m].lcutsq = params[m].lcut*params[m].lcut;\n  }\n\n  // set cutmax to max of all params\n\n  cutmin = cutmax = 0.0;\n  polar = 0;\n  for (m = 0; m < nparams; m++) {\n    if (params[m].cutsq > cutmin) cutmin = params[m].cutsq + 2.0;\n    if (params[m].lcut > cutmax) cutmax = params[m].lcut;\n  }\n  chicut1 = 7.0;\n  chicut2 = cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::Short_neigh()\n{\n  int nj,*neighptrj,icontrol;\n  int iparam_ij,*ilist,*jlist,*numneigh,**firstneigh;\n  int inum,jnum,i,j,ii,jj,itype,jtype;\n  double rr1,rsq1,delrj[3];\n\n  double **x = atom->x;\n  int *type  = atom->type;\n\n  if (atom->nmax > nmax) {\n    memory->sfree(sht_first);\n    nmax = atom->nmax;\n    sht_first = (int **) memory->smalloc(nmax*sizeof(int *),\n\t\t    \t\t\t\"pair:sht_first\");\n    memory->grow(dpl,nmax,3,\"pair:dpl\");\n    memory->grow(xcctmp,nmax,\"pair:xcctmp\");\n    memory->grow(xchtmp,nmax,\"pair:xchtmp\");\n    memory->grow(xcotmp,nmax,\"pair:xcotmp\");\n    memory->grow(NCo,nmax,\"pair:NCo\");\n    memory->grow(sht_num,nmax,\"pair:sht_num\");\n    memory->grow(bbij,nmax,MAXNEIGH,\"pair:bbij\");\n  }\n\n  inum = list->inum + list->gnum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // create COMB neighbor list\n\n  ipage->reset();\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    dpl[i][0] = dpl[i][1] = dpl[i][2] = 0.0;\n\n    nj = 0;\n    neighptrj = ipage->vget();\n\n    itype = map[type[i]];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    NCo[i] = 0.0;\n    xcctmp[i] = 0.0;\n    xchtmp[i] = 0.0;\n    xcotmp[i] = 0.0;\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj] & NEIGHMASK;\n\n      delrj[0] = x[i][0] - x[j][0];\n      delrj[1] = x[i][1] - x[j][1];\n      delrj[2] = x[i][2] - x[j][2];\n      rsq1 = vec3_dot(delrj,delrj);\n      jtype = map[type[j]];\n      iparam_ij = elem2param[itype][jtype][jtype];\n\n      if (rsq1 > cutmin) continue;\n\n      neighptrj[nj++] = j;\n      rr1 = sqrt(rsq1);\n      NCo[i] += comb_fc(rr1,&params[iparam_ij]) * params[iparam_ij].pcross;\n\n      icontrol = params[iparam_ij].jelementgp;\n\n      if( icontrol == 1)\n          xcctmp[i] += comb_fc(rr1,&params[iparam_ij]) * params[iparam_ij].pcross;\n      if (icontrol == 2)\n\t  xchtmp[i] += comb_fc(rr1,&params[iparam_ij]) * params[iparam_ij].pcross;\n      if (icontrol == 3)\n\t  xcotmp[i] += comb_fc(rr1,&params[iparam_ij]) * params[iparam_ij].pcross;\n\n    }\n\n    sht_first[i] = neighptrj;\n    sht_num[i] = nj;\n    ipage->vgot(nj);\n    if (ipage->status())\n      error->one(FLERR,\"Neighbor list overflow, boost neigh_modify one\");\n  }\n\n  // communicating coordination number to all nodes\n  pack_flag = 2;\n  comm->forward_comm_pair(this);\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::compute(int eflag, int vflag)\n{\n  int i,ii,k,kk,j,jj,im,inum,jnum,itype,jtype,ktype;\n  int iparam_i,iparam_ij,iparam_ji;\n  int iparam_ijk,iparam_jik,iparam_ikj,iparam_jli,iparam_ikl;\n  int sht_jnum,*sht_jlist,sht_lnum,*sht_llist;\n  int sht_mnum,*sht_mlist,sht_pnum,*sht_plist;\n  int *ilist,*jlist,*numneigh,**firstneigh,mr1,mr2,mr3,inty,nj;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2,rsq3,iq,jq,yaself;\n  double eng_tmp,vionij,fvionij,sr1,sr2,sr3;\n  double zeta_ij,prefac_ij1,prefac_ij2,prefac_ij3,prefac_ij4,prefac_ij5;\n  double zeta_ji,prefac_ji1,prefac_ji2,prefac_ji3,prefac_ji4,prefac_ji5;\n  double delrj[3],delrk[3],fi[3],fj[3],fk[3],fl[3];\n  double ep6p_ij,ep6p_ji,fip6p[3],fjp6p[3],fkp6p[3],flp6p[3];\n  double potal,fac11,fac11e;\n  tagint itag, jtag;\n\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n\n  // coordination terms\n  double xcn, ycn;\n  double kcn, lcn;\n  int torindx;\n\n  // torsion and radical variables\n  int l, ll, ltype, m, mm, mtype, p, pp, ptype;\n  int iparam_jil, iparam_ijl, iparam_ki, iparam_lj;\n  int iparam_jl, iparam_ik, iparam_km, iparam_lp;\n  double kconjug, lconjug, kradtot, lradtot;\n  double delrl[3], delrm[3], delrp[3], ddprx[3], srmu;\n  double zet_addi,zet_addj;\n\n  evdwl = eng_tmp = 0.0;\n\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n\n  // Build short range neighbor list\n  Short_neigh();\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n  yaself = vionij = fvionij = fpair = 0.0;\n\n  // self energy correction term: potal\n  potal_calc(potal,fac11,fac11e);\n\n  // generate initial dipole tensor\n  if (pol_flag )\n    for (ii = 0; ii < inum; ii++) {\n      i = ilist[ii];\n      itag = tag[i];\n      itype = map[type[i]];\n      xtmp = x[i][0];\n      ytmp = x[i][1];\n      ztmp = x[i][2];\n      iq = q[i];\n      jlist = firstneigh[i];\n      jnum = numneigh[i];\n\n      for (jj = 0; jj < jnum; jj++) {\n        j = jlist[jj] & NEIGHMASK;\n        jtag = tag[j];\n\n        if (itag > jtag) {\n          if ((itag+jtag) % 2 == 0) continue;\n        } else if (itag < jtag) {\n          if ((itag+jtag) % 2 == 1) continue;\n        } else {\n          if (x[j][2] < x[i][2]) continue;\n          if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n          if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n        }\n\n        jtype = map[type[j]];\n        jq = q[j];\n\n        delrj[0] = x[j][0] - xtmp;\n        delrj[1] = x[j][1] - ytmp;\n        delrj[2] = x[j][2] - ztmp;\n        rsq = vec3_dot(delrj,delrj);\n\n        iparam_ij = elem2param[itype][jtype][jtype];\n        iparam_ji = elem2param[jtype][itype][itype];\n\n        if (rsq > params[iparam_ij].lcutsq) continue;\n\n        tri_point(rsq, mr1, mr2, mr3, sr1, sr2, sr3);\n\n        dipole_init(&params[iparam_ij],&params[iparam_ji],fac11,delrj,\n                    rsq,mr1,mr2,mr3,sr1,sr2,sr3,iq,jq,i,j);\n      }\n    }\n\n  // loop over full neighbor list of my atoms\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    iq = q[i];\n    nj = 0;\n    iparam_i = elem2param[itype][itype][itype];\n\n    // self energy, only on i atom\n    yaself = self(&params[iparam_i],iq);\n\n    // dipole self energy\n    if (pol_flag)\n      yaself += dipole_self(&params[iparam_i],i);\n\n    if (evflag) ev_tally(i,i,nlocal,0,0.0,yaself,0.0,0.0,0.0,0.0);\n\n    // two-body interactions (long:R + A, short: only R)\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    sht_jlist = sht_first[i];\n    sht_jnum = sht_num[i];\n\n    // long range interactions\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj] & NEIGHMASK;\n\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < x[i][2]) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n      jq = q[j];\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      iparam_ij = elem2param[itype][jtype][jtype];\n      iparam_ji = elem2param[jtype][itype][itype];\n\n      if (rsq > params[iparam_ij].lcutsq) continue;\n\n      inty = intype[itype][jtype];\n\n      // three-point interpolation\n      tri_point(rsq, mr1, mr2, mr3, sr1, sr2, sr3);\n\n      // Q-indenpendent: van der Waals\n      vdwaals(inty,mr1,mr2,mr3,rsq,sr1,sr2,sr3,eng_tmp,fpair);\n      evdwl = eng_tmp;\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag)\n\tev_tally(i,j,nlocal,newton_pair,evdwl,0.0,fpair,delx,dely,delz);\n\n      // Q-dependent: Coulombic, field, polarization\n      // 1/r energy and forces\n\n      direct(&params[iparam_ij], &params[iparam_ji],\n\t\tmr1, mr2, mr3, rsq, sr1, sr2, sr3, iq, jq,\n\t\tfac11, fac11e, eng_tmp, fvionij, i, j);\n\n      vionij = eng_tmp;\n\n      // field correction to self energy\n      field(&params[iparam_ij], &params[iparam_ji],rsq,iq,jq,\n\t     eng_tmp,fvionij);\n      vionij += eng_tmp;\n\n      // sums up long range Q-dependent forces (excluding dipole)\n      f[i][0] += delx*fvionij;\n      f[i][1] += dely*fvionij;\n      f[i][2] += delz*fvionij;\n      f[j][0] -= delx*fvionij;\n      f[j][1] -= dely*fvionij;\n      f[j][2] -= delz*fvionij;\n\n      // sums up long range Q-dependent energies (excluding dipole)\n      if (evflag)\n\tev_tally(i,j,nlocal,newton_pair,0.0,vionij,fvionij,delx,dely,delz);\n\n      // polarization field\n      if (pol_flag) {\n        dipole_calc(&params[iparam_ij], &params[iparam_ji],fac11,\n\t\tdelx,dely,delz,rsq,mr1,mr2,mr3,\n\t\tsr1,sr2,sr3,iq,jq,i,j,eng_tmp,fvionij,ddprx);\n\tvionij = eng_tmp;\n\n        // sums up dipole energies\n        if (evflag)\n\t  ev_tally(i,j,nlocal,newton_pair,0.0,vionij,fvionij,delx,dely,delz);\n\n        // sums up dipole forces\n        f[i][0] += (ddprx[0] + delx*fvionij);\n        f[i][1] += (ddprx[1] + dely*fvionij);\n        f[i][2] += (ddprx[2] + delz*fvionij);\n        f[j][0] -= (ddprx[0] + delx*fvionij);\n        f[j][1] -= (ddprx[1] + dely*fvionij);\n        f[j][2] -= (ddprx[2] + delz*fvionij);\n      }\n\n      if (rsq > params[iparam_ij].cutsq) continue;\n\n      repulsive(&params[iparam_ij], &params[iparam_ji], rsq,\n\t      fpair, eflag, eng_tmp, iq, jq);\n\n      evdwl = eng_tmp;\n\n      // repulsion is pure two-body, sums up pair repulsive forces\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag)\n\tev_tally(i,j,nlocal,newton_pair,evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    // many-body interactions: start of short-range\n    xcn = NCo[i];\n    for (jj = 0; jj < sht_jnum; jj++) {\n      j = sht_jlist[jj];\n      sht_llist = sht_first[j];\n      sht_lnum = sht_num[j];\n\n      jtag = tag[j];\n      if ( jtag <= itag ) continue ;\n      ycn = NCo[j];\n\n      jtype = map[type[j]];\n      iparam_ij = elem2param[itype][jtype][jtype];\n      iparam_ji = elem2param[jtype][itype][itype];\n\n      delrj[0] = x[j][0] - xtmp;\n      delrj[1] = x[j][1] - ytmp;\n      delrj[2] = x[j][2] - ztmp;\n      rsq1 = vec3_dot(delrj,delrj);\n      if (rsq1 > params[iparam_ij].cutsq) continue;\n      nj ++;\n\n      // this Qj for q-dependent BSi\n      jq = q[j];\n\n      // accumulate bondorder zeta for each i-j interaction via k and l loops\n      zeta_ij = 0.0;\n      bbtor = 0.0;\n      kconjug = 0.0;\n\n      for (kk = 0; kk < sht_jnum; kk++) {\t// kk is neighbor of ii\n\tk = sht_jlist[kk];\n\tif (j == k) continue;\n\n\tktype = map[type[k]];\n\tiparam_ijk = elem2param[itype][jtype][ktype];\n\tiparam_ikj = elem2param[itype][ktype][jtype];\n\tiparam_jik = elem2param[jtype][itype][ktype];\n\tiparam_ik  = elem2param[itype][ktype][ktype];\n\tdelrk[0] = x[k][0] - xtmp;\n\tdelrk[1] = x[k][1] - ytmp;\n\tdelrk[2] = x[k][2] - ztmp;\n\trsq2 = vec3_dot(delrk,delrk);\n\n\tif (rsq2 > params[iparam_ik].cutsq) continue;\n\n\t// 3-body zeta in bond order\n\tzeta_ij += zeta(&params[iparam_ijk], &params[iparam_ik],\n\t\t\trsq1, rsq2, delrj, delrk, i, xcn);\n\n\t// radical initialization: apply only to CC,CO,OC bonds\n        if (params[iparam_ij].rad_flag > 0 &&\n            params[iparam_ik].ielementgp == 1 &&\n            params[iparam_ik].jelementgp == 1) {\n          iparam_ki = elem2param[ktype][itype][itype];\n          kcn=NCo[k];\n          kconjug += rad_init(rsq2,&params[iparam_ki],i,kradtot,kcn);\n\n        }\n\n\t// torsion: i-j-k-l: apply to all C-C bonds\n\n\tif( params[iparam_ij].tor_flag != 0 ) {\n\t  srmu = vec3_dot(delrj,delrk)/(sqrt(rsq1*rsq2));\n\t  srmu = sqrt(1.0-srmu*srmu);\n\n\t  if(srmu > 0.1) {\n            for (ll = 0; ll < sht_lnum; ll++) {\t// ll is neighbor of jj\n\t      l = sht_llist[ll];\n\n\t      if(l==i || l==j || l==k) continue;\n\n\t      ltype = map[type[l]];\n\n\t      delrl[0] = x[l][0] - x[j][0];\n\t      delrl[1] = x[l][1] - x[j][1];\n\t      delrl[2] = x[l][2] - x[j][2];\n\t      rsq3 = vec3_dot(delrl,delrl);\n\t      iparam_jl = elem2param[jtype][ltype][ltype];\n\n\t      if (rsq3 > params[iparam_jl].cutsq) continue;\n\n\t      iparam_ikl = elem2param[itype][ktype][ltype];\n              torindx = params[iparam_ij].tor_flag;\n\t      bbtor += bbtor1(torindx, &params[iparam_ikl],&params[iparam_jl],\n                       rsq1,rsq2,rsq3,delrj,delrk,delrl,srmu);\n\t    }\n\t  }\n\t}\n      }\n\n      zeta_ji = 0.0;\n      lconjug = 0.0;\n\n      for (ll = 0; ll < sht_lnum; ll++) {\n\tl = sht_llist[ll];\n\tif (l == i) continue;\n\n\tltype = map[type[l]];\n\tiparam_jil = elem2param[jtype][itype][ltype];\n\tiparam_ijl = elem2param[itype][jtype][ltype];\n\tiparam_jl  = elem2param[jtype][ltype][ltype];\n\tiparam_lj  = elem2param[ltype][jtype][jtype];\n\n\tdelrk[0] = x[l][0] - x[j][0];\n\tdelrk[1] = x[l][1] - x[j][1];\n\tdelrk[2] = x[l][2] - x[j][2];\n\trsq2 = vec3_dot(delrk,delrk);\n\n\tdelrl[0] = x[l][0] - x[j][0];\n\tdelrl[1] = x[l][1] - x[j][1];\n\tdelrl[2] = x[l][2] - x[j][2];\n\trsq2 = vec3_dot(delrl,delrl);\n\n\tif (rsq2 > params[iparam_jl].cutsq) continue;\n\n\tvec3_scale(-1,delrj,delrl);\t// ji_hat is -(ij_hat)\n\n\tzeta_ji += zeta(&params[iparam_jil], &params[iparam_jl]\n\t\t\t, rsq1, rsq2, delrl, delrk, j, ycn);\n\n\t// radical initialization: apply only to CC,CO,OC bonds\n        if(params[iparam_ji].rad_flag > 0\n          && params[iparam_jl].ielementgp == 1\n          && params[iparam_jl].jelementgp == 1) {\n          iparam_lj = elem2param[ltype][jtype][jtype];\n          lcn=NCo[l];\n          lconjug += rad_init(rsq2,&params[iparam_lj],j,lradtot,lcn);\n        }\n      }\n\n      force_zeta(&params[iparam_ij], &params[iparam_ji],\n\t rsq1, xcn, ycn, zeta_ij, zeta_ji, fpair,\n\t prefac_ij1, prefac_ij2, prefac_ij3, prefac_ij4, prefac_ij5,\n\t prefac_ji1, prefac_ji2, prefac_ji3, prefac_ji4, prefac_ji5,\n\t eflag, eng_tmp, iq, jq, i, j, nj, bbtor, kconjug, lconjug);\n\n      evdwl = eng_tmp;\n      selfp6p(&params[iparam_ij],&params[iparam_ji],rsq1,eng_tmp,fpair);\n\n      evdwl += eng_tmp;\n      f[i][0] += delrj[0]*fpair;\n      f[i][1] += delrj[1]*fpair;\n      f[i][2] += delrj[2]*fpair;\n      f[j][0] -= delrj[0]*fpair;\n      f[j][1] -= delrj[1]*fpair;\n      f[j][2] -= delrj[2]*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,evdwl,0.0,-fpair,-delrj[0],-delrj[1],-delrj[2]);\n\n      // attractive term via loop over k (3-body forces: i-j-k)\n      zet_addi=0;\n      zet_addj=0;\n\n      for (kk = 0; kk < sht_jnum; kk++) {\n\tk = sht_jlist[kk];\n\tif (j == k) continue;\n        sht_mlist = sht_first[k];\n        sht_mnum = sht_num[k];\n\n\tktype = map[type[k]];\n\tiparam_ijk = elem2param[itype][jtype][ktype];\n\tiparam_ikj = elem2param[itype][ktype][jtype];\n\tiparam_jik = elem2param[jtype][itype][ktype];\n\tiparam_ik  = elem2param[itype][ktype][ktype];\n\tdelrk[0] = x[k][0] - xtmp;\n\tdelrk[1] = x[k][1] - ytmp;\n\tdelrk[2] = x[k][2] - ztmp;\n\trsq2 = vec3_dot(delrk,delrk);\n\tif (rsq2 > params[iparam_ik].cutsq) continue;\n\n\t// BO-dependent 3-body E & F\n\tattractive(&params[iparam_ijk], &params[iparam_jik],&params[iparam_ikj],\n\t\tprefac_ij1, prefac_ij2, prefac_ij3, prefac_ij4, prefac_ij5,\n\t\trsq1,rsq2,delrj,delrk,fi,fj,fk,i,xcn);\n\n\tep6p_ij = ep6p(&params[iparam_ijk],&params[iparam_ikj],rsq1,rsq2,delrj,delrk,zet_addi);\n\tfp6p(&params[iparam_ijk],&params[iparam_ikj],rsq1,rsq2,delrj,delrk,fip6p,fjp6p,fkp6p);\n\n\t// Sums up i-j-k forces: LP contribution\n\tfor (im = 0; im < 3; im++) {\n\t  fi[im] += fip6p[im];\n\t  fj[im] += fjp6p[im];\n\t  fk[im] += fkp6p[im];\n\t}\n\n\t// Sums up i-j-k forces: Tallies into global force vector\n\tfor (im = 0; im < 3; im++) {\n\t  f[i][im] += fi[im];\n\t  f[j][im] += fj[im];\n\t  f[k][im] += fk[im];\n\t}\n\n\t// torsion and radical: apply to all C-C bonds\n\tif( params[iparam_ijk].tor_flag != 0 && fabs(ptorr)>1.0e-8) {\n\t  srmu = vec3_dot(delrj,delrk)/(sqrt(rsq1*rsq2));\n\t  srmu = sqrt(1.0-srmu*srmu);\n\n\t  if(srmu > 0.1) {\n            for (ll = 0; ll < sht_lnum; ll++) {\t// ll is neighbor of jj\n\t      l = sht_llist[ll];\n\t      if (l==i||l==j||l==k) continue;\n\n\t      ltype = map[type[l]];\n\n\t      delrl[0] = x[l][0] - x[j][0];\n\t      delrl[1] = x[l][1] - x[j][1];\n\t      delrl[2] = x[l][2] - x[j][2];\n\t      rsq3 = vec3_dot(delrl,delrl);\n\n\t      iparam_jl = elem2param[jtype][ltype][ltype];\n\t      if (rsq3 > params[iparam_jl].cutsq) continue;\n\t      iparam_ikl = elem2param[itype][ktype][ltype];\n              torindx = params[iparam_ij].tor_flag;\n\t      tor_force(torindx, &params[iparam_ikl], &params[iparam_jl],srmu,\n                          rsq1,rsq2,rsq3,delrj,delrk,delrl);\n\n\t      for (im = 0; im < 3; im++) {\n\t\tf[i][im] += fi_tor[im];\n\t\tf[j][im] += fj_tor[im];\n\t\tf[k][im] += fk_tor[im];\n\t\tf[l][im] += fl_tor[im];\n\t      }\n\t    }\n\t  }\n\t}\n\n        if( params[iparam_ijk].rad_flag>=1 &&\n          params[iparam_ijk].ielementgp==1 &&\n          params[iparam_ijk].kelementgp==1) {\n          iparam_ki = elem2param[ktype][itype][itype];\n          kcn=NCo[k];\n          double rik=sqrt(rsq2);\n          kradtot = -comb_fc(rik,&params[iparam_ki])*params[iparam_ki].pcross+kcn;\n\n\t  rad_forceik(&params[iparam_ki],rsq2,delrk,kconjug,kradtot);\n\n\t  for (im = 0; im < 3; im++) {\n\t    f[i][im] += fi_rad[im];\n\t    f[k][im] += fk_rad[im];\n\t  }\n\n          if (fabs(radtmp) > 1.0e-12) {\n\t    for (mm = 0; mm < sht_mnum; mm++) {\t// mm is neighbor of kk\n\t       m = sht_mlist[mm];\n\t       if (m == k) continue;\n\n               mtype = map[type[m]];\n\n\t      delrm[0] = x[m][0] - x[k][0];\n\t      delrm[1] = x[m][1] - x[k][1];\n\t      delrm[2] = x[m][2] - x[k][2];\n\t      rsq3 = vec3_dot(delrm,delrm);\n\n\t      iparam_km = elem2param[ktype][mtype][mtype];\n\t      iparam_ki = elem2param[ktype][itype][itype];\n\n\t      if (rsq3 > params[iparam_km].cutsq) continue;\n\n\t      rad_force(&params[iparam_km],rsq3,delrm,radtmp);\n\n\t      for (im = 0; im < 3; im++) {\n\t        f[k][im] += fj_rad[im];\n\t        f[m][im] += fk_rad[im];\n\t      }\n\t    }\n\t  }\n\t}\n\n        if (evflag)\n\t  ev_tally(i,j,nlocal,newton_pair,ep6p_ij,0.0,0.0,0.0,0.0,0.0);\n\tif (vflag_atom)\n\t  v_tally3(i,j,k,fj,fk,delrj,delrk);\n\n      }\t// k-loop\n\n      // attractive term via loop over l (3-body forces: j-i-l)\n      for (ll = 0; ll < sht_lnum; ll++) {\n\tl = sht_llist[ll];\n\tif (l == i) continue;\n\n        sht_plist = sht_first[l];\n        sht_pnum = sht_num[l];\n\n\tltype = map[type[l]];\n\tiparam_jil = elem2param[jtype][itype][ltype];\n\tiparam_jli = elem2param[jtype][ltype][itype];\n\tiparam_ijl = elem2param[itype][jtype][ltype];\n\tiparam_jl  = elem2param[jtype][ltype][ltype];\n\tdelrk[0] = x[l][0] - x[j][0];\n\tdelrk[1] = x[l][1] - x[j][1];\n\tdelrk[2] = x[l][2] - x[j][2];\n\n\trsq2 = vec3_dot(delrk,delrk);\n\tif (rsq2 > params[iparam_jl].cutsq) continue;\n\tvec3_scale(-1,delrj,delrl);\n\n\tattractive(&params[iparam_jil],&params[iparam_ijl],&params[iparam_jli],\n\t\tprefac_ji1,prefac_ji2,prefac_ji3,prefac_ji4,prefac_ji5,\n\t\trsq1,rsq2,delrl,delrk,fj,fi,fl,j,ycn);\n\n\t// BO-independent 3-body j-i-l LP and BB correction and forces\n\tep6p_ji = ep6p(&params[iparam_jil],&params[iparam_jli],rsq1,rsq2,delrl,delrk,zet_addj);\n\tfp6p(&params[iparam_jil],&params[iparam_jli],rsq1,rsq2,delrl,delrk,fjp6p,fip6p,flp6p);\n\n        if (evflag)\n\t  ev_tally(j,i,nlocal,newton_pair,ep6p_ji,0.0,0.0,0.0,0.0,0.0);\n\n\t// BO-dependent 3-body E & F\n\tfor (im = 0; im < 3; im++) {\n\t  fj[im] += fjp6p[im];\n\t  fi[im] += fip6p[im];\n\t  fl[im] += flp6p[im];\n\t}\n\n\t// Sums up j-i-l forces: Tallies into global force vector\n\tfor (im = 0; im < 3; im++) {\n\t  f[j][im] += fj[im];\n\t  f[i][im] += fi[im];\n\t  f[l][im] += fl[im];\n\t}\n\n\t// radical i-j-l-p: apply to all CC,CO,OC bonds\n\tif( params[iparam_jil].rad_flag >= 1 &&\n          params[iparam_jil].ielementgp == 1 &&\n          params[iparam_jil].kelementgp == 1 ) {\n            iparam_lj = elem2param[ltype][jtype][jtype];\n            lcn=NCo[l];\n            double rjl=sqrt(rsq2);\n            lradtot=-comb_fc(rjl,&params[iparam_lj])*params[iparam_lj].pcross +lcn;\n\n            rad_forceik(&params[iparam_lj],rsq2,delrk,lconjug,lradtot);\n\n\t    for (im = 0; im < 3; im++) {\n\t      f[j][im] += fi_rad[im];\n\t      f[l][im] += fk_rad[im];\n\t    }\n\n            if (fabs(radtmp)>1.0e-12) {\n\t      for (pp = 0; pp < sht_pnum; pp++) {\t// pp is neighbor of ll\n\t        p = sht_plist[pp];\n\t        if (p == l) continue;\n\t        ptype = map[type[p]];\n\n\t        delrp[0] = x[p][0] - x[l][0];\n\t        delrp[1] = x[p][1] - x[l][1];\n\t        delrp[2] = x[p][2] - x[l][2];\n\t        rsq3 = vec3_dot(delrp,delrp);\n\n\t        iparam_lp = elem2param[ltype][ptype][ptype];\n\n\t        if (rsq3 > params[iparam_lp].cutsq) continue;\n\n\t        vec3_scale(-1,delrj,delrj);\n\t        rad_force(&params[iparam_lp],rsq3,delrp,radtmp);\n\t        vec3_scale(-1,delrj,delrj);\n\t        for (im = 0; im < 3; im++) {\n\t          f[l][im] += fj_rad[im];\n\t          f[p][im] += fk_rad[im];\n\t\t}\n\t      }\n\t    }\n\t}\n\n\tif (vflag_atom)\n\t  v_tally3(j,i,l,fi,fl,delrl,delrk);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::repulsive(Param *parami, Param *paramj, double rsq,\n\tdouble &fforce,int eflag, double &eng, double iq, double jq)\n{\n  double r,tmp_fc,tmp_fc_d,Di,Dj;\n  double caj,vrcs,fvrcs;\n  double LamDiLamDj,fcdA,rlm1,bigA;\n\n  double romi = parami->addrep;\n  double rrcs = parami->bigr + parami->bigd;\n  double addr = parami->addrepr;\n\n  r = sqrt(rsq);\n  if (r > rrcs) return ;\n\n  tmp_fc = comb_fc(r,parami);\n  tmp_fc_d = comb_fc_d(r,parami);\n\n  Di = parami->DU + pow(fabs(parami->bD*(parami->QU-iq)),parami->nD);\n  Dj = paramj->DU + pow(fabs(paramj->bD*(paramj->QU-jq)),paramj->nD);\n\n  bigA = parami->bigA;\n  rlm1 = parami->lambda;\n\n  fcdA = tmp_fc_d - tmp_fc * rlm1;\n  LamDiLamDj = exp(0.5*(parami->lami*Di+paramj->lami*Dj)-rlm1*r);\n  caj = bigA * LamDiLamDj;\n\n  fforce = -caj * fcdA;\n\n  // additional repulsion\n\n  vrcs = 1.0; fvrcs = 0.0;\n  if (romi != 0.0 && r < addr) {\n    vrcs += romi * pow((1.0-r/addr),2.0);\n    fvrcs = romi * 2.0 * (r/addr-1.0)/addr;\n    fforce = fforce*vrcs - caj * tmp_fc * vrcs * fvrcs;\n  }\n  fforce /= r;\n\n  // eng = repulsive energy\n  eng = caj * tmp_fc * vrcs;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::zeta(Param *parami, Param *paramj, double rsqij,\n\tdouble rsqik, double *delrij, double *delrik, int i, double xcn)\n{\n  double rij,rik,costheta,arg,ex_delr,rlm3;\n\n  rij = sqrt(rsqij);\n  if (rij > parami->bigr+parami->bigd) return 0.0;\n  rik = sqrt(rsqik);\n  costheta = vec3_dot(delrij,delrik) / (rij*rik);\n\n  rlm3 = parami->beta;\n  arg = pow(rlm3*(rij-rik),int(parami->powermint));\n  if (arg > 69.0776) ex_delr = 1.e30;\n  else if (arg < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(arg);\n\n  return comb_fc(rik,paramj) * comb_gijk(costheta,parami,xcn) * ex_delr;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::selfp6p(Param *parami, Param *paramj, double rsq,\n\tdouble &eng, double &force)\n{\n  double r,comtti,comttj,fcj,fcj_d;\n\n  r=sqrt(rsq);\n  fcj=comb_fc(r,parami);\n  fcj_d=comb_fc_d(r,parami);\n  comtti = comttj = 0.0;\n\n    double pilp0 = parami->p6p0;\n    double pilp1 = parami->p6p1, pilp2 = parami->p6p2, pilp3 = parami->p6p3;\n    double pilp4 = parami->p6p4, pilp5 = parami->p6p5, pilp6 = parami->p6p6;\n    comtti = pilp0 + pilp1 + pilp2 + pilp3 + pilp4 + pilp5 + pilp6;\n\n    double pjlp0 = paramj->p6p0;\n    double pjlp1 = paramj->p6p1, pjlp2 = paramj->p6p2, pjlp3 = paramj->p6p3;\n    double pjlp4 = paramj->p6p4, pjlp5 = paramj->p6p5, pjlp6 = paramj->p6p6;\n    comttj = pjlp0 + pjlp1 + pjlp2 + pjlp3 + pjlp4 + pjlp5 + pjlp6;\n\n  eng = 0.5 * fcj * (comtti + comttj);\n  force += 0.5 * fcj_d * (comtti + comttj)/r;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::ep6p(Param *paramj, Param *paramk, double rsqij, double rsqik,\n\t\t     double *delrij, double *delrik , double &zet_add)\n{\n  double comtt;\n  double pplp0 = paramj->p6p0;\n  double pplp1 = paramj->p6p1, pplp2 = paramj->p6p2, pplp3 = paramj->p6p3;\n  double pplp4 = paramj->p6p4, pplp5 = paramj->p6p5, pplp6 = paramj->p6p6;\n  double rij,rik,costheta,lp0,lp1,lp2,lp3,lp4,lp5,lp6;\n  double rmu,rmu2,rmu3,rmu4,rmu5,rmu6,fcj,fck;\n    comtt=0.0;\n    rij = sqrt(rsqij);\n    rik = sqrt(rsqik);\n    costheta = vec3_dot(delrij,delrik) / (rij*rik);\n    fcj = comb_fc(rij,paramj);\n    fck = comb_fc(rik,paramk);\n\n    rmu = costheta;\n    rmu2 = rmu *rmu; rmu3 = rmu2*rmu; rmu4 = rmu3*rmu;\n    rmu5 = rmu4*rmu; rmu6 = rmu5*rmu;\n    lp0 = pplp0;\n    lp1 = pplp1*rmu;\n    lp2 = pplp2*rmu2;\n    lp3 = pplp3*rmu3;\n    lp4 = pplp4*rmu4;\n    lp5 = pplp5*rmu5;\n    lp6 = pplp6*rmu6;\n    comtt = lp0 + lp1 + lp2 + lp3 + lp4 + lp5 + lp6;\n    return 0.5 * fck * comtt *fcj;\n  }\n\n/*---------------------------------------------------------------------- */\n\nvoid PairComb3::fp6p(Param *paramij,Param *paramik, double rsqij, double rsqik,\n\t\t   double *delrij, double *delrik, double *drilp,\n\t\t   double *drjlp, double *drklp)\n{\n  double pplp0 = paramij->p6p0;\n  double pplp1 = paramij->p6p1, pplp2 = paramij->p6p2, pplp3 = paramij->p6p3;\n  double pplp4 = paramij->p6p4, pplp5 = paramij->p6p5, pplp6 = paramij->p6p6;\n  double ffj1,ffj2,ffk1,ffk2;\n  double rij,rik,costheta;\n  double rmu,comtt,comtt_d,com4k,com5,com5k,fcj,fcj_d,fck,fck_d;\n  double lp0,lp1,lp2,lp3,lp4,lp5,lp6;\n  double lp1_d,lp2_d,lp3_d,lp4_d,lp5_d,lp6_d;\n  double rmu2, rmu3, rmu4, rmu5, rmu6;\n\n    ffj1 = 0.0, ffj2 = 0.0;\n    ffk1 = 0.0, ffk2 = 0.0;\n\n    rij = sqrt(rsqij); rik = sqrt(rsqik);\n    costheta = vec3_dot(delrij,delrik) / (rij*rik);\n    fcj = comb_fc(rij,paramij);\n    fck = comb_fc(rik,paramik);\n    fcj_d = comb_fc_d(rij,paramij);\n    fck_d = comb_fc_d(rik,paramik);\n    rmu = costheta;\n\n      rmu2 = rmu *rmu; rmu3 = rmu2*rmu;\n      rmu4 = rmu3*rmu; rmu5 = rmu4*rmu; rmu6 = rmu5*rmu;\n      lp0 = pplp0;\n      lp1 = pplp1*rmu;\n      lp2 = pplp2*rmu2;\n      lp3 = pplp3*rmu3;\n      lp4 = pplp4*rmu4;\n      lp5 = pplp5*rmu5;\n      lp6 = pplp6*rmu6;\n      lp1_d = pplp1;\n      lp2_d = pplp2*2.0*rmu;\n      lp3_d = pplp3*3.0*rmu2;\n      lp4_d = pplp4*4.0*rmu3;\n      lp5_d = pplp5*5.0*rmu4;\n      lp6_d = pplp6*6.0*rmu5;\n      comtt = lp0 + lp1 + lp2 + lp3 + lp4 + lp5 + lp6;\n      comtt_d = lp1_d + lp2_d + lp3_d + lp4_d + lp5_d + lp6_d;\n\n      com4k = fcj * fck_d * comtt;\n      com5  = fcj * fck * comtt_d;\n      com5k = fck * comtt * fcj_d;\n\n      ffj1 = 0.5*(-com5/(rij*rik));\n      ffj2 = 0.5*(com5*rmu/rsqij-com5k/rij);\n      ffk1 = ffj1;\n      ffk2 = 0.5*(-com4k/rik+com5*rmu/rsqik);\n\n  // j-atom\n  vec3_scale(ffj1,delrik,drjlp);\n  vec3_scaleadd(ffj2,delrij,drjlp,drjlp);\n\n  // k-atom\n  vec3_scale(ffk1,delrij,drklp);\n  vec3_scaleadd(ffk2,delrik,drklp,drklp);\n\n  // i-atom\n  vec3_add(drjlp,drklp,drilp);\n  vec3_scale(-1.0,drilp,drilp);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::force_zeta(Param *parami, Param *paramj, double rsq,\n\tdouble xcn, double ycn, double &zeta_ij, double &zeta_ji, double &fforce,\n\tdouble &prefac_ij1, double &prefac_ij2, double &prefac_ij3,\n\tdouble &prefac_ij4, double &prefac_ij5,\n        double &prefac_ji1, double &prefac_ji2, double &prefac_ji3,\n        double &prefac_ji4, double &prefac_ji5,\n        int eflag, double &eng, double iq, double jq,\n\tint i, int j, int nj, double bbtor, double kconjug, double lconjug)\n{\n  double r,att_eng,att_force,bij;  // att_eng is -cbj\n  double boij, dbij1, dbij2, dbij3, dbij4, dbij5;\n  double boji, dbji1, dbji2, dbji3, dbji4, dbji5;\n  double pradx, prady;\n  r = sqrt(rsq);\n\n  if (r > parami->bigr + parami->bigd) return;\n  comb_fa(r, parami, paramj, iq, jq, att_eng, att_force);\n  comb_bij_d(zeta_ij,parami,r,i,boij,dbij1,dbij2,dbij3,dbij4,dbij5,xcn);\n  comb_bij_d(zeta_ji,paramj,r,j,boji,dbji1,dbji2,dbji3,dbji4,dbji5,ycn);\n  bij = 0.5*(boij + boji);\n\n  // radical energy\n\n  if ( parami->rad_flag>0 ) {\n    rad_calc( r, parami, paramj, kconjug, lconjug, i, j, xcn, ycn);\n    bij +=  brad[0];\n    pradx = brad[1]*att_eng;\n    prady = brad[2]*att_eng;\n    brad[3] = 1.0 * brad[3]*att_eng;\n   }\n\n  // torsion energy\n  if ( parami->tor_flag!=0) {\n     tor_calc( r, parami, paramj, kconjug, lconjug, i, j, xcn, ycn);\n     bij += btor[0] * bbtor;\n     ptorr =  att_eng * btor[0];\n     pradx  += 1.0 *  btor[1] * bbtor * att_eng;\n     prady  += 1.0 *  btor[2] * bbtor * att_eng;\n     brad[3]+= 1.0 *  btor[3] * bbtor * att_eng;\n  }\n\n  fforce = 1.0*bij*att_force/r; // divide by r will done compute\n  bbij[i][nj] = bij;\n\n  prefac_ij1 = -0.5*att_eng*dbij1;\t// prefac_ij1 = -pfij\n  prefac_ij2 = -0.5*att_eng*dbij2;\t// prefac_ij2 = -pfij1\n  prefac_ij3 = -0.5*att_eng*dbij3;\t// prefac_ij3 = -pfij2\n  prefac_ij4 = -0.5*att_eng*dbij4;\t// prefac_ij4 = -pfij3\n  prefac_ij5 = -0.5*att_eng*dbij5;\t// prefac_ij5 = -pfij4\n\n  prefac_ji1 = -0.5*att_eng*dbji1;\t// prefac_ji1 = -pfji\n  prefac_ji2 = -0.5*att_eng*dbji2;\t// prefac_ji2 = -pfji1\n  prefac_ji3 = -0.5*att_eng*dbji3;\t// prefac_ji3 = -pfji2\n  prefac_ji4 = -0.5*att_eng*dbji4;\t// prefac_ji4 = -pfji3\n  prefac_ji5 = -0.5*att_eng*dbji5;\t// prefac_ji5 = -pfji4\n\n  // combines com6 & com7 below\n  if ( parami->rad_flag>0 || parami->tor_flag!=0 ) {\n    prefac_ij2-=pradx;\n    prefac_ji2-=prady;\n  }\n\n  // eng = attraction energy\n  if (eflag) eng = 1.0*bij*att_eng;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fc(double r, Param *param)\n{\n  double r_inn = param->bigr - param->bigd;\n  double r_out = param->bigr + param->bigd;\n  if (r <= r_inn) return 1.0;\n  if (r >= r_out) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(r-r_inn)/(r_out-r_inn)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fc_d(double r, Param *param)\n{\n  double r_inn = param->bigr - param->bigd;\n  double r_out = param->bigr + param->bigd;\n  if (r <= r_inn) return 0.0;\n  if (r >= r_out) return 0.0;\n  return -MY_PI2/(r_out-r_inn)*sin(MY_PI*(r-r_inn)/(r_out-r_inn));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fccc(double xcn)\n{\n  double cut1 = ccutoff[0];\n  double cut2 = ccutoff[1];\n\n  if (xcn <= cut1) return 1.0;\n  if (xcn >= cut2) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(xcn-cut1)/(cut2-cut1)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fccc_d(double xcn)\n{\n  double cut1 = ccutoff[0];\n  double cut2 = ccutoff[1];\n\n  if (xcn <= cut1) return 0.0;\n  if (xcn >= cut2) return 0.0;\n  return -MY_PI2/(cut2-cut1)*sin(MY_PI*(xcn-cut1)/(cut2-cut1));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fcch(double xcn)\n{\n  double cut1 = ccutoff[2];\n  double cut2 = ccutoff[3];\n\n  if (xcn <= cut1) return 1.0;\n  if (xcn >= cut2) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(xcn-cut1)/(cut2-cut1)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fcch_d(double xcn)\n{\n  double cut1 = ccutoff[2];\n  double cut2 = ccutoff[3];\n\n  if (xcn <= cut1) return 0.0;\n  if (xcn >= cut2) return 0.0;\n  return -MY_PI2/(cut2-cut1)*sin(MY_PI*(xcn-cut1)/(cut2-cut1));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fccch(double xcn)\n{\n  double cut1 = ccutoff[4];\n  double cut2 = ccutoff[5];\n\n  if (xcn <= cut1) return 1.0;\n  if (xcn >= cut2) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(xcn-cut1)/(cut2-cut1)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fccch_d(double xcn)\n{\n  double cut1 = ccutoff[4];\n  double cut2 = ccutoff[5];\n\n  if (xcn <= cut1) return 0.0;\n  if (xcn >= cut2) return 0.0;\n  return -MY_PI2/(cut2-cut1)*sin(MY_PI*(xcn-cut1)/(cut2-cut1));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fcsw(double rsq)\n{\n  double r = sqrt(rsq);\n\n  if (r <= chicut1) return 1.0;\n  if (r >= chicut2) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(r-chicut1)/(chicut2-chicut1)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::self(Param *param, double qi)\n{\n double self_tmp, cmin, cmax, qmin, qmax;\n double s1=param->chi, s2=param->dj, s3=param->dk, s4=param->dl;\n\n self_tmp = 0.0;\n\n qmin = param->qmin;\n qmax = param->qmax;\n cmin = cmax = 100.0;\n\n self_tmp = qi*(s1+qi*(s2+qi*(s3+qi*s4)));\n\n if (qi < qmin) self_tmp += cmin * pow((qi-qmin),4);\n if (qi > qmax) self_tmp += cmax * pow((qi-qmax),4);\n\n return self_tmp;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::comb_fa(double r, Param *parami, Param *paramj, double iq,\n\tdouble jq, double &att_eng, double &att_force)\n{\n  double Bsi;\n  double qi,qj,Di,Dj;\n  double AlfDiAlfDj, YYBn, YYBj;\n  double alfij1= parami->alpha1;\n  double alfij2= parami->alpha2;\n  double alfij3= parami->alpha3;\n  double pbij1= parami->bigB1;\n  double pbij2= parami->bigB2;\n  double pbij3= parami->bigB3;\n  if (r > parami->bigr + parami->bigd) Bsi = 0.0;\n\n  qi = iq; qj = jq;\n  Di = Dj = Bsi = 0.0;\n  Di = parami->DU + pow(fabs(parami->bD*(parami->QU-qi)),parami->nD);\n  Dj = paramj->DU + pow(fabs(paramj->bD*(paramj->QU-qj)),paramj->nD);\n  YYBn = (parami->aB-fabs(pow(parami->bB*(qi-parami->Qo),10)));\n  YYBj = (paramj->aB-fabs(pow(paramj->bB*(qj-paramj->Qo),10)));\n\n  if (YYBn*YYBj > 0.0 ) {\n    AlfDiAlfDj = exp(0.5*(parami->alfi*Di+paramj->alfi*Dj));\n    Bsi = (pbij1*exp(-alfij1*r)+pbij2*exp(-alfij2*r)+pbij3*exp(-alfij3*r))*\n      sqrt(YYBn*YYBj)*AlfDiAlfDj; \t\t\t\t// Bsi is cbj\n\n    att_eng = -Bsi * comb_fc(r,parami);\n    att_force = -(Bsi*comb_fc_d(r,parami)-comb_fc(r,parami)*sqrt(YYBn*YYBj)*\n\tAlfDiAlfDj*(alfij1*pbij1*exp(-alfij1*r)+\n\talfij2*pbij2*exp(-alfij2*r)+alfij3*pbij3*exp(-alfij3*r)));\n\n  } else {\n    att_eng = 0.0;\n    att_force = 0.0;\n  }\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::comb_bij_d(double zet, Param *param, double r, int i,\n\tdouble &tbij, double &tbij1, double &tbij2,\n\tdouble &tbij3, double &tbij4, double &tbij5, double xcn)\n{\n  double pcorn,dpcorn,dxccij,dxchij,dxcoij;\n  double zeta = zet;\n  double zetang,tmp_tbij, pow_n;\n\n  pcorn = dpcorn = dxccij = dxchij = dxcoij = 0.0;\n  coord(param,r,i,pcorn,dpcorn,dxccij,dxchij,dxcoij,xcn);\t// coordination term\n\n  zetang=zeta;\n  pow_n=param->powern;\n  zeta = pow(zetang,pow_n)+pcorn;\n  tmp_tbij=pow_n*pow(zetang,(pow_n-1.0));\n\n  if ((1.0 + zeta) < 0.1 ){\n    zeta=0.1-1.0;\n    tbij = pow(1.0 + zeta, -0.5/pow_n);\n    tbij1=0.0;\n   }\n   else if (zeta > param->c1) {\n    tbij = pow(zeta,-0.5/pow_n);\n    tbij1 = -0.5/pow_n*pow(zeta,(-0.5/pow_n-1.0));\n   } else if (zeta > param->c2) {\n    tbij = pow(zeta,-0.5/pow_n)-0.5/pow_n*pow(zeta,(-0.5/pow_n-1.0));\n    tbij1 = -0.5/pow_n/zeta;\n   } else if (fabs(zeta) < param->c4) {\n    tbij = 1.0;\n    tbij1 = 0.0;\n   } else if (fabs(zeta) < param->c3) {\n    tbij = 1.0 - zeta/(2.0*pow_n);\n    tbij1 = -1/(2.0*pow_n);\n   } else {\n    tbij = pow(1.0 + zeta, -0.5/pow_n);\n    tbij1 = -0.5/pow_n * pow(1.0 + zeta,(-1.0-0.5/pow_n));\n   }\n\n  tbij2 = tbij1 * dpcorn;\n  tbij3 = tbij1 * dxccij;\n  tbij4 = tbij1 * dxchij;\n  tbij5 = tbij1 * dxcoij;\n  tbij1 = tbij1 * tmp_tbij;\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::coord(Param *param, double r, int i,\n\tdouble &pcorn, double &dpcorn, double &dxccij,\n\tdouble &dxchij, double &dxcoij, double xcn)\n{\n  int ixmin,iymin,izmin;\n  double xcntot,xcccn,xchcn,xcocn;\n  int tri_flag= param-> pcn_flag;\n  int jele_gp= param->jelementgp;\n  double pan = param->pcna;\n  double pbn = param->pcnb;\n  double pcn = param->pcnc;\n  double pdn = param->pcnd;\n\n  xcccn = xchcn = xcocn = 0.0;\n\n  xcccn = xcctmp[i];\n  xchcn = xchtmp[i];\n  xcocn = xcotmp[i];\n  xcntot = -comb_fc(r,param)*param->pcross + xcn;\n  pcorn = dpcorn = dxccij = dxchij = dxcoij = 0.0;\n  pcorn = 0.0; dpcorn = 0.0;\n\n  if(xcntot  < 0.0) xcntot  = 0.0;\n\n  if (tri_flag>0) {\n    if(jele_gp==1) xcccn = xcccn-comb_fc(r,param)*param->pcross;\n    if(jele_gp==2) xchcn = xchcn-comb_fc(r,param)*param->pcross;\n    if(jele_gp==3) xcocn = xcocn-comb_fc(r,param)*param->pcross;\n    if(xcccn < 0.0) xcccn = 0.0;\n    if(xchcn < 0.0) xchcn = 0.0;\n    if(xcocn < 0.0) xcocn = 0.0;\n    if(xcccn > maxx) xcccn = maxx;\n    if(xchcn > maxy) xchcn = maxy;\n    if(xcocn > maxz) xcocn = maxz;\n\n    double xcntritot=xcccn+xchcn+xcocn;\n\n    if(xcntritot > maxxcn[tri_flag-1]) {\n      pcorn  = vmaxxcn[tri_flag-1]+(xcntot-maxxcn[tri_flag-1])*dvmaxxcn[tri_flag-1];\n      dxccij = dxchij = dxcoij = dvmaxxcn[tri_flag-1];\n    }\n    else {\n      ixmin=int(xcccn+1.0e-12);\n      iymin=int(xchcn+1.0e-12);\n      izmin=int(xcocn+1.0e-12);\n      if (fabs(float(ixmin)-xcccn)>1.0e-8 ||\n          fabs(float(iymin)-xchcn)>1.0e-8 ||\n          fabs(float(izmin)-xcocn)>1.0e-8) {\n            cntri_int(tri_flag,xcccn,xchcn,xcocn,ixmin,iymin,izmin,\n            pcorn,dxccij,dxchij,dxcoij,param);\n      }\n      else  {\n        pcorn  = pcn_grid[tri_flag-1][ixmin][iymin][izmin];\n        dxccij = pcn_gridx[tri_flag-1][ixmin][iymin][izmin];\n        dxchij = pcn_gridy[tri_flag-1][ixmin][iymin][izmin];\n        dxcoij = pcn_gridz[tri_flag-1][ixmin][iymin][izmin];\n      }\n    }\n  } else {\n    pcorn = pan*xcntot+pbn*exp(pcn*xcntot)+pdn;\n    dpcorn = pan+pbn*pcn*exp(pcn*xcntot);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::cntri_int(int tri_flag, double xval, double yval,\n                double zval, int ixmin, int iymin, int izmin, double &vval,\n\t\tdouble &dvalx, double &dvaly, double &dvalz, Param *param)\n{\n  double x;\n  vval = 0.0; dvalx = 0.0; dvaly = 0.0; dvalz = 0.0;\n  if(ixmin >= maxx-1) { ixmin=maxx-1; }\n  if(iymin >= maxy-1) { iymin=maxy-1; }\n  if(izmin >= maxz-1) { izmin=maxz-1; }\n  for (int j=0; j<64; j++) {\n      x = pcn_cubs[tri_flag-1][ixmin][iymin][izmin][j]\n          *pow(xval,iin3[j][0])*pow(yval,iin3[j][1])\n          *pow(zval,iin3[j][2]);\n    vval += x;\n    if(xval>1.0e-8) {dvalx += x*iin3[j][0]/xval;}\n    if(yval>1.0e-8) {dvaly += x*iin3[j][1]/yval;}\n    if(zval>1.0e-8) {dvalz += x*iin3[j][2]/zval;}\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_gijk(double costheta, Param *param, double nco_tmp)\n{\n  double rmu1 = costheta;\n  double rmu2 = rmu1*rmu1;\n  double rmu3 = rmu2*rmu1;\n  double rmu4 = rmu3*rmu1;\n  double rmu5 = rmu4*rmu1;\n  double rmu6 = rmu5*rmu1;\n  double co6 = param->pcos6*rmu6;\n  double co5 = param->pcos5*rmu5;\n  double co4 = param->pcos4*rmu4;\n  double co3 = param->pcos3*rmu3;\n  double co2 = param->pcos2*rmu2;\n  double co1 = param->pcos1*rmu1;\n  double co0 = param->pcos0;\n  double pcross = param->pcross;\n  double gmu;\n\n  if (param->ang_flag==1) {\n    double qtheta, gmu1, gmu2, rrmu, astep;\n    int k;\n\n    qtheta = comb_fccc(nco_tmp);\n    astep = 2.0/ntab;\n    rrmu = (rmu1+1.0)/astep;\n    k = int(rrmu);\n    gmu1 = co6+co5+co4+co3+co2+co1+co0;\n    gmu2 = pang[k]+(pang[k+1]-pang[k])*(rrmu-k);\n    gmu = gmu2+qtheta*(gmu1-gmu2);\n    return gmu*pcross;\n\n  } else if (param->ang_flag==2){\n    double qtheta, gmu1, gmu2;\n    double ch6 = ch_a[6]*rmu6;\n    double ch5 = ch_a[5]*rmu5;\n    double ch4 = ch_a[4]*rmu4;\n    double ch3 = ch_a[3]*rmu3;\n    double ch2 = ch_a[2]*rmu2;\n    double ch1 = ch_a[1]*rmu1;\n    double ch0 = ch_a[0];\n    qtheta = comb_fccch(nco_tmp);\n    gmu1 = co6+co5+co4+co3+co2+co1+co0;\n    gmu2 = ch6+ch5+ch4+ch3+ch2+ch1+ch0;\n    gmu = gmu2+qtheta*(gmu1-gmu2);\n    return gmu*pcross;\n  } else {\n    gmu = co6+co5+co4+co3+co2+co1+co0;\n    return gmu*pcross;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::comb_gijk_d(double costheta, Param *param, double nco_tmp,\n\t\tdouble &gijk_d, double &com3jk)\n{\n  double rmu1 = costheta;\n  double rmu2 = rmu1*rmu1;\n  double rmu3 = rmu2*rmu1;\n  double rmu4 = rmu3*rmu1;\n  double rmu5 = rmu4*rmu1;\n  double rmu6 = rmu5*rmu1;\n  double co6 = param->pcos6; //*rmu5*6.0;\n  double co5 = param->pcos5; //*rmu4*5.0;\n  double co4 = param->pcos4; //*rmu3*4.0;\n  double co3 = param->pcos3; //*rmu2*3.0;\n  double co2 = param->pcos2; //*rmu1*2.0;\n  double co1 = param->pcos1;\n  double co0 = param->pcos0;\n  double pcross = param->pcross;\n\n  gijk_d = com3jk = 0.0;\n  if (param->ang_flag==1) {\n    double qtheta, dqtheta, gmu1, gmu2, dgmu1,dgmu2, rrmu, astep;\n    int k;\n    qtheta = comb_fccc(nco_tmp);\n    dqtheta = comb_fccc_d(nco_tmp);\n\n    astep = 2.0/ntab;\n    rrmu = (rmu1+1.0)/astep;\n    k = int(rrmu);\n\n    gmu1 =rmu6*co6+rmu5*co5+rmu4*co4\n         +rmu3*co3+rmu2*co2+rmu1*co1+co0;\n    dgmu1 =6.0*rmu5*co6+5.0*rmu4*co5+4.0*rmu3*co4\n           +3.0*rmu2*co3+2.0*rmu1*co2+co1;\n    gmu2 = pang[k]+(pang[k+1]-pang[k])*(rrmu-k);\n    dgmu2 = dpang[k]+(dpang[k+1]-dpang[k])*(rrmu-k);\n    gijk_d = pcross*(dgmu2+qtheta*(dgmu1-dgmu2));\n    com3jk = dqtheta * (gmu1-gmu2);\n  } else if(param->ang_flag==2) {\n    double qtheta, dqtheta, gmu1, gmu2, dgmu1,dgmu2;\n    double ch6 = ch_a[6];\n    double ch5 = ch_a[5];\n    double ch4 = ch_a[4];\n    double ch3 = ch_a[3];\n    double ch2 = ch_a[2];\n    double ch1 = ch_a[1];\n    double ch0 = ch_a[0];\n    qtheta = comb_fccch(nco_tmp);\n    dqtheta = comb_fccch_d(nco_tmp);\n\n    gmu1 =rmu6*co6+rmu5*co5+rmu4*co4\n         +rmu3*co3+rmu2*co2+rmu1*co1+co0;\n    dgmu1 =6.0*rmu5*co6+5.0*rmu4*co5+4.0*rmu3*co4\n           +3.0*rmu2*co3+2.0*rmu1*co2+co1;\n    gmu2 =rmu6*ch6+rmu5*ch5+rmu4*ch4\n         +rmu3*ch3+rmu2*ch2+rmu1*ch1+ch0;\n    dgmu2 =6.0*rmu5*ch6+5.0*rmu4*ch5+4.0*rmu3*ch4\n           +3.0*rmu2*ch3+2.0*rmu1*ch2+ch1;\n    gijk_d = pcross*(dgmu2+qtheta*(dgmu1-dgmu2));\n    com3jk = dqtheta * (gmu1-gmu2);\n\n  } else {\n    gijk_d = pcross*(6.0*rmu5*co6+5.0*rmu4*co5+4.0*rmu3*co4\n                    +3.0*rmu2*co3+2.0*rmu1*co2+co1);\n    com3jk = 0.0;\n  }\n}\n\n/*------------------------------------------------------------------------- */\n\nvoid PairComb3::attractive(Param *parami, Param *paramj , Param *paramk, double prefac_ij1,\n\tdouble prefac_ij2, double prefac_ij3, double prefac_ij4,\n\tdouble prefac_ij5, double rsqij, double rsqik, double *delrij,\n\tdouble *delrik, double *fi, double *fj,double *fk, int i, double xcn)\n{\n  double rij_hat[3],rik_hat[3];\n  double rij,rijinv,rik,rikinv;\n\n  rij = sqrt(rsqij);\n  rijinv = 1.0/rij;\n  vec3_scale(rijinv,delrij,rij_hat);\n\n  rik = sqrt(rsqik);\n  rikinv = 1.0/rik;\n  vec3_scale(rikinv,delrik,rik_hat);\n\n  comb_zetaterm_d(prefac_ij1, prefac_ij2, prefac_ij3, prefac_ij4, prefac_ij5,\n\trij_hat, rij,rik_hat, rik, fi, fj, fk, parami, paramj, paramk,xcn);\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::comb_zetaterm_d(double prefac_ij1, double prefac_ij2,\n\tdouble prefac_ij3, double prefac_ij4, double prefac_ij5,\n\tdouble *rij_hat, double rij, double *rik_hat, double rik, double *dri,\n\tdouble *drj, double *drk, Param *parami, Param *paramj, Param *paramk, double xcn)\n{\n  double gijk,gijk_d,ex_delr,ex_delr_d,fc_k,cos_theta,tmp,rlm3;\n  double dcosdri[3],dcosdrj[3],dcosdrk[3],dfc_i,dfc_k;\n  double com6, com3j, com3k, com3jk;\n\n  int mint = int(parami->powermint);\n  double pcrossi = parami->pcross;\n  double pcrossj = paramj->pcross;\n  double pcrossk = paramk->pcross;\n  int icontrol = parami->pcn_flag;\n\n  dfc_i = comb_fc_d(rij,parami);\n  fc_k = comb_fc(rik,paramk);\n  dfc_k = comb_fc_d(rik,paramk);\n  rlm3 = parami->beta;\n  tmp = pow(rlm3*(rij-rik),mint);\n\n  if (tmp > 69.0776) ex_delr = 1.e30;\n  else if (tmp < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(tmp);\n  ex_delr *= pcrossi;\n\n  cos_theta = vec3_dot(rij_hat,rik_hat);\n  gijk = comb_gijk(cos_theta,parami,xcn);\n  comb_gijk_d(cos_theta,parami,xcn,gijk_d,com3jk);\n  costheta_d(rij_hat,rij,rik_hat,rik,dcosdri,dcosdrj,dcosdrk);\n\n  // com6 & com7\n  if(icontrol > 0){\n    if(parami->kelementgp==1) {com6 = prefac_ij3*pcrossk*dfc_k;}\n    if(parami->kelementgp==2) {com6 = prefac_ij4*pcrossk*dfc_k;}\n    if(parami->kelementgp==3) {com6 = prefac_ij5*pcrossk*dfc_k;}\n    if(parami->rad_flag>=1 || parami->tor_flag!=0)\n            {com6+=prefac_ij2*pcrossk*dfc_k;}\n  } else {\n    com6 = prefac_ij2*pcrossi*dfc_k;\n  }\n\n  if (parami->ang_flag==1 || parami->ang_flag==2) {\n    com3j = com3jk*ex_delr*pcrossk*pcrossj*fc_k*dfc_i;\n    com3k = com3jk*ex_delr*pcrossk*pcrossk*fc_k*dfc_k;\n  } else {\n    com3j = 0.0;\n    com3k = 0.0;\n  }\n\n  ex_delr_d = mint*pow(rlm3,mint)*pow((rij-rik),(mint-1))*ex_delr; // com3\n  vec3_scale(-dfc_k*gijk*ex_delr,rik_hat,dri);\t\t// com1\n  vec3_scaleadd(fc_k*gijk_d*ex_delr,dcosdri,dri,dri);\t// com2\n  vec3_scaleadd(fc_k*gijk*ex_delr_d,rik_hat,dri,dri);\t// com3 cont'd\n  vec3_scaleadd(-fc_k*gijk*ex_delr_d,rij_hat,dri,dri);\t// com3 sums j\n  vec3_scaleadd(-com3k,rik_hat,dri,dri);   \t\t// com3k\n  vec3_scaleadd(-com3j,rij_hat,dri,dri);   \t\t// com3j\n  vec3_scale(prefac_ij1,dri,dri);\n  vec3_scaleadd(-com6,rik_hat,dri,dri);\t\t\t// com6\n\n  vec3_scale(fc_k*gijk_d*ex_delr,dcosdrj,drj);\t\t// com2\n  vec3_scaleadd(fc_k*gijk*ex_delr_d,rij_hat,drj,drj);\t// com3 cont'd\n  vec3_scaleadd(com3j,rij_hat,drj,drj);   \t\t// com3j\n  vec3_scale(prefac_ij1,drj,drj);\n\n  vec3_scale(dfc_k*gijk*ex_delr,rik_hat,drk);\t\t// com1\n  vec3_scaleadd(fc_k*gijk_d*ex_delr,dcosdrk,drk,drk);\t// com2\n  vec3_scaleadd(-fc_k*gijk*ex_delr_d,rik_hat,drk,drk);\t// com3 cont'd\n  vec3_scaleadd(com3k,rik_hat,drk,drk);   \t\t// com3k\n  vec3_scale(prefac_ij1,drk,drk);\n  vec3_scaleadd(com6,rik_hat,drk,drk);\t\t\t// com6\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::costheta_d(double *rij_hat, double rij, double *rik_hat,\n\tdouble rik, double *dri, double *drj, double *drk)\n{\n  double cos_theta = vec3_dot(rij_hat,rik_hat);\n\n  vec3_scaleadd(-cos_theta,rij_hat,rik_hat,drj);\n  vec3_scale(1.0/rij,drj,drj);\n  vec3_scaleadd(-cos_theta,rik_hat,rij_hat,drk);\n  vec3_scale(1.0/rik,drk,drk);\n  vec3_add(drj,drk,dri);\n  vec3_scale(-1.0,dri,dri);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::tables()\n\n{\n  int i,j,k,m, nntypes, ncoul,nnbuf, ncoul_lim, inty, itype, jtype;\n  int iparam_i, iparam_ij, iparam_ji;\n  double r,dra,drin,drbuf,rc,z,zr,zrc,ea,eb,ea3,eb3,alf;\n  double exp2er,exp2ersh,fafash,dfafash,F1,dF1,ddF1,E1,E2,E3,E4;\n  double exp2ear,exp2ebr,exp2earsh,exp2ebrsh,fafbsh,dfafbsh;\n  double afbshift, dafbshift, exp2ershift;\n\n  int n = nelements;\n\n  dra  = 0.001;\n  drin = 0.100;\n  drbuf = 0.100;\n  nnbuf = int(drbuf/dra) +1;\n  rc = cutmax;\n  alf = 0.20;\n  nmax = atom->nmax;\n\n  nntypes = int((n+1)*n/2.0)+1;\n  ncoul = int((rc-drin)/dra)+ nnbuf;\n  ncoul_lim = int(ncoul * 1.20);\n\n  // allocate arrays\n  memory->create(intype,n,n,\"pair:intype\");\n  memory->create(erpaw,ncoul_lim,3,\"pair:erpaw\");\n  memory->create(fafb,ncoul_lim,nntypes,\"pair:fafb\");\n  memory->create(dfafb,ncoul_lim,nntypes,\"pair:dfafb\");\n  memory->create(ddfafb,ncoul_lim,nntypes,\"pair:ddfafb\");\n  memory->create(phin,ncoul_lim,nntypes,\"pair:phin\");\n  memory->create(dphin,ncoul_lim,nntypes,\"pair:dphin\");\n  memory->create(afb,ncoul_lim,nntypes,\"pair:afb\");\n  memory->create(dafb,ncoul_lim,nntypes,\"pair:dafb\");\n  memory->create(vvdw,ncoul,nntypes,\"pair:vvdw\");\n  memory->create(vdvdw,ncoul,nntypes,\"pair:vdvdw\");\n  memory->create(dpl,nmax,3,\"pair:dpl\");\n  memory->create(bbij,nmax,MAXNEIGH,\"pair:bbij\");\n  memory->create(xcctmp,nmax,\"pair:xcctmp\");\n  memory->create(xchtmp,nmax,\"pair:xchtmp\");\n  memory->create(xcotmp,nmax,\"pair:xcotmp\");\n  memory->create(NCo,nmax,\"pair:NCo\");\n  memory->create(sht_num,nmax,\"pair:sht_num\");\n  sht_first = (int **) memory->smalloc(nmax*sizeof(int *),\n        \"pair:sht_first\");\n\n  // set interaction number: 0-0=0, 1-1=1, 0-1=1-0=2\n\n  m = 0; k = n;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (j == i) {\n        intype[i][j] = m;\n        m += 1;\n      } else if (j != i && j > i) {\n        intype[i][j] = k;\n        k += 1;\n      } else if (j != i && j < i) {\n        intype[i][j] = intype[j][i];\n      }\n    }\n  }\n\n  // default arrays to zero\n\n  for (i = 0; i < ncoul; i ++) {\n    for (j = 0; j < nntypes; j ++) {\n      fafb[i][j]   = 0.0;\n      dfafb[i][j]  = 0.0;\n      ddfafb[i][j] = 0.0;\n      phin[i][j]   = 0.0;\n      dphin[i][j]  = 0.0;\n      afb[i][j]    = 0.0;\n      dafb[i][j]   = 0.0;\n    }\n  }\n\n  // direct 1/r energy with Slater 1S orbital overlap\n\n  for (i = 0; i < n; i++) {\n    if (map[i+1] < 0) continue;\n    r = drin - dra;\n    itype = map[i+1];\n    iparam_i = elem2param[itype][itype][itype];\n    z = params[iparam_i].esm;\n    exp2ershift = exp(-2.0*z*rc);\n    afbshift = -exp2ershift*(z+1.0/rc);\n    dafbshift = exp2ershift*(2.0*z*z+2.0*z/rc+1.0/(rc*rc));\n\n    if (comm->me == 0 && screen)\n      fprintf(screen,\"  element[%d] = %-2s, z = %g\\n\",i+1,elements[map[i+1]],z);\n\n    for (j = 0; j < ncoul; j++) {\n      exp2er = exp(-2.0 * z * r);\n      phin[j][i] = 1.0 - exp2er * (1.0 + 2.0 * z * r * (1.0 + z * r));\n      dphin[j][i] = (4.0 * exp2er * z * z * z * r * r);\n      afb[j][i] = -exp2er*(z+1.0/r)-afbshift-(r-rc)*dafbshift;\n      dafb[j][i] = -(exp2er*(2.0*z*z+2.0*z/r+1.0/(r*r))-dafbshift);\n      r += dra;\n    }\n  }\n\n  for (i = 0; i < n; i ++) {\n    if (map[i+1] < 0) continue;\n    for (j = 0; j < n; j ++) {\n      if (map[j+1] < 0) continue;\n      r = drin - dra;\n      if (j == i) {\n        itype = map[i+1];\n        inty = intype[itype][itype];\n        iparam_i = elem2param[itype][itype][itype];\n        z = params[iparam_i].esm;\n        zrc = z * rc;\n        exp2ersh = exp(-2.0 * zrc);\n        fafash = -exp2ersh * (1.0 / rc +\n                              z * (11.0/8.0 + 3.0/4.0*zrc + zrc*zrc/6.0));\n        dfafash = exp2ersh * (1.0/(rc*rc) + 2.0*z/rc +\n                              z*z*(2.0 + 7.0/6.0*zrc + zrc*zrc/3.0));\n        for (k = 0; k < ncoul; k ++) {\n          zr = z * r;\n          exp2er = exp(-2.0*zr);\n          F1 = -exp2er * (1.0 / r +\n                          z * (11.0/8.0 + 3.0/4.0*zr + zr*zr/6.0));\n          dF1 = exp2er * (1.0/(r*r) + 2.0*z/r +\n                          z*z*(2.0 + 7.0/6.0*zr + zr*zr/3.0));\n          ddF1 = -exp2er * (2.0/(r*r*r) + 4.0*z/(r*r) + 4.0*z*z/r +\n                            z*z*z/3.0*(17.0/2.0 + 5.0*zr + 2.0*zr*zr));\n          fafb[k][inty] = F1-fafash-(r-rc)*dfafash;\n          dfafb[k][inty] = -(dF1 - dfafash);\n          ddfafb[k][inty] = ddF1;\n                  r += dra;\n        }\n      } else if (j != i) {\n        itype = map[i+1];\n        jtype = map[j+1];\n        inty = intype[itype][jtype];\n        iparam_ij = elem2param[itype][jtype][jtype];\n        ea = params[iparam_ij].esm;\n        ea3 = ea*ea*ea;\n        iparam_ji = elem2param[jtype][itype][itype];\n        eb = params[iparam_ji].esm;\n        eb3 = eb*eb*eb;\n        E1 = ea*eb3*eb/((ea+eb)*(ea+eb)*(ea-eb)*(ea-eb));\n        E2 = eb*ea3*ea/((ea+eb)*(ea+eb)*(eb-ea)*(eb-ea));\n        E3 = (3.0*ea*ea*eb3*eb-eb3*eb3) /\n          ((ea+eb)*(ea+eb)*(ea+eb)*(ea-eb)*(ea-eb)*(ea-eb));\n        E4 = (3.0*eb*eb*ea3*ea-ea3*ea3) /\n          ((ea+eb)*(ea+eb)*(ea+eb)*(eb-ea)*(eb-ea)*(eb-ea));\n        exp2earsh = exp(-2.0*ea*rc);\n        exp2ebrsh = exp(-2.0*eb*rc);\n        fafbsh = -exp2earsh*(E1 + E3/rc)-exp2ebrsh*(E2 + E4/rc);\n        dfafbsh =\n          exp2earsh*(2.0*ea*(E1+E3/rc)+E3/(rc*rc)) +\n          exp2ebrsh*(2.0*eb*(E2+E4/rc)+E4/(rc*rc));\n        for (k = 0; k < ncoul; k ++) {\n          exp2ear = exp(-2.0*ea*r);\n          exp2ebr = exp(-2.0*eb*r);\n          fafb[k][inty] =\n            - exp2ear*(E1+E3/r) - exp2ebr*(E2+E4/r)\n            - fafbsh - (r-rc) * dfafbsh;\n          dfafb[k][inty] = -(exp2ear*(2.0*ea*(E1+E3/r) + E3/(r*r))\n                           + exp2ebr*(2.0*eb*(E2+E4/r) + E4/(r*r))- dfafbsh);\n          ddfafb[k][inty] = -exp2ear*(4.0*ea*ea*(E1+E3/r)+4.0*ea*E3/(r*r)\n                                +2.0*E3/(r*r*r))\n                            -exp2ebr*(4.0*eb*eb*(E2+E4/r)+4.0*eb*E4/(r*r)\n                                +2.0*E4/(r*r*r));\n          r += dra;\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < ncoul_lim; i ++) {\n    r = dra * (i-1) + drin;\n    erpaw[i][0] = erfc(r*alf);\n    erpaw[i][1] = exp(-r*r*alf*alf);\n  }\n  // end wolf summation\n\n  // van der Waals\n  int ii,jj;\n  double **rvdw, *cc2, *cc3, *vrc, *rrc;\n  double r6, r7, r12, r13, rf6, rf12, drf7, drf13;\n  double drcc, temp6, temp7, temp12, temp13;\n  double vsigt, vepst, vdwt, dvdwt;\n\n  vrc = new double[13];\n  rrc = new double[13];\n  cc2 = new double[nntypes];\n  cc3 = new double[nntypes];\n  memory->create(rvdw,2,nntypes,\"pair:rvdw\");\n\n  vrc[0] = rc;\n  for (i=1; i<13; i++) {\n    vrc[i] = vrc[i-1] * vrc[0];\n  }\n\n  // generate spline coefficients for CC, CH, HH vdw\n  for (ii = 0; ii < n; ii ++) {\n    for (jj = ii; jj < n; jj ++) {\n      itype = ii;\n      jtype = jj;\n      inty = intype[itype][jtype];\n      iparam_ij = elem2param[itype][jtype][jtype];\n\n      // parameter check: eps > 0\n      if(params[iparam_ij].vdwflag > 0) {\n\n        if(params[iparam_ij].vdwflag==1){\n          rvdw[0][inty] = params[iparam_ij].bigr + params[iparam_ij].bigd;\n        }\n        else {\n          rvdw[0][inty] = params[iparam_ij].bigr - params[iparam_ij].bigd;\n        }\n\n        rvdw[1][inty] = params[iparam_ij].vsig * 0.950;\n\n        // radius check: outer radius vs. sigma\n        if( rvdw[0][inty] > rvdw[1][inty] )\n          error->all(FLERR,\"Error in vdw spline: inner radius > outer radius\");\n\n        rrc[0] = rvdw[1][inty];\n\n        for (i=1; i<13; i++)\n          rrc[i] = rrc[i-1] * rrc[0];\n\n        drcc = rrc[0] - rvdw[0][inty];\n        temp6 = 1.0/rrc[5]-1.0/vrc[5]+6.0*(rrc[0]-vrc[0])/vrc[6];\n        temp7 = 6.0*(1.0/vrc[6]-1.0/rrc[6]);\n        temp12 = 1.0/rrc[11]-1.0/vrc[11]+(rrc[0]-vrc[0])*12.0/vrc[12];\n        temp13 = 12.0*(1.0/vrc[12]-1.0/rrc[12]);\n\n        vsigt = params[iparam_ij].vsig;\n        vepst = params[iparam_ij].veps;\n        vsigt = vsigt*vsigt*vsigt*vsigt*vsigt*vsigt;\n\n        vdwt = vepst*(vsigt*vsigt*temp12-vsigt*temp6);\n        dvdwt = vepst*(vsigt*vsigt*temp13-vsigt*temp7);\n        cc2[inty] = (3.0/drcc*vdwt-dvdwt)/drcc;\n        cc3[inty] = (vdwt/(drcc*drcc)-cc2[inty] )/drcc;\n      }\n    }\n  }\n\n  // generate vdw look-up table\n  for (ii = 0; ii < n; ii ++) {\n    for (jj = ii; jj < n; jj ++) {\n      itype = ii;\n      jtype = jj;\n      inty = intype[itype][jtype];\n      iparam_ij = elem2param[itype][jtype][jtype];\n      r = drin;\n      for (k = 0; k < ncoul; k ++) {\n        r6 = r*r*r*r*r*r;\n        r7 = r6 * r;\n        rf6 = 1.0/r6-1.0/vrc[5]+(r-vrc[0])*6.0/vrc[6];\n        drf7 = 6.0*(1.0/vrc[6]-1.0/r7);\n        vsigt = params[iparam_ij].vsig;\n        vepst = params[iparam_ij].veps;\n        vsigt = vsigt*vsigt*vsigt*vsigt*vsigt*vsigt;\n\n        if(params[iparam_ij].vdwflag>0) {\n          if(r <= rvdw[0][inty]) {\n            vvdw[k][inty] = 0.0;\n            vdvdw[k][inty] = 0.0;\n          }\n          else if ( r > rvdw[0][inty] && r <= rvdw[1][inty]) {\n            drcc = r-rvdw[0][inty];\n            vvdw[k][inty] = drcc*drcc*(drcc*cc3[inty]+cc2[inty]);\n            vdvdw[k][inty] = drcc*(3.0*drcc*cc3[inty]+2.0*cc2[inty]);\n          } else {\n            r12 = r6*r6;\n            r13 = r6*r7;\n            rf12 = 1.0/r12-1.0/vrc[11]+(r-vrc[0])*12.0/vrc[12];\n            drf13= 12.0*(1.0/vrc[12]-1.0/r13);\n            vvdw[k][inty] = vepst*(vsigt*vsigt*rf12-vsigt*rf6);\n            vdvdw[k][inty] = vepst*(vsigt*vsigt*drf13-vsigt*drf7);\n\t  }\n\t} else {\n          vvdw[k][inty]=0.0;\n          vdvdw[k][inty]=0.0;\n\t}\n          r += dra;\n      }\n    }\n  }\n\n  delete [] vrc;\n  delete [] rrc;\n  delete [] cc2;\n  delete [] cc3;\n  memory->destroy(rvdw);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::potal_calc(double &calc1, double &calc2, double &calc3)\n{\n  double alf,rcoul,esucon;\n  int m;\n\n  rcoul = 0.0;\n  for (m = 0; m < nparams; m++)\n    if (params[m].lcut > rcoul) rcoul = params[m].lcut;\n\n  alf = 0.20;\n  esucon = force->qqr2e;\n\n  calc2 = (erfc(rcoul*alf)/rcoul/rcoul+2.0*alf/MY_PIS*\n\t   exp(-alf*alf*rcoul*rcoul)/rcoul)*esucon/rcoul;\n  calc3 = (erfc(rcoul*alf)/rcoul)*esucon;\n  calc1 = -(alf/MY_PIS*esucon+calc3*0.5);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::tri_point(double rsq, int &mr1, int &mr2,\n\t\t int &mr3, double &sr1, double &sr2, double &sr3)\n{\n  double r, rin, dr, dd, rr1, rridr, rridr2;\n\n  rin = 0.1000; dr = 0.0010;\n  r = sqrt(rsq);\n  if (r < rin + 2.0*dr)    r = rin + 2.0*dr;\n  if (r > cutmax - 2.0*dr) r = cutmax - 2.0*dr;\n  rridr = (r-rin)/dr;\n\n  mr1 = int(rridr) ;\n  dd = rridr - float(mr1);\n  if (dd > 0.5) mr1 += 1;\n\n  rr1 = float(mr1)*dr;\n  rridr = (r - rin - rr1)/dr;\n  rridr2 = rridr * rridr;\n\n  sr1 = (rridr2 - rridr) * 0.50;\n  sr2 = 1.0 - rridr2;\n  sr3 = (rridr2 + rridr) * 0.50;\n\n  mr2 = mr1 + 1;\n  mr3 = mr1 + 2;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::vdwaals(int inty, int mr1, int mr2, int mr3, double rsq,\n\t\t      double sr1, double sr2, double sr3,\n\t\t      double &eng, double &fforce)\n{\n  double r = sqrt(rsq);\n\n  eng = 1.0*(sr1*vvdw[mr1-1][inty]+sr2*vvdw[mr2-1][inty]+sr3*vvdw[mr3-1][inty]);\n  fforce = -1.0/r*(sr1*vdvdw[mr1-1][inty]+sr2*vdvdw[mr2-1][inty]+sr3*vdvdw[mr3-1][inty]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::direct(Param *parami, Param *paramj, int mr1,\n\tint mr2, int mr3, double rsq, double sr1, double sr2, double sr3,\n\tdouble iq, double jq, double fac11, double fac11e,\n\tdouble &pot_tmp, double &for_tmp, int i, int j)\n{\n  double r,erfcc,fafbnl,potij,esucon;\n  double r3,erfcd,dfafbnl,smf2,dvdrr,alf,alfdpi;\n  double afbn,afbj,sme1n,sme1j,sme1,sme2,dafbn, dafbj,smf1n,smf1j;\n  double curli = parami->curl;\n  double curlj = paramj->curl;\n  int inti = parami->ielement;\n  int intj = paramj->ielement;\n  int inty = intype[inti][intj];\n\n  double curlij0 = parami->curl0;\n  double curlji0 = paramj->curl0;\n  double curlij1,curlji1,dcurlij,dcurlji;\n  double fcp1j,xcoij,xcoji;\n  int icurl, jcurl;\n  int ielegp = parami->ielementgp;\n  int jelegp = paramj->ielementgp;\n\n  r = sqrt(rsq);\n  r3 = r * rsq;\n  alf = 0.20;\n  alfdpi = 2.0*alf/MY_PIS;\n  esucon = force->qqr2e;\n  pot_tmp = for_tmp = 0.0;\n  icurl=jcurl=0;\n\n  if(ielegp==2 && curli>curlij0) {\n    icurl=1;\n    curlij1=curli;\n  }\n\n  if(jelegp==2 && curlj>curlji0) {\n    jcurl=1;\n    curlji1=curlj;\n  }\n\n  if(icurl==1 || jcurl ==1) {\n    xcoij = xcotmp[i];\n    xcoji = xcotmp[j];\n    fcp1j = comb_fc_d(r,parami);\n\n    if(icurl==1) {\n      curli=curlij1+(curlij0-curlij1)*comb_fc_curl(xcoij,parami);\n      dcurlij=fcp1j*(curlij0-curlij1)*comb_fc_curl_d(xcoij,parami);\n    }\n\n    if(jcurl==1) {\n      curlj=curlji1+(curlji0-curlji1)*comb_fc_curl(xcoji,paramj);\n      dcurlji=fcp1j*(curlji0-curlji1)*comb_fc_curl_d(xcoji,paramj);\n    }\n  }\n\n  erfcc = sr1*erpaw[mr1][0] + sr2*erpaw[mr2][0] + sr3*erpaw[mr3][0];\n  afbn = sr1*afb[mr1][inti] + sr2*afb[mr2][inti] + sr3*afb[mr3][inti];\n  afbj = sr1*afb[mr1][intj] + sr2*afb[mr2][intj] + sr3*afb[mr3][intj];\n  fafbnl= sr1*fafb[mr1][inty] + sr2*fafb[mr2][inty] + sr3*fafb[mr3][inty];\n  potij = (erfcc/r * esucon - fac11e);\n\n  sme1n = iq*curlj*(afbn-fafbnl)*esucon;\n  sme1j = jq*curli*(afbj-fafbnl)*esucon;\n  sme1 = sme1n + sme1j;\n  sme2 = (potij + fafbnl * esucon) * iq * jq;\n  pot_tmp = 1.0 * (sme1+sme2);\n\n  // 1/r force (wrt r)\n\n  erfcd = sr1*erpaw[mr1][1] + sr2*erpaw[mr2][1] + sr3*erpaw[mr3][1];\n  dafbn = sr1*dafb[mr1][inti] + sr2*dafb[mr2][inti] + sr3*dafb[mr3][inti];\n  dafbj = sr1*dafb[mr1][intj] + sr2*dafb[mr2][intj] + sr3*dafb[mr3][intj];\n  dfafbnl= sr1*dfafb[mr1][inty] + sr2*dfafb[mr2][inty] + sr3*dfafb[mr3][inty];\n\n  dvdrr = (erfcc/r3+alfdpi*erfcd/rsq)*esucon-fac11;\n  smf1n = iq * curlj * (dafbn-dfafbnl)*esucon/r;\n  smf1j = jq * curli * (dafbj-dfafbnl)*esucon/r;\n\n  if(jcurl==1 && ielegp == 3 && dcurlji != 0.0){\n   smf1n += dcurlji*iq*(afbn-fafbnl)*esucon/r;\n  }\n  if(icurl==1 && jelegp == 3 && dcurlij != 0.0){\n   smf1j += dcurlij*jq*(afbj-fafbnl)*esucon/r;\n  }\n\n  smf2 = dvdrr + dfafbnl * esucon/r;\n  for_tmp =  1.0 * iq * jq * smf2 + smf1n + smf1j;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::field(Param *parami, Param *paramj, double rsq, double iq,\n\t\tdouble jq, double &eng_tmp,double &for_tmp)\n{\n  double r,r3,r4,r5,rc,rc2,rc3,rc4,rc5;\n  double cmi1,cmi2,cmj1,cmj2,pcmi1,pcmi2;\n  double rf3i,rcf3i,rf5i,rcf5i;\n  double drf3i,drcf3i,drf5i,drcf5i;\n  double rf3,rf5,drf4,drf6;\n  double smpn,smpl,rfx1,rfx2;\n\n  r = sqrt(rsq);\n  r3 = r * r * r;\n  r4 = r3 * r;\n  r5 = r4 * r;\n  rc = parami->lcut;\n  rc2 = rc * rc;\n  rc3 = rc*rc*rc;\n  rc4 = rc3 * rc;\n  rc5 = rc4 * rc;\n  cmi1 = parami->cmn1;\n  cmi2 = parami->cmn2;\n  cmj1 = paramj->cmn1;\n  cmj2 = paramj->cmn2;\n  pcmi1 = parami->pcmn1;\n  pcmi2 = parami->pcmn2;\n\n  rf3i = r3/(pow(r3,2)+pow(pcmi1,3));\n  rcf3i = rc3/(pow(rc3,2)+pow(pcmi1,3));\n  rf5i = r5/(pow(r5,2)+pow(pcmi2,5));\n  rcf5i = rc5/(pow(rc5,2)+pow(pcmi2,5));\n\n  drf3i = 3/r*rf3i-6*rsq*rf3i*rf3i;\n  drcf3i = 3/rc*rcf3i-6*rc2*rcf3i*rcf3i;\n  drf5i = 5/r*rf5i-10*r4*rf5i*rf5i;\n  drcf5i = 5/rc*rcf5i-10*rc4*rcf5i*rcf5i;\n\n  rf3 = rf3i-rcf3i-(r-rc)*drcf3i;\n  rf5 = rf5i-rcf5i-(r-rc)*drcf5i;\n  drf4 = drf3i - drcf3i;\n  drf6 = drf5i - drcf5i;\n\n // field correction energy\n  smpn = jq*(cmi1*rf3+jq*cmi2*rf5);\n  smpl = iq*(cmj1*rf3+iq*cmj2*rf5);\n  eng_tmp = 1.0 * (smpn + smpl);\n\n // field correction force\n  rfx1 = jq*(cmi1*drf4+jq*cmi2*drf6)/r;\n  rfx2 = iq*(cmj1*drf4+iq*cmj2*drf6)/r;\n  for_tmp -= 1.0 * (rfx1 + rfx2);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::rad_init(double rsq2,Param *param,int i,\n\t\tdouble &radtot, double cnconj)\n{\n  double r, fc1k, radcut;\n\n  r = sqrt(rsq2);\n  fc1k = comb_fc(r,param);\n  radtot = -fc1k * param->pcross + cnconj;\n  radcut = comb_fcch(radtot);\n  return fc1k * param->pcross * radcut;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::rad_calc(double r, Param *parami, Param *paramj,\n\tdouble kconjug, double lconjug, int i, int j, double xcn, double ycn)\n{\n  int ixmin, iymin, izmin;\n  int radindx;\n  double xrad, yrad, zcon, vrad, pradx, prady, pradz;\n\n  vrad = pradx = prady = pradz = 0.0;\n  xrad = -comb_fc(r,parami)*parami->pcross + xcn;\n  yrad = -comb_fc(r,paramj)*paramj->pcross + ycn;\n  zcon = 1.0 + pow(kconjug,2) + pow(lconjug,2);\n\n  if(xrad < 0.0) xrad = 0.0;\n  if(yrad < 0.0) yrad = 0.0;\n  if(zcon < 1.0) zcon = 1.0;\n  if(xrad > maxxc) xrad = maxxc;\n  if(yrad > maxyc) yrad = maxyc;\n  if(zcon > maxconj) zcon = maxconj;\n  ixmin = int(xrad+1.0e-12);\n  iymin = int(yrad+1.0e-12);\n  izmin = int(zcon+1.0e-12);\n  radindx=parami->rad_flag-1;\n  if (fabs(float(ixmin)-xrad)>1.0e-8 ||\n      fabs(float(iymin)-yrad)>1.0e-8 ||\n      fabs(float(izmin)-zcon)>1.0e-8) {\n    rad_int(radindx,xrad,yrad,zcon,ixmin,iymin,izmin,\n\t      vrad,pradx,prady,pradz);\n  } else {\n    vrad  = rad_grid[radindx][ixmin][iymin][izmin-1];\n    pradx = rad_gridx[radindx][ixmin][iymin][izmin-1];\n    prady = rad_gridy[radindx][ixmin][iymin][izmin-1];\n    pradz = rad_gridz[radindx][ixmin][iymin][izmin-1];\n  }\n\n  brad[0] = vrad;\n  brad[1] = pradx;\n  brad[2] = prady;\n  brad[3] = pradz;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::rad_int(int radindx,double xrad, double yrad, double zcon, int l,\n\t\tint m, int n, double &vrad, double &pradx, double &prady,\n\t\tdouble &pradz)\n{\n  int j;\n  double x;\n  vrad = pradx = prady = pradz = 0.0;\n  if(l >= maxxc-1) { l=maxxc-1;}\n  if(m >= maxyc-1) { m=maxyc-1; }\n  if(n >= maxconj-1) { n=maxconj-1;}\n\n  for (j=0; j<64; j++) {\n    x = rad_spl[radindx][l][m][n-1][j] * pow(xrad,iin3[j][0])\n\t  * pow(yrad,iin3[j][1]) * pow(zcon,iin3[j][2]);\n    vrad  += x;\n    if(xrad > 1.0e-8) pradx += x*iin3[j][0]/xrad;\n    if(yrad > 1.0e-8) prady += x*iin3[j][1]/yrad;\n    if(zcon > 1.0e-8) pradz += x*iin3[j][2]/zcon;\n  }\n}\n\n\n/* ---------------------------------------------------------------------- */\nvoid PairComb3::rad_forceik(Param *paramk, double rsq2, double *delrk,\n        double conjug, double radtot)\n{\n  int nm;\n  double  rik, fc1k, fcp1k;\n  double pradk, ffkk2, fktmp[3];\n  double radcut = comb_fcch(radtot);\n  double dradcut = comb_fcch_d(radtot);\n\n  for (nm=0; nm<3; nm++) {\n    fi_rad[nm] =  fk_rad[nm] = 0.0;\n  }\n    radtmp =0.0;\n\n  rik = sqrt(rsq2);\n\n  fc1k = comb_fc(rik, paramk);\n  fcp1k = comb_fc_d(rik,paramk);\n\n  pradk = brad[3]*fcp1k*radcut*paramk->pcross*2.0*conjug;\n  radtmp= brad[3]*fc1k*dradcut*paramk->pcross*2.0*conjug;\n\n  ffkk2 = -pradk/rik;\n\n  for (nm=0; nm<3; nm++) {\n    fktmp[nm] = - ffkk2 * delrk[nm];\n  }\n\n  for (nm=0; nm<3; nm++) {\n    fi_rad[nm] =  fktmp[nm];\n    fk_rad[nm] = -fktmp[nm];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::rad_force(Param *paramm, double rsq3,\n\tdouble *delrm, double dpradk)\n{\n  int nm;\n  double rkm, fcp1m;\n  double comkm, ffmm2, fkm[3];\n\n  for (nm=0; nm<3; nm++) {\n    fj_rad[nm] = fk_rad[nm] = 0.0;\n    fkm[nm]=0.0;\n  }\n\n  rkm = sqrt(rsq3);\n\n  fcp1m = comb_fc_d(rkm, paramm);\n\n  comkm = dpradk * fcp1m *  paramm->pcross;\n  ffmm2 = -comkm/rkm;\n\n  for (nm=0; nm<3; nm++) {\n    fkm[nm] = -ffmm2 * delrm[nm];\n  }\n\n  for (nm=0; nm<3; nm++) {\n    fj_rad[nm] =  fkm[nm];\n    fk_rad[nm] = -fkm[nm];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::bbtor1(int torindx, Param *paramk, Param *paraml,\n        double rsq1, double rsq2, double rsq3, double *delrj,\n        double *delrk, double *delrl, double srmu)\n{\n  double rmul, rij, rik, rjl;\n\n  rij = sqrt(rsq1);\n  rik = sqrt(rsq2);\n  rjl = sqrt(rsq3);\n\n  vec3_scale(-1.0,delrl,delrl);\n  rmul = vec3_dot(delrj,delrl)/(rij*rjl);\n  vec3_scale(-1.0,delrl,delrl);\n  rmul = sqrt(1.0-rmul*rmul);\n\n  if(rmul > 0.1 ) {\n    double fc1k, fc1l, TT1, TT2, rmut, btt, tork[3], torl[3];\n\n    fc1k = comb_fc(rik,paramk);\n    fc1l = comb_fc(rjl,paraml);\n\n    TT1 = rik*rjl*rij*rij*srmu*rmul;\n    tork[0] = delrk[1]*delrj[2] - delrk[2]*delrj[1];\n    torl[0] = delrj[1]*delrl[2] - delrj[2]*delrl[1];\n    tork[1] = delrk[2]*delrj[0] - delrk[0]*delrj[2];\n    torl[1] = delrj[2]*delrl[0] - delrj[0]*delrl[2];\n    tork[2] = delrk[0]*delrj[1] - delrk[1]*delrj[0];\n    torl[2] = delrj[0]*delrl[1] - delrj[1]*delrl[0];\n    TT2 = vec3_dot(tork,torl);\n    rmut = pow((TT2/TT1),2);\n    if(torindx>=1) {\n      btt = 1.0 - rmut;\n      return btt * fc1k * fc1l;\n    }\n    else {\n      btt=paramk->ptork1-TT2/TT1;\n      btt=paramk->ptork2*pow(btt,2);\n      return btt * fc1k * fc1l;\n    }\n\n  } else {\n    return 0.0;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::tor_calc(double r, Param *parami, Param *paramj,\n\tdouble kconjug, double lconjug, int i, int j, double xcn, double ycn)\n{\n  int ixmin, iymin, izmin;\n  double vtor, dtorx, dtory, dtorz;\n  double xtor, ytor, zcon;\n  int torindx;\n\n  vtor = dtorx = dtory = dtorz = 0.0;\n  torindx=parami->tor_flag;\n\n  if(torindx<0){\n    vtor=1.0;\n    dtorx=0.0;\n    dtory=0.0;\n    dtorz=0.0;\n  } else {\n    xtor = -comb_fc(r, parami) * parami->pcross + xcn;\n    ytor = -comb_fc(r, paramj) * paramj->pcross + ycn;\n    zcon = 1.0 + pow(kconjug,2) + pow(lconjug,2);\n    if (xtor < 0.0) xtor = 0.0;\n    if (ytor < 0.0) ytor = 0.0;\n    if (zcon < 1.0) zcon = 1.0;\n    if (xtor > maxxc) xtor = maxxc;\n    if (ytor > maxyc) ytor = maxyc;\n    if (zcon > maxconj) zcon = maxconj;\n\n    ixmin = int(xtor+1.0e-12);\n    iymin = int(ytor+1.0e-12);\n    izmin = int(zcon+1.0e-12);\n\n    torindx=torindx-1;\n\n    if (fabs(float(ixmin)-xtor)>1.0e-8 ||\n      fabs(float(iymin)-ytor)>1.0e-8 ||\n      fabs(float(izmin)-zcon)>1.0e-8) {\n      tor_int(torindx,xtor,ytor,zcon,ixmin,iymin,izmin,\n              vtor,dtorx,dtory,dtorz);\n    } else {\n      vtor  = tor_grid[torindx][ixmin][iymin][izmin-1];\n      dtorx = tor_gridx[torindx][ixmin][iymin][izmin-1];\n      dtory = tor_gridy[torindx][ixmin][iymin][izmin-1];\n      dtorz = tor_gridz[torindx][ixmin][iymin][izmin-1];\n    }\n  }\n\n  btor[0] = vtor;\n  btor[1] = dtorx;\n  btor[2] = dtory;\n  btor[3] = dtorz;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::tor_int(int torindx,double xtor, double ytor, double zcon, int l,\n\tint m, int n, double &vtor, double &dtorx, double &dtory, double &dtorz)\n{\n  int j;\n  double x;\n\n  vtor = dtorx = dtory = dtorz = 0.0;\n  if(l >= maxxc-1) { l=maxxc-1; }  //boundary condition changed\n  if(m >= maxyc-1) { m=maxyc-1; }\n  if(n >= maxconj-1) { n=maxconj-1; }\n\n  for (j=0; j<64; j++) {\n    x = tor_spl[torindx][l][m][n-1][j] * pow(xtor,iin3[j][0])\n\t  * pow(ytor,iin3[j][1]) * pow(zcon,iin3[j][2]);\n    vtor += x;\n\n  if(xtor > 1.0e-8 ) dtorx += x*iin3[j][0]/xtor;\n  if(ytor > 1.0e-8 ) dtory += x*iin3[j][1]/ytor;\n  if(zcon > 1.0e-8 ) dtorz += x*iin3[j][2]/zcon;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::tor_force(int torindx, Param *paramk, Param *paraml,\n        double srmu, double rsq1,double rsq2, double rsq3,\n        double *delrj, double *delrk, double *delrl)\n{\n  int nm;\n  double rmu, rmul, srmul, rij, rik, rjl;\n\n  for (nm=0; nm<3; nm++) {\n    fi_tor[nm] = fj_tor[nm] = fk_tor[nm] = fl_tor[nm] = 0.0;\n  }\n\n  rij = sqrt(rsq1);\n  rik = sqrt(rsq2);\n  rjl = sqrt(rsq3);\n\n  rmu = vec3_dot(delrj,delrk)/(rij*rik);\n  vec3_scale(-1.0,delrl,delrl);\n  rmul = vec3_dot(delrj,delrl)/(rij*rjl);\n  vec3_scale(-1.0,delrl,delrl);\n  srmul = sqrt(1.0-rmul*rmul);\n  if(acos(rmul) > MY_PI) srmul = -srmul;\n\n  if(srmul > 0.1 ) {\n    double fc1k, fcp1k, fc1l, fcp1l, srmul2, dt1dik, dt1djl;\n    double TT1, TT2, rmut, btt, tork[3], torl[3];\n    double dt2dik[3], dt2djl[3], dt2dij[3], AA, AA2;\n    double tfij[4], tfik[2], tfjl[2], tjx[3], tjy[3], tjz[3];\n    double tkx[2], tky[2], tkz[2], tlx[2], tly[2], tlz[2];\n\n    fc1k  = comb_fc(rik,paramk);\n    fcp1k = comb_fc_d(rik,paramk);\n    fc1l  = comb_fc(rjl,paraml);\n    fcp1l = comb_fc_d(rjl,paraml);\n    srmul2 = pow(srmul,2);\n\n    TT1 = rik*rjl*rij*rij*srmu*srmul;\n    dt1dik = -rmu/pow(srmu,2);\n    dt1djl = -rmul/srmul2;\n    tork[0] = delrk[1]*delrj[2] - delrk[2]*delrj[1];\n    torl[0] = delrj[1]*delrl[2] - delrj[2]*delrl[1];\n    tork[1] = delrk[2]*delrj[0] - delrk[0]*delrj[2];\n    torl[1] = delrj[2]*delrl[0] - delrj[0]*delrl[2];\n    tork[2] = delrk[0]*delrj[1] - delrk[1]*delrj[0];\n    torl[2] = delrj[0]*delrl[1] - delrj[1]*delrl[0];\n    TT2 = vec3_dot(tork,torl);\n\n    dt2dik[0] = -delrj[1]*torl[2] + delrj[2]*torl[1];\n    dt2dik[1] = -delrj[2]*torl[0] + delrj[0]*torl[2];\n    dt2dik[2] = -delrj[0]*torl[1] + delrj[1]*torl[0];\n    dt2djl[0] =  delrj[1]*tork[2] - delrj[2]*tork[1];\n    dt2djl[1] =  delrj[2]*tork[0] - delrj[0]*tork[2];\n    dt2djl[2] =  delrj[0]*tork[1] - delrj[1]*tork[0];\n    dt2dij[0] = -delrk[2]*torl[1] + delrl[2]*tork[1]\n\t       + delrk[1]*torl[2] - delrl[1]*tork[2];\n    dt2dij[1] = -delrk[0]*torl[2] + delrl[0]*tork[2]\n\t       + delrk[2]*torl[0] - delrl[2]*tork[0];\n    dt2dij[2] = -delrk[1]*torl[0] + delrl[1]*tork[0]\n\t       + delrk[0]*torl[1] - delrl[0]*tork[1];\n\n    rmut = TT2/TT1;\n\n    if(torindx>=1) {\n        btt = 1.0 - pow(rmut,2);\n        AA = -2.0 * ptorr * rmut * fc1k * fc1l / TT1;\n    }\n    else {\n        btt=paramk->ptork1-rmut;\n        btt=paramk->ptork2*pow(btt,2);\n        AA = -2.0 * ptorr * paramk->ptork2 *\n          (paramk->ptork1-rmut) * fc1k * fc1l /TT1;\n   }\n\n    AA2 = AA * TT2;\n    tfij[0] = -(dt1dik*AA2)/rij/rik;\n    tfij[1] = AA2/rij/rij - dt1dik*AA2*rmu/rij/rij;\n    tfij[2] = -dt1djl*AA2/rij/rjl;\n    tfij[3] = AA2/rij/rij - dt1djl*AA2*rmul/rij/rij;\n    tfik[0] = tfij[0];\n    tfik[1] = (AA2/rik - btt*ptorr*fc1l*fcp1k)/rik -\n\t    dt1dik*AA2*rmu/rik/rik;\n    tfjl[0] = tfij[2];\n    tfjl[1] = (AA2/rjl - btt*ptorr*fc1k*fcp1l)/rjl -\n\t    dt1djl*AA2*rmul/rjl/rjl;\n\n    tjx[0] = tfij[0]*delrk[0] - tfij[1]*delrj[0];\n    tjy[0] = tfij[0]*delrk[1] - tfij[1]*delrj[1];\n    tjz[0] = tfij[0]*delrk[2] - tfij[1]*delrj[2];\n    tjx[1] = -tfij[2]*delrl[0] - tfij[3]*delrj[0];\n    tjy[1] = -tfij[2]*delrl[1] - tfij[3]*delrj[1];\n    tjz[1] = -tfij[2]*delrl[2] - tfij[3]*delrj[2];\n    tjx[2] = -dt2dij[0] * AA;\n    tjy[2] = -dt2dij[1] * AA;\n    tjz[2] = -dt2dij[2] * AA;\n\n    tkx[0] = tfik[0]*delrj[0] - tfik[1]*delrk[0];\n    tky[0] = tfik[0]*delrj[1] - tfik[1]*delrk[1];\n    tkz[0] = tfik[0]*delrj[2] - tfik[1]*delrk[2];\n    tkx[1] = -dt2dik[0] * AA;\n    tky[1] = -dt2dik[1] * AA;\n    tkz[1] = -dt2dik[2] * AA;\n\n    tlx[0] = -tfjl[0]*delrj[0] - tfjl[1]*delrl[0];\n    tly[0] = -tfjl[0]*delrj[1] - tfjl[1]*delrl[1];\n    tlz[0] = -tfjl[0]*delrj[2] - tfjl[1]*delrl[2];\n    tlx[1] = -dt2djl[0] * AA;\n    tly[1] = -dt2djl[1] * AA;\n    tlz[1] = -dt2djl[2] * AA;\n\n    fi_tor[0] = tjx[0]+tjx[1]+tjx[2]+tkx[0]+tkx[1];\n    fi_tor[1] = tjy[0]+tjy[1]+tjy[2]+tky[0]+tky[1];\n    fi_tor[2] = tjz[0]+tjz[1]+tjz[2]+tkz[0]+tkz[1];\n\n    fj_tor[0] = -tjx[0]-tjx[1]-tjx[2]+tlx[0]+tlx[1];\n    fj_tor[1] = -tjy[0]-tjy[1]-tjy[2]+tly[0]+tly[1];\n    fj_tor[2] = -tjz[0]-tjz[1]-tjz[2]+tlz[0]+tlz[1];\n\n    fk_tor[0] = -tkx[0]-tkx[1];\n    fk_tor[1] = -tky[0]-tky[1];\n    fk_tor[2] = -tkz[0]-tkz[1];\n\n    fl_tor[0] = -tlx[0]-tlx[1];\n    fl_tor[1] = -tly[0]-tly[1];\n    fl_tor[2] = -tlz[0]-tlz[1];\n\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::combqeq(double *qf_fix, int &igroup)\n{\n  int i,j,ii, jj,itype,jtype,jnum;\n  int iparam_i,iparam_ji,iparam_ij;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  int mr1,mr2,mr3,inty,nj;\n  double xtmp,ytmp,ztmp,rsq1,delrj[3];\n  double iq,jq,fqi,fqij,fqji,sr1,sr2,sr3;\n  double potal,fac11,fac11e;\n  int sht_jnum,*sht_jlist;\n  tagint itag, jtag;\n\n  double **x = atom->x;\n  double *q = atom->q;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int inum = list->inum;\n  int *mask = atom->mask;\n  int groupbit = group->bitmask[igroup];\n\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  qf = qf_fix;\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    if (mask[i] & groupbit) {\n      qf[i] = 0.0;\n      dpl[i][0] = dpl[i][1] = dpl[i][2] = 0.0;\n    }\n  }\n  // communicating charge force to all nodes, first forward then reverse\n\n  pack_flag = 1;\n  comm->forward_comm_pair(this);\n\n  // self energy correction term: potal\n\n  potal_calc(potal,fac11,fac11e);\n\n  // loop over full neighbor list of my atoms\n\n  fqi = fqij = fqji = 0.0;\n\n  for (ii = 0; ii < inum; ii ++) {\n    i = ilist[ii];\n    itag = tag[i];\n    nj = 0;\n    if (mask[i] & groupbit) {\n      itype = map[type[i]];\n      xtmp = x[i][0];\n      ytmp = x[i][1];\n      ztmp = x[i][2];\n      iq = q[i];\n      iparam_i = elem2param[itype][itype][itype];\n\n      // charge force from self energy\n      fqi = qfo_self(&params[iparam_i],iq);\n\n      jlist = firstneigh[i];\n      jnum = numneigh[i];\n\n      sht_jlist = sht_first[i];\n      sht_jnum = sht_num[i];\n\n      // two-body interactions\n\n      for (jj = 0; jj < jnum; jj++) {\n        j = jlist[jj] & NEIGHMASK;\n\n\tjtag = tag[j];\n        if (itag >= jtag) continue;\n\n        jtype = map[type[j]];\n        inty = intype[itype][jtype];\n        jq = q[j];\n\n        delrj[0] = xtmp - x[j][0];\n        delrj[1] = ytmp - x[j][1];\n        delrj[2] = ztmp - x[j][2];\n        rsq1 = vec3_dot(delrj,delrj);\n\n        iparam_ij = elem2param[itype][jtype][jtype];\n        iparam_ji = elem2param[jtype][itype][itype];\n\n        // long range q-dependent\n\n        if (rsq1 > params[iparam_ij].lcutsq) continue;\n\n        // polynomial three-point interpolation\n        tri_point(rsq1,mr1,mr2,mr3,sr1,sr2,sr3);\n\n        // 1/r charge forces\n        qfo_direct(&params[iparam_ij],&params[iparam_ji],\n\t\tmr1,mr2,mr3,rsq1,sr1,sr2,sr3,fac11e,fqij,fqji,\n\t\tiq,jq,i,j);\n\n        fqi += fqij;  qf[j] += fqji;\n\n       // field correction to self energy and charge force\n        qfo_field(&params[iparam_ij],&params[iparam_ji],rsq1,\n\t\tiq,jq,fqij,fqji);\n\n        fqi += fqij;  qf[j] += fqji;\n\n        // polarization field charge force\n\tif (pol_flag) {\n\t  qfo_dipole(fac11,mr1,mr2,mr3,inty,rsq1,delrj,sr1,sr2,sr3,\n\t\tfqij,fqji,i,j);\n\n          fqi += fqij;  qf[j] += fqji;\n\t}\n      }\n\n      for (jj = 0; jj < sht_jnum; jj++) {\n        j = sht_jlist[jj];\n\n\tjtag = tag[j];\n        if (itag >= jtag) continue;\n\n        jtype = map[type[j]];\n        inty = intype[itype][jtype];\n        jq = q[j];\n\n        delrj[0] = xtmp - x[j][0];\n        delrj[1] = ytmp - x[j][1];\n        delrj[2] = ztmp - x[j][2];\n        rsq1 = vec3_dot(delrj,delrj);\n\n        iparam_ij = elem2param[itype][jtype][jtype];\n        iparam_ji = elem2param[jtype][itype][itype];\n\n        if (rsq1 >= params[iparam_ij].cutsq) continue;\n\tnj ++;\n\n        // charge force in Aij and Bij\n         qfo_short(&params[iparam_ij],&params[iparam_ji],\n\t\trsq1,iq,jq,fqij,fqji,i,j,nj);\n\n        fqi += fqij;  qf[j] += fqji;\n      }\n      qf[i] += fqi;\n    }\n  }\n\n  comm->reverse_comm_pair(this);\n\n  // sum charge force on each node and return it\n\n  double eneg = 0.0;\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    if (mask[i] & groupbit){\n      eneg += qf[i];\n\t  itag=tag[i];\n    }\n  }\n\n  MPI_Allreduce(&eneg,&enegtot,1,MPI_DOUBLE,MPI_SUM,world);\n  MPI_Bcast(&enegtot,1,MPI_DOUBLE,0,world);\n  return enegtot;\n\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::qfo_self(Param *param, double qi)\n{\n  double self_d,cmin,cmax,qmin,qmax;\n  double s1 = param->chi;\n  double s2 = param->dj;\n  double s3 = param->dk;\n  double s4 = param->dl;\n\n  self_d = 0.0;\n\n  qmin = param->qmin;\n  qmax = param->qmax;\n  cmin = cmax = 100.0;\n  self_d = s1+qi*(2.0*s2+qi*(3.0*s3+qi*4.0*s4));\n\n  if (qi < qmin) self_d += 4.0 * cmin * pow((qi-qmin),3);\n  if (qi > qmax) self_d += 4.0 * cmax * pow((qi-qmax),3);\n\n  return self_d;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::qfo_direct(Param *parami, Param *paramj, int mr1,\n\t  int mr2, int mr3, double rsq, double sr1, double sr2,\n\t  double sr3, double fac11e, double &fqij, double &fqji,\n\t  double iq, double jq, int i, int j)\n{\n  double r, erfcc, fafbnl, vm, vmfafb, esucon;\n  double afbn, afbj, sme1n, sme1j;\n  double curli = parami->curl;\n  double curlj = paramj->curl;\n  int inti = parami->ielement;\n  int intj = paramj->ielement;\n  int inty = intype[inti][intj];\n\n  double curlij0 = parami->curl0;\n  double curlji0 = paramj->curl0;\n  double curlij1,curlji1;\n  int icurl, jcurl;\n  int ielegp = parami->ielementgp;\n  int jelegp = paramj->ielementgp;\n\n  r = sqrt(rsq);\n  esucon=force->qqr2e;\n\n  icurl = jcurl = 0;\n  if(ielegp==2 && curli>curlij0) {\n    icurl=1;\n    curlij1=curli;\n  }\n\n  if(jelegp==2 && curlj>curlji0) {\n    jcurl=1;\n    curlji1=curlj;\n  }\n  if(icurl==1 || jcurl ==1) {\n    double xcoij= xcotmp[i];\n    double xcoji= xcotmp[j];\n\n    if(icurl==1) {\n      curli=curlij1+(curlij0-curlij1)*comb_fc_curl(xcoij,parami);\n    }\n    if(jcurl==1) {\n      curlj=curlji1+(curlji0-curlji1)*comb_fc_curl(xcoji,paramj);\n    }\n  }\n\n  // 1/r force (wrt q)\n\n  erfcc = sr1*erpaw[mr1][0]   + sr2*erpaw[mr2][0]   + sr3*erpaw[mr3][0];\n  fafbnl= sr1*fafb[mr1][inty] + sr2*fafb[mr2][inty] + sr3*fafb[mr3][inty];\n  afbn  = sr1*afb[mr1][inti]  + sr2*afb[mr2][inti]  + sr3*afb[mr3][inti];\n  afbj  = sr1*afb[mr1][intj]  + sr2*afb[mr2][intj]  + sr3*afb[mr3][intj];\n  vm = (erfcc/r * esucon - fac11e);\n  vmfafb = vm + esucon * fafbnl;\n  sme1n = curlj * (afbn - fafbnl) * esucon;\n  sme1j = curli * (afbj - fafbnl) * esucon;\n  fqij = 1.0 * (jq * vmfafb + sme1n);\n  fqji = 1.0 * (iq * vmfafb + sme1j);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::qfo_field(Param *parami, Param *paramj, double rsq,\n\tdouble iq,double jq, double &fqij, double &fqji)\n{\n  double r,r3,r5,rc,rc2,rc3,rc4,rc5;\n  double cmi1,cmi2,cmj1,cmj2,pcmi1,pcmi2;\n  double rf3i,rcf3i,rf5i,rcf5i;\n  double drcf3i,drcf5i,rf3,rf5;\n\n  r  = sqrt(rsq);\n  r3 = r * rsq;\n  r5 = r3 * rsq;\n  rc = parami->lcut;\n  rc2=  rc*rc;\n  rc3 = rc*rc*rc;\n  rc4 = rc3 * rc;\n  rc5 = rc4 * rc;\n  cmi1 = parami->cmn1;\n  cmi2 = parami->cmn2;\n  cmj1 = paramj->cmn1;\n  cmj2 = paramj->cmn2;\n  pcmi1 = parami->pcmn1;\n  pcmi2 = parami->pcmn2;\n\n  rf3i = r3/(pow(r3,2)+pow(pcmi1,3));\n  rcf3i = rc3/(pow(rc3,2)+pow(pcmi1,3));\n  rf5i = r5/(pow(r5,2)+pow(pcmi2,5));\n  rcf5i = rc5/(pow(rc5,2)+pow(pcmi2,5));\n\n  drcf3i = 3/rc*rcf3i-6*rc2*rcf3i*rcf3i;\n  drcf5i = 5/rc*rcf5i-10*rc4*rcf5i*rcf5i;\n\n  rf3 = rf3i-rcf3i-(r-rc)*drcf3i;\n  rf5 = rf5i-rcf5i-(r-rc)*drcf5i;\n\n  // field correction charge force\n  fqij = 1.0 * cmj1*rf3+2.0*iq*cmj2*rf5;\n  fqji = 1.0 * cmi1*rf3+2.0*jq*cmi2*rf5;\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::qfo_dipole(double fac11, int mr1, int mr2, int mr3,\n\tint inty, double rsq, double *delrj, double sr1, double sr2,\n\tdouble sr3, double &fqij, double &fqji, int i, int j)\n{\n  double erfcc, erfcd, dvdrr, dfafbnl, smf2;\n  double r, r3, alfdpi, esucon;\n\n  r = sqrt(rsq);\n  r3 = r * rsq;\n  alfdpi = 0.4/MY_PIS;\n  esucon = force->qqr2e;\n\n  erfcc = sr1*erpaw[mr1][0] + sr2*erpaw[mr2][0] + sr3*erpaw[mr3][0];\n  erfcd = sr1*erpaw[mr1][1] + sr2*erpaw[mr2][1] + sr3*erpaw[mr3][1];\n  dvdrr = (erfcc/r3+alfdpi*erfcd/rsq)*esucon-fac11;\n  dfafbnl= sr1*dfafb[mr1][inty] + sr2*dfafb[mr2][inty] + sr3*dfafb[mr3][inty];\n  smf2 = (dvdrr + dfafbnl*esucon)/r;\n\n  fqij = dpl[i][0]*delrj[0] + dpl[i][1]*delrj[1] +dpl[i][2]*delrj[2];\n  fqji = dpl[j][0]*delrj[0] + dpl[j][1]*delrj[1] +dpl[j][2]*delrj[2];\n  fqij *= smf2;\n  fqji *= smf2;\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::qfo_short(Param *parami, Param *paramj, double rsq,\n\tdouble iq, double jq, double &fqij, double &fqji,\n\tint i, int j, int nj)\n{\n  double r, tmp_fc;\n  double Di, Dj, dDi, dDj, Bsi, Bsj, dBsi, dBsj;\n  double QUchi, QOchi, QUchj, QOchj;\n  double bij, caj, cbj, caqpn, caqpj, cbqpn, cbqpj;\n  double LamDiLamDj, AlfDiAlfDj;\n  double rlm1 = parami->lambda;\n  double alfij1= parami->alpha1;\n  double alfij2= parami->alpha2;\n  double alfij3= parami->alpha3;\n  double pbij1= parami->bigB1;\n  double pbij2= parami->bigB2;\n  double pbij3= parami->bigB3;\n\n  caj = cbj = caqpn = caqpj = cbqpn = cbqpj = 0.0;\n  r = sqrt(rsq);\n  tmp_fc = comb_fc(r,parami);\n  bij = bbij[i][nj];\n\n  QUchi = (parami->QU - iq) * parami->bD;\n  QUchj = (paramj->QU - jq) * paramj->bD;\n  QOchi = (iq - parami->Qo) * parami->bB;\n  QOchj = (jq - paramj->Qo) * paramj->bB;\n\n  if (iq < parami->QL-0.2) {\n    iq = parami->QL-0.2;\n    Di = parami->DL;\n    dDi = Bsi = dBsi = 0.0;\n  } else if (iq > parami->QU+0.2) {\n    iq = parami->QU+0.2;\n    Di = parami->DU;\n    dDi = Bsi = dBsi = 0.0;\n  } else {\n    Di = parami->DU + pow(QUchi,parami->nD);\t\t\t\t// YYDin\n    dDi = -parami->nD * parami->bD * pow(QUchi,(parami->nD-1.0));\t// YYDiqp\n    Bsi = parami->aB - pow(QOchi,10);\t\t\t\t\t// YYBsin\n    dBsi = -parami->bB * 10.0 * pow(QOchi,9.0);\t\t\t\t// YYBsiqp\n  }\n\n  if (jq < paramj->QL-0.2) {\n    jq = paramj->QL-0.2;\n    Dj = paramj->DL;\n    dDj = Bsj = dBsj = 0.0;\n  } else if (jq > paramj->QU+0.2) {\n    jq = paramj->QU+0.2;\n    Dj = paramj->DU;\n    dDj = Bsj = dBsj = 0.0;\n  } else {\n    Dj = paramj->DU + pow(QUchj,paramj->nD);\t\t\t\t// YYDij\n    dDj = -paramj->nD * paramj->bD * pow(QUchj,(paramj->nD-1.0));\t// YYDiqpj\n    Bsj = paramj->aB - pow(QOchj,10);\t\t\t\t\t// YYBsij\n    dBsj = -paramj->bB * 10.0 * pow(QOchj,9.0);\t\t\t\t// YYBsiqpj\n  }\n\n  LamDiLamDj = exp(0.5*(parami->lami*Di+paramj->lami*Dj)-rlm1*r);\n  caj = 0.5 * tmp_fc * parami->bigA * LamDiLamDj;\n\n  if (Bsi*Bsj > 0.0) {\n    AlfDiAlfDj = exp(0.5*(parami->alfi*Di+paramj->alfi*Dj));\n    cbj=-0.5*tmp_fc*bij*sqrt(Bsi*Bsj)*AlfDiAlfDj*\n                (pbij1*exp(-alfij1*r)+pbij2*exp(-alfij2*r)+pbij3*exp(-alfij3*r));\n    cbqpn = cbj * (parami->alfi * dDi + dBsi/Bsi);\n    cbqpj = cbj * (paramj->alfi * dDj + dBsj/Bsj);\n  } else {\n    cbj = cbqpn = cbqpj = 0.0;\n  }\n\n  caqpn = caj * parami->lami * dDi;\n  caqpj = caj * paramj->lami * dDj;\n\n  fqij = 1.0 * (caqpn + cbqpn);\n  fqji = 1.0 * (caqpj + cbqpj);\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::dipole_init(Param *parami, Param *paramj, double fac11,\n\tdouble *delrj, double rsq, int mr1, int mr2, int mr3, double sr1,\n\tdouble sr2, double sr3, double iq, double jq, int i, int j)\n{\n  double erfcc, erfcd, dvdrr, dfafbnl, smf2, phinn, phinj, efn, efj;\n  double r, r3, alfdpi, esucon;\n  double rcd, rct, tmurn, tmurj, poln[3], polj[3], Qext[3];\n  int nm;\n  int inti = parami->ielement;\n  int intj = paramj->ielement;\n  int inty = intype[inti][intj];\n\n  for(nm=0; nm<3; nm++) Qext[nm] = 0.0;\n\n  r = sqrt(rsq);\n  r3 = r * rsq;\n  rcd = 1.0/(r3);\n  rct = 3.0*rcd/rsq;\n  alfdpi = 0.4/MY_PIS;\n  esucon = force->qqr2e;\n\n  erfcc = sr1*erpaw[mr1][0] + sr2*erpaw[mr2][0] + sr3*erpaw[mr3][0];\n  erfcd = sr1*erpaw[mr1][1] + sr2*erpaw[mr2][1] + sr3*erpaw[mr3][1];\n  dvdrr = (erfcc/r3+alfdpi*erfcd/rsq)*esucon-fac11;\n  dfafbnl= sr1*dfafb[mr1][inty] + sr2*dfafb[mr2][inty] + sr3*dfafb[mr3][inty];\n  smf2 = dvdrr/esucon + dfafbnl/r;\n  phinn = sr1*phin[mr1][inti] + sr2*phin[mr2][inti] + sr3*phin[mr3][inti];\n  phinj = sr1*phin[mr1][intj] + sr2*phin[mr2][intj] + sr3*phin[mr3][intj];\n  efn = jq * smf2;\n  efj = iq * smf2;\n\n  tmurn = dpl[i][0]*delrj[0] + dpl[i][1]*delrj[1] + dpl[i][2]*delrj[2];\n  tmurj = dpl[j][0]*delrj[0] + dpl[j][1]*delrj[1] + dpl[j][2]*delrj[2];\n\n  for (nm=0; nm<3; nm++) {\n    poln[nm] = (tmurj*delrj[nm]*rct - dpl[j][nm]*rcd)*phinj;\n    polj[nm] = (tmurn*delrj[nm]*rct - dpl[i][nm]*rcd)*phinn;\n  }\n\n  for (nm=0; nm<3; nm++) {\n    dpl[i][nm] += (Qext[nm]/esucon + delrj[nm]*efn + poln[nm])*parami->polz*0.50;\n    dpl[j][nm] += (Qext[nm]/esucon - delrj[nm]*efj + polj[nm])*paramj->polz*0.50;\n  }\n\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::dipole_self(Param *parami, int i)\n{\n  double esucon = force->qqr2e;\n  double apn = parami->polz;\n  double selfdpV = 0.0;\n\n  if (apn != 0.0) {\n      selfdpV= (dpl[i][0]*dpl[i][0]+dpl[i][1]*dpl[i][1]+dpl[i][2]*dpl[i][2])\n                *esucon/(2.0*apn); }\n  return selfdpV;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::dipole_calc(Param *parami, Param *paramj, double fac11,\n\tdouble delx, double dely, double delz, double rsq,\n\tint mr1, int mr2, int mr3, double sr1, double sr2, double sr3,\n\tdouble iq, double jq, int i, int j, double &vionij,\n\tdouble &fvionij, double *ddprx)\n{\n  double erfcc, erfcd, dvdrr, dfafbnl, ef, phinn, phinj, efn, efj;\n  double r, r3, alf, alfdpi, esucon, dphinn, dphinj, ddfafbnl;\n  double def, defn, defj, tmun, tmuj, emuTmu, edqn, edqj, ddvdrr;\n  double rcd, rct, tmurn, tmurj, tmumu, poln[3], polj[3], delr1[3];\n  double demuTmu, ddpr, dcoef;\n  int nm;\n  int inti = parami->ielement;\n  int intj = paramj->ielement;\n  int inty = intype[inti][intj];\n\n  r = sqrt(rsq);\n  r3 = r * rsq;\n  esucon = force->qqr2e;\n  rcd = esucon/r3;\n  rct = 3.0*rcd/rsq;\n  alf = 0.2;\n  alfdpi = 2.0*alf/MY_PIS;\n  delr1[0] = delx;\n  delr1[1] = dely;\n  delr1[2] = delz;\n\n  // generate energy & force information from tables\n  erfcc = sr1*erpaw[mr1][0] + sr2*erpaw[mr2][0] + sr3*erpaw[mr3][0];\n  erfcd = sr1*erpaw[mr1][1] + sr2*erpaw[mr2][1] + sr3*erpaw[mr3][1];\n  dvdrr = (erfcc/r3+alfdpi*erfcd/rsq)*esucon-fac11;\n  ddvdrr = (2.0*erfcc/r3 + 2.0*alfdpi*erfcd*(1.0/rsq+alf*alf))*esucon;\n  dfafbnl= sr1*dfafb[mr1][inty] + sr2*dfafb[mr2][inty] + sr3*dfafb[mr3][inty];\n  phinn = sr1*phin[mr1][inti] + sr2*phin[mr2][inti] + sr3*phin[mr3][inti];\n  phinj = sr1*phin[mr1][intj] + sr2*phin[mr2][intj] + sr3*phin[mr3][intj];\n  dphinn = sr1*dphin[mr1][inti] + sr2*dphin[mr2][inti] + sr3*dphin[mr3][inti];\n  dphinj = sr1*dphin[mr1][intj] + sr2*dphin[mr2][intj] + sr3*dphin[mr3][intj];\n  ddfafbnl= sr1*ddfafb[mr1][inty] + sr2*ddfafb[mr2][inty] + sr3*ddfafb[mr3][inty];\n  ef = (dvdrr + dfafbnl * esucon)/r;\n  efn =  jq * ef;\n  efj = -iq * ef;\n  def = (ddvdrr + ddfafbnl * esucon)/r;\n  defn =  jq * def;\n  defj = -iq * def;\n\n  // dipole - dipole field tensor (Tij)\n  tmurn = dpl[i][0]*delr1[0] + dpl[i][1]*delr1[1] + dpl[i][2]*delr1[2];\n  tmurj = dpl[j][0]*delr1[0] + dpl[j][1]*delr1[1] + dpl[j][2]*delr1[2];\n  tmumu = dpl[i][0]*dpl[j][0] + dpl[i][1]*dpl[j][1] + dpl[i][2]*dpl[j][2];\n\n  for (nm=0; nm<3; nm++) {\n    poln[nm] = (tmurj*delr1[nm]*rct - dpl[j][nm]*rcd);\n    polj[nm] = (tmurn*delr1[nm]*rct - dpl[i][nm]*rcd);\n  }\n  tmun = dpl[j][0]*polj[0] + dpl[j][1]*polj[1] + dpl[j][2]*polj[2];\n  tmuj = dpl[i][0]*poln[0] + dpl[i][1]*poln[1] + dpl[i][2]*poln[2];\n\n  // dipole - dipole energy\n  emuTmu = -0.5*(tmun*phinn+tmuj*phinj);\n\n  // dipole - charge energy\n  edqn = -0.5 * (tmurn * efn);\n  edqj = -0.5 * (tmurj * efj);\n\n  // overall dipole energy\n  vionij = emuTmu + edqn + edqj;\n\n  // dipole - dipole force\n  demuTmu = (tmun*dphinn + tmuj*dphinj)/r;\n  ddpr =  5.0*tmurn*tmurj/rsq - tmumu;\n  dcoef = rct * (phinn+phinj);\n\n  for (nm = 0; nm < 3; nm ++) {\n    ddprx[nm] = dcoef * (ddpr*delr1[nm] - tmurn*dpl[j][nm] - tmurj*dpl[i][nm])\n\t  + demuTmu * delr1[nm];\n  }\n\n  // dipole - charge force\n  fvionij = -tmurn*defn - tmurj*defj;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fc_curl(double rocn, Param *param)\n{\n  double r_inn = param->curlcut1;\n  double r_out = param->curlcut2;\n  if (rocn <= r_inn) return 1.0;\n  if (rocn >= r_out) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(rocn-r_inn)/(r_out-r_inn)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::comb_fc_curl_d(double rocn, Param *param)\n{\n  double r_inn = param->curlcut1;\n  double r_out = param->curlcut2;\n  if (rocn <= r_inn) return 0.0;\n  if (rocn >= r_out) return 0.0;\n  return -MY_PI2/(r_out-r_inn)*sin(MY_PI*(rocn-r_inn)/(r_out-r_inn));\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairComb3::heaviside(double rr)\n{\n  if (rr <= 0.0) return 0;\n  else return 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::switching(double rr)\n{\n  if (rr <= 0.0) return 1.0;\n  else if (rr >= 1.0) return 0.0;\n  else return heaviside(-rr)+heaviside(rr)*heaviside(1.0-rr)\n\t  * (1.0-(3.0-2.0*rr)*rr*rr);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb3::switching_d(double rr)\n{\n  if (rr <= 0.0) return 0.0;\n  else if (rr >= 1.0) return 0.0;\n  else return heaviside(rr)*heaviside(1.0-rr)\n\t  * 6.0*rr*(rr-1.0);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairComb3::pack_forward_comm(int n, int *list, double *buf,\n                                 int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  m = 0;\n  if (pack_flag == 1) {\n    for (i = 0; i < n; i ++) {\n      j = list[i];\n      buf[m++] = qf[j];\n    }\n  } else if (pack_flag == 2) {\n    for (i = 0; i < n; i ++) {\n      j = list[i];\n      buf[m++] = NCo[j];\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n ;\n  if (pack_flag == 1) {\n    for (i = first; i < last; i++)\n      qf[i] = buf[m++];\n  } else if (pack_flag == 2) {\n    for (i = first; i < last; i++)\n      NCo[i] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairComb3::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  if (pack_flag == 1) {\n    for (i = first; i < last; i++)\n      buf[m++] = qf[i];\n  } else if (pack_flag == 2) {\n    for (i = first; i < last; i++)\n      buf[m++] = NCo[i];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb3::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  if (pack_flag == 1) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      qf[j] += buf[m++];\n    }\n  } else if (pack_flag == 2) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      NCo[j] += buf[m++];\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairComb3::memory_usage()\n{\n  double bytes = maxeatom * sizeof(double);\n  bytes += maxvatom*6 * sizeof(double);\n  bytes += nmax * sizeof(int);\n  bytes += nmax * 8.0 * sizeof(double);\n  bytes += 25000*2*sizeof(double);\n\n  for (int i = 0; i < comm->nthreads; i++)\n    bytes += ipage[i].size();\n\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(comb3,PairComb3)\n\n#else\n\n#ifndef LMP_PAIR_COMB3_H\n#define LMP_PAIR_COMB3_H\n\n#include \"pair.h\"\n#include \"my_page.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairComb3 : public Pair {\n public:\n  PairComb3(class LAMMPS *);\n  virtual ~PairComb3();\n  virtual void compute(int, int);\n  void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n  double memory_usage();\n  virtual double combqeq(double *, int &);\n  double enegtot;\n\n // general potential parameters\n protected:\n  struct Param {\n    int ielement,jelement,kelement,powermint;\n    int ielementgp,jelementgp,kelementgp;  \t//element group\n    int ang_flag,pcn_flag,rad_flag,tor_flag;  \t//angle, coordination,radical, torsion flag\n    double lami,lambda,alfi,alpha1,alpha2,alpha3,beta;\n    double pcos6,pcos5,pcos4,pcos3,pcos2,pcos1,pcos0;\n    double gamma,powerm,powern,bigA,bigB1,bigB2,bigB3;\n    double bigd,bigr,cut,cutsq,c1,c2,c3,c4;\n    double p6p0,p6p1,p6p2,p6p3,p6p4,p6p5,p6p6;\n    double ptork1,ptork2;\n    double addrepr,addrep, vdwflag;\n    double QU,QL,DU,DL,Qo,dQ,aB,bB,nD,bD,qmin,qmax;\n    double chi,dj,dk,dl,dm,esm,cmn1,cmn2,pcmn1,pcmn2;\n    double coulcut, lcut, lcutsq;\n    double veps, vsig, pcna, pcnb, pcnc, pcnd, polz, curl, pcross;\n    double paaa, pbbb;\n    double curlcut1, curlcut2, curl0;\n  };\n\n  // general setups\n  int nelements;                \t// # of unique elements\n  int ***elem2param;            \t// mapping from element triplets to parameters\n  int *map;                     \t// mapping from atom types to elements\n  int nparams;                  \t// # of stored parameter sets\n  int maxparam;                 \t// max # of parameter sets\n  double PI,PI2,PI4,PIsq;\t\t// PIs\n  double cutmin;                \t// min cutoff for all elements\n  double cutmax;                \t// max cutoff for all elements\n  double precision;\t\t\t// tolerance for QEq convergence\n  char **elements;              \t// names of unique elements\n  Param *params;                \t// parameter set for an I-J-K interaction\n  int debug_eng1, debug_eng2, debug_fq;\t// logic controlling debugging outputs\n  int pack_flag;\n\n  // Short range neighbor list\n  void Short_neigh();\n  int pgsize, oneatom;\n  int *sht_num, **sht_first;\n  MyPage<int> *ipage;\n\n  // loop up tables and flags\n  int nmax, **intype;\n  int  pol_flag, polar;\n  double *qf, **bbij, *charge, *NCo;\n  double *esm, **fafb, **dfafb, **ddfafb, **phin, **dphin, **erpaw;\n  double **vvdw, **vdvdw;\n  double **afb, **dafb;\n  double **dpl, bytes;\n  double *xcctmp, *xchtmp, *xcotmp;\n\n  // additional carbon parameters\n  int cflag;\n  int nsplpcn,nsplrad,nspltor;\n  int maxx,maxy,maxz,maxxc,maxyc,maxconj;\n  int maxxcn[4];\n  double vmaxxcn[4],dvmaxxcn[4];\n  int ntab;\n  double iin2[16][2],iin3[64][3];\n  double brad[4], btor[4], bbtor, ptorr;\n  double fi_tor[3], fj_tor[3], fk_tor[3], fl_tor[3];\n  double radtmp, fi_rad[3], fj_rad[3], fk_rad[3];\n\n  double ccutoff[6],ch_a[7];\n\n  //COMB3-v18 arrays for CHO\n\t// We wanna dynamic arrays\n\t// C angle arrays, size = ntab+1\n  double pang[20001];\n  double dpang[20001];\n  double ddpang[20001];\n\n  //coordination spline arrays\n  double pcn_grid[4][5][5][5];\n  double pcn_gridx[4][5][5][5];\n  double pcn_gridy[4][5][5][5];\n  double pcn_gridz[4][5][5][5];\n  double pcn_cubs[4][4][4][4][64];\n\n  //coordination spline arrays\n  double rad_grid[3][5][5][11];\n  double rad_gridx[3][5][5][11];\n  double rad_gridy[3][5][5][11];\n  double rad_gridz[3][5][5][11];\n  double rad_spl[3][4][4][10][64];\n\n  //torsion spline arrays\n  double tor_grid[1][5][5][11];\n  double tor_gridx[1][5][5][11];\n  double tor_gridy[1][5][5][11];\n  double tor_gridz[1][5][5][11];\n  double tor_spl[1][4][4][10][64];\n\n  // initialization functions\n  void allocate();\n  void read_lib();\n  void setup_params();\n  virtual void read_file(char *);\n\n  // cutoff functions\n  double comb_fc(double, Param *);\n  double comb_fc_d(double, Param *);\n  double comb_fc_curl(double, Param *);\n  double comb_fc_curl_d(double, Param *);\n  double comb_fccc(double);\n  double comb_fccc_d(double);\n  double comb_fcch(double);\n  double comb_fcch_d(double);\n  double comb_fccch(double);\n  double comb_fccch_d(double);\n  double comb_fcsw(double);\n\n  // short range terms\n  void attractive(Param *, Param *, Param *, double, double, double, double,\n\tdouble, double, double, double *, double *, double *,\n\tdouble *, double *, int, double);\n  virtual void comb_fa(double, Param *, Param *, double, double,\n\t  double &, double &);\n  virtual void repulsive(Param *, Param *,double, double &, int,\n\t double &, double, double);\n\n  // bond order terms\n  double comb_bij(double, Param *, double, int, double);\n  double comb_gijk(double, Param *, double);\n  void comb_gijk_d(double, Param *, double, double &, double &);\n  double zeta(Param *, Param *, double, double, double *, double *, int, double);\n  void comb_bij_d(double, Param *, double, int, double &,\n\t  double &, double &, double &, double &, double &, double);\n  void coord(Param *, double, int, double &, double &,\n\t  double &, double &, double &, double);\n  void comb_zetaterm_d(double, double, double, double, double,\n\tdouble *, double, double *, double, double *, double *,\n\tdouble *, Param *, Param *, Param *, double);\n  void costheta_d(double *, double, double *, double,\n\t  double *, double *, double *);\n  void force_zeta(Param *, Param *, double, double, double, double &,\n\tdouble &, double &, double &, double &, double &, double &,\n\tdouble &, double &, double &, double &, double &, double &,\n\tint, double &, double,double, int, int, int,\n\tdouble , double , double);\n  void cntri_int(int, double, double, double, int, int, int,\n        double &, double &, double &, double &, Param *);\n\n  // Legendre polynomials\n  void selfp6p(Param *, Param *, double, double &, double &);\n  double ep6p(Param *, Param *, double, double, double *, double * ,double &);\n  void fp6p(Param *, Param *, double, double, double *, double *, double *,\n\t  double *, double *);\n\n  // long range q-dependent terms\n  double self(Param *, double);\n  void tables();\n  void potal_calc(double &, double &, double &);\n  void tri_point(double, int &, int &, int &, double &, double &,\n\t double &);\n  void vdwaals(int,int,int,int,double,double,double,double,\n\t  double &, double &);\n  void direct(Param *, Param *, int,int,int,double,double,\n\tdouble,double,double,double, double,double,double &,double &,\n         int, int);\n  void field(Param *, Param *,double,double,double,double &,double &);\n  int heaviside(double);\n  double switching(double);\n  double switching_d(double);\n  double chicut1, chicut2;\n\n  // radical terms\n  double rad_init(double, Param *, int, double &, double);\n  void rad_calc(double, Param *, Param *, double, double, int,\n\t\t  int, double, double);\n  void rad_int(int , double, double, double, int, int, int,\n\tdouble &, double &, double &, double &);\n  void rad_forceik(Param *,  double, double *, double, double);\n  void rad_force(Param *,  double, double *,  double);\n\n  // torsion terms\n  double bbtor1(int, Param *, Param *, double, double, double,\n        double *, double *, double *, double);                     //modified by TAO\n  void tor_calc(double, Param *, Param *, double, double, int,\n\t\t  int, double, double);\n  void tor_int(int , double, double, double, int, int, int,\n        double &, double &, double &, double &);\n  void tor_force(int, Param *, Param *, double, double, double,\n        double, double *, double *, double *);                //modified by TAO\n\n  // charge force terms\n  double qfo_self(Param *, double);\n  void qfo_short(Param *, Param *, double, double, double,\n\tdouble &, double &, int, int, int);\n  void qfo_direct(Param *, Param *, int, int, int, double,\n\tdouble, double, double, double, double &, double &,\n\tdouble, double, int, int);\n  void qfo_field(Param *, Param *,double,double ,double ,double &, double &);\n  void qfo_dipole(double, int, int, int, int, double, double *, double,\n\tdouble, double, double &, double &, int, int);\n  void qsolve(double *);\n\n  // dipole - polarization terms\n  double dipole_self(Param *, int);\n  void dipole_init(Param *, Param *, double, double *, double,\n\tint, int, int, double, double, double, double, double, int , int);\n  void dipole_calc(Param *, Param *, double, double, double, double, double,\n\tint, int, int, double, double, double, double, double, int , int,\n\tdouble &, double &, double *);\n\n  // communication functions\n  int pack_reverse_comm(int, int, double *);\n  void unpack_reverse_comm(int, int *, double *);\n  int pack_forward_comm(int , int *, double *, int, int *);\n  void unpack_forward_comm(int , int , double *);\n\n  // vector functions, inline for efficiency\n  inline double vec3_dot(double *x, double *y) {\n    return x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n  }\n  inline void vec3_add(double *x, double *y, double *z) {\n    z[0] = x[0]+y[0];  z[1] = x[1]+y[1];  z[2] = x[2]+y[2];\n  }\n  inline void vec3_scale(double k, double *x, double *y) {\n    y[0] = k*x[0];  y[1] = k*x[1];  y[2] = k*x[2];\n  }\n  inline void vec3_scaleadd(double k, double *x, double *y, double *z) {\n    z[0] = k*x[0]+y[0];  z[1] = k*x[1]+y[1];  z[2] = k*x[2]+y[2];\n  }\n };\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style COMB3 requires atom IDs\n\nThis is a requirement to use the COMB3 potential.\n\nE: Pair style COMB3 requires newton pair on\n\nSee the newton command.  This is a restriction to use the COMB3\npotential.\n\nE: Pair style COMB3 requires atom attribute q\n\nSelf-explanatory.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Cannot open COMB3 lib.comb3 file\n\nThe COMB3 library file cannot be opened.  Check that the path and name\nare correct.\n\nE: Cannot open COMB3 potential file %s\n\nThe specified COMB3 potential file cannot be opened.  Check that the\npath and name are correct.\n\nE: Incorrect format in COMB3 potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal COMB3 parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\nE: Potential file has duplicate entry\n\nThe potential file has more than one entry for the same element.\n\nE: Potential file is missing an entry\n\nThe potential file does not have a needed entry.\n\nE: Neighbor list overflow, boost neigh_modify one\n\nThere are too many neighbors of a single atom.  Use the neigh_modify\ncommand to increase the max number of neighbors allowed for one atom.\nYou may also want to boost the page size.\n\nE: Error in vdw spline: inner radius > outer radius\n\nA pre-tabulated spline is invalid.  Likely a problem with the\npotential parameters.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef ATOM_CLASS\n\nAtomStyle(full,AtomVecFull)\n\n#else\n\n#ifndef LMP_ATOM_VEC_FULL_H\n#define LMP_ATOM_VEC_FULL_H\n\n#include \"atom_vec.h\"\n\nnamespace LAMMPS_NS {\n\nclass AtomVecFull : public AtomVec {\n public:\n  AtomVecFull(class LAMMPS *);\n  virtual ~AtomVecFull() {}\n  void grow(int);\n  void grow_reset();\n  void copy(int, int, int);\n  virtual int pack_comm(int, int *, double *, int, int *);\n  virtual int pack_comm_vel(int, int *, double *, int, int *);\n  virtual void unpack_comm(int, int, double *);\n  virtual void unpack_comm_vel(int, int, double *);\n  int pack_reverse(int, int, double *);\n  void unpack_reverse(int, int *, double *);\n  virtual int pack_border(int, int *, double *, int, int *);\n  virtual int pack_border_vel(int, int *, double *, int, int *);\n  int pack_border_hybrid(int, int *, double *);\n  virtual void unpack_border(int, int, double *);\n  virtual void unpack_border_vel(int, int, double *);\n  int unpack_border_hybrid(int, int, double *);\n  virtual int pack_exchange(int, double *);\n  virtual int unpack_exchange(double *);\n  int size_restart();\n  int pack_restart(int, double *);\n  int unpack_restart(double *);\n  void create_atom(int, double *);\n  void data_atom(double *, imageint, char **);\n  int data_atom_hybrid(int, char **);\n  void pack_data(double **);\n  int pack_data_hybrid(int, double *);\n  void write_data(FILE *, int, double **);\n  int write_data_hybrid(FILE *, double *);\n  bigint memory_usage();\n\n protected:\n  tagint *tag;\n  int *type,*mask;\n  imageint *image;\n  double **x,**v,**f;\n  double *q;\n  tagint *molecule;\n  int **nspecial;\n  tagint **special;\n  int *num_bond;\n  int **bond_type;\n  tagint **bond_atom;\n  int *num_angle;\n  int **angle_type;\n  tagint **angle_atom1,**angle_atom2,**angle_atom3;\n  int *num_dihedral;\n  int **dihedral_type;\n  tagint **dihedral_atom1,**dihedral_atom2,**dihedral_atom3,**dihedral_atom4;\n  int *num_improper;\n  int **improper_type;\n  tagint **improper_atom1,**improper_atom2,**improper_atom3,**improper_atom4;\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Per-processor system is too big\n\nThe number of owned atoms plus ghost atoms on a single\nprocessor must fit in 32-bit integer.\n\nE: Invalid atom type in Atoms section of data file\n\nAtom types must range from 1 to specified # of types.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <stdlib.h>\n#include \"atom_vec_full.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nAtomVecFull::AtomVecFull(LAMMPS *lmp) : AtomVec(lmp)\n{\n  molecular = 1;\n  bonds_allow = angles_allow = dihedrals_allow = impropers_allow = 1;\n  mass_type = 1;\n\n  comm_x_only = comm_f_only = 1;\n  size_forward = 3;\n  size_reverse = 3;\n  size_border = 8;\n  size_velocity = 3;\n  size_data_atom = 7;\n  size_data_vel = 4;\n  xcol_data = 5;\n\n  atom->molecule_flag = atom->q_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   grow atom arrays\n   n = 0 grows arrays by a chunk\n   n > 0 allocates arrays to size n\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::grow(int n)\n{\n  if (n == 0) grow_nmax();\n  else nmax = n;\n  atom->nmax = nmax;\n  if (nmax < 0 || nmax > MAXSMALLINT)\n    error->one(FLERR,\"Per-processor system is too big\");\n\n  tag = memory->grow(atom->tag,nmax,\"atom:tag\");\n  type = memory->grow(atom->type,nmax,\"atom:type\");\n  mask = memory->grow(atom->mask,nmax,\"atom:mask\");\n  image = memory->grow(atom->image,nmax,\"atom:image\");\n  x = memory->grow(atom->x,nmax,3,\"atom:x\");\n  v = memory->grow(atom->v,nmax,3,\"atom:v\");\n  f = memory->grow(atom->f,nmax*comm->nthreads,3,\"atom:f\");\n\n  q = memory->grow(atom->q,nmax,\"atom:q\");\n  molecule = memory->grow(atom->molecule,nmax,\"atom:molecule\");\n\n  nspecial = memory->grow(atom->nspecial,nmax,3,\"atom:nspecial\");\n  special = memory->grow(atom->special,nmax,atom->maxspecial,\"atom:special\");\n\n  num_bond = memory->grow(atom->num_bond,nmax,\"atom:num_bond\");\n  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,\n                           \"atom:bond_type\");\n  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,\n                           \"atom:bond_atom\");\n\n  num_angle = memory->grow(atom->num_angle,nmax,\"atom:num_angle\");\n  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,\n                            \"atom:angle_type\");\n  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom1\");\n  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom2\");\n  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom3\");\n\n  num_dihedral = memory->grow(atom->num_dihedral,nmax,\"atom:num_dihedral\");\n  dihedral_type = memory->grow(atom->dihedral_type,nmax,\n                               atom->dihedral_per_atom,\"atom:dihedral_type\");\n  dihedral_atom1 =\n    memory->grow(atom->dihedral_atom1,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom1\");\n  dihedral_atom2 =\n    memory->grow(atom->dihedral_atom2,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom2\");\n  dihedral_atom3 =\n    memory->grow(atom->dihedral_atom3,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom3\");\n  dihedral_atom4 =\n    memory->grow(atom->dihedral_atom4,nmax,atom->dihedral_per_atom,\n                 \"atom:dihedral_atom4\");\n\n  num_improper = memory->grow(atom->num_improper,nmax,\"atom:num_improper\");\n  improper_type =\n    memory->grow(atom->improper_type,nmax,atom->improper_per_atom,\n                 \"atom:improper_type\");\n  improper_atom1 =\n    memory->grow(atom->improper_atom1,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom1\");\n  improper_atom2 =\n    memory->grow(atom->improper_atom2,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom2\");\n  improper_atom3 =\n    memory->grow(atom->improper_atom3,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom3\");\n  improper_atom4 =\n    memory->grow(atom->improper_atom4,nmax,atom->improper_per_atom,\n                 \"atom:improper_atom4\");\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);\n}\n\n/* ----------------------------------------------------------------------\n   reset local array ptrs\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::grow_reset()\n{\n  tag = atom->tag; type = atom->type;\n  mask = atom->mask; image = atom->image;\n  x = atom->x; v = atom->v; f = atom->f;\n  q = atom->q; molecule = atom->molecule;\n  nspecial = atom->nspecial; special = atom->special;\n  num_bond = atom->num_bond; bond_type = atom->bond_type;\n  bond_atom = atom->bond_atom;\n  num_angle = atom->num_angle; angle_type = atom->angle_type;\n  angle_atom1 = atom->angle_atom1; angle_atom2 = atom->angle_atom2;\n  angle_atom3 = atom->angle_atom3;\n  num_dihedral = atom->num_dihedral; dihedral_type = atom->dihedral_type;\n  dihedral_atom1 = atom->dihedral_atom1; dihedral_atom2 = atom->dihedral_atom2;\n  dihedral_atom3 = atom->dihedral_atom3; dihedral_atom4 = atom->dihedral_atom4;\n  num_improper = atom->num_improper; improper_type = atom->improper_type;\n  improper_atom1 = atom->improper_atom1; improper_atom2 = atom->improper_atom2;\n  improper_atom3 = atom->improper_atom3; improper_atom4 = atom->improper_atom4;\n}\n\n/* ----------------------------------------------------------------------\n   copy atom I info to atom J\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::copy(int i, int j, int delflag)\n{\n  int k;\n\n  tag[j] = tag[i];\n  type[j] = type[i];\n  mask[j] = mask[i];\n  image[j] = image[i];\n  x[j][0] = x[i][0];\n  x[j][1] = x[i][1];\n  x[j][2] = x[i][2];\n  v[j][0] = v[i][0];\n  v[j][1] = v[i][1];\n  v[j][2] = v[i][2];\n\n  q[j] = q[i];\n  molecule[j] = molecule[i];\n\n  num_bond[j] = num_bond[i];\n  for (k = 0; k < num_bond[j]; k++) {\n    bond_type[j][k] = bond_type[i][k];\n    bond_atom[j][k] = bond_atom[i][k];\n  }\n\n  num_angle[j] = num_angle[i];\n  for (k = 0; k < num_angle[j]; k++) {\n    angle_type[j][k] = angle_type[i][k];\n    angle_atom1[j][k] = angle_atom1[i][k];\n    angle_atom2[j][k] = angle_atom2[i][k];\n    angle_atom3[j][k] = angle_atom3[i][k];\n  }\n\n  num_dihedral[j] = num_dihedral[i];\n  for (k = 0; k < num_dihedral[j]; k++) {\n    dihedral_type[j][k] = dihedral_type[i][k];\n    dihedral_atom1[j][k] = dihedral_atom1[i][k];\n    dihedral_atom2[j][k] = dihedral_atom2[i][k];\n    dihedral_atom3[j][k] = dihedral_atom3[i][k];\n    dihedral_atom4[j][k] = dihedral_atom4[i][k];\n  }\n\n  num_improper[j] = num_improper[i];\n  for (k = 0; k < num_improper[j]; k++) {\n    improper_type[j][k] = improper_type[i][k];\n    improper_atom1[j][k] = improper_atom1[i][k];\n    improper_atom2[j][k] = improper_atom2[i][k];\n    improper_atom3[j][k] = improper_atom3[i][k];\n    improper_atom4[j][k] = improper_atom4[i][k];\n  }\n\n  nspecial[j][0] = nspecial[i][0];\n  nspecial[j][1] = nspecial[i][1];\n  nspecial[j][2] = nspecial[i][2];\n  for (k = 0; k < nspecial[j][2]; k++) special[j][k] = special[i][k];\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::pack_comm(int n, int *list, double *buf,\n                           int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::pack_comm_vel(int n, int *list, double *buf,\n                               int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecFull::unpack_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecFull::unpack_comm_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::pack_reverse(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    buf[m++] = f[i][0];\n    buf[m++] = f[i][1];\n    buf[m++] = f[i][2];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecFull::unpack_reverse(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    f[j][0] += buf[m++];\n    f[j][1] += buf[m++];\n    f[j][2] += buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::pack_border(int n, int *list, double *buf,\n                             int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = q[j];\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = q[j];\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::pack_border_vel(int n, int *list, double *buf,\n                                 int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = q[j];\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = q[j];\n        buf[m++] = ubuf(molecule[j]).d;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = q[j];\n        buf[m++] = ubuf(molecule[j]).d;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::pack_border_hybrid(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = q[j];\n    buf[m++] = ubuf(molecule[j]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecFull::unpack_border(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    q[i] = buf[m++];\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecFull::unpack_border_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    q[i] = buf[m++];\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::unpack_border_hybrid(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    q[i] = buf[m++];\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  }\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   pack data for atom I for sending to another proc\n   xyz must be 1st 3 values, so comm::exchange() can test on them\n------------------------------------------------------------------------- */\n\nint AtomVecFull::pack_exchange(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n\n  buf[m++] = q[i];\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(bond_type[i][k]).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_angle[i]).d;\n  for (k = 0; k < num_angle[i]; k++) {\n    buf[m++] = ubuf(angle_type[i][k]).d;\n    buf[m++] = ubuf(angle_atom1[i][k]).d;\n    buf[m++] = ubuf(angle_atom2[i][k]).d;\n    buf[m++] = ubuf(angle_atom3[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_dihedral[i]).d;\n  for (k = 0; k < num_dihedral[i]; k++) {\n    buf[m++] = ubuf(dihedral_type[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom1[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom2[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom3[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom4[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_improper[i]).d;\n  for (k = 0; k < num_improper[i]; k++) {\n    buf[m++] = ubuf(improper_type[i][k]).d;\n    buf[m++] = ubuf(improper_atom1[i][k]).d;\n    buf[m++] = ubuf(improper_atom2[i][k]).d;\n    buf[m++] = ubuf(improper_atom3[i][k]).d;\n    buf[m++] = ubuf(improper_atom4[i][k]).d;\n  }\n\n  buf[m++] = ubuf(nspecial[i][0]).d;\n  buf[m++] = ubuf(nspecial[i][1]).d;\n  buf[m++] = ubuf(nspecial[i][2]).d;\n  for (k = 0; k < nspecial[i][2]; k++) buf[m++] = ubuf(special[i][k]).d;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecFull::unpack_exchange(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n\n  q[nlocal] = buf[m++];\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_angle[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_angle[nlocal]; k++) {\n    angle_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_dihedral[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_dihedral[nlocal]; k++) {\n    dihedral_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    dihedral_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    dihedral_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    dihedral_atom4[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_improper[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_improper[nlocal]; k++) {\n    improper_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    improper_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    improper_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    improper_atom4[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][1] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][2] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < nspecial[nlocal][2]; k++)\n    special[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->\n        unpack_exchange(nlocal,&buf[m]);\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   size of restart data for all atoms owned by this proc\n   include extra data stored by fixes\n------------------------------------------------------------------------- */\n\nint AtomVecFull::size_restart()\n{\n  int i;\n\n  int nlocal = atom->nlocal;\n  int n = 0;\n  for (i = 0; i < nlocal; i++)\n    n += 17 + 2*num_bond[i] + 4*num_angle[i] +\n      5*num_dihedral[i] + 5*num_improper[i];\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      for (i = 0; i < nlocal; i++)\n        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);\n\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom I's data for restart file including extra quantities\n   xyz must be 1st 3 values, so that read_restart can test on them\n   molecular types may be negative, but write as positive\n------------------------------------------------------------------------- */\n\nint AtomVecFull::pack_restart(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n\n  buf[m++] = q[i];\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(MAX(bond_type[i][k],-bond_type[i][k])).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_angle[i]).d;\n  for (k = 0; k < num_angle[i]; k++) {\n    buf[m++] = ubuf(MAX(angle_type[i][k],-angle_type[i][k])).d;\n    buf[m++] = ubuf(angle_atom1[i][k]).d;\n    buf[m++] = ubuf(angle_atom2[i][k]).d;\n    buf[m++] = ubuf(angle_atom3[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_dihedral[i]).d;\n  for (k = 0; k < num_dihedral[i]; k++) {\n    buf[m++] = ubuf(MAX(dihedral_type[i][k],-dihedral_type[i][k])).d;\n    buf[m++] = ubuf(dihedral_atom1[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom2[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom3[i][k]).d;\n    buf[m++] = ubuf(dihedral_atom4[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_improper[i]).d;\n  for (k = 0; k < num_improper[i]; k++) {\n    buf[m++] = ubuf(MAX(improper_type[i][k],-improper_type[i][k])).d;\n    buf[m++] = ubuf(improper_atom1[i][k]).d;\n    buf[m++] = ubuf(improper_atom2[i][k]).d;\n    buf[m++] = ubuf(improper_atom3[i][k]).d;\n    buf[m++] = ubuf(improper_atom4[i][k]).d;\n  }\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   unpack data for one atom from restart file including extra quantities\n------------------------------------------------------------------------- */\n\nint AtomVecFull::unpack_restart(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) {\n    grow(0);\n    if (atom->nextra_store)\n      memory->grow(atom->extra,nmax,atom->nextra_store,\"atom:extra\");\n  }\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n\n  q[nlocal] = buf[m++];\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_angle[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_angle[nlocal]; k++) {\n    angle_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_dihedral[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_dihedral[nlocal]; k++) {\n    dihedral_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    dihedral_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    dihedral_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    dihedral_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    dihedral_atom4[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_improper[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_improper[nlocal]; k++) {\n    improper_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    improper_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    improper_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    improper_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    improper_atom4[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  double **extra = atom->extra;\n  if (atom->nextra_store) {\n    int size = static_cast<int> (buf[0]) - m;\n    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];\n  }\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   create one atom of itype at coord\n   set other values to defaults\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::create_atom(int itype, double *coord)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = 0;\n  type[nlocal] = itype;\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n  mask[nlocal] = 1;\n  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |\n    ((imageint) IMGMAX << IMGBITS) | IMGMAX;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n\n  q[nlocal] = 0.0;\n  molecule[nlocal] = 0;\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  num_dihedral[nlocal] = 0;\n  num_improper[nlocal] = 0;\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack one line from Atoms section of data file\n   initialize other atom quantities\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::data_atom(double *coord, imageint imagetmp, char **values)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = ATOTAGINT(values[0]);\n  molecule[nlocal] = ATOTAGINT(values[1]);\n  type[nlocal] = atoi(values[2]);\n  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)\n    error->one(FLERR,\"Invalid atom type in Atoms section of data file\");\n\n  q[nlocal] = atof(values[3]);\n\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n\n  image[nlocal] = imagetmp;\n\n  mask[nlocal] = 1;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  num_dihedral[nlocal] = 0;\n  num_improper[nlocal] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack hybrid quantities from one line in Atoms section of data file\n   initialize other atom quantities for this sub-style\n------------------------------------------------------------------------- */\n\nint AtomVecFull::data_atom_hybrid(int nlocal, char **values)\n{\n  molecule[nlocal] = ATOTAGINT(values[0]);\n  q[nlocal] = atof(values[1]);\n\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  num_dihedral[nlocal] = 0;\n  num_improper[nlocal] = 0;\n\n  return 2;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom info for data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::pack_data(double **buf)\n{\n  int nlocal = atom->nlocal;\n  for (int i = 0; i < nlocal; i++) {\n    buf[i][0] = ubuf(tag[i]).d;\n    buf[i][1] = ubuf(molecule[i]).d;\n    buf[i][2] = ubuf(type[i]).d;\n    buf[i][3] = q[i];\n    buf[i][4] = x[i][0];\n    buf[i][5] = x[i][1];\n    buf[i][6] = x[i][2];\n    buf[i][7] = ubuf((image[i] & IMGMASK) - IMGMAX).d;\n    buf[i][8] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;\n    buf[i][9] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   pack hybrid atom info for data file\n------------------------------------------------------------------------- */\n\nint AtomVecFull::pack_data_hybrid(int i, double *buf)\n{\n  buf[0] = ubuf(molecule[i]).d;\n  buf[1] = q[i];\n  return 2;\n}\n\n/* ----------------------------------------------------------------------\n   write atom info to data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecFull::write_data(FILE *fp, int n, double **buf)\n{\n  for (int i = 0; i < n; i++)\n    fprintf(fp,TAGINT_FORMAT \" \" TAGINT_FORMAT\n            \" %d %-1.16e %-1.16e %-1.16e %-1.16e %d %d %d\\n\",\n            (tagint) ubuf(buf[i][0]).i,(tagint) ubuf(buf[i][1]).i,\n            (int) ubuf(buf[i][2]).i,\n            buf[i][3],buf[i][4],buf[i][5],buf[i][6],\n            (int) ubuf(buf[i][7]).i,(int) ubuf(buf[i][8]).i,\n            (int) ubuf(buf[i][9]).i);\n}\n\n/* ----------------------------------------------------------------------\n   write hybrid atom info to data file\n------------------------------------------------------------------------- */\n\nint AtomVecFull::write_data_hybrid(FILE *fp, double *buf)\n{\n  fprintf(fp,\" \" TAGINT_FORMAT \" %-1.16e\",(tagint) ubuf(buf[0]).i,buf[1]);\n  return 2;\n}\n\n/* ----------------------------------------------------------------------\n   return # of bytes of allocated memory\n------------------------------------------------------------------------- */\n\nbigint AtomVecFull::memory_usage()\n{\n  bigint bytes = 0;\n\n  if (atom->memcheck(\"tag\")) bytes += memory->usage(tag,nmax);\n  if (atom->memcheck(\"type\")) bytes += memory->usage(type,nmax);\n  if (atom->memcheck(\"mask\")) bytes += memory->usage(mask,nmax);\n  if (atom->memcheck(\"image\")) bytes += memory->usage(image,nmax);\n  if (atom->memcheck(\"x\")) bytes += memory->usage(x,nmax,3);\n  if (atom->memcheck(\"v\")) bytes += memory->usage(v,nmax,3);\n  if (atom->memcheck(\"f\")) bytes += memory->usage(f,nmax*comm->nthreads,3);\n\n  if (atom->memcheck(\"q\")) bytes += memory->usage(q,nmax);\n  if (atom->memcheck(\"molecule\")) bytes += memory->usage(molecule,nmax);\n  if (atom->memcheck(\"nspecial\")) bytes += memory->usage(nspecial,nmax,3);\n  if (atom->memcheck(\"special\"))\n    bytes += memory->usage(special,nmax,atom->maxspecial);\n\n  if (atom->memcheck(\"num_bond\")) bytes += memory->usage(num_bond,nmax);\n  if (atom->memcheck(\"bond_type\"))\n    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);\n  if (atom->memcheck(\"bond_atom\"))\n    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);\n\n  if (atom->memcheck(\"num_angle\")) bytes += memory->usage(num_angle,nmax);\n  if (atom->memcheck(\"angle_type\"))\n    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom1\"))\n    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom2\"))\n    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom3\"))\n    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);\n\n  if (atom->memcheck(\"num_dihedral\")) bytes += memory->usage(num_dihedral,nmax);\n  if (atom->memcheck(\"dihedral_type\"))\n    bytes += memory->usage(dihedral_type,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom1\"))\n    bytes += memory->usage(dihedral_atom1,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom2\"))\n    bytes += memory->usage(dihedral_atom2,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom3\"))\n    bytes += memory->usage(dihedral_atom3,nmax,atom->dihedral_per_atom);\n  if (atom->memcheck(\"dihedral_atom4\"))\n    bytes += memory->usage(dihedral_atom4,nmax,atom->dihedral_per_atom);\n\n  if (atom->memcheck(\"num_improper\")) bytes += memory->usage(num_improper,nmax);\n  if (atom->memcheck(\"improper_type\"))\n    bytes += memory->usage(improper_type,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom1\"))\n    bytes += memory->usage(improper_atom1,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom2\"))\n    bytes += memory->usage(improper_atom2,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom3\"))\n    bytes += memory->usage(improper_atom3,nmax,atom->improper_per_atom);\n  if (atom->memcheck(\"improper_atom4\"))\n    bytes += memory->usage(improper_atom4,nmax,atom->improper_per_atom);\n\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Aidan Thompson (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_tersoff.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairTersoff::PairTersoff(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n  map = NULL;\n\n  maxshort = 10;\n  neighshort = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairTersoff::~PairTersoff()\n{\n  if (copymode) return;\n\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n  memory->destroy(params);\n  memory->destroy(elem2param);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(neighshort);\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum;\n  int itype,jtype,ktype,iparam_ij,iparam_ijk;\n  tagint itag,jtag;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2;\n  double delr1[3],delr2[3],fi[3],fj[3],fk[3];\n  double zeta_ij,prefactor;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n  const double cutshortsq = cutmax*cutmax;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  double fxtmp,fytmp,fztmp;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    fxtmp = fytmp = fztmp = 0.0;\n\n    // two-body interactions, skip half of them\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    int numshort = 0;\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutshortsq) {\n        neighshort[numshort++] = j;\n        if (numshort >= maxshort) {\n          maxshort += maxshort/2;\n          memory->grow(neighshort,maxshort,\"pair:neighshort\");\n        }\n      }\n\n      jtag = tag[j];\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < x[i][2]) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n      iparam_ij = elem2param[itype][jtype][jtype];\n      if (rsq >= params[iparam_ij].cutsq) continue;\n\n      repulsive(&params[iparam_ij],rsq,fpair,eflag,evdwl);\n\n      fxtmp += delx*fpair;\n      fytmp += dely*fpair;\n      fztmp += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    // three-body interactions\n    // skip immediately if I-J is not within cutoff\n    double fjxtmp,fjytmp,fjztmp;\n\n    for (jj = 0; jj < numshort; jj++) {\n      j = neighshort[jj];\n      jtype = map[type[j]];\n      iparam_ij = elem2param[itype][jtype][jtype];\n\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n      if (rsq1 >= params[iparam_ij].cutsq) continue;\n\n      // accumulate bondorder zeta for each i-j interaction via loop over k\n\n      fjxtmp = fjytmp = fjztmp = 0.0;\n      zeta_ij = 0.0;\n\n      for (kk = 0; kk < numshort; kk++) {\n        if (jj == kk) continue;\n        k = neighshort[kk];\n        ktype = map[type[k]];\n        iparam_ijk = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n        if (rsq2 >= params[iparam_ijk].cutsq) continue;\n\n        zeta_ij += zeta(&params[iparam_ijk],rsq1,rsq2,delr1,delr2);\n      }\n\n      // pairwise force due to zeta\n\n      force_zeta(&params[iparam_ij],rsq1,zeta_ij,fpair,prefactor,eflag,evdwl);\n\n      fxtmp += delr1[0]*fpair;\n      fytmp += delr1[1]*fpair;\n      fztmp += delr1[2]*fpair;\n      fjxtmp -= delr1[0]*fpair;\n      fjytmp -= delr1[1]*fpair;\n      fjztmp -= delr1[2]*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,-fpair,-delr1[0],-delr1[1],-delr1[2]);\n\n      // attractive term via loop over k\n\n      for (kk = 0; kk < numshort; kk++) {\n        if (jj == kk) continue;\n        k = neighshort[kk];\n        ktype = map[type[k]];\n        iparam_ijk = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n        if (rsq2 >= params[iparam_ijk].cutsq) continue;\n\n        attractive(&params[iparam_ijk],prefactor,\n                   rsq1,rsq2,delr1,delr2,fi,fj,fk);\n\n        fxtmp += fi[0];\n        fytmp += fi[1];\n        fztmp += fi[2];\n        fjxtmp += fj[0];\n        fjytmp += fj[1];\n        fjztmp += fj[2];\n        f[k][0] += fk[0];\n        f[k][1] += fk[1];\n        f[k][2] += fk[2];\n\n        if (vflag_atom) v_tally3(i,j,k,fj,fk,delr1,delr2);\n      }\n      f[j][0] += fjxtmp;\n      f[j][1] += fjytmp;\n      f[j][2] += fjztmp;\n    }\n    f[i][0] += fxtmp;\n    f[i][1] += fytmp;\n    f[i][2] += fztmp;\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n  memory->create(neighshort,maxshort,\"pair:neighshort\");\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairTersoff::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairTersoff::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairTersoff::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style Tersoff requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style Tersoff requires newton pair on\");\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairTersoff::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::read_file(char *file)\n{\n  int params_per_line = 17;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open Tersoff potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in Tersoff potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].gamma = atof(words[4]);\n    params[nparams].lam3 = atof(words[5]);\n    params[nparams].c = atof(words[6]);\n    params[nparams].d = atof(words[7]);\n    params[nparams].h = atof(words[8]);\n    params[nparams].powern = atof(words[9]);\n    params[nparams].beta = atof(words[10]);\n    params[nparams].lam2 = atof(words[11]);\n    params[nparams].bigb = atof(words[12]);\n    params[nparams].bigr = atof(words[13]);\n    params[nparams].bigd = atof(words[14]);\n    params[nparams].lam1 = atof(words[15]);\n    params[nparams].biga = atof(words[16]);\n\n    // currently only allow m exponent of 1 or 3\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    if (params[nparams].c < 0.0 || params[nparams].d < 0.0 ||\n        params[nparams].powern < 0.0 || params[nparams].beta < 0.0 ||\n        params[nparams].lam2 < 0.0 || params[nparams].bigb < 0.0 ||\n        params[nparams].bigr < 0.0 ||params[nparams].bigd < 0.0 ||\n        params[nparams].bigd > params[nparams].bigr ||\n        params[nparams].lam1 < 0.0 || params[nparams].biga < 0.0 ||\n        params[nparams].powerm - params[nparams].powermint != 0.0 ||\n        (params[nparams].powermint != 3 && params[nparams].powermint != 1) ||\n        params[nparams].gamma < 0.0)\n      error->all(FLERR,\"Illegal Tersoff parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::setup_params()\n{\n  int i,j,k,m,n;\n\n  // set elem2param for all element triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n        n = -1;\n        for (m = 0; m < nparams; m++) {\n          if (i == params[m].ielement && j == params[m].jelement &&\n              k == params[m].kelement) {\n            if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n            n = m;\n          }\n        }\n        if (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n        elem2param[i][j][k] = n;\n      }\n\n\n  // compute parameter values derived from inputs\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cut = params[m].bigr + params[m].bigd;\n    params[m].cutsq = params[m].cut*params[m].cut;\n\n    params[m].c1 = pow(2.0*params[m].powern*1.0e-16,-1.0/params[m].powern);\n    params[m].c2 = pow(2.0*params[m].powern*1.0e-8,-1.0/params[m].powern);\n    params[m].c3 = 1.0/params[m].c2;\n    params[m].c4 = 1.0/params[m].c1;\n  }\n\n  // set cutmax to max of all params\n\n  cutmax = 0.0;\n  for (m = 0; m < nparams; m++)\n    if (params[m].cut > cutmax) cutmax = params[m].cut;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::repulsive(Param *param, double rsq, double &fforce,\n                            int eflag, double &eng)\n{\n  double r,tmp_fc,tmp_fc_d,tmp_exp;\n\n  r = sqrt(rsq);\n  tmp_fc = ters_fc(r,param);\n  tmp_fc_d = ters_fc_d(r,param);\n  tmp_exp = exp(-param->lam1 * r);\n  fforce = -param->biga * tmp_exp * (tmp_fc_d - tmp_fc*param->lam1) / r;\n  if (eflag) eng = tmp_fc * param->biga * tmp_exp;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::zeta(Param *param, double rsqij, double rsqik,\n                         double *delrij, double *delrik)\n{\n  double rij,rik,costheta,arg,ex_delr;\n\n  rij = sqrt(rsqij);\n  rik = sqrt(rsqik);\n  costheta = (delrij[0]*delrik[0] + delrij[1]*delrik[1] +\n              delrij[2]*delrik[2]) / (rij*rik);\n\n  if (param->powermint == 3) arg = pow(param->lam3 * (rij-rik),3.0);\n  else arg = param->lam3 * (rij-rik);\n\n  if (arg > 69.0776) ex_delr = 1.e30;\n  else if (arg < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(arg);\n\n  return ters_fc(rik,param) * ters_gijk(costheta,param) * ex_delr;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::force_zeta(Param *param, double rsq, double zeta_ij,\n                             double &fforce, double &prefactor,\n                             int eflag, double &eng)\n{\n  double r,fa,fa_d,bij;\n\n  r = sqrt(rsq);\n  fa = ters_fa(r,param);\n  fa_d = ters_fa_d(r,param);\n  bij = ters_bij(zeta_ij,param);\n  fforce = 0.5*bij*fa_d / r;\n  prefactor = -0.5*fa * ters_bij_d(zeta_ij,param);\n  if (eflag) eng = 0.5*bij*fa;\n}\n\n/* ----------------------------------------------------------------------\n   attractive term\n   use param_ij cutoff for rij test\n   use param_ijk cutoff for rik test\n------------------------------------------------------------------------- */\n\nvoid PairTersoff::attractive(Param *param, double prefactor,\n                             double rsqij, double rsqik,\n                             double *delrij, double *delrik,\n                             double *fi, double *fj, double *fk)\n{\n  double rij_hat[3],rik_hat[3];\n  double rij,rijinv,rik,rikinv;\n\n  rij = sqrt(rsqij);\n  rijinv = 1.0/rij;\n  vec3_scale(rijinv,delrij,rij_hat);\n\n  rik = sqrt(rsqik);\n  rikinv = 1.0/rik;\n  vec3_scale(rikinv,delrik,rik_hat);\n\n  ters_zetaterm_d(prefactor,rij_hat,rij,rik_hat,rik,fi,fj,fk,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::ters_fc(double r, Param *param)\n{\n  double ters_R = param->bigr;\n  double ters_D = param->bigd;\n\n  if (r < ters_R-ters_D) return 1.0;\n  if (r > ters_R+ters_D) return 0.0;\n  return 0.5*(1.0 - sin(MY_PI2*(r - ters_R)/ters_D));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::ters_fc_d(double r, Param *param)\n{\n  double ters_R = param->bigr;\n  double ters_D = param->bigd;\n\n  if (r < ters_R-ters_D) return 0.0;\n  if (r > ters_R+ters_D) return 0.0;\n  return -(MY_PI4/ters_D) * cos(MY_PI2*(r - ters_R)/ters_D);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::ters_fa(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return -param->bigb * exp(-param->lam2 * r) * ters_fc(r,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::ters_fa_d(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return param->bigb * exp(-param->lam2 * r) *\n    (param->lam2 * ters_fc(r,param) - ters_fc_d(r,param));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::ters_bij(double zeta, Param *param)\n{\n  double tmp = param->beta * zeta;\n  if (tmp > param->c1) return 1.0/sqrt(tmp);\n  if (tmp > param->c2)\n    return (1.0 - pow(tmp,-param->powern) / (2.0*param->powern))/sqrt(tmp);\n  if (tmp < param->c4) return 1.0;\n  if (tmp < param->c3)\n    return 1.0 - pow(tmp,param->powern)/(2.0*param->powern);\n  return pow(1.0 + pow(tmp,param->powern), -1.0/(2.0*param->powern));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoff::ters_bij_d(double zeta, Param *param)\n{\n  double tmp = param->beta * zeta;\n  if (tmp > param->c1) return param->beta * -0.5*pow(tmp,-1.5);\n  if (tmp > param->c2)\n    return param->beta * (-0.5*pow(tmp,-1.5) *\n\t\t\t  // error in negligible 2nd term fixed 9/30/2015\n\t\t\t  // (1.0 - 0.5*(1.0 +  1.0/(2.0*param->powern)) *\n                          (1.0 - (1.0 +  1.0/(2.0*param->powern)) *\n                           pow(tmp,-param->powern)));\n  if (tmp < param->c4) return 0.0;\n  if (tmp < param->c3)\n    return -0.5*param->beta * pow(tmp,param->powern-1.0);\n\n  double tmp_n = pow(tmp,param->powern);\n  return -0.5 * pow(1.0+tmp_n, -1.0-(1.0/(2.0*param->powern)))*tmp_n / zeta;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::ters_zetaterm_d(double prefactor,\n                                  double *rij_hat, double rij,\n                                  double *rik_hat, double rik,\n                                  double *dri, double *drj, double *drk,\n                                  Param *param)\n{\n  double gijk,gijk_d,ex_delr,ex_delr_d,fc,dfc,cos_theta,tmp;\n  double dcosdri[3],dcosdrj[3],dcosdrk[3];\n\n  fc = ters_fc(rik,param);\n  dfc = ters_fc_d(rik,param);\n  if (param->powermint == 3) tmp = pow(param->lam3 * (rij-rik),3.0);\n  else tmp = param->lam3 * (rij-rik);\n\n  if (tmp > 69.0776) ex_delr = 1.e30;\n  else if (tmp < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(tmp);\n\n  if (param->powermint == 3)\n    ex_delr_d = 3.0*pow(param->lam3,3.0) * pow(rij-rik,2.0)*ex_delr;\n  else ex_delr_d = param->lam3 * ex_delr;\n\n  cos_theta = vec3_dot(rij_hat,rik_hat);\n  gijk = ters_gijk(cos_theta,param);\n  gijk_d = ters_gijk_d(cos_theta,param);\n  costheta_d(rij_hat,rij,rik_hat,rik,dcosdri,dcosdrj,dcosdrk);\n\n  // compute the derivative wrt Ri\n  // dri = -dfc*gijk*ex_delr*rik_hat;\n  // dri += fc*gijk_d*ex_delr*dcosdri;\n  // dri += fc*gijk*ex_delr_d*(rik_hat - rij_hat);\n\n  vec3_scale(-dfc*gijk*ex_delr,rik_hat,dri);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdri,dri,dri);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rik_hat,dri,dri);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rij_hat,dri,dri);\n  vec3_scale(prefactor,dri,dri);\n\n  // compute the derivative wrt Rj\n  // drj = fc*gijk_d*ex_delr*dcosdrj;\n  // drj += fc*gijk*ex_delr_d*rij_hat;\n\n  vec3_scale(fc*gijk_d*ex_delr,dcosdrj,drj);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rij_hat,drj,drj);\n  vec3_scale(prefactor,drj,drj);\n\n  // compute the derivative wrt Rk\n  // drk = dfc*gijk*ex_delr*rik_hat;\n  // drk += fc*gijk_d*ex_delr*dcosdrk;\n  // drk += -fc*gijk*ex_delr_d*rik_hat;\n\n  vec3_scale(dfc*gijk*ex_delr,rik_hat,drk);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdrk,drk,drk);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rik_hat,drk,drk);\n  vec3_scale(prefactor,drk,drk);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoff::costheta_d(double *rij_hat, double rij,\n                             double *rik_hat, double rik,\n                             double *dri, double *drj, double *drk)\n{\n  // first element is devative wrt Ri, second wrt Rj, third wrt Rk\n\n  double cos_theta = vec3_dot(rij_hat,rik_hat);\n\n  vec3_scaleadd(-cos_theta,rij_hat,rik_hat,drj);\n  vec3_scale(1.0/rij,drj,drj);\n  vec3_scaleadd(-cos_theta,rik_hat,rij_hat,drk);\n  vec3_scale(1.0/rik,drk,drk);\n  vec3_add(drj,drk,dri);\n  vec3_scale(-1.0,dri,dri);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(tersoff,PairTersoff)\n\n#else\n\n#ifndef LMP_PAIR_TERSOFF_H\n#define LMP_PAIR_TERSOFF_H\n\n#include \"pair.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairTersoff : public Pair {\n public:\n  PairTersoff(class LAMMPS *);\n  virtual ~PairTersoff();\n  virtual void compute(int, int);\n  void settings(int, char **);\n  void coeff(int, char **);\n  virtual void init_style();\n  double init_one(int, int);\n\n protected:\n  struct Param {\n    double lam1,lam2,lam3;\n    double c,d,h;\n    double gamma,powerm;\n    double powern,beta;\n    double biga,bigb,bigd,bigr;\n    double cut,cutsq;\n    double c1,c2,c3,c4;\n    int ielement,jelement,kelement;\n    int powermint;\n    double Z_i,Z_j;              // added for TersoffZBL\n    double ZBLcut,ZBLexpscale;\n    double c5,ca1,ca4;           // added for TersoffMOD\n    double powern_del;\n    double c0;                   // added for TersoffMODC\n  };\n\n  Param *params;                // parameter set for an I-J-K interaction\n  char **elements;              // names of unique elements\n  int ***elem2param;            // mapping from element triplets to parameters\n  int *map;                     // mapping from atom types to elements\n  double cutmax;                // max cutoff for all elements\n  int nelements;                // # of unique elements\n  int nparams;                  // # of stored parameter sets\n  int maxparam;                 // max # of parameter sets\n  int maxshort;                 // size of short neighbor list array\n  int *neighshort;              // short neighbor list array\n\n  virtual void allocate();\n  virtual void read_file(char *);\n  virtual void setup_params();\n  virtual void repulsive(Param *, double, double &, int, double &);\n  virtual double zeta(Param *, double, double, double *, double *);\n  virtual void force_zeta(Param *, double, double, double &,\n                          double &, int, double &);\n  void attractive(Param *, double, double, double, double *, double *,\n                  double *, double *, double *);\n\n  virtual double ters_fc(double, Param *);\n  virtual double ters_fc_d(double, Param *);\n  virtual double ters_fa(double, Param *);\n  virtual double ters_fa_d(double, Param *);\n  virtual double ters_bij(double, Param *);\n  virtual double ters_bij_d(double, Param *);\n\n  virtual void ters_zetaterm_d(double, double *, double, double *, double,\n                               double *, double *, double *, Param *);\n  void costheta_d(double *, double, double *, double,\n                  double *, double *, double *);\n\n  // inlined functions for efficiency\n\n  inline double ters_gijk(const double costheta,\n                          const Param * const param) const {\n    const double ters_c = param->c * param->c;\n    const double ters_d = param->d * param->d;\n    const double hcth = param->h - costheta;\n\n    return param->gamma*(1.0 + ters_c/ters_d - ters_c / (ters_d + hcth*hcth));\n  }\n\n  inline double ters_gijk_d(const double costheta,\n                            const Param * const param) const {\n    const double ters_c = param->c * param->c;\n    const double ters_d = param->d * param->d;\n    const double hcth = param->h - costheta;\n    const double numerator = -2.0 * ters_c * hcth;\n    const double denominator = 1.0/(ters_d + hcth*hcth);\n    return param->gamma*numerator*denominator*denominator;\n  }\n\n  inline double vec3_dot(const double x[3], const double y[3]) const {\n    return x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n  }\n\n  inline void vec3_add(const double x[3], const double y[3],\n                       double * const z) const {\n    z[0] = x[0]+y[0];  z[1] = x[1]+y[1];  z[2] = x[2]+y[2];\n  }\n\n  inline void vec3_scale(const double k, const double x[3],\n                         double y[3]) const {\n    y[0] = k*x[0];  y[1] = k*x[1];  y[2] = k*x[2];\n  }\n\n  inline void vec3_scaleadd(const double k, const double x[3],\n                            const double y[3], double * const z) const {\n    z[0] = k*x[0]+y[0];\n    z[1] = k*x[1]+y[1];\n    z[2] = k*x[2]+y[2];\n  }\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style Tersoff requires atom IDs\n\nThis is a requirement to use the Tersoff potential.\n\nE: Pair style Tersoff requires newton pair on\n\nSee the newton command.  This is a restriction to use the Tersoff\npotential.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Cannot open Tersoff potential file %s\n\nThe specified potential file cannot be opened.  Check that the path\nand name are correct.\n\nE: Incorrect format in Tersoff potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal Tersoff parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\nE: Potential file has duplicate entry\n\nThe potential file has more than one entry for the same element.\n\nE: Potential file is missing an entry\n\nThe potential file does not have a needed entry.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Naveen Michaud-Agrawal (Johns Hopkins U) and\n                         Mark Stevens (Sandia)\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include \"dihedral_helix.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n#define SMALLER   0.00001\n\n/* ---------------------------------------------------------------------- */\n\nDihedralHelix::DihedralHelix(LAMMPS *lmp) : Dihedral(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nDihedralHelix::~DihedralHelix()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(aphi);\n    memory->destroy(bphi);\n    memory->destroy(cphi);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralHelix::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double edihedral,f1[3],f2[3],f3[3],f4[3];\n  double sb1,sb2,sb3,rb1,rb3,c0,b1mag2,b1mag,b2mag2;\n  double b2mag,b3mag2,b3mag,ctmp,r12c1,c1mag,r12c2;\n  double c2mag,sc1,sc2,s1,s12,c,p,pd,a,a11,a22;\n  double a33,a12,a13,a23,sx2,sy2,sz2;\n  double s2,cx,cy,cz,cmag,dx,phi,si,siinv,sin2;\n\n  edihedral = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **dihedrallist = neighbor->dihedrallist;\n  int ndihedrallist = neighbor->ndihedrallist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < ndihedrallist; n++) {\n    i1 = dihedrallist[n][0];\n    i2 = dihedrallist[n][1];\n    i3 = dihedrallist[n][2];\n    i4 = dihedrallist[n][3];\n    type = dihedrallist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    // c0 calculation\n\n    sb1 = 1.0 / (vb1x*vb1x + vb1y*vb1y + vb1z*vb1z);\n    sb2 = 1.0 / (vb2x*vb2x + vb2y*vb2y + vb2z*vb2z);\n    sb3 = 1.0 / (vb3x*vb3x + vb3y*vb3y + vb3z*vb3z);\n\n    rb1 = sqrt(sb1);\n    rb3 = sqrt(sb3);\n\n    c0 = (vb1x*vb3x + vb1y*vb3y + vb1z*vb3z) * rb1*rb3;\n\n    // 1st and 2nd angle\n\n    b1mag2 = vb1x*vb1x + vb1y*vb1y + vb1z*vb1z;\n    b1mag = sqrt(b1mag2);\n    b2mag2 = vb2x*vb2x + vb2y*vb2y + vb2z*vb2z;\n    b2mag = sqrt(b2mag2);\n    b3mag2 = vb3x*vb3x + vb3y*vb3y + vb3z*vb3z;\n    b3mag = sqrt(b3mag2);\n\n    ctmp = vb1x*vb2x + vb1y*vb2y + vb1z*vb2z;\n    r12c1 = 1.0 / (b1mag*b2mag);\n    c1mag = ctmp * r12c1;\n\n    ctmp = vb2xm*vb3x + vb2ym*vb3y + vb2zm*vb3z;\n    r12c2 = 1.0 / (b2mag*b3mag);\n    c2mag = ctmp * r12c2;\n\n    // cos and sin of 2 angles and final c\n\n    sin2 = MAX(1.0 - c1mag*c1mag,0.0);\n    sc1 = sqrt(sin2);\n    if (sc1 < SMALL) sc1 = SMALL;\n    sc1 = 1.0/sc1;\n\n    sin2 = MAX(1.0 - c2mag*c2mag,0.0);\n    sc2 = sqrt(sin2);\n    if (sc2 < SMALL) sc2 = SMALL;\n    sc2 = 1.0/sc2;\n\n    s1 = sc1 * sc1;\n    s2 = sc2 * sc2;\n    s12 = sc1 * sc2;\n    c = (c0 + c1mag*c2mag) * s12;\n\n    cx = vb1y*vb2z - vb1z*vb2y;\n    cy = vb1z*vb2x - vb1x*vb2z;\n    cz = vb1x*vb2y - vb1y*vb2x;\n    cmag = sqrt(cx*cx + cy*cy + cz*cz);\n    dx = (cx*vb3x + cy*vb3y + cz*vb3z)/cmag/b3mag;\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Dihedral problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    phi = acos(c);\n    if (dx > 0.0) phi *= -1.0;\n    si = sin(phi);\n    if (fabs(si) < SMALLER) si = SMALLER;\n    siinv = 1.0/si;\n\n    p = aphi[type]*(1.0 - c) + bphi[type]*(1.0 + cos(3.0*phi)) +\n      cphi[type]*(1.0 + cos(phi + MY_PI4));\n    pd = -aphi[type] + 3.0*bphi[type]*sin(3.0*phi)*siinv +\n      cphi[type]*sin(phi + MY_PI4)*siinv;\n\n    if (eflag) edihedral = p;\n\n    a = pd;\n    c = c * a;\n    s12 = s12 * a;\n    a11 = c*sb1*s1;\n    a22 = -sb2 * (2.0*c0*s12 - c*(s1+s2));\n    a33 = c*sb3*s2;\n    a12 = -r12c1 * (c1mag*c*s1 + c2mag*s12);\n    a13 = -rb1*rb3*s12;\n    a23 = r12c2 * (c2mag*c*s2 + c1mag*s12);\n\n    sx2  = a12*vb1x + a22*vb2x + a23*vb3x;\n    sy2  = a12*vb1y + a22*vb2y + a23*vb3y;\n    sz2  = a12*vb1z + a22*vb2z + a23*vb3z;\n\n    f1[0] = a11*vb1x + a12*vb2x + a13*vb3x;\n    f1[1] = a11*vb1y + a12*vb2y + a13*vb3y;\n    f1[2] = a11*vb1z + a12*vb2z + a13*vb3z;\n\n    f2[0] = -sx2 - f1[0];\n    f2[1] = -sy2 - f1[1];\n    f2[2] = -sz2 - f1[2];\n\n    f4[0] = a13*vb1x + a23*vb2x + a33*vb3x;\n    f4[1] = a13*vb1y + a23*vb2y + a33*vb3y;\n    f4[2] = a13*vb1z + a23*vb2z + a33*vb3z;\n\n    f3[0] = sx2 - f4[0];\n    f3[1] = sy2 - f4[1];\n    f3[2] = sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,edihedral,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralHelix::allocate()\n{\n  allocated = 1;\n  int n = atom->ndihedraltypes;\n\n  memory->create(aphi,n+1,\"dihedral:aphi\");\n  memory->create(bphi,n+1,\"dihedral:bphi\");\n  memory->create(cphi,n+1,\"dihedral:cphi\");\n\n  memory->create(setflag,n+1,\"dihedral:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs from one line in input script\n------------------------------------------------------------------------- */\n\nvoid DihedralHelix::coeff(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->ndihedraltypes,ilo,ihi);\n\n  double aphi_one = force->numeric(FLERR,arg[1]);\n  double bphi_one = force->numeric(FLERR,arg[2]);\n  double cphi_one = force->numeric(FLERR,arg[3]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    aphi[i] = aphi_one;\n    bphi[i] = bphi_one;\n    cphi[i] = cphi_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid DihedralHelix::write_restart(FILE *fp)\n{\n  fwrite(&aphi[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&bphi[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&cphi[1],sizeof(double),atom->ndihedraltypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid DihedralHelix::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&aphi[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&bphi[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&cphi[1],sizeof(double),atom->ndihedraltypes,fp);\n  }\n  MPI_Bcast(&aphi[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&bphi[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&cphi[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->ndihedraltypes; i++) setflag[i] = 1;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Christopher Weinberger (SNL), Stephen Foiles (SNL),\n                         Chandra Veer Singh (Cornell)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_adp.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n\n/* ---------------------------------------------------------------------- */\n\nPairADP::PairADP(LAMMPS *lmp) : Pair(lmp)\n{\n  restartinfo = 0;\n\n  nmax = 0;\n  rho = NULL;\n  fp = NULL;\n  mu = NULL;\n  lambda = NULL;\n  map = NULL;\n\n  setfl = NULL;\n\n  frho = NULL;\n  rhor = NULL;\n  z2r = NULL;\n  u2r = NULL;\n  w2r = NULL;\n\n  frho_spline = NULL;\n  rhor_spline = NULL;\n  z2r_spline = NULL;\n  u2r_spline = NULL;\n  w2r_spline = NULL;\n\n  // set comm size needed by this Pair\n\n  comm_forward = 10;\n  comm_reverse = 10;\n\n  single_enable = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairADP::~PairADP()\n{\n  memory->destroy(rho);\n  memory->destroy(fp);\n  memory->destroy(mu);\n  memory->destroy(lambda);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n    delete [] type2frho;\n    memory->destroy(type2rhor);\n    memory->destroy(type2z2r);\n    memory->destroy(type2u2r);\n    memory->destroy(type2w2r);\n  }\n\n  if (setfl) {\n    for (int i = 0; i < setfl->nelements; i++) delete [] setfl->elements[i];\n    delete [] setfl->elements;\n    delete [] setfl->mass;\n    memory->destroy(setfl->frho);\n    memory->destroy(setfl->rhor);\n    memory->destroy(setfl->z2r);\n    memory->destroy(setfl->u2r);\n    memory->destroy(setfl->w2r);\n    delete setfl;\n  }\n\n  memory->destroy(frho);\n  memory->destroy(rhor);\n  memory->destroy(z2r);\n  memory->destroy(u2r);\n  memory->destroy(w2r);\n\n  memory->destroy(frho_spline);\n  memory->destroy(rhor_spline);\n  memory->destroy(z2r_spline);\n  memory->destroy(u2r_spline);\n  memory->destroy(w2r_spline);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairADP::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,m,inum,jnum,itype,jtype;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,r,p,rhoip,rhojp,z2,z2p,recip,phip,psip,phi;\n  double u2,u2p,w2,w2p,nu;\n  double *coeff;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  double delmux,delmuy,delmuz,trdelmu,tradellam;\n  double adpx,adpy,adpz,fx,fy,fz;\n  double sumlamxx,sumlamyy,sumlamzz,sumlamyz,sumlamxz,sumlamxy;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  // grow local arrays if necessary\n  // need to be atom->nmax in length\n\n  if (atom->nmax > nmax) {\n    memory->destroy(rho);\n    memory->destroy(fp);\n    memory->destroy(mu);\n    memory->destroy(lambda);\n    nmax = atom->nmax;\n    memory->create(rho,nmax,\"pair:rho\");\n    memory->create(fp,nmax,\"pair:fp\");\n    memory->create(mu,nmax,3,\"pair:mu\");\n    memory->create(lambda,nmax,6,\"pair:lambda\");\n  }\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // zero out density\n\n  if (newton_pair) {\n    m = nlocal + atom->nghost;\n    for (i = 0; i < m; i++) {\n      rho[i] = 0.0;\n      mu[i][0] = 0.0; mu[i][1] = 0.0; mu[i][2] = 0.0;\n      lambda[i][0] = 0.0; lambda[i][1] = 0.0; lambda[i][2] = 0.0;\n      lambda[i][3] = 0.0; lambda[i][4] = 0.0; lambda[i][5] = 0.0;\n    }\n  } else {\n    for (i = 0; i < nlocal; i++) {\n      rho[i] = 0.0;\n      mu[i][0] = 0.0; mu[i][1] = 0.0; mu[i][2] = 0.0;\n      lambda[i][0] = 0.0; lambda[i][1] = 0.0; lambda[i][2] = 0.0;\n      lambda[i][3] = 0.0; lambda[i][4] = 0.0; lambda[i][5] = 0.0;\n    }\n  }\n\n  // rho = density at each atom\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq) {\n        jtype = type[j];\n        p = sqrt(rsq)*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n        coeff = rhor_spline[type2rhor[jtype][itype]][m];\n        rho[i] += ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        coeff = u2r_spline[type2u2r[jtype][itype]][m];\n        u2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        mu[i][0] += u2*delx;\n        mu[i][1] += u2*dely;\n        mu[i][2] += u2*delz;\n        coeff = w2r_spline[type2w2r[jtype][itype]][m];\n        w2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        lambda[i][0] += w2*delx*delx;\n        lambda[i][1] += w2*dely*dely;\n        lambda[i][2] += w2*delz*delz;\n        lambda[i][3] += w2*dely*delz;\n        lambda[i][4] += w2*delx*delz;\n        lambda[i][5] += w2*delx*dely;\n\n        if (newton_pair || j < nlocal) {\n          // verify sign difference for mu and lambda\n          coeff = rhor_spline[type2rhor[itype][jtype]][m];\n          rho[j] += ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n          coeff = u2r_spline[type2u2r[itype][jtype]][m];\n          u2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n          mu[j][0] -= u2*delx;\n          mu[j][1] -= u2*dely;\n          mu[j][2] -= u2*delz;\n          coeff = w2r_spline[type2w2r[itype][jtype]][m];\n          w2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n          lambda[j][0] += w2*delx*delx;\n          lambda[j][1] += w2*dely*dely;\n          lambda[j][2] += w2*delz*delz;\n          lambda[j][3] += w2*dely*delz;\n          lambda[j][4] += w2*delx*delz;\n          lambda[j][5] += w2*delx*dely;\n        }\n      }\n    }\n  }\n\n  // communicate and sum densities\n\n  if (newton_pair) comm->reverse_comm_pair(this);\n\n  // fp = derivative of embedding energy at each atom\n  // phi = embedding energy at each atom\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    p = rho[i]*rdrho + 1.0;\n    m = static_cast<int> (p);\n    m = MAX(1,MIN(m,nrho-1));\n    p -= m;\n    p = MIN(p,1.0);\n    coeff = frho_spline[type2frho[type[i]]][m];\n    fp[i] = (coeff[0]*p + coeff[1])*p + coeff[2];\n    if (eflag) {\n      phi = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n      phi += 0.5*(mu[i][0]*mu[i][0]+mu[i][1]*mu[i][1]+mu[i][2]*mu[i][2]);\n      phi += 0.5*(lambda[i][0]*lambda[i][0]+lambda[i][1]*\n                  lambda[i][1]+lambda[i][2]*lambda[i][2]);\n      phi += 1.0*(lambda[i][3]*lambda[i][3]+lambda[i][4]*\n                  lambda[i][4]+lambda[i][5]*lambda[i][5]);\n      phi -= 1.0/6.0*(lambda[i][0]+lambda[i][1]+lambda[i][2])*\n        (lambda[i][0]+lambda[i][1]+lambda[i][2]);\n      if (eflag_global) eng_vdwl += phi;\n      if (eflag_atom) eatom[i] += phi;\n    }\n  }\n\n  // communicate derivative of embedding function\n\n  comm->forward_comm_pair(this);\n\n  // compute forces on each atom\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq) {\n        jtype = type[j];\n        r = sqrt(rsq);\n        p = r*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n\n        // rhoip = derivative of (density at atom j due to atom i)\n        // rhojp = derivative of (density at atom i due to atom j)\n        // phi = pair potential energy\n        // phip = phi'\n        // z2 = phi * r\n        // z2p = (phi * r)' = (phi' r) + phi\n        // u2 = u\n        // u2p = u'\n        // w2 = w\n        // w2p = w'\n        // psip needs both fp[i] and fp[j] terms since r_ij appears in two\n        //   terms of embed eng: Fi(sum rho_ij) and Fj(sum rho_ji)\n        //   hence embed' = Fi(sum rho_ij) rhojp + Fj(sum rho_ji) rhoip\n\n        coeff = rhor_spline[type2rhor[itype][jtype]][m];\n        rhoip = (coeff[0]*p + coeff[1])*p + coeff[2];\n        coeff = rhor_spline[type2rhor[jtype][itype]][m];\n        rhojp = (coeff[0]*p + coeff[1])*p + coeff[2];\n        coeff = z2r_spline[type2z2r[itype][jtype]][m];\n        z2p = (coeff[0]*p + coeff[1])*p + coeff[2];\n        z2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        coeff = u2r_spline[type2u2r[itype][jtype]][m];\n        u2p = (coeff[0]*p + coeff[1])*p + coeff[2];\n        u2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        coeff = w2r_spline[type2w2r[itype][jtype]][m];\n        w2p = (coeff[0]*p + coeff[1])*p + coeff[2];\n        w2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n\n        recip = 1.0/r;\n        phi = z2*recip;\n        phip = z2p*recip - phi*recip;\n        psip = fp[i]*rhojp + fp[j]*rhoip + phip;\n        fpair = -psip*recip;\n\n        delmux = mu[i][0]-mu[j][0];\n        delmuy = mu[i][1]-mu[j][1];\n        delmuz = mu[i][2]-mu[j][2];\n        trdelmu = delmux*delx+delmuy*dely+delmuz*delz;\n        sumlamxx = lambda[i][0]+lambda[j][0];\n        sumlamyy = lambda[i][1]+lambda[j][1];\n        sumlamzz = lambda[i][2]+lambda[j][2];\n        sumlamyz = lambda[i][3]+lambda[j][3];\n        sumlamxz = lambda[i][4]+lambda[j][4];\n        sumlamxy = lambda[i][5]+lambda[j][5];\n        tradellam = sumlamxx*delx*delx+sumlamyy*dely*dely+\n          sumlamzz*delz*delz+2.0*sumlamxy*delx*dely+\n          2.0*sumlamxz*delx*delz+2.0*sumlamyz*dely*delz;\n        nu = sumlamxx+sumlamyy+sumlamzz;\n\n        adpx = delmux*u2 + trdelmu*u2p*delx*recip +\n          2.0*w2*(sumlamxx*delx+sumlamxy*dely+sumlamxz*delz) +\n          w2p*delx*recip*tradellam - 1.0/3.0*nu*(w2p*r+2.0*w2)*delx;\n        adpy = delmuy*u2 + trdelmu*u2p*dely*recip +\n          2.0*w2*(sumlamxy*delx+sumlamyy*dely+sumlamyz*delz) +\n          w2p*dely*recip*tradellam - 1.0/3.0*nu*(w2p*r+2.0*w2)*dely;\n        adpz = delmuz*u2 + trdelmu*u2p*delz*recip +\n          2.0*w2*(sumlamxz*delx+sumlamyz*dely+sumlamzz*delz) +\n          w2p*delz*recip*tradellam - 1.0/3.0*nu*(w2p*r+2.0*w2)*delz;\n        adpx*=-1.0; adpy*=-1.0; adpz*=-1.0;\n\n        fx = delx*fpair+adpx;\n        fy = dely*fpair+adpy;\n        fz = delz*fpair+adpz;\n\n        f[i][0] += fx;\n        f[i][1] += fy;\n        f[i][2] += fz;\n        if (newton_pair || j < nlocal) {\n          f[j][0] -= fx;\n          f[j][1] -= fy;\n          f[j][2] -= fz;\n        }\n\n        if (eflag) evdwl = phi;\n        if (evflag) ev_tally_xyz(i,j,nlocal,newton_pair,evdwl,0.0,\n                                 fx,fy,fz,delx,dely,delz);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairADP::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  map = new int[n+1];\n  for (int i = 1; i <= n; i++) map[i] = -1;\n\n  type2frho = new int[n+1];\n  memory->create(type2rhor,n+1,n+1,\"pair:type2rhor\");\n  memory->create(type2z2r,n+1,n+1,\"pair:type2z2r\");\n  memory->create(type2u2r,n+1,n+1,\"pair:type2u2r\");\n  memory->create(type2w2r,n+1,n+1,\"pair:type2w2r\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairADP::settings(int narg, char **arg)\n{\n  if (narg > 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n   read concatenated *.plt file\n------------------------------------------------------------------------- */\n\nvoid PairADP::coeff(int narg, char **arg)\n{\n  int i,j;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read ADP parameter file\n\n  if (setfl) {\n    for (i = 0; i < setfl->nelements; i++) delete [] setfl->elements[i];\n    delete [] setfl->elements;\n    delete [] setfl->mass;\n    memory->destroy(setfl->frho);\n    memory->destroy(setfl->rhor);\n    memory->destroy(setfl->z2r);\n    memory->destroy(setfl->u2r);\n    memory->destroy(setfl->w2r);\n    delete setfl;\n  }\n  setfl = new Setfl();\n  read_file(arg[2]);\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < setfl->nelements; j++)\n      if (strcmp(arg[i],setfl->elements[j]) == 0) break;\n    if (j < setfl->nelements) map[i-2] = j;\n    else error->all(FLERR,\"No matching element in ADP potential file\");\n  }\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  int n = atom->ntypes;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n  // set mass of atom type if i = j\n\n  int count = 0;\n  for (i = 1; i <= n; i++) {\n    for (j = i; j <= n; j++) {\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        if (i == j) atom->set_mass(FLERR,i,setfl->mass[map[i]]);\n        count++;\n      }\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairADP::init_style()\n{\n  // convert read-in file(s) to arrays and spline them\n\n  file2array();\n  array2spline();\n\n  neighbor->request(this,instance_me);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairADP::init_one(int i, int j)\n{\n  // single global cutoff = max of cut from all files read in\n  // for funcfl could be multiple files\n  // for setfl or fs, just one file\n\n  if (setfl) cutmax = setfl->cut;\n  cutforcesq = cutmax*cutmax;\n\n  return cutmax;\n}\n\n/* ----------------------------------------------------------------------\n   read potential values from a DYNAMO single element funcfl file\n------------------------------------------------------------------------- */\n\nvoid PairADP::read_file(char *filename)\n{\n  Setfl *file = setfl;\n\n  // open potential file\n\n  int me = comm->me;\n  FILE *fp;\n  char line[MAXLINE];\n\n  if (me == 0) {\n    fp = force->open_potential(filename);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open ADP potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read and broadcast header\n  // extract element names from nelements line\n\n  int n;\n  if (me == 0) {\n    fgets(line,MAXLINE,fp);\n    fgets(line,MAXLINE,fp);\n    fgets(line,MAXLINE,fp);\n    fgets(line,MAXLINE,fp);\n    n = strlen(line) + 1;\n  }\n  MPI_Bcast(&n,1,MPI_INT,0,world);\n  MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n  sscanf(line,\"%d\",&file->nelements);\n  int nwords = atom->count_words(line);\n  if (nwords != file->nelements + 1)\n    error->all(FLERR,\"Incorrect element names in ADP potential file\");\n\n  char **words = new char*[file->nelements+1];\n  nwords = 0;\n  strtok(line,\" \\t\\n\\r\\f\");\n  while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n  file->elements = new char*[file->nelements];\n  for (int i = 0; i < file->nelements; i++) {\n    n = strlen(words[i]) + 1;\n    file->elements[i] = new char[n];\n    strcpy(file->elements[i],words[i]);\n  }\n  delete [] words;\n\n  if (me == 0) {\n    fgets(line,MAXLINE,fp);\n    sscanf(line,\"%d %lg %d %lg %lg\",\n           &file->nrho,&file->drho,&file->nr,&file->dr,&file->cut);\n  }\n\n  MPI_Bcast(&file->nrho,1,MPI_INT,0,world);\n  MPI_Bcast(&file->drho,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->nr,1,MPI_INT,0,world);\n  MPI_Bcast(&file->dr,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->cut,1,MPI_DOUBLE,0,world);\n\n  file->mass = new double[file->nelements];\n  memory->create(file->frho,file->nelements,file->nrho+1,\"pair:frho\");\n  memory->create(file->rhor,file->nelements,file->nr+1,\"pair:rhor\");\n  memory->create(file->z2r,file->nelements,file->nelements,file->nr+1,\n                 \"pair:z2r\");\n  memory->create(file->u2r,file->nelements,file->nelements,file->nr+1,\n                 \"pair:u2r\");\n  memory->create(file->w2r,file->nelements,file->nelements,file->nr+1,\n                 \"pair:w2r\");\n\n  int i,j,tmp;\n  for (i = 0; i < file->nelements; i++) {\n    if (me == 0) {\n      fgets(line,MAXLINE,fp);\n      sscanf(line,\"%d %lg\",&tmp,&file->mass[i]);\n    }\n    MPI_Bcast(&file->mass[i],1,MPI_DOUBLE,0,world);\n\n    if (me == 0) grab(fp,file->nrho,&file->frho[i][1]);\n    MPI_Bcast(&file->frho[i][1],file->nrho,MPI_DOUBLE,0,world);\n    if (me == 0) grab(fp,file->nr,&file->rhor[i][1]);\n    MPI_Bcast(&file->rhor[i][1],file->nr,MPI_DOUBLE,0,world);\n  }\n\n  for (i = 0; i < file->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      if (me == 0) grab(fp,file->nr,&file->z2r[i][j][1]);\n      MPI_Bcast(&file->z2r[i][j][1],file->nr,MPI_DOUBLE,0,world);\n    }\n\n  for (i = 0; i < file->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      if (me == 0) grab(fp,file->nr,&file->u2r[i][j][1]);\n      MPI_Bcast(&file->u2r[i][j][1],file->nr,MPI_DOUBLE,0,world);\n    }\n\n  for (i = 0; i < file->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      if (me == 0) grab(fp,file->nr,&file->w2r[i][j][1]);\n      MPI_Bcast(&file->w2r[i][j][1],file->nr,MPI_DOUBLE,0,world);\n    }\n\n  // close the potential file\n\n  if (me == 0) fclose(fp);\n}\n\n/* ----------------------------------------------------------------------\n   convert read-in funcfl potential(s) to standard array format\n   interpolate all file values to a single grid and cutoff\n------------------------------------------------------------------------- */\n\nvoid PairADP::file2array()\n{\n  int i,j,m,n;\n  int ntypes = atom->ntypes;\n\n  // set function params directly from setfl file\n\n  nrho = setfl->nrho;\n  nr = setfl->nr;\n  drho = setfl->drho;\n  dr = setfl->dr;\n\n  // ------------------------------------------------------------------\n  // setup frho arrays\n  // ------------------------------------------------------------------\n\n  // allocate frho arrays\n  // nfrho = # of setfl elements + 1 for zero array\n\n  nfrho = setfl->nelements + 1;\n  memory->destroy(frho);\n  memory->create(frho,nfrho,nrho+1,\"pair:frho\");\n\n  // copy each element's frho to global frho\n\n  for (i = 0; i < setfl->nelements; i++)\n    for (m = 1; m <= nrho; m++) frho[i][m] = setfl->frho[i][m];\n\n  // add extra frho of zeroes for non-ADP types to point to (pair hybrid)\n  // this is necessary b/c fp is still computed for non-ADP atoms\n\n  for (m = 1; m <= nrho; m++) frho[nfrho-1][m] = 0.0;\n\n  // type2frho[i] = which frho array (0 to nfrho-1) each atom type maps to\n  // if atom type doesn't point to element (non-ADP atom in pair hybrid)\n  // then map it to last frho array of zeroes\n\n  for (i = 1; i <= ntypes; i++)\n    if (map[i] >= 0) type2frho[i] = map[i];\n    else type2frho[i] = nfrho-1;\n\n  // ------------------------------------------------------------------\n  // setup rhor arrays\n  // ------------------------------------------------------------------\n\n  // allocate rhor arrays\n  // nrhor = # of setfl elements\n\n  nrhor = setfl->nelements;\n  memory->destroy(rhor);\n  memory->create(rhor,nrhor,nr+1,\"pair:rhor\");\n\n  // copy each element's rhor to global rhor\n\n  for (i = 0; i < setfl->nelements; i++)\n    for (m = 1; m <= nr; m++) rhor[i][m] = setfl->rhor[i][m];\n\n  // type2rhor[i][j] = which rhor array (0 to nrhor-1) each type pair maps to\n  // for setfl files, I,J mapping only depends on I\n  // OK if map = -1 (non-APD atom in pair hybrid) b/c type2rhor not used\n\n  for (i = 1; i <= ntypes; i++)\n    for (j = 1; j <= ntypes; j++)\n      type2rhor[i][j] = map[i];\n\n  // ------------------------------------------------------------------\n  // setup z2r arrays\n  // ------------------------------------------------------------------\n\n  // allocate z2r arrays\n  // nz2r = N*(N+1)/2 where N = # of setfl elements\n\n  nz2r = setfl->nelements * (setfl->nelements+1) / 2;\n  memory->destroy(z2r);\n  memory->create(z2r,nz2r,nr+1,\"pair:z2r\");\n\n  // copy each element pair z2r to global z2r, only for I >= J\n\n  n = 0;\n  for (i = 0; i < setfl->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) z2r[n][m] = setfl->z2r[i][j][m];\n      n++;\n    }\n\n  // type2z2r[i][j] = which z2r array (0 to nz2r-1) each type pair maps to\n  // set of z2r arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // OK if map = -1 (non-ADP atom in pair hybrid) b/c type2z2r not used\n\n  int irow,icol;\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) continue;\n      if (irow < icol) {\n        irow = map[j];\n        icol = map[i];\n      }\n      n = 0;\n      for (m = 0; m < irow; m++) n += m + 1;\n      n += icol;\n      type2z2r[i][j] = n;\n    }\n  }\n\n  // ------------------------------------------------------------------\n  // setup u2r arrays\n  // ------------------------------------------------------------------\n\n  // allocate u2r arrays\n  // nu2r = N*(N+1)/2 where N = # of setfl elements\n\n  nu2r = setfl->nelements * (setfl->nelements+1) / 2;\n  memory->destroy(u2r);\n  memory->create(u2r,nu2r,nr+1,\"pair:u2r\");\n\n  // copy each element pair z2r to global z2r, only for I >= J\n\n  n = 0;\n  for (i = 0; i < setfl->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) u2r[n][m] = setfl->u2r[i][j][m];\n      n++;\n    }\n\n  // type2z2r[i][j] = which z2r array (0 to nz2r-1) each type pair maps to\n  // set of z2r arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // OK if map = -1 (non-ADP atom in pair hybrid) b/c type2z2r not used\n\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) continue;\n      if (irow < icol) {\n        irow = map[j];\n        icol = map[i];\n      }\n      n = 0;\n      for (m = 0; m < irow; m++) n += m + 1;\n      n += icol;\n      type2u2r[i][j] = n;\n    }\n  }\n\n  // ------------------------------------------------------------------\n  // setup w2r arrays\n  // ------------------------------------------------------------------\n\n  // allocate w2r arrays\n  // nw2r = N*(N+1)/2 where N = # of setfl elements\n\n  nw2r = setfl->nelements * (setfl->nelements+1) / 2;\n  memory->destroy(w2r);\n  memory->create(w2r,nw2r,nr+1,\"pair:w2r\");\n\n  // copy each element pair z2r to global z2r, only for I >= J\n\n  n = 0;\n  for (i = 0; i < setfl->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) w2r[n][m] = setfl->w2r[i][j][m];\n      n++;\n    }\n\n  // type2z2r[i][j] = which z2r array (0 to nz2r-1) each type pair maps to\n  // set of z2r arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // OK if map = -1 (non-ADP atom in pair hybrid) b/c type2z2r not used\n\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) continue;\n      if (irow < icol) {\n        irow = map[j];\n        icol = map[i];\n      }\n      n = 0;\n      for (m = 0; m < irow; m++) n += m + 1;\n      n += icol;\n      type2w2r[i][j] = n;\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairADP::array2spline()\n{\n  rdr = 1.0/dr;\n  rdrho = 1.0/drho;\n\n  memory->destroy(frho_spline);\n  memory->destroy(rhor_spline);\n  memory->destroy(z2r_spline);\n  memory->destroy(u2r_spline);\n  memory->destroy(w2r_spline);\n\n  memory->create(frho_spline,nfrho,nrho+1,7,\"pair:frho\");\n  memory->create(rhor_spline,nrhor,nr+1,7,\"pair:rhor\");\n  memory->create(z2r_spline,nz2r,nr+1,7,\"pair:z2r\");\n  memory->create(u2r_spline,nz2r,nr+1,7,\"pair:u2r\");\n  memory->create(w2r_spline,nz2r,nr+1,7,\"pair:w2r\");\n\n  for (int i = 0; i < nfrho; i++)\n    interpolate(nrho,drho,frho[i],frho_spline[i]);\n\n  for (int i = 0; i < nrhor; i++)\n    interpolate(nr,dr,rhor[i],rhor_spline[i]);\n\n  for (int i = 0; i < nz2r; i++)\n    interpolate(nr,dr,z2r[i],z2r_spline[i]);\n\n  for (int i = 0; i < nu2r; i++)\n    interpolate(nr,dr,u2r[i],u2r_spline[i]);\n\n  for (int i = 0; i < nw2r; i++)\n    interpolate(nr,dr,w2r[i],w2r_spline[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairADP::interpolate(int n, double delta, double *f, double **spline)\n{\n  for (int m = 1; m <= n; m++) spline[m][6] = f[m];\n\n  spline[1][5] = spline[2][6] - spline[1][6];\n  spline[2][5] = 0.5 * (spline[3][6]-spline[1][6]);\n  spline[n-1][5] = 0.5 * (spline[n][6]-spline[n-2][6]);\n  spline[n][5] = spline[n][6] - spline[n-1][6];\n\n  for (int m = 3; m <= n-2; m++)\n    spline[m][5] = ((spline[m-2][6]-spline[m+2][6]) +\n                    8.0*(spline[m+1][6]-spline[m-1][6])) / 12.0;\n\n  for (int m = 1; m <= n-1; m++) {\n    spline[m][4] = 3.0*(spline[m+1][6]-spline[m][6]) -\n      2.0*spline[m][5] - spline[m+1][5];\n    spline[m][3] = spline[m][5] + spline[m+1][5] -\n      2.0*(spline[m+1][6]-spline[m][6]);\n  }\n\n  spline[n][4] = 0.0;\n  spline[n][3] = 0.0;\n\n  for (int m = 1; m <= n; m++) {\n    spline[m][2] = spline[m][5]/delta;\n    spline[m][1] = 2.0*spline[m][4]/delta;\n    spline[m][0] = 3.0*spline[m][3]/delta;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   grab n values from file fp and put them in list\n   values can be several to a line\n   only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid PairADP::grab(FILE *fp, int n, double *list)\n{\n  char *ptr;\n  char line[MAXLINE];\n\n  int i = 0;\n  while (i < n) {\n    fgets(line,MAXLINE,fp);\n    ptr = strtok(line,\" \\t\\n\\r\\f\");\n    list[i++] = atof(ptr);\n    while ((ptr = strtok(NULL,\" \\t\\n\\r\\f\"))) list[i++] = atof(ptr);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairADP::pack_forward_comm(int n, int *list, double *buf,\n                               int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = fp[j];\n    buf[m++] = mu[j][0];\n    buf[m++] = mu[j][1];\n    buf[m++] = mu[j][2];\n    buf[m++] = lambda[j][0];\n    buf[m++] = lambda[j][1];\n    buf[m++] = lambda[j][2];\n    buf[m++] = lambda[j][3];\n    buf[m++] = lambda[j][4];\n    buf[m++] = lambda[j][5];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairADP::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    fp[i] = buf[m++];\n    mu[i][0] = buf[m++];\n    mu[i][1] = buf[m++];\n    mu[i][2] = buf[m++];\n    lambda[i][0] = buf[m++];\n    lambda[i][1] = buf[m++];\n    lambda[i][2] = buf[m++];\n    lambda[i][3] = buf[m++];\n    lambda[i][4] = buf[m++];\n    lambda[i][5] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairADP::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n  buf[m++] = rho[i];\n  buf[m++] = mu[i][0];\n  buf[m++] = mu[i][1];\n  buf[m++] = mu[i][2];\n  buf[m++] = lambda[i][0];\n  buf[m++] = lambda[i][1];\n  buf[m++] = lambda[i][2];\n  buf[m++] = lambda[i][3];\n  buf[m++] = lambda[i][4];\n  buf[m++] = lambda[i][5];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairADP::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    rho[j] += buf[m++];\n    mu[j][0] += buf[m++];\n    mu[j][1] += buf[m++];\n    mu[j][2] += buf[m++];\n    lambda[j][0] += buf[m++];\n    lambda[j][1] += buf[m++];\n    lambda[j][2] += buf[m++];\n    lambda[j][3] += buf[m++];\n    lambda[j][4] += buf[m++];\n    lambda[j][5] += buf[m++];\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairADP::memory_usage()\n{\n  double bytes = Pair::memory_usage();\n  bytes += 21 * nmax * sizeof(double);\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef ATOM_CLASS\n\nAtomStyle(template,AtomVecTemplate)\n\n#else\n\n#ifndef LMP_ATOM_VEC_TEMPLATE_H\n#define LMP_ATOM_VEC_TEMPLATE_H\n\n#include \"atom_vec.h\"\n\nnamespace LAMMPS_NS {\n\nclass AtomVecTemplate : public AtomVec {\n public:\n  AtomVecTemplate(class LAMMPS *);\n  virtual ~AtomVecTemplate() {}\n  void process_args(int, char **);\n  void grow(int);\n  void grow_reset();\n  void copy(int, int, int);\n  virtual int pack_comm(int, int *, double *, int, int *);\n  virtual int pack_comm_vel(int, int *, double *, int, int *);\n  virtual void unpack_comm(int, int, double *);\n  virtual void unpack_comm_vel(int, int, double *);\n  int pack_reverse(int, int, double *);\n  void unpack_reverse(int, int *, double *);\n  virtual int pack_border(int, int *, double *, int, int *);\n  virtual int pack_border_vel(int, int *, double *, int, int *);\n  int pack_border_hybrid(int, int *, double *);\n  virtual void unpack_border(int, int, double *);\n  virtual void unpack_border_vel(int, int, double *);\n  int unpack_border_hybrid(int, int, double *);\n  virtual int pack_exchange(int, double *);\n  virtual int unpack_exchange(double *);\n  int size_restart();\n  int pack_restart(int, double *);\n  int unpack_restart(double *);\n  void create_atom(int, double *);\n  void data_atom(double *, tagint, char **);\n  int data_atom_hybrid(int, char **);\n  void pack_data(double **);\n  int pack_data_hybrid(int, double *);\n  void write_data(FILE *, int, double **);\n  int write_data_hybrid(FILE *, double *);\n  bigint memory_usage();\n\n protected:\n  tagint *tag;\n  int *type,*mask;\n  tagint *image;\n  double **x,**v,**f;\n  tagint *molecule;\n  int *molindex,*molatom;\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Molecule template ID for atom_style template does not exist\n\nSelf-explanatory.\n\nE: Atom style template molecule must have atom types\n\nThe defined molecule(s) does not specify atom types.\n\nE: Per-processor system is too big\n\nThe number of owned atoms plus ghost atoms on a single\nprocessor must fit in 32-bit integer.\n\nE: Invalid atom ID in Atoms section of data file\n\nAtom IDs must be positive integers.\n\nE: Invalid template index in Atoms section of data file\n\nThe template indices must be between 1 to N, where N is the number of\nmolecules in the template.\n\nE: Invalid template atom in Atoms section of data file\n\nThe atom indices must be between 1 to N, where N is the number of\natoms in the template molecule the atom belongs to.\n\nE: Invalid atom type in Atoms section of data file\n\nAtom types must range from 1 to specified # of types.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <string.h>\n#include <stdlib.h>\n#include \"atom_vec_template.h\"\n#include \"atom.h\"\n#include \"molecule.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nAtomVecTemplate::AtomVecTemplate(LAMMPS *lmp) : AtomVec(lmp)\n{\n  molecular = 2;\n  mass_type = 1;\n\n  comm_x_only = comm_f_only = 1;\n  size_forward = 3;\n  size_reverse = 3;\n  size_border = 9;\n  size_velocity = 3;\n  size_data_atom = 8;\n  size_data_vel = 4;\n  xcol_data = 6;\n\n  atom->molecule_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   process additional arg = molecule template ID\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::process_args(int narg, char **arg)\n{\n  if (narg != 1) error->all(FLERR,\"Illegal atom_style template command\");\n\n  int imol = atom->find_molecule(arg[0]);\n  if (imol == -1) error->all(FLERR,\"Molecule template ID for \"\n                             \"atom_style template does not exist\");\n\n  onemols = &atom->molecules[imol];\n  nset = atom->molecules[imol]->nset;\n\n  // error check on molecule template fields\n\n  for (int i = 0; i < nset; i++)\n    if (onemols[i]->typeflag == 0)\n      error->all(FLERR,\"Atom style template molecule must have atom types\");\n\n  // set bonds_allow,angles_allow,etc based on the molecules in template set\n  // similar to how atom_style bond,angle,full set it\n\n  for (int i = 0; i < nset; i++) {\n    if (onemols[i]->bondflag) bonds_allow = 1;\n    if (onemols[i]->angleflag) angles_allow = 1;\n    if (onemols[i]->dihedralflag) dihedrals_allow = 1;\n    if (onemols[i]->improperflag) impropers_allow = 1;\n  }\n\n  // set nbondtypes,nangletypes,etc based on the molecules in template set\n  // do this here b/c data file will typically not contain these settings\n\n  for (int i = 0; i < nset; i++) {\n    atom->nbondtypes = MAX(atom->nbondtypes,onemols[i]->nbondtypes);\n    atom->nangletypes = MAX(atom->nangletypes,onemols[i]->nangletypes);\n    atom->ndihedraltypes = MAX(atom->ndihedraltypes,onemols[i]->ndihedraltypes);\n    atom->nimpropertypes = MAX(atom->nimpropertypes,onemols[i]->nimpropertypes);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   grow atom arrays\n   n = 0 grows arrays by a chunk\n   n > 0 allocates arrays to size n\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::grow(int n)\n{\n  if (n == 0) grow_nmax();\n  else nmax = n;\n  atom->nmax = nmax;\n  if (nmax < 0 || nmax > MAXSMALLINT)\n    error->one(FLERR,\"Per-processor system is too big\");\n\n  tag = memory->grow(atom->tag,nmax,\"atom:tag\");\n  type = memory->grow(atom->type,nmax,\"atom:type\");\n  mask = memory->grow(atom->mask,nmax,\"atom:mask\");\n  image = memory->grow(atom->image,nmax,\"atom:image\");\n  x = memory->grow(atom->x,nmax,3,\"atom:x\");\n  v = memory->grow(atom->v,nmax,3,\"atom:v\");\n  f = memory->grow(atom->f,nmax*comm->nthreads,3,\"atom:f\");\n\n  molecule = memory->grow(atom->molecule,nmax,\"atom:molecule\");\n  molindex = memory->grow(atom->molindex,nmax,\"atom:molindex\");\n  molatom = memory->grow(atom->molatom,nmax,\"atom:molatom\");\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);\n}\n\n/* ----------------------------------------------------------------------\n   reset local array ptrs\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::grow_reset()\n{\n  tag = atom->tag; type = atom->type;\n  mask = atom->mask; image = atom->image;\n  x = atom->x; v = atom->v; f = atom->f;\n  molecule = atom->molecule;\n  molindex = atom->molindex; molatom = atom->molatom;\n}\n\n/* ----------------------------------------------------------------------\n   copy atom I info to atom J\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::copy(int i, int j, int delflag)\n{\n  tag[j] = tag[i];\n  type[j] = type[i];\n  mask[j] = mask[i];\n  image[j] = image[i];\n  x[j][0] = x[i][0];\n  x[j][1] = x[i][1];\n  x[j][2] = x[i][2];\n  v[j][0] = v[i][0];\n  v[j][1] = v[i][1];\n  v[j][2] = v[i][2];\n\n  molecule[j] = molecule[i];\n  molindex[j] = molindex[i];\n  molatom[j] = molatom[i];\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_comm(int n, int *list, double *buf,\n                             int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_comm_vel(int n, int *list, double *buf,\n                                 int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::unpack_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::unpack_comm_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_reverse(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    buf[m++] = f[i][0];\n    buf[m++] = f[i][1];\n    buf[m++] = f[i][2];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::unpack_reverse(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    f[j][0] += buf[m++];\n    f[j][1] += buf[m++];\n    f[j][2] += buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_border(int n, int *list, double *buf,\n                               int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = ubuf(molindex[j]).d;\n      buf[m++] = ubuf(molatom[j]).d;\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = ubuf(molindex[j]).d;\n      buf[m++] = ubuf(molatom[j]).d;\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_border_vel(int n, int *list, double *buf,\n                                   int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = ubuf(molindex[j]).d;\n      buf[m++] = ubuf(molatom[j]).d;\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        buf[m++] = ubuf(molindex[j]).d;\n        buf[m++] = ubuf(molatom[j]).d;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        buf[m++] = ubuf(molindex[j]).d;\n        buf[m++] = ubuf(molatom[j]).d;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_border_hybrid(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = ubuf(molecule[j]).d;\n    buf[m++] = ubuf(molindex[j]).d;\n    buf[m++] = ubuf(molatom[j]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::unpack_border(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    molindex[i] = (int) ubuf(buf[m++]).i;\n    molatom[i] = (int) ubuf(buf[m++]).i;\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::unpack_border_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    molindex[i] = (int) ubuf(buf[m++]).i;\n    molatom[i] = (int) ubuf(buf[m++]).i;\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::unpack_border_hybrid(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    molindex[i] = (int) ubuf(buf[m++]).i;\n    molatom[i] = (int) ubuf(buf[m++]).i;\n  }\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   pack data for atom I for sending to another proc\n   xyz must be 1st 3 values, so comm::exchange() can test on them\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_exchange(int i, double *buf)\n{\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n\n  buf[m++] = ubuf(molecule[i]).d;\n  buf[m++] = ubuf(molindex[i]).d;\n  buf[m++] = ubuf(molatom[i]).d;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecTemplate::unpack_exchange(double *buf)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n  molindex[nlocal] = (int) ubuf(buf[m++]).i;\n  molatom[nlocal] = (int) ubuf(buf[m++]).i;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->\n        unpack_exchange(nlocal,&buf[m]);\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   size of restart data for all atoms owned by this proc\n   include extra data stored by fixes\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::size_restart()\n{\n  int i;\n\n  int nlocal = atom->nlocal;\n  int n = 14 * nlocal;\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      for (i = 0; i < nlocal; i++)\n        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);\n\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom I's data for restart file including extra quantities\n   xyz must be 1st 3 values, so that read_restart can test on them\n   molecular types may be negative, but write as positive\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_restart(int i, double *buf)\n{\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n\n  buf[m++] = ubuf(molecule[i]).d;\n  buf[m++] = ubuf(molindex[i]).d;\n  buf[m++] = ubuf(molatom[i]).d;\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   unpack data for one atom from restart file including extra quantities\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::unpack_restart(double *buf)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) {\n    grow(0);\n    if (atom->nextra_store)\n      memory->grow(atom->extra,nmax,atom->nextra_store,\"atom:extra\");\n  }\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n  molindex[nlocal] = (int) ubuf(buf[m++]).i;\n  molatom[nlocal] = (int) ubuf(buf[m++]).i;\n\n  double **extra = atom->extra;\n  if (atom->nextra_store) {\n    int size = static_cast<int> (buf[0]) - m;\n    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];\n  }\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   create one atom of itype at coord\n   set other values to defaults\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::create_atom(int itype, double *coord)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = 0;\n  type[nlocal] = itype;\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n  mask[nlocal] = 1;\n  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |\n    ((imageint) IMGMAX << IMGBITS) | IMGMAX;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n\n  molecule[nlocal] = 0;\n  molindex[nlocal] = -1;\n  molatom[nlocal] = -1;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack one line from Atoms section of data file\n   initialize other atom quantities\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::data_atom(double *coord, imageint imagetmp, char **values)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = ATOTAGINT(values[0]);\n  if (tag[nlocal] <= 0)\n    error->one(FLERR,\"Invalid atom ID in Atoms section of data file\");\n\n  molecule[nlocal] = ATOTAGINT(values[1]);\n  molindex[nlocal] = atoi(values[2]) - 1;\n  molatom[nlocal] = atoi(values[3]) - 1;\n\n  if (molindex[nlocal] < 0 || molindex[nlocal] >= nset)\n    error->one(FLERR,\"Invalid template index in Atoms section of data file\");\n  if (molatom[nlocal] < 0 ||\n      molatom[nlocal] >= onemols[molindex[nlocal]]->natoms)\n    error->one(FLERR,\"Invalid template atom in Atoms section of data file\");\n\n  type[nlocal] = atoi(values[4]);\n  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)\n    error->one(FLERR,\"Invalid atom type in Atoms section of data file\");\n\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n\n  image[nlocal] = imagetmp;\n\n  mask[nlocal] = 1;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack hybrid quantities from one line in Atoms section of data file\n   initialize other atom quantities for this sub-style\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::data_atom_hybrid(int nlocal, char **values)\n{\n  molecule[nlocal] = ATOTAGINT(values[0]);\n  molindex[nlocal] = atoi(values[1]) - 1;\n  molatom[nlocal] = atoi(values[2]) - 1;\n  return 3;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom info for data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::pack_data(double **buf)\n{\n  int nlocal = atom->nlocal;\n  for (int i = 0; i < nlocal; i++) {\n    buf[i][0] = ubuf(tag[i]).d;\n    buf[i][1] = ubuf(molecule[i]).d;\n    buf[i][2] = ubuf(molindex[i]+1).d;\n    buf[i][3] = ubuf(molatom[i]+1).d;\n    buf[i][4] = ubuf(type[i]).d;\n    buf[i][5] = x[i][0];\n    buf[i][6] = x[i][1];\n    buf[i][7] = x[i][2];\n    buf[i][8] = ubuf((image[i] & IMGMASK) - IMGMAX).d;\n    buf[i][9] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;\n    buf[i][10] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   pack hybrid atom info for data file\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::pack_data_hybrid(int i, double *buf)\n{\n  buf[0] = ubuf(molecule[i]).d;\n  buf[1] = ubuf(molindex[i]+1).d;\n  buf[2] = ubuf(molatom[i]+1).d;\n  return 3;\n}\n\n/* ----------------------------------------------------------------------\n   write atom info to data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecTemplate::write_data(FILE *fp, int n, double **buf)\n{\n  for (int i = 0; i < n; i++)\n    fprintf(fp,TAGINT_FORMAT \" \" TAGINT_FORMAT\n            \" %d %d %d %-1.16e %-1.16e %-1.16e %d %d %d\\n\",\n            (tagint) ubuf(buf[i][0]).i,(tagint) ubuf(buf[i][1]).i,\n            (int) ubuf(buf[i][2]).i,(int) ubuf(buf[i][3]).i,\n            (int) ubuf(buf[i][4]).i,\n            buf[i][5],buf[i][6],buf[i][7],\n            (int) ubuf(buf[i][8]).i,(int) ubuf(buf[i][9]).i,\n            (int) ubuf(buf[i][10]).i);\n}\n\n/* ----------------------------------------------------------------------\n   write hybrid atom info to data file\n------------------------------------------------------------------------- */\n\nint AtomVecTemplate::write_data_hybrid(FILE *fp, double *buf)\n{\n  fprintf(fp,\" \" TAGINT_FORMAT \" %d %d\",\n          (tagint) ubuf(buf[0]).i,(int) ubuf(buf[1]).i,(int) ubuf(buf[2]).i);\n  return 3;\n}\n\n/* ----------------------------------------------------------------------\n   return # of bytes of allocated memory\n------------------------------------------------------------------------- */\n\nbigint AtomVecTemplate::memory_usage()\n{\n  bigint bytes = 0;\n\n  if (atom->memcheck(\"tag\")) bytes += memory->usage(tag,nmax);\n  if (atom->memcheck(\"type\")) bytes += memory->usage(type,nmax);\n  if (atom->memcheck(\"mask\")) bytes += memory->usage(mask,nmax);\n  if (atom->memcheck(\"image\")) bytes += memory->usage(image,nmax);\n  if (atom->memcheck(\"x\")) bytes += memory->usage(x,nmax,3);\n  if (atom->memcheck(\"v\")) bytes += memory->usage(v,nmax,3);\n  if (atom->memcheck(\"f\")) bytes += memory->usage(f,nmax*comm->nthreads,3);\n\n  if (atom->memcheck(\"molecule\")) bytes += memory->usage(molecule,nmax);\n  if (atom->memcheck(\"molindex\")) bytes += memory->usage(molindex,nmax);\n  if (atom->memcheck(\"molatom\")) bytes += memory->usage(molatom,nmax);\n\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Aidan Thompson (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_sw.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairSW::PairSW(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n  map = NULL;\n\n  maxshort = 10;\n  neighshort = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairSW::~PairSW()\n{\n  if (copymode) return;\n\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n  memory->destroy(params);\n  memory->destroy(elem2param);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(neighshort);\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairSW::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum,jnumm1;\n  int itype,jtype,ktype,ijparam,ikparam,ijkparam;\n  tagint itag,jtag;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2;\n  double delr1[3],delr2[3],fj[3],fk[3];\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  double fxtmp,fytmp,fztmp;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    fxtmp = fytmp = fztmp = 0.0;\n\n    // two-body interactions, skip half of them\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    int numshort = 0;\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      if (rsq >= params[ijparam].cutsq) {\n        continue;\n      } else {\n        neighshort[numshort++] = j;\n        if (numshort >= maxshort) {\n          maxshort += maxshort/2;\n          memory->grow(neighshort,maxshort,\"pair:neighshort\");\n        }\n      }\n\n      jtag = tag[j];\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      twobody(&params[ijparam],rsq,fpair,eflag,evdwl);\n\n      fxtmp += delx*fpair;\n      fytmp += dely*fpair;\n      fztmp += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    jnumm1 = numshort - 1;\n\n    for (jj = 0; jj < jnumm1; jj++) {\n      j = neighshort[jj];\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n\n      double fjxtmp,fjytmp,fjztmp;\n      fjxtmp = fjytmp = fjztmp = 0.0;\n\n      for (kk = jj+1; kk < numshort; kk++) {\n        k = neighshort[kk];\n        ktype = map[type[k]];\n        ikparam = elem2param[itype][ktype][ktype];\n        ijkparam = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n\n        threebody(&params[ijparam],&params[ikparam],&params[ijkparam],\n                  rsq1,rsq2,delr1,delr2,fj,fk,eflag,evdwl);\n\n        fxtmp -= fj[0] + fk[0];\n        fytmp -= fj[1] + fk[1];\n        fztmp -= fj[2] + fk[2];\n        fjxtmp += fj[0];\n        fjytmp += fj[1];\n        fjztmp += fj[2];\n        f[k][0] += fk[0];\n        f[k][1] += fk[1];\n        f[k][2] += fk[2];\n\n        if (evflag) ev_tally3(i,j,k,evdwl,0.0,fj,fk,delr1,delr2);\n      }\n      f[j][0] += fjxtmp;\n      f[j][1] += fjytmp;\n      f[j][2] += fjztmp;\n    }\n    f[i][0] += fxtmp;\n    f[i][1] += fytmp;\n    f[i][2] += fztmp;\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairSW::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n  memory->create(neighshort,maxshort,\"pair:neighshort\");\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairSW::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairSW::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairSW::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style Stillinger-Weber requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style Stillinger-Weber requires newton pair on\");\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairSW::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairSW::read_file(char *file)\n{\n  int params_per_line = 14;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open Stillinger-Weber potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each set of params from potential file\n  // one set of params can span multiple lines\n  // store params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in Stillinger-Weber potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next entry in file\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].epsilon = atof(words[3]);\n    params[nparams].sigma = atof(words[4]);\n    params[nparams].littlea = atof(words[5]);\n    params[nparams].lambda = atof(words[6]);\n    params[nparams].gamma = atof(words[7]);\n    params[nparams].costheta = atof(words[8]);\n    params[nparams].biga = atof(words[9]);\n    params[nparams].bigb = atof(words[10]);\n    params[nparams].powerp = atof(words[11]);\n    params[nparams].powerq = atof(words[12]);\n    params[nparams].tol = atof(words[13]);\n\n    if (params[nparams].epsilon < 0.0 || params[nparams].sigma < 0.0 ||\n        params[nparams].littlea < 0.0 || params[nparams].lambda < 0.0 ||\n        params[nparams].gamma < 0.0 || params[nparams].biga < 0.0 ||\n        params[nparams].bigb < 0.0 || params[nparams].powerp < 0.0 ||\n        params[nparams].powerq < 0.0 || params[nparams].tol < 0.0)\n      error->all(FLERR,\"Illegal Stillinger-Weber parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairSW::setup_params()\n{\n  int i,j,k,m,n;\n  double rtmp;\n\n  // set elem2param for all triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n        n = -1;\n        for (m = 0; m < nparams; m++) {\n          if (i == params[m].ielement && j == params[m].jelement &&\n              k == params[m].kelement) {\n            if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n            n = m;\n          }\n        }\n        if (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n        elem2param[i][j][k] = n;\n      }\n\n\n  // compute parameter values derived from inputs\n\n  // set cutsq using shortcut to reduce neighbor list for accelerated\n  // calculations. cut must remain unchanged as it is a potential parameter\n  // (cut = a*sigma)\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cut = params[m].sigma*params[m].littlea;\n\n    rtmp = params[m].cut;\n    if (params[m].tol > 0.0) {\n      if (params[m].tol > 0.01) params[m].tol = 0.01;\n      if (params[m].gamma < 1.0)\n        rtmp = rtmp +\n          params[m].gamma * params[m].sigma / log(params[m].tol);\n      else rtmp = rtmp +\n             params[m].sigma / log(params[m].tol);\n    }\n    params[m].cutsq = rtmp * rtmp;\n\n    params[m].sigma_gamma = params[m].sigma*params[m].gamma;\n    params[m].lambda_epsilon = params[m].lambda*params[m].epsilon;\n    params[m].lambda_epsilon2 = 2.0*params[m].lambda*params[m].epsilon;\n    params[m].c1 = params[m].biga*params[m].epsilon *\n      params[m].powerp*params[m].bigb *\n      pow(params[m].sigma,params[m].powerp);\n    params[m].c2 = params[m].biga*params[m].epsilon*params[m].powerq *\n      pow(params[m].sigma,params[m].powerq);\n    params[m].c3 = params[m].biga*params[m].epsilon*params[m].bigb *\n      pow(params[m].sigma,params[m].powerp+1.0);\n    params[m].c4 = params[m].biga*params[m].epsilon *\n      pow(params[m].sigma,params[m].powerq+1.0);\n    params[m].c5 = params[m].biga*params[m].epsilon*params[m].bigb *\n      pow(params[m].sigma,params[m].powerp);\n    params[m].c6 = params[m].biga*params[m].epsilon *\n      pow(params[m].sigma,params[m].powerq);\n  }\n\n  // set cutmax to max of all params\n\n  cutmax = 0.0;\n  for (m = 0; m < nparams; m++) {\n    rtmp = sqrt(params[m].cutsq);\n    if (rtmp > cutmax) cutmax = rtmp;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairSW::twobody(Param *param, double rsq, double &fforce,\n                     int eflag, double &eng)\n{\n  double r,rinvsq,rp,rq,rainv,rainvsq,expsrainv;\n\n  r = sqrt(rsq);\n  rinvsq = 1.0/rsq;\n  rp = pow(r,-param->powerp);\n  rq = pow(r,-param->powerq);\n  rainv = 1.0 / (r - param->cut);\n  rainvsq = rainv*rainv*r;\n  expsrainv = exp(param->sigma * rainv);\n  fforce = (param->c1*rp - param->c2*rq +\n            (param->c3*rp -param->c4*rq) * rainvsq) * expsrainv * rinvsq;\n  if (eflag) eng = (param->c5*rp - param->c6*rq) * expsrainv;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairSW::threebody(Param *paramij, Param *paramik, Param *paramijk,\n                       double rsq1, double rsq2,\n                       double *delr1, double *delr2,\n                       double *fj, double *fk, int eflag, double &eng)\n{\n  double r1,rinvsq1,rainv1,gsrainv1,gsrainvsq1,expgsrainv1;\n  double r2,rinvsq2,rainv2,gsrainv2,gsrainvsq2,expgsrainv2;\n  double rinv12,cs,delcs,delcssq,facexp,facrad,frad1,frad2;\n  double facang,facang12,csfacang,csfac1,csfac2;\n\n  r1 = sqrt(rsq1);\n  rinvsq1 = 1.0/rsq1;\n  rainv1 = 1.0/(r1 - paramij->cut);\n  gsrainv1 = paramij->sigma_gamma * rainv1;\n  gsrainvsq1 = gsrainv1*rainv1/r1;\n  expgsrainv1 = exp(gsrainv1);\n\n  r2 = sqrt(rsq2);\n  rinvsq2 = 1.0/rsq2;\n  rainv2 = 1.0/(r2 - paramik->cut);\n  gsrainv2 = paramik->sigma_gamma * rainv2;\n  gsrainvsq2 = gsrainv2*rainv2/r2;\n  expgsrainv2 = exp(gsrainv2);\n\n  rinv12 = 1.0/(r1*r2);\n  cs = (delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2]) * rinv12;\n  delcs = cs - paramijk->costheta;\n  delcssq = delcs*delcs;\n\n  facexp = expgsrainv1*expgsrainv2;\n\n  // facrad = sqrt(paramij->lambda_epsilon*paramik->lambda_epsilon) *\n  //          facexp*delcssq;\n\n  facrad = paramijk->lambda_epsilon * facexp*delcssq;\n  frad1 = facrad*gsrainvsq1;\n  frad2 = facrad*gsrainvsq2;\n  facang = paramijk->lambda_epsilon2 * facexp*delcs;\n  facang12 = rinv12*facang;\n  csfacang = cs*facang;\n  csfac1 = rinvsq1*csfacang;\n\n  fj[0] = delr1[0]*(frad1+csfac1)-delr2[0]*facang12;\n  fj[1] = delr1[1]*(frad1+csfac1)-delr2[1]*facang12;\n  fj[2] = delr1[2]*(frad1+csfac1)-delr2[2]*facang12;\n\n  csfac2 = rinvsq2*csfacang;\n\n  fk[0] = delr2[0]*(frad2+csfac2)-delr1[0]*facang12;\n  fk[1] = delr2[1]*(frad2+csfac2)-delr1[1]*facang12;\n  fk[2] = delr2[2]*(frad2+csfac2)-delr1[2]*facang12;\n\n  if (eflag) eng = facrad;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Tod A Pascal (Caltech)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"angle_cosine_periodic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"math_const.h\"\n#include \"math_special.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\nusing namespace MathSpecial;\n\n#define SMALL 0.001\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosinePeriodic::AngleCosinePeriodic(LAMMPS *lmp) : Angle(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosinePeriodic::~AngleCosinePeriodic()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(b);\n    memory->destroy(multiplicity);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosinePeriodic::compute(int eflag, int vflag)\n{\n  int i,i1,i2,i3,n,m,type,b_factor;\n  double delx1,dely1,delz1,delx2,dely2,delz2;\n  double eangle,f1[3],f3[3];\n  double rsq1,rsq2,r1,r2,c,a,a11,a12,a22;\n  double tn,tn_1,tn_2,un,un_1,un_2;\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // c = cosine of angle\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    m = multiplicity[type];\n    b_factor = b[type];\n\n    // cos(n*x) = Tn(cos(x))\n    // Tn(x) = Chebyshev polynomials of the first kind: T_0 = 1, T_1 = x, ...\n    // recurrence relationship:\n    // Tn(x) = 2*x*T[n-1](x) - T[n-2](x) where T[-1](x) = 0\n    // also, dTn(x)/dx = n*U[n-1](x)\n    // where Un(x) = 2*x*U[n-1](x) - U[n-2](x) and U[-1](x) = 0\n    // finally need to handle special case for n = 1\n\n    tn = 1.0;\n    tn_1 = 1.0;\n    tn_2 = 0.0;\n    un = 1.0;\n    un_1 = 2.0;\n    un_2 = 0.0;\n\n    // force & energy\n\n    tn_2 = c;\n    for (i = 1; i <= m; i++) {\n      tn = 2*c*tn_1 - tn_2;\n      tn_2 = tn_1;\n      tn_1 = tn;\n    }\n\n    for (i = 2; i <= m; i++) {\n      un = 2*c*un_1 - un_2;\n      un_2 = un_1;\n      un_1 = un;\n    }\n    tn = b_factor*powsign(m)*tn;\n    un = b_factor*powsign(m)*m*un;\n\n    if (eflag) eangle = 2*k[type]*(1.0 - tn);\n\n    a = -k[type]*un;\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    f1[0] = a11*delx1 + a12*delx2;\n    f1[1] = a11*dely1 + a12*dely2;\n    f1[2] = a11*delz1 + a12*delz2;\n    f3[0] = a22*delx2 + a12*delx1;\n    f3[1] = a22*dely2 + a12*dely1;\n    f3[2] = a22*delz2 + a12*delz1;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosinePeriodic::allocate()\n{\n  allocated = 1;\n  int n = atom->nangletypes;\n\n  memory->create(k,n+1,\"angle:k\");\n  memory->create(multiplicity,n+1,\"angle:multiplicity\");\n  memory->create(b,n+1,\"angle:b\");\n\n  memory->create(setflag,n+1,\"angle:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more types\n------------------------------------------------------------------------- */\n\nvoid AngleCosinePeriodic::coeff(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Incorrect args for angle coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nangletypes,ilo,ihi);\n\n  double c_one = force->numeric(FLERR,arg[1]);\n  int b_one = force->inumeric(FLERR,arg[2]);\n  int n_one = force->inumeric(FLERR,arg[3]);\n  if (n_one <= 0) error->all(FLERR,\"Incorrect args for angle coefficients\");\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = c_one/(n_one*n_one);\n    b[i] = b_one;\n    multiplicity[i] = n_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for angle coefficients\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosinePeriodic::equilibrium_angle(int i)\n{\n  return MY_PI;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid AngleCosinePeriodic::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nangletypes,fp);\n  fwrite(&b[1],sizeof(int),atom->nangletypes,fp);\n  fwrite(&multiplicity[1],sizeof(int),atom->nangletypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid AngleCosinePeriodic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nangletypes,fp);\n    fread(&b[1],sizeof(int),atom->nangletypes,fp);\n    fread(&multiplicity[1],sizeof(int),atom->nangletypes,fp);\n  }\n\n  MPI_Bcast(&k[1],atom->nangletypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&b[1],atom->nangletypes,MPI_INT,0,world);\n  MPI_Bcast(&multiplicity[1],atom->nangletypes,MPI_INT,0,world);\n  for (int i = 1; i <= atom->nangletypes; i++) setflag[i] = 1;\n}\n\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid AngleCosinePeriodic::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nangletypes; i++) {\n    int m = multiplicity[i];\n    fprintf(fp,\"%d %g %d %d\\n\",i,k[i]*m*m,b[i],m);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosinePeriodic::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  c = cos(acos(c)*multiplicity[type]);\n  return k[type]*(1.0-b[type]*powsign(multiplicity[type])*c);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"fix_bond_swap.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"bond.h\"\n#include \"angle.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"group.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"compute.h\"\n#include \"random_mars.h\"\n#include \"citeme.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"update.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\n\nstatic const char cite_fix_bond_swap[] =\n  \"neighbor multi command:\\n\\n\"\n  \"@Article{Auhl03,\\n\"\n  \" author = {R. Auhl, R. Everaers, G. S. Grest, K. Kremer, S. J. Plimpton},\\n\"\n  \" title = {Equilibration of long chain polymer melts in computer simulations},\\n\"\n  \" journal = {J.~Chem.~Phys.},\\n\"\n  \" year =    2003,\\n\"\n  \" volume =  119,\\n\"\n  \" pages =   {12718--12728}\\n\"\n  \"}\\n\\n\";\n\n/* ---------------------------------------------------------------------- */\n\nFixBondSwap::FixBondSwap(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg),\n  tflag(0), alist(NULL), id_temp(NULL), type(NULL), x(NULL), list(NULL),\n  temperature(NULL), random(NULL)\n{\n  if (lmp->citeme) lmp->citeme->add(cite_fix_bond_swap);\n\n  if (narg != 7) error->all(FLERR,\"Illegal fix bond/swap command\");\n\n  nevery = force->inumeric(FLERR,arg[3]);\n  if (nevery <= 0) error->all(FLERR,\"Illegal fix bond/swap command\");\n\n  force_reneighbor = 1;\n  next_reneighbor = -1;\n  vector_flag = 1;\n  size_vector = 2;\n  global_freq = 1;\n  extvector = 0;\n\n  fraction = force->numeric(FLERR,arg[4]);\n  double cutoff = force->numeric(FLERR,arg[5]);\n  cutsq = cutoff*cutoff;\n\n  // initialize Marsaglia RNG with processor-unique seed\n\n  int seed = force->inumeric(FLERR,arg[6]);\n  random = new RanMars(lmp,seed + comm->me);\n\n  // error check\n\n  if (atom->molecular != 1)\n    error->all(FLERR,\"Cannot use fix bond/swap with non-molecular systems\");\n\n  // create a new compute temp style\n  // id = fix-ID + temp, compute group = fix group\n\n  int n = strlen(id) + 6;\n  id_temp = new char[n];\n  strcpy(id_temp,id);\n  strcat(id_temp,\"_temp\");\n\n  char **newarg = new char*[3];\n  newarg[0] = id_temp;\n  newarg[1] = (char *) \"all\";\n  newarg[2] = (char *) \"temp\";\n  modify->add_compute(3,newarg);\n  delete [] newarg;\n  tflag = 1;\n\n  // initialize atom list\n\n  nmax = 0;\n  alist = NULL;\n\n  naccept = foursome = 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixBondSwap::~FixBondSwap()\n{\n  delete random;\n\n  // delete temperature if fix created it\n\n  if (tflag) modify->delete_compute(id_temp);\n  delete [] id_temp;\n\n  memory->destroy(alist);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondSwap::setmask()\n{\n  int mask = 0;\n  mask |= POST_INTEGRATE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondSwap::init()\n{\n  // require an atom style with molecule IDs\n\n  if (atom->molecule == NULL)\n    error->all(FLERR,\n               \"Must use atom style with molecule IDs with fix bond/swap\");\n\n  int icompute = modify->find_compute(id_temp);\n  if (icompute < 0)\n    error->all(FLERR,\"Temperature ID for fix bond/swap does not exist\");\n  temperature = modify->compute[icompute];\n\n  // pair and bonds must be defined\n  // no dihedral or improper potentials allowed\n  // special bonds must be 0 1 1\n\n  if (force->pair == NULL || force->bond == NULL)\n    error->all(FLERR,\"Fix bond/swap requires pair and bond styles\");\n\n  if (force->pair->single_enable == 0)\n    error->all(FLERR,\"Pair style does not support fix bond/swap\");\n\n  if (force->angle == NULL && atom->nangles > 0 && comm->me == 0)\n    error->warning(FLERR,\"Fix bond/swap will ignore defined angles\");\n\n  if (force->dihedral || force->improper)\n    error->all(FLERR,\"Fix bond/swap cannot use dihedral or improper styles\");\n\n  if (force->special_lj[1] != 0.0 || force->special_lj[2] != 1.0 ||\n      force->special_lj[3] != 1.0)\n    error->all(FLERR,\"Fix bond/swap requires special_bonds = 0,1,1\");\n\n  // need a half neighbor list, built every Nevery steps\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->pair = 0;\n  neighbor->requests[irequest]->fix = 1;\n  neighbor->requests[irequest]->occasional = 1;\n\n  // zero out stats\n\n  naccept = foursome = 0;\n  angleflag = 0;\n  if (force->angle) angleflag = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixBondSwap::init_list(int id, NeighList *ptr)\n{\n  list = ptr;\n}\n\n/* ----------------------------------------------------------------------\n   look for and perform swaps\n   NOTE: used to do this every pre_neighbor(), but think that is a bug\n         b/c was doing it after exchange() and before neighbor->build()\n         which is when neigh lists are actually out-of-date or even bogus,\n         now do it based on user-specified Nevery, and trigger reneigh\n         if any swaps performed, like fix bond/create\n------------------------------------------------------------------------- */\n\nvoid FixBondSwap::post_integrate()\n{\n  int i,j,ii,jj,m,inum,jnum;\n  int inext,iprev,ilast,jnext,jprev,jlast,ibond,iangle,jbond,jangle;\n  int ibondtype,jbondtype,iangletype,inextangletype,jangletype,jnextangletype;\n  tagint itag,inexttag,iprevtag,ilasttag,jtag,jnexttag,jprevtag,jlasttag;\n  tagint i1,i2,i3,j1,j2,j3;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  double delta,factor;\n\n  if (update->ntimestep % nevery) return;\n\n  // compute current temp for Boltzmann factor test\n\n  double t_current = temperature->compute_scalar();\n\n  // local ptrs to atom arrays\n\n  tagint *tag = atom->tag;\n  int *mask = atom->mask;\n  tagint *molecule = atom->molecule;\n  int *num_bond = atom->num_bond;\n  tagint **bond_atom = atom->bond_atom;\n  int **bond_type = atom->bond_type;\n  int *num_angle = atom->num_angle;\n  tagint **angle_atom1 = atom->angle_atom1;\n  tagint **angle_atom2 = atom->angle_atom2;\n  tagint **angle_atom3 = atom->angle_atom3;\n  int **angle_type = atom->angle_type;\n  int **nspecial = atom->nspecial;\n  tagint **special = atom->special;\n  int newton_bond = force->newton_bond;\n  int nlocal = atom->nlocal;\n\n  type = atom->type;\n  x = atom->x;\n\n  neighbor->build_one(list,1);\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // randomize list of my owned atoms that are in fix group\n  // grow atom list if necessary\n\n  if (atom->nmax > nmax) {\n    memory->destroy(alist);\n    nmax = atom->nmax;\n    memory->create(alist,nmax,\"bondswap:alist\");\n  }\n\n  int neligible = 0;\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    if (mask[i] & groupbit)\n      alist[neligible++] = i;\n  }\n\n  int tmp;\n  for (i = 0; i < neligible; i++) {\n    j = static_cast<int> (random->uniform() * neligible);\n    tmp = alist[i];\n    alist[i] = alist[j];\n    alist[j] = tmp;\n  }\n\n  // examine ntest of my eligible atoms for potential swaps\n  // atom i is randomly selected via atom list\n  // look at all j neighbors of atom i\n  // atom j must be on-processor (j < nlocal)\n  // atom j must be in fix group\n  // i and j must be same distance from chain end (mol[i] = mol[j])\n  // NOTE: must use extra parens in if test on mask[j] & groupbit\n\n  int ntest = static_cast<int> (fraction * neligible);\n  int accept = 0;\n\n  for (int itest = 0; itest < ntest; itest++) {\n    i = alist[itest];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      if (j >= nlocal) continue;\n      if ((mask[j] & groupbit) == 0) continue;\n      if (molecule[i] != molecule[j]) continue;\n\n      // look at all bond partners of atoms i and j\n      // use num_bond for this, not special list, so also find bondtypes\n      // inext,jnext = bonded atoms\n      // inext,jnext must be on-processor (inext,jnext < nlocal)\n      // inext,jnext must be same dist from chain end (mol[inext] = mol[jnext])\n      // since swaps may occur between two ends of a single chain, insure\n      //   the 4 atoms are unique (no duplicates): inext != jnext, inext != j\n      // all 4 old and new bonds must have length < cutoff\n\n      for (ibond = 0; ibond < num_bond[i]; ibond++) {\n        inext = atom->map(bond_atom[i][ibond]);\n        if (inext >= nlocal || inext < 0) continue;\n        ibondtype = bond_type[i][ibond];\n\n        for (jbond = 0; jbond < num_bond[j]; jbond++) {\n          jnext = atom->map(bond_atom[j][jbond]);\n          if (jnext >= nlocal || jnext < 0) continue;\n          jbondtype = bond_type[j][jbond];\n\n          if (molecule[inext] != molecule[jnext]) continue;\n          if (inext == jnext || inext == j) continue;\n          if (dist_rsq(i,inext) >= cutsq) continue;\n          if (dist_rsq(j,jnext) >= cutsq) continue;\n          if (dist_rsq(i,jnext) >= cutsq) continue;\n          if (dist_rsq(j,inext) >= cutsq) continue;\n\n          // if angles are enabled:\n          // find other atoms i,inext,j,jnext are in angles with\n          //   and angletypes: i/j angletype, i/j nextangletype\n          // use num_angle for this, not special list, so also find angletypes\n          // 4 atoms consecutively along 1st chain: iprev,i,inext,ilast\n          // 4 atoms consecutively along 2nd chain: jprev,j,jnext,jlast\n          // prev or last atom can be non-existent at end of chain\n          //   set prev/last = -1 in this case\n          // if newton bond = 0, then angles are stored by all 4 atoms\n          //   so require that iprev,ilast,jprev,jlast be owned by this proc\n          //   so all copies of angles can be updated if a swap takes place\n\n          if (angleflag) {\n            itag = tag[i];\n            inexttag = tag[inext];\n            jtag = tag[j];\n            jnexttag = tag[jnext];\n\n            iprev = -1;\n            for (iangle = 0; iangle < num_angle[i]; iangle++) {\n              i1 = angle_atom1[i][iangle];\n              i2 = angle_atom2[i][iangle];\n              i3 = angle_atom3[i][iangle];\n              if (i2 == itag && i3 == inexttag) iprev = atom->map(i1);\n              else if (i1 == inexttag && i2 == itag) iprev = atom->map(i3);\n              if (iprev >= 0) {\n                iangletype = angle_type[i][iangle];\n                break;\n              }\n            }\n            if (!newton_bond && iprev >= nlocal) continue;\n\n            ilast = -1;\n            for (iangle = 0; iangle < num_angle[inext]; iangle++) {\n              i1 = angle_atom1[inext][iangle];\n              i2 = angle_atom2[inext][iangle];\n              i3 = angle_atom3[inext][iangle];\n              if (i1 == itag && i2 == inexttag) ilast = atom->map(i3);\n              else if (i2 == inexttag && i3 == itag) ilast = atom->map(i1);\n              if (ilast >= 0) {\n                inextangletype = angle_type[inext][iangle];\n                break;\n              }\n            }\n            if (!newton_bond && ilast >= nlocal) continue;\n\n            jprev = -1;\n            for (jangle = 0; jangle < num_angle[j]; jangle++) {\n              j1 = angle_atom1[j][jangle];\n              j2 = angle_atom2[j][jangle];\n              j3 = angle_atom3[j][jangle];\n              if (j2 == jtag && j3 == jnexttag) jprev = atom->map(j1);\n              else if (j1 == jnexttag && j2 == jtag) jprev = atom->map(j3);\n              if (jprev >= 0) {\n                jangletype = angle_type[j][jangle];\n                break;\n              }\n            }\n            if (!newton_bond && jprev >= nlocal) continue;\n\n            jlast = -1;\n            for (jangle = 0; jangle < num_angle[jnext]; jangle++) {\n              j1 = angle_atom1[jnext][jangle];\n              j2 = angle_atom2[jnext][jangle];\n              j3 = angle_atom3[jnext][jangle];\n              if (j1 == jtag && j2 == jnexttag) jlast = atom->map(j3);\n              else if (j2 == jnexttag && j3 == jtag) jlast = atom->map(j1);\n              if (jlast >= 0) {\n                jnextangletype = angle_type[jnext][jangle];\n                break;\n              }\n            }\n            if (!newton_bond && jlast >= nlocal) continue;\n          }\n\n          // valid foursome found between 2 chains:\n          //   chains = iprev-i-inext-ilast and jprev-j-jnext-jlast\n          //   prev or last values are -1 if do not exist due to end of chain\n          //   OK to call angle_eng with -1 atom, since just return 0.0\n          // current energy of foursome =\n          //   E_nb(i,j) + E_nb(i,jnext) + E_nb(inext,j) + E_nb(inext,jnext) +\n          //   E_bond(i,inext) + E_bond(j,jnext) +\n          //   E_angle(iprev,i,inext) + E_angle(i,inext,ilast) +\n          //   E_angle(jprev,j,jnext) + E_angle(j,jnext,jlast)\n          // new energy of foursome with swapped bonds =\n          //   E_nb(i,j) + E_nb(i,inext) + E_nb(j,jnext) + E_nb(inext,jnext) +\n          //   E_bond(i,jnext) + E_bond(j,inext) +\n          //   E_angle(iprev,i,jnext) + E_angle(i,jnext,jlast) +\n          //   E_angle(jprev,j,inext) + E_angle(j,inext,ilast)\n          // energy delta = add/subtract differing terms between 2 formulas\n\n          foursome++;\n\n          delta = pair_eng(i,inext) + pair_eng(j,jnext) -\n            pair_eng(i,jnext) - pair_eng(inext,j);\n          delta += bond_eng(ibondtype,i,jnext) + bond_eng(jbondtype,j,inext) -\n            bond_eng(ibondtype,i,inext) - bond_eng(jbondtype,j,jnext);\n          if (angleflag)\n            delta += angle_eng(iangletype,iprev,i,jnext) +\n              angle_eng(jnextangletype,i,jnext,jlast) +\n              angle_eng(jangletype,jprev,j,inext) +\n              angle_eng(inextangletype,j,inext,ilast) -\n              angle_eng(iangletype,iprev,i,inext) -\n              angle_eng(inextangletype,i,inext,ilast) -\n              angle_eng(jangletype,jprev,j,jnext) -\n              angle_eng(jnextangletype,j,jnext,jlast);\n\n          // if delta <= 0, accept swap\n          // if delta > 0, compute Boltzmann factor with current temperature\n          //   only accept if greater than random value\n          // whether accept or not, exit test loop\n\n          if (delta < 0.0) accept = 1;\n          else {\n            factor = exp(-delta/force->boltz/t_current);\n            if (random->uniform() < factor) accept = 1;\n          }\n          goto done;\n        }\n      }\n    }\n  }\n\n done:\n\n  // trigger immediate reneighboring if any swaps occurred\n\n  int accept_any;\n  MPI_Allreduce(&accept,&accept_any,1,MPI_INT,MPI_SUM,world);\n  if (accept_any) next_reneighbor = update->ntimestep;\n\n  if (!accept) return;\n  naccept++;\n\n  // change bond partners of affected atoms\n  // on atom i: bond i-inext changes to i-jnext\n  // on atom j: bond j-jnext changes to j-inext\n  // on atom inext: bond inext-i changes to inext-j\n  // on atom jnext: bond jnext-j changes to jnext-i\n\n  for (ibond = 0; ibond < num_bond[i]; ibond++)\n    if (bond_atom[i][ibond] == tag[inext]) bond_atom[i][ibond] = tag[jnext];\n  for (jbond = 0; jbond < num_bond[j]; jbond++)\n    if (bond_atom[j][jbond] == tag[jnext]) bond_atom[j][jbond] = tag[inext];\n  for (ibond = 0; ibond < num_bond[inext]; ibond++)\n    if (bond_atom[inext][ibond] == tag[i]) bond_atom[inext][ibond] = tag[j];\n  for (jbond = 0; jbond < num_bond[jnext]; jbond++)\n    if (bond_atom[jnext][jbond] == tag[j]) bond_atom[jnext][jbond] = tag[i];\n\n  // set global tags of 4 atoms in bonds\n\n  itag = tag[i];\n  inexttag = tag[inext];\n\n  jtag = tag[j];\n  jnexttag = tag[jnext];\n\n  // change 1st special neighbors of affected atoms: i,j,inext,jnext\n  // don't need to change 2nd/3rd special neighbors for any atom\n  //   since special bonds = 0 1 1 means they are never used\n\n  for (m = 0; m < nspecial[i][0]; m++)\n    if (special[i][m] == inexttag) special[i][m] = jnexttag;\n  for (m = 0; m < nspecial[j][0]; m++)\n    if (special[j][m] == jnexttag) special[j][m] = inexttag;\n  for (m = 0; m < nspecial[inext][0]; m++)\n    if (special[inext][m] == itag) special[inext][m] = jtag;\n  for (m = 0; m < nspecial[jnext][0]; m++)\n    if (special[jnext][m] == jtag) special[jnext][m] = itag;\n\n  // done if no angles\n\n  if (!angleflag) return;\n\n  // set global tags of 4 additional atoms in angles, 0 if no angle\n\n  if (iprev >= 0) iprevtag = tag[iprev];\n  else iprevtag = 0;\n  if (ilast >= 0) ilasttag = tag[ilast];\n  else ilasttag = 0;\n\n  if (jprev >= 0) jprevtag = tag[jprev];\n  else jprevtag = 0;\n  if (jlast >= 0) jlasttag = tag[jlast];\n  else jlasttag = 0;\n\n  // change angle partners of affected atoms\n  // must check if each angle is stored as a-b-c or c-b-a\n  // on atom i:\n  //   angle iprev-i-inext changes to iprev-i-jnext\n  //   angle i-inext-ilast changes to i-jnext-jlast\n  // on atom j:\n  //   angle jprev-j-jnext changes to jprev-j-inext\n  //   angle j-jnext-jlast changes to j-inext-ilast\n  // on atom inext:\n  //   angle iprev-i-inext changes to jprev-j-inext\n  //   angle i-inext-ilast changes to j-inext-ilast\n  // on atom jnext:\n  //   angle jprev-j-jnext changes to iprev-i-jnext\n  //   angle j-jnext-jlast changes to i-jnext-jlast\n\n  for (iangle = 0; iangle < num_angle[i]; iangle++) {\n    i1 = angle_atom1[i][iangle];\n    i2 = angle_atom2[i][iangle];\n    i3 = angle_atom3[i][iangle];\n\n    if (i1 == iprevtag && i2 == itag && i3 == inexttag)\n      angle_atom3[i][iangle] = jnexttag;\n    else if (i1 == inexttag && i2 == itag && i3 == iprevtag)\n      angle_atom1[i][iangle] = jnexttag;\n    else if (i1 == itag && i2 == inexttag && i3 == ilasttag) {\n      angle_atom2[i][iangle] = jnexttag;\n      angle_atom3[i][iangle] = jlasttag;\n    } else if (i1 == ilasttag && i2 == inexttag && i3 == itag) {\n      angle_atom1[i][iangle] = jlasttag;\n      angle_atom2[i][iangle] = jnexttag;\n    }\n  }\n\n  for (jangle = 0; jangle < num_angle[j]; jangle++) {\n    j1 = angle_atom1[j][jangle];\n    j2 = angle_atom2[j][jangle];\n    j3 = angle_atom3[j][jangle];\n\n    if (j1 == jprevtag && j2 == jtag && j3 == jnexttag)\n      angle_atom3[j][jangle] = inexttag;\n    else if (j1 == jnexttag && j2 == jtag && j3 == jprevtag)\n      angle_atom1[j][jangle] = inexttag;\n    else if (j1 == jtag && j2 == jnexttag && j3 == jlasttag) {\n      angle_atom2[j][jangle] = inexttag;\n      angle_atom3[j][jangle] = ilasttag;\n    } else if (j1 == jlasttag && j2 == jnexttag && j3 == jtag) {\n      angle_atom1[j][jangle] = ilasttag;\n      angle_atom2[j][jangle] = inexttag;\n    }\n  }\n\n  for (iangle = 0; iangle < num_angle[inext]; iangle++) {\n    i1 = angle_atom1[inext][iangle];\n    i2 = angle_atom2[inext][iangle];\n    i3 = angle_atom3[inext][iangle];\n\n    if (i1 == iprevtag && i2 == itag && i3 == inexttag) {\n      angle_atom1[inext][iangle] = jprevtag;\n      angle_atom2[inext][iangle] = jtag;\n    } else if (i1 == inexttag && i2 == itag && i3 == iprevtag) {\n      angle_atom2[inext][iangle] = jtag;\n      angle_atom3[inext][iangle] = jprevtag;\n    } else if (i1 == itag && i2 == inexttag && i3 == ilasttag)\n      angle_atom1[inext][iangle] = jtag;\n    else if (i1 == ilasttag && i2 == inexttag && i3 == itag)\n      angle_atom3[inext][iangle] = jtag;\n  }\n\n  for (jangle = 0; jangle < num_angle[jnext]; jangle++) {\n    j1 = angle_atom1[jnext][jangle];\n    j2 = angle_atom2[jnext][jangle];\n    j3 = angle_atom3[jnext][jangle];\n\n    if (j1 == jprevtag && j2 == jtag && j3 == jnexttag) {\n      angle_atom1[jnext][jangle] = iprevtag;\n      angle_atom2[jnext][jangle] = itag;\n    } else if (j1 == jnexttag && j2 == jtag && j3 == jprevtag) {\n      angle_atom2[jnext][jangle] = itag;\n      angle_atom3[jnext][jangle] = iprevtag;\n    } else if (j1 == jtag && j2 == jnexttag && j3 == jlasttag)\n      angle_atom1[jnext][jangle] = itag;\n    else if (j1 == jlasttag && j2 == jnexttag && j3 == jtag)\n      angle_atom3[jnext][jangle] = itag;\n  }\n\n  // done if newton bond set\n\n  if (newton_bond) return;\n\n  // change angles stored by iprev,ilast,jprev,jlast\n  // on atom iprev: angle iprev-i-inext changes to iprev-i-jnext\n  // on atom jprev: angle jprev-j-jnext changes to jprev-j-inext\n  // on atom ilast: angle i-inext-ilast changes to j-inext-ilast\n  // on atom jlast: angle j-jnext-jlast changes to i-jnext-jlast\n\n  for (iangle = 0; iangle < num_angle[iprev]; iangle++) {\n    i1 = angle_atom1[iprev][iangle];\n    i2 = angle_atom2[iprev][iangle];\n    i3 = angle_atom3[iprev][iangle];\n\n    if (i1 == iprevtag && i2 == itag && i3 == inexttag)\n      angle_atom3[iprev][iangle] = jnexttag;\n    else if (i1 == inexttag && i2 == itag && i3 == iprevtag)\n      angle_atom1[iprev][iangle] = jnexttag;\n  }\n\n  for (jangle = 0; jangle < num_angle[jprev]; jangle++) {\n    j1 = angle_atom1[jprev][jangle];\n    j2 = angle_atom2[jprev][jangle];\n    j3 = angle_atom3[jprev][jangle];\n\n    if (j1 == jprevtag && j2 == jtag && j3 == jnexttag)\n      angle_atom3[jprev][jangle] = inexttag;\n    else if (j1 == jnexttag && j2 == jtag && j3 == jprevtag)\n      angle_atom1[jprev][jangle] = inexttag;\n  }\n\n  for (iangle = 0; iangle < num_angle[ilast]; iangle++) {\n    i1 = angle_atom1[ilast][iangle];\n    i2 = angle_atom2[ilast][iangle];\n    i3 = angle_atom3[ilast][iangle];\n\n    if (i1 == itag && i2 == inexttag && i3 == ilasttag)\n      angle_atom1[ilast][iangle] = jtag;\n    else if (i1 == ilasttag && i2 == inexttag && i3 == itag)\n      angle_atom3[ilast][iangle] = jtag;\n  }\n\n  for (jangle = 0; jangle < num_angle[jlast]; jangle++) {\n    j1 = angle_atom1[jlast][jangle];\n    j2 = angle_atom2[jlast][jangle];\n    j3 = angle_atom3[jlast][jangle];\n\n    if (j1 == jtag && j2 == jnexttag && j3 == jlasttag)\n      angle_atom1[jlast][jangle] = itag;\n    else if (j1 == jlasttag && j2 == jnexttag && j3 == jtag)\n      angle_atom3[jlast][jangle] = itag;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixBondSwap::modify_param(int narg, char **arg)\n{\n  if (strcmp(arg[0],\"temp\") == 0) {\n    if (narg < 2) error->all(FLERR,\"Illegal fix_modify command\");\n    if (tflag) {\n      modify->delete_compute(id_temp);\n      tflag = 0;\n    }\n    delete [] id_temp;\n    int n = strlen(arg[1]) + 1;\n    id_temp = new char[n];\n    strcpy(id_temp,arg[1]);\n\n    int icompute = modify->find_compute(id_temp);\n    if (icompute < 0)\n      error->all(FLERR,\"Could not find fix_modify temperature ID\");\n    temperature = modify->compute[icompute];\n\n    if (temperature->tempflag == 0)\n      error->all(FLERR,\"Fix_modify temperature ID does not \"\n                 \"compute temperature\");\n    if (temperature->igroup != igroup && comm->me == 0)\n      error->warning(FLERR,\"Group for fix_modify temp != fix group\");\n    return 2;\n  }\n  return 0;\n}\n\n/* ----------------------------------------------------------------------\n   compute squared distance between atoms I,J\n   must use minimum_image since J was found thru atom->map()\n------------------------------------------------------------------------- */\n\ndouble FixBondSwap::dist_rsq(int i, int j)\n{\n  double delx = x[i][0] - x[j][0];\n  double dely = x[i][1] - x[j][1];\n  double delz = x[i][2] - x[j][2];\n  domain->minimum_image(delx,dely,delz);\n  return (delx*delx + dely*dely + delz*delz);\n}\n\n/* ----------------------------------------------------------------------\n   return pairwise interaction energy between atoms I,J\n   will always be full non-bond interaction, so factors = 1 in single() call\n------------------------------------------------------------------------- */\n\ndouble FixBondSwap::pair_eng(int i, int j)\n{\n  double tmp;\n  double rsq = dist_rsq(i,j);\n  return force->pair->single(i,j,type[i],type[j],rsq,1.0,1.0,tmp);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble FixBondSwap::bond_eng(int btype, int i, int j)\n{\n  double tmp;\n  double rsq = dist_rsq(i,j);\n  return force->bond->single(btype,rsq,i,j,tmp);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble FixBondSwap::angle_eng(int atype, int i, int j, int k)\n{\n  // test for non-existent angle at end of chain\n\n  if (i == -1 || k == -1) return 0.0;\n  return force->angle->single(atype,i,j,k);\n}\n\n/* ----------------------------------------------------------------------\n   return bond swapping stats\n   n = 1 is # of swaps\n   n = 2 is # of attempted swaps\n------------------------------------------------------------------------- */\n\ndouble FixBondSwap::compute_vector(int n)\n{\n  double one,all;\n  if (n == 0) one = naccept;\n  else one = foursome;\n  MPI_Allreduce(&one,&all,1,MPI_DOUBLE,MPI_SUM,world);\n  return all;\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of alist\n------------------------------------------------------------------------- */\n\ndouble FixBondSwap::memory_usage()\n{\n  double bytes = nmax * sizeof(int);\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include \"improper_harmonic.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n\n/* ---------------------------------------------------------------------- */\n\nImproperHarmonic::ImproperHarmonic(LAMMPS *lmp) : Improper(lmp)\n{\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nImproperHarmonic::~ImproperHarmonic()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(chi);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ImproperHarmonic::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z;\n  double eimproper,f1[3],f2[3],f3[3],f4[3];\n  double ss1,ss2,ss3,r1,r2,r3,c0,c1,c2,s1,s2;\n  double s12,c,s,domega,a,a11,a22,a33,a12,a13,a23;\n  double sx2,sy2,sz2;\n\n  eimproper = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **improperlist = neighbor->improperlist;\n  int nimproperlist = neighbor->nimproperlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nimproperlist; n++) {\n    i1 = improperlist[n][0];\n    i2 = improperlist[n][1];\n    i3 = improperlist[n][2];\n    i4 = improperlist[n][3];\n    type = improperlist[n][4];\n\n    // geometry of 4-body\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    ss1 = 1.0 / (vb1x*vb1x + vb1y*vb1y + vb1z*vb1z);\n    ss2 = 1.0 / (vb2x*vb2x + vb2y*vb2y + vb2z*vb2z);\n    ss3 = 1.0 / (vb3x*vb3x + vb3y*vb3y + vb3z*vb3z);\n\n    r1 = sqrt(ss1);\n    r2 = sqrt(ss2);\n    r3 = sqrt(ss3);\n\n    // sin and cos of angle\n\n    c0 = (vb1x * vb3x + vb1y * vb3y + vb1z * vb3z) * r1 * r3;\n    c1 = (vb1x * vb2x + vb1y * vb2y + vb1z * vb2z) * r1 * r2;\n    c2 = -(vb3x * vb2x + vb3y * vb2y + vb3z * vb2z) * r3 * r2;\n\n    s1 = 1.0 - c1*c1;\n    if (s1 < SMALL) s1 = SMALL;\n    s1 = 1.0 / s1;\n\n    s2 = 1.0 - c2*c2;\n    if (s2 < SMALL) s2 = SMALL;\n    s2 = 1.0 / s2;\n\n    s12 = sqrt(s1*s2);\n    c = (c1*c2 + c0) * s12;\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Improper problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n\n    // force & energy\n\n    domega = acos(c) - chi[type];\n    a = k[type] * domega;\n\n    if (eflag) eimproper = a*domega;\n\n    a = -a * 2.0/s;\n    c = c * a;\n    s12 = s12 * a;\n    a11 = c*ss1*s1;\n    a22 = -ss2 * (2.0*c0*s12 - c*(s1+s2));\n    a33 = c*ss3*s2;\n    a12 = -r1*r2*(c1*c*s1 + c2*s12);\n    a13 = -r1*r3*s12;\n    a23 = r2*r3*(c2*c*s2 + c1*s12);\n\n    sx2  = a22*vb2x + a23*vb3x + a12*vb1x;\n    sy2  = a22*vb2y + a23*vb3y + a12*vb1y;\n    sz2  = a22*vb2z + a23*vb3z + a12*vb1z;\n\n    f1[0] = a12*vb2x + a13*vb3x + a11*vb1x;\n    f1[1] = a12*vb2y + a13*vb3y + a11*vb1y;\n    f1[2] = a12*vb2z + a13*vb3z + a11*vb1z;\n\n    f2[0] = -sx2 - f1[0];\n    f2[1] = -sy2 - f1[1];\n    f2[2] = -sz2 - f1[2];\n\n    f4[0] = a23*vb2x + a33*vb3x + a13*vb1x;\n    f4[1] = a23*vb2y + a33*vb3y + a13*vb1y;\n    f4[2] = a23*vb2z + a33*vb3z + a13*vb1z;\n\n    f3[0] = sx2 - f4[0];\n    f3[1] = sy2 - f4[1];\n    f3[2] = sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,eimproper,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid ImproperHarmonic::allocate()\n{\n  allocated = 1;\n  int n = atom->nimpropertypes;\n\n  memory->create(k,n+1,\"improper:k\");\n  memory->create(chi,n+1,\"improper:chi\");\n\n  memory->create(setflag,n+1,\"improper:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid ImproperHarmonic::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Incorrect args for improper coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nimpropertypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double chi_one = force->numeric(FLERR,arg[2]);\n\n  // convert chi from degrees to radians\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    chi[i] = chi_one/180.0 * MY_PI;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for improper coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid ImproperHarmonic::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nimpropertypes,fp);\n  fwrite(&chi[1],sizeof(double),atom->nimpropertypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid ImproperHarmonic::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nimpropertypes,fp);\n    fread(&chi[1],sizeof(double),atom->nimpropertypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nimpropertypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&chi[1],atom->nimpropertypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nimpropertypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid ImproperHarmonic::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nimpropertypes; i++)\n    fprintf(fp,\"%d %g %g\\n\",i,k[i],chi[i]/MY_PI*180.0);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Mark Stevens (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"dihedral_opls.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"update.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define TOLERANCE 0.05\n#define SMALL     0.001\n#define SMALLER   0.00001\n\n/* ---------------------------------------------------------------------- */\n\nDihedralOPLS::DihedralOPLS(LAMMPS *lmp) : Dihedral(lmp)\n{\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nDihedralOPLS::~DihedralOPLS()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k1);\n    memory->destroy(k2);\n    memory->destroy(k3);\n    memory->destroy(k4);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralOPLS::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double edihedral,f1[3],f2[3],f3[3],f4[3];\n  double sb1,sb2,sb3,rb1,rb3,c0,b1mag2,b1mag,b2mag2;\n  double b2mag,b3mag2,b3mag,ctmp,r12c1,c1mag,r12c2;\n  double c2mag,sc1,sc2,s1,s12,c,p,pd,a,a11,a22;\n  double a33,a12,a13,a23,sx2,sy2,sz2;\n  double s2,cx,cy,cz,cmag,dx,phi,si,siinv,sin2;\n\n  edihedral = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **dihedrallist = neighbor->dihedrallist;\n  int ndihedrallist = neighbor->ndihedrallist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < ndihedrallist; n++) {\n    i1 = dihedrallist[n][0];\n    i2 = dihedrallist[n][1];\n    i3 = dihedrallist[n][2];\n    i4 = dihedrallist[n][3];\n    type = dihedrallist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    // c0 calculation\n\n    sb1 = 1.0 / (vb1x*vb1x + vb1y*vb1y + vb1z*vb1z);\n    sb2 = 1.0 / (vb2x*vb2x + vb2y*vb2y + vb2z*vb2z);\n    sb3 = 1.0 / (vb3x*vb3x + vb3y*vb3y + vb3z*vb3z);\n\n    rb1 = sqrt(sb1);\n    rb3 = sqrt(sb3);\n\n    c0 = (vb1x*vb3x + vb1y*vb3y + vb1z*vb3z) * rb1*rb3;\n\n    // 1st and 2nd angle\n\n    b1mag2 = vb1x*vb1x + vb1y*vb1y + vb1z*vb1z;\n    b1mag = sqrt(b1mag2);\n    b2mag2 = vb2x*vb2x + vb2y*vb2y + vb2z*vb2z;\n    b2mag = sqrt(b2mag2);\n    b3mag2 = vb3x*vb3x + vb3y*vb3y + vb3z*vb3z;\n    b3mag = sqrt(b3mag2);\n\n    ctmp = vb1x*vb2x + vb1y*vb2y + vb1z*vb2z;\n    r12c1 = 1.0 / (b1mag*b2mag);\n    c1mag = ctmp * r12c1;\n\n    ctmp = vb2xm*vb3x + vb2ym*vb3y + vb2zm*vb3z;\n    r12c2 = 1.0 / (b2mag*b3mag);\n    c2mag = ctmp * r12c2;\n\n    // cos and sin of 2 angles and final c\n\n    sin2 = MAX(1.0 - c1mag*c1mag,0.0);\n    sc1 = sqrt(sin2);\n    if (sc1 < SMALL) sc1 = SMALL;\n    sc1 = 1.0/sc1;\n\n    sin2 = MAX(1.0 - c2mag*c2mag,0.0);\n    sc2 = sqrt(sin2);\n    if (sc2 < SMALL) sc2 = SMALL;\n    sc2 = 1.0/sc2;\n\n    s1 = sc1 * sc1;\n    s2 = sc2 * sc2;\n    s12 = sc1 * sc2;\n    c = (c0 + c1mag*c2mag) * s12;\n\n    cx = vb1y*vb2z - vb1z*vb2y;\n    cy = vb1z*vb2x - vb1x*vb2z;\n    cz = vb1x*vb2y - vb1y*vb2x;\n    cmag = sqrt(cx*cx + cy*cy + cz*cz);\n    dx = (cx*vb3x + cy*vb3y + cz*vb3z)/cmag/b3mag;\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Dihedral problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    // force & energy\n    // p = sum (i=1,4) k_i * (1 + (-1)**(i+1)*cos(i*phi) )\n    // pd = dp/dc\n\n    phi = acos(c);\n    if (dx < 0.0) phi *= -1.0;\n    si = sin(phi);\n    if (fabs(si) < SMALLER) si = SMALLER;\n    siinv = 1.0/si;\n\n    p = k1[type]*(1.0 + c) + k2[type]*(1.0 - cos(2.0*phi)) +\n      k3[type]*(1.0 + cos(3.0*phi)) + k4[type]*(1.0 - cos(4.0*phi)) ;\n    pd = k1[type] - 2.0*k2[type]*sin(2.0*phi)*siinv +\n      3.0*k3[type]*sin(3.0*phi)*siinv - 4.0*k4[type]*sin(4.0*phi)*siinv;\n\n    if (eflag) edihedral = p;\n\n    a = pd;\n    c = c * a;\n    s12 = s12 * a;\n    a11 = c*sb1*s1;\n    a22 = -sb2 * (2.0*c0*s12 - c*(s1+s2));\n    a33 = c*sb3*s2;\n    a12 = -r12c1 * (c1mag*c*s1 + c2mag*s12);\n    a13 = -rb1*rb3*s12;\n    a23 = r12c2 * (c2mag*c*s2 + c1mag*s12);\n\n    sx2  = a12*vb1x + a22*vb2x + a23*vb3x;\n    sy2  = a12*vb1y + a22*vb2y + a23*vb3y;\n    sz2  = a12*vb1z + a22*vb2z + a23*vb3z;\n\n    f1[0] = a11*vb1x + a12*vb2x + a13*vb3x;\n    f1[1] = a11*vb1y + a12*vb2y + a13*vb3y;\n    f1[2] = a11*vb1z + a12*vb2z + a13*vb3z;\n\n    f2[0] = -sx2 - f1[0];\n    f2[1] = -sy2 - f1[1];\n    f2[2] = -sz2 - f1[2];\n\n    f4[0] = a13*vb1x + a23*vb2x + a33*vb3x;\n    f4[1] = a13*vb1y + a23*vb2y + a33*vb3y;\n    f4[2] = a13*vb1z + a23*vb2z + a33*vb3z;\n\n    f3[0] = sx2 - f4[0];\n    f3[1] = sy2 - f4[1];\n    f3[2] = sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,edihedral,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralOPLS::allocate()\n{\n  allocated = 1;\n  int n = atom->ndihedraltypes;\n\n  memory->create(k1,n+1,\"dihedral:k1\");\n  memory->create(k2,n+1,\"dihedral:k2\");\n  memory->create(k3,n+1,\"dihedral:k3\");\n  memory->create(k4,n+1,\"dihedral:k4\");\n\n  memory->create(setflag,n+1,\"dihedral:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid DihedralOPLS::coeff(int narg, char **arg)\n{\n  if (narg != 5) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->ndihedraltypes,ilo,ihi);\n\n  double k1_one = force->numeric(FLERR,arg[1]);\n  double k2_one = force->numeric(FLERR,arg[2]);\n  double k3_one = force->numeric(FLERR,arg[3]);\n  double k4_one = force->numeric(FLERR,arg[4]);\n\n  // store 1/2 factor with prefactor\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k1[i] = 0.5*k1_one;\n    k2[i] = 0.5*k2_one;\n    k3[i] = 0.5*k3_one;\n    k4[i] = 0.5*k4_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid DihedralOPLS::write_restart(FILE *fp)\n{\n  fwrite(&k1[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&k2[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&k3[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&k4[1],sizeof(double),atom->ndihedraltypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid DihedralOPLS::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k1[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&k2[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&k3[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&k4[1],sizeof(double),atom->ndihedraltypes,fp);\n  }\n  MPI_Bcast(&k1[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&k2[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&k3[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&k4[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->ndihedraltypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid DihedralOPLS::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ndihedraltypes; i++)\n    fprintf(fp,\"%d %g %g %g %g\\n\",i,2.0*k1[i],2.0*k2[i],2.0*k3[i],2.0*k4[i]);\n}\n\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Xiaowang Zhou (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_eim.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n\n/* ---------------------------------------------------------------------- */\n\nPairEIM::PairEIM(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  setfl = NULL;\n  nmax = 0;\n  rho = NULL;\n  fp = NULL;\n  map = NULL;\n\n  nelements = 0;\n  elements = NULL;\n\n  negativity = NULL;\n  q0 = NULL;\n  cutforcesq = NULL;\n  Fij = NULL;\n  Gij = NULL;\n  phiij = NULL;\n\n  Fij_spline = NULL;\n  Gij_spline = NULL;\n  phiij_spline = NULL;\n\n  // set comm size needed by this Pair\n\n  comm_forward = 1;\n  comm_reverse = 1;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairEIM::~PairEIM()\n{\n  memory->destroy(rho);\n  memory->destroy(fp);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n    memory->destroy(type2Fij);\n    memory->destroy(type2Gij);\n    memory->destroy(type2phiij);\n  }\n\n  for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n\n  deallocate_setfl();\n\n  delete [] negativity;\n  delete [] q0;\n  memory->destroy(cutforcesq);\n  memory->destroy(Fij);\n  memory->destroy(Gij);\n  memory->destroy(phiij);\n\n  memory->destroy(Fij_spline);\n  memory->destroy(Gij_spline);\n  memory->destroy(phiij_spline);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEIM::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,m,inum,jnum,itype,jtype;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,r,p,rhoip,rhojp,phip,phi,coul,coulp,recip,psip;\n  double *coeff;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = eflag_global = eflag_atom = 0;\n\n  // grow energy array if necessary\n\n  if (atom->nmax > nmax) {\n    memory->destroy(rho);\n    memory->destroy(fp);\n    nmax = atom->nmax;\n    memory->create(rho,nmax,\"pair:rho\");\n    memory->create(fp,nmax,\"pair:fp\");\n  }\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // zero out density\n\n  if (newton_pair) {\n    m = nlocal + atom->nghost;\n    for (i = 0; i < m; i++) {\n      rho[i] = 0.0;\n      fp[i] = 0.0;\n    }\n  } else {\n    for (i = 0; i < nlocal; i++) {\n      rho[i] = 0.0;\n      fp[i] = 0.0;\n    }\n  }\n\n  // rho = density at each atom\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = type[j];\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq[itype][jtype]) {\n        p = sqrt(rsq)*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n        coeff = Fij_spline[type2Fij[itype][jtype]][m];\n        rho[i] += ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        if (newton_pair || j < nlocal) {\n          coeff = Fij_spline[type2Fij[jtype][itype]][m];\n          rho[j] += ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        }\n      }\n    }\n  }\n\n  // communicate and sum densities\n\n  rhofp = 1;\n  if (newton_pair) comm->reverse_comm_pair(this);\n  comm->forward_comm_pair(this);\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = type[j];\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq[itype][jtype]) {\n        p = sqrt(rsq)*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n        coeff = Gij_spline[type2Gij[itype][jtype]][m];\n        fp[i] += rho[j]*(((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6]);\n        if (newton_pair || j < nlocal) {\n          fp[j] += rho[i]*(((coeff[3]*p + coeff[4])*p + coeff[5])*p +\n                           coeff[6]);\n        }\n      }\n    }\n  }\n\n  // communicate and sum modified densities\n\n  rhofp = 2;\n  if (newton_pair) comm->reverse_comm_pair(this);\n  comm->forward_comm_pair(this);\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itype = type[i];\n    if (eflag) {\n      phi = 0.5*rho[i]*fp[i];\n      if (eflag_global) eng_vdwl += phi;\n      if (eflag_atom) eatom[i] += phi;\n    }\n  }\n\n  // compute forces on each atom\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = type[j];\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq[itype][jtype]) {\n        r = sqrt(rsq);\n        p = r*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n\n        // rhoip = derivative of (density at atom j due to atom i)\n        // rhojp = derivative of (density at atom i due to atom j)\n        // phi = pair potential energy\n        // phip = phi'\n\n        coeff = Fij_spline[type2Fij[jtype][itype]][m];\n        rhoip = (coeff[0]*p + coeff[1])*p + coeff[2];\n        coeff = Fij_spline[type2Fij[itype][jtype]][m];\n        rhojp = (coeff[0]*p + coeff[1])*p + coeff[2];\n        coeff = phiij_spline[type2phiij[itype][jtype]][m];\n        phip = (coeff[0]*p + coeff[1])*p + coeff[2];\n        phi = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        coeff = Gij_spline[type2Gij[itype][jtype]][m];\n        coul = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        coulp = (coeff[0]*p + coeff[1])*p + coeff[2];\n        psip = phip + (rho[i]*rho[j]-q0[itype]*q0[jtype])*coulp +\n               fp[i]*rhojp + fp[j]*rhoip;\n        recip = 1.0/r;\n        fpair = -psip*recip;\n        f[i][0] += delx*fpair;\n        f[i][1] += dely*fpair;\n        f[i][2] += delz*fpair;\n        if (newton_pair || j < nlocal) {\n          f[j][0] -= delx*fpair;\n          f[j][1] -= dely*fpair;\n          f[j][2] -= delz*fpair;\n        }\n\n        if (eflag) evdwl = phi-q0[itype]*q0[jtype]*coul;\n        if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                             evdwl,0.0,fpair,delx,dely,delz);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairEIM::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  map = new int[n+1];\n  for (int i = 1; i <= n; i++) map[i] = -1;\n\n  memory->create(type2Fij,n+1,n+1,\"pair:type2Fij\");\n  memory->create(type2Gij,n+1,n+1,\"pair:type2Gij\");\n  memory->create(type2phiij,n+1,n+1,\"pair:type2phiij\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairEIM::settings(int narg, char **arg)\n{\n  if (narg > 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs from set file\n------------------------------------------------------------------------- */\n\nvoid PairEIM::coeff(int narg, char **arg)\n{\n  int i,j,m,n;\n\n  if (!allocated) allocate();\n\n  if (narg < 5) error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read EIM element names before filename\n  // nelements = # of EIM elements to read from file\n  // elements = list of unique element names\n\n  if (nelements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  nelements = narg - 3 - atom->ntypes;\n  if (nelements < 1) error->all(FLERR,\"Incorrect args for pair coefficients\");\n  elements = new char*[nelements];\n\n  for (i = 0; i < nelements; i++) {\n    n = strlen(arg[i+2]) + 1;\n    elements[i] = new char[n];\n    strcpy(elements[i],arg[i+2]);\n  }\n\n  // read EIM file\n\n  deallocate_setfl();\n  setfl = new Setfl();\n  read_file(arg[2+nelements]);\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n\n  for (i = 3 + nelements; i < narg; i++) {\n    m = i - (3+nelements) + 1;\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    if (j < nelements) map[m] = j;\n    else if (strcmp(arg[i],\"NULL\") == 0) map[m] = -1;\n    else error->all(FLERR,\"Incorrect args for pair coefficients\");\n  }\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n  // set mass of atom type if i = j\n\n  int count = 0;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        if (i == j) atom->set_mass(FLERR,i,setfl->mass[map[i]]);\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairEIM::init_style()\n{\n  // convert read-in file(s) to arrays and spline them\n\n  file2array();\n  array2spline();\n\n  neighbor->request(this,instance_me);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairEIM::init_one(int i, int j)\n{\n  cutmax = sqrt(cutforcesq[i][j]);\n  return cutmax;\n}\n\n/* ----------------------------------------------------------------------\n   read potential values from a set file\n------------------------------------------------------------------------- */\n\nvoid PairEIM::read_file(char *filename)\n{\n  // open potential file\n\n  int me = comm->me;\n  FILE *fptr;\n\n  if (me == 0) {\n    fptr = force->open_potential(filename);\n    if (fptr == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open EIM potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n  }\n\n  int npair = nelements*(nelements+1)/2;\n  setfl->ielement = new int[nelements];\n  setfl->mass = new double[nelements];\n  setfl->negativity = new double[nelements];\n  setfl->ra = new double[nelements];\n  setfl->ri = new double[nelements];\n  setfl->Ec = new double[nelements];\n  setfl->q0 = new double[nelements];\n  setfl->rcutphiA = new double[npair];\n  setfl->rcutphiR = new double[npair];\n  setfl->Eb = new double[npair];\n  setfl->r0 = new double[npair];\n  setfl->alpha = new double[npair];\n  setfl->beta = new double[npair];\n  setfl->rcutq = new double[npair];\n  setfl->Asigma = new double[npair];\n  setfl->rq = new double[npair];\n  setfl->rcutsigma = new double[npair];\n  setfl->Ac = new double[npair];\n  setfl->zeta = new double[npair];\n  setfl->rs = new double[npair];\n  setfl->tp = new int[npair];\n\n  if (me == 0)\n    if (!grabglobal(fptr))\n      error->one(FLERR,\"Could not grab global entry from EIM potential file\");\n  MPI_Bcast(&setfl->division,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&setfl->rbig,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&setfl->rsmall,1,MPI_DOUBLE,0,world);\n\n  for (int i = 0; i < nelements; i++) {\n    if (me == 0)\n      if (!grabsingle(fptr,i))\n        error->one(FLERR,\"Could not grab element entry from EIM potential file\");\n    MPI_Bcast(&setfl->ielement[i],1,MPI_INT,0,world);\n    MPI_Bcast(&setfl->mass[i],1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&setfl->negativity[i],1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&setfl->ra[i],1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&setfl->ri[i],1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&setfl->Ec[i],1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&setfl->q0[i],1,MPI_DOUBLE,0,world);\n  }\n\n  for (int i = 0; i < nelements; i++) {\n    for (int j = i; j < nelements; j++) {\n      int ij;\n      if (i == j) ij = i;\n      else if (i < j) ij = nelements*(i+1) - (i+1)*(i+2)/2 + j;\n      else ij = nelements*(j+1) - (j+1)*(j+2)/2 + i;\n      if (me == 0)\n        if (grabpair(fptr,i,j) == 0)\n          error->one(FLERR,\"Could not grab pair entry from EIM potential file\");\n      MPI_Bcast(&setfl->rcutphiA[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->rcutphiR[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->Eb[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->r0[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->alpha[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->beta[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->rcutq[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->Asigma[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->rq[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->rcutsigma[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->Ac[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->zeta[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->rs[ij],1,MPI_DOUBLE,0,world);\n      MPI_Bcast(&setfl->tp[ij],1,MPI_INT,0,world);\n    }\n  }\n\n  setfl->nr = 5000;\n  setfl->cut = 0.0;\n  for (int i = 0; i < npair; i++) {\n    if (setfl->cut < setfl->rcutphiA[i]) setfl->cut = setfl->rcutphiA[i];\n    if (setfl->cut < setfl->rcutphiR[i]) setfl->cut = setfl->rcutphiR[i];\n    if (setfl->cut < setfl->rcutq[i]) setfl->cut = setfl->rcutq[i];\n    if (setfl->cut < setfl->rcutsigma[i]) setfl->cut = setfl->rcutsigma[i];\n  }\n  setfl->dr = setfl->cut/(setfl->nr-1.0);\n\n  memory->create(setfl->cuts,nelements,nelements,\"pair:cuts\");\n  for (int i = 0; i < nelements; i++) {\n    for (int j = 0; j < nelements; j++) {\n      if (i > j) {\n        setfl->cuts[i][j] = setfl->cuts[j][i];\n      } else {\n        int ij;\n        if (i == j) {\n          ij = i;\n        } else {\n          ij = nelements*(i+1) - (i+1)*(i+2)/2 + j;\n        }\n        setfl->cuts[i][j] = setfl->rcutphiA[ij];\n        if (setfl->cuts[i][j] < setfl->rcutphiR[ij])\n          setfl->cuts[i][j] = setfl->rcutphiR[ij];\n        if (setfl->cuts[i][j] < setfl->rcutq[ij])\n          setfl->cuts[i][j] = setfl->rcutq[ij];\n        if (setfl->cuts[i][j] < setfl->rcutsigma[ij])\n          setfl->cuts[i][j] = setfl->rcutsigma[ij];\n      }\n    }\n  }\n\n  memory->create(setfl->Fij,nelements,nelements,setfl->nr+1,\"pair:Fij\");\n  memory->create(setfl->Gij,nelements,nelements,setfl->nr+1,\"pair:Gij\");\n  memory->create(setfl->phiij,nelements,nelements,setfl->nr+1,\"pair:phiij\");\n\n  for (int i = 0; i < nelements; i++)\n    for (int j = 0; j < nelements; j++) {\n      for (int k = 0; k < setfl->nr; k++) {\n        if (i > j) {\n          setfl->phiij[i][j][k+1] = setfl->phiij[j][i][k+1];\n        } else {\n          double r = k*setfl->dr;\n          setfl->phiij[i][j][k+1] = funcphi(i,j,r);\n        }\n      }\n    }\n\n  for (int i = 0; i < nelements; i++)\n    for (int j = 0; j < nelements; j++) {\n      for (int k = 0; k < setfl->nr; k++) {\n        double r = k*setfl->dr;\n        setfl->Fij[i][j][k+1] = funcsigma(i,j,r);\n      }\n    }\n\n  for (int i = 0; i < nelements; i++)\n    for (int j = 0; j < nelements; j++) {\n      for (int k = 0; k < setfl->nr; k++) {\n        if (i > j) {\n          setfl->Gij[i][j][k+1] = setfl->Gij[j][i][k+1];\n        } else {\n          double r = k*setfl->dr;\n          setfl->Gij[i][j][k+1] = funccoul(i,j,r);\n        }\n      }\n    }\n\n  // close the potential file\n\n  if (me == 0) fclose(fptr);\n}\n\n/* ----------------------------------------------------------------------\n   deallocate data associated with setfl file\n------------------------------------------------------------------------- */\n\nvoid PairEIM::deallocate_setfl()\n{\n  if (!setfl) return;\n  delete [] setfl->ielement;\n  delete [] setfl->mass;\n  delete [] setfl->negativity;\n  delete [] setfl->ra;\n  delete [] setfl->ri;\n  delete [] setfl->Ec;\n  delete [] setfl->q0;\n  delete [] setfl->rcutphiA;\n  delete [] setfl->rcutphiR;\n  delete [] setfl->Eb;\n  delete [] setfl->r0;\n  delete [] setfl->alpha;\n  delete [] setfl->beta;\n  delete [] setfl->rcutq;\n  delete [] setfl->Asigma;\n  delete [] setfl->rq;\n  delete [] setfl->rcutsigma;\n  delete [] setfl->Ac;\n  delete [] setfl->zeta;\n  delete [] setfl->rs;\n  delete [] setfl->tp;\n  memory->destroy(setfl->cuts);\n  memory->destroy(setfl->Fij);\n  memory->destroy(setfl->Gij);\n  memory->destroy(setfl->phiij);\n  delete setfl;\n}\n\n/* ----------------------------------------------------------------------\n   convert read-in potentials to standard array format\n   interpolate all file values to a single grid and cutoff\n------------------------------------------------------------------------- */\n\nvoid PairEIM::file2array()\n{\n  int i,j,m,n;\n  int irow,icol;\n  int ntypes = atom->ntypes;\n\n  delete [] negativity;\n  delete [] q0;\n  delete [] cutforcesq;\n  negativity = new double[ntypes+1];\n  q0 = new double[ntypes+1];\n  memory->create(cutforcesq,ntypes+1,ntypes+1,\"pair:cutforcesq\");\n  for (i = 1; i <= ntypes; i++) {\n    if (map[i] == -1) {\n      negativity[i]=0.0;\n      q0[i]=0.0;\n    } else {\n      negativity[i]=setfl->negativity[map[i]];\n      q0[i]=setfl->q0[map[i]];\n    }\n  }\n\n  for (i = 1; i <= ntypes; i++)\n    for (j = 1; j <= ntypes; j++) {\n      if (map[i] == -1 || map[j] == -1) {\n        cutforcesq[i][j] = setfl->cut;\n        cutforcesq[i][j] =  cutforcesq[i][j]*cutforcesq[i][j];\n      } else {\n        cutforcesq[i][j] = setfl->cuts[map[i]][map[j]];\n        cutforcesq[i][j] =  cutforcesq[i][j]*cutforcesq[i][j];\n      }\n    }\n\n  nr = setfl->nr;\n  dr = setfl->dr;\n\n  // ------------------------------------------------------------------\n  // setup Fij arrays\n  // ------------------------------------------------------------------\n\n  nFij = nelements*nelements + 1;\n  memory->destroy(Fij);\n  memory->create(Fij,nFij,nr+1,\"pair:Fij\");\n\n  // copy each element's Fij to global Fij\n\n  n=0;\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++) {\n      for (m = 1; m <= nr; m++) Fij[n][m] = setfl->Fij[i][j][m];\n      n++;\n    }\n\n  // add extra Fij of zeroes for non-EIM types to point to (pair hybrid)\n\n  for (m = 1; m <= nr; m++) Fij[nFij-1][m] = 0.0;\n\n  // type2Fij[i][j] = which Fij array (0 to nFij-1) each type pair maps to\n  // setfl of Fij arrays\n  // value = n = sum over rows of matrix until reach irow,icol\n  // if atom type doesn't point to element (non-EIM atom in pair hybrid)\n  // then map it to last Fij array of zeroes\n\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) {\n        type2Fij[i][j] = nFij-1;\n      } else {\n        n = 0;\n        for (m = 0; m < irow; m++) n += nelements;\n        n += icol;\n        type2Fij[i][j] = n;\n      }\n    }\n  }\n\n  // ------------------------------------------------------------------\n  // setup Gij arrays\n  // ------------------------------------------------------------------\n\n  nGij = nelements * (nelements+1) / 2 + 1;\n  memory->destroy(Gij);\n  memory->create(Gij,nGij,nr+1,\"pair:Gij\");\n\n  // copy each element's Gij to global Gij, only for I >= J\n\n  n=0;\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) Gij[n][m] = setfl->Gij[i][j][m];\n      n++;\n    }\n\n  // add extra Gij of zeroes for non-EIM types to point to (pair hybrid)\n\n  for (m = 1; m <= nr; m++) Gij[nGij-1][m] = 0.0;\n\n  // type2Gij[i][j] = which Gij array (0 to nGij-1) each type pair maps to\n  // setfl of Gij arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // if atom type doesn't point to element (non-EIM atom in pair hybrid)\n  // then map it to last Gij array of zeroes\n\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) {\n        type2Gij[i][j] = nGij-1;\n      } else {\n        if (irow < icol) {\n          irow = map[j];\n          icol = map[i];\n        }\n        n = 0;\n        for (m = 0; m < irow; m++) n += m + 1;\n        n += icol;\n        type2Gij[i][j] = n;\n      }\n    }\n  }\n\n  // ------------------------------------------------------------------\n  // setup phiij arrays\n  // ------------------------------------------------------------------\n\n  nphiij = nelements * (nelements+1) / 2 + 1;\n  memory->destroy(phiij);\n  memory->create(phiij,nphiij,nr+1,\"pair:phiij\");\n\n  // copy each element pair phiij to global phiij, only for I >= J\n\n  n = 0;\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) phiij[n][m] = setfl->phiij[i][j][m];\n      n++;\n    }\n\n  // add extra phiij of zeroes for non-EIM types to point to (pair hybrid)\n\n  for (m = 1; m <= nr; m++) phiij[nphiij-1][m] = 0.0;\n\n  // type2phiij[i][j] = which phiij array (0 to nphiij-1)\n  //                    each type pair maps to\n  // setfl of phiij arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // if atom type doesn't point to element (non-EIM atom in pair hybrid)\n  // then map it to last phiij array of zeroes\n\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) {\n        type2phiij[i][j] = nphiij-1;\n      } else {\n        if (irow < icol) {\n          irow = map[j];\n          icol = map[i];\n        }\n        n = 0;\n        for (m = 0; m < irow; m++) n += m + 1;\n        n += icol;\n        type2phiij[i][j] = n;\n      }\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEIM::array2spline()\n{\n  rdr = 1.0/dr;\n\n  memory->destroy(Fij_spline);\n  memory->destroy(Gij_spline);\n  memory->destroy(phiij_spline);\n\n  memory->create(Fij_spline,nFij,nr+1,7,\"pair:Fij\");\n  memory->create(Gij_spline,nGij,nr+1,7,\"pair:Gij\");\n  memory->create(phiij_spline,nphiij,nr+1,7,\"pair:phiij\");\n\n  for (int i = 0; i < nFij; i++)\n    interpolate(nr,dr,Fij[i],Fij_spline[i],0.0);\n\n  for (int i = 0; i < nGij; i++)\n    interpolate(nr,dr,Gij[i],Gij_spline[i],0.0);\n\n  for (int i = 0; i < nphiij; i++)\n    interpolate(nr,dr,phiij[i],phiij_spline[i],0.0);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEIM::interpolate(int n, double delta, double *f,\n                          double **spline, double origin)\n{\n  for (int m = 1; m <= n; m++) spline[m][6] = f[m];\n\n  spline[1][5] = spline[2][6] - spline[1][6];\n  spline[2][5] = 0.5 * (spline[3][6]-spline[1][6]);\n  spline[n-1][5] = 0.5 * (spline[n][6]-spline[n-2][6]);\n  spline[n][5] = 0.0;\n\n  for (int m = 3; m <= n-2; m++)\n    spline[m][5] = ((spline[m-2][6]-spline[m+2][6]) +\n                    8.0*(spline[m+1][6]-spline[m-1][6])) / 12.0;\n\n  for (int m = 1; m <= n-1; m++) {\n    spline[m][4] = 3.0*(spline[m+1][6]-spline[m][6]) -\n      2.0*spline[m][5] - spline[m+1][5];\n    spline[m][3] = spline[m][5] + spline[m+1][5] -\n      2.0*(spline[m+1][6]-spline[m][6]);\n  }\n\n  spline[n][4] = 0.0;\n  spline[n][3] = 0.0;\n\n  for (int m = 1; m <= n; m++) {\n    spline[m][2] = spline[m][5]/delta;\n    spline[m][1] = 2.0*spline[m][4]/delta;\n    spline[m][0] = 3.0*spline[m][3]/delta;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   grab global line from file and store info in setfl\n   return 0 if error\n------------------------------------------------------------------------- */\n\nint PairEIM::grabglobal(FILE *fptr)\n{\n  char line[MAXLINE];\n\n  char *pch = NULL, *data = NULL;\n  while (pch == NULL) {\n    if (fgets(line,MAXLINE,fptr) == NULL) break;\n    pch = strstr(line,\"global\");\n    if (pch != NULL) {\n      data = strtok (line,\" \\t\\n\\r\\f\");\n      data = strtok (NULL,\"?\");\n      sscanf(data,\"%lg %lg %lg\",&setfl->division,&setfl->rbig,&setfl->rsmall);\n    }\n  }\n  if (pch == NULL) return 0;\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   grab elemental line from file and store info in setfl\n   return 0 if error\n------------------------------------------------------------------------- */\n\nint PairEIM::grabsingle(FILE *fptr, int i)\n{\n  char line[MAXLINE];\n\n  rewind(fptr);\n\n  char *pch1 = NULL, *pch2 = NULL, *data = NULL;\n  while (pch1 == NULL || pch2 == NULL) {\n    if (fgets(line,MAXLINE,fptr) == NULL) break;\n    pch1 = strtok (line,\" \\t\\n\\r\\f\");\n    pch1 = strstr(pch1,\"element:\");\n    if (pch1 != NULL) {\n      pch2 = strtok(NULL, \" \\t\\n\\r\\f\");\n      if (pch2 != NULL) {\n        data = strtok (NULL, \"?\");\n        if (strcmp(pch2,elements[i]) == 0) {\n          sscanf(data,\"%d %lg %lg %lg %lg %lg %lg\",&setfl->ielement[i],\n            &setfl->mass[i],&setfl->negativity[i],&setfl->ra[i],\n            &setfl->ri[i],&setfl->Ec[i],&setfl->q0[i]);\n        } else pch2 = NULL;\n      }\n    }\n  }\n  if (pch1 == NULL || pch2 == NULL) return 0;\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   grab pair line from file and store info in setfl\n   return 0 if error\n------------------------------------------------------------------------- */\n\nint PairEIM::grabpair(FILE *fptr, int i, int j)\n{\n  char line[MAXLINE];\n\n  rewind(fptr);\n\n  int ij;\n  if (i == j) ij = i;\n  else if (i < j) ij = nelements*(i+1) - (i+1)*(i+2)/2 + j;\n  else ij = nelements*(j+1) - (j+1)*(j+2)/2 + i;\n\n  char *pch1 = NULL, *pch2 = NULL, *pch3 = NULL, *data = NULL;\n  while (pch1 == NULL || pch2 == NULL || pch3 == NULL) {\n    if (fgets(line,MAXLINE,fptr) == NULL) break;\n    pch1 = strtok (line,\" \\t\\n\\r\\f\");\n    pch1 = strstr(pch1,\"pair:\");\n    if (pch1 != NULL) {\n      pch2 = strtok (NULL, \" \\t\\n\\r\\f\");\n      if (pch2 != NULL) pch3 = strtok (NULL, \" \\t\\n\\r\\f\");\n      if (pch3 != NULL) data = strtok (NULL, \"?\");\n      if ((pch2 != NULL) && (pch3 != NULL)) {\n        if ((strcmp(pch2,elements[i]) == 0 &&\n          strcmp(pch3,elements[j]) == 0) ||\n          (strcmp(pch2,elements[j]) == 0 &&\n          strcmp(pch3,elements[i]) == 0)) {\n          sscanf(data,\"%lg %lg %lg %lg %lg\",\n            &setfl->rcutphiA[ij],&setfl->rcutphiR[ij],\n            &setfl->Eb[ij],&setfl->r0[ij],&setfl->alpha[ij]);\n          fgets(line,MAXLINE,fptr);\n          sscanf(line,\"%lg %lg %lg %lg %lg\",\n            &setfl->beta[ij],&setfl->rcutq[ij],&setfl->Asigma[ij],\n            &setfl->rq[ij],&setfl->rcutsigma[ij]);\n          fgets(line,MAXLINE,fptr);\n          sscanf(line,\"%lg %lg %lg %d\",\n            &setfl->Ac[ij],&setfl->zeta[ij],&setfl->rs[ij],\n            &setfl->tp[ij]);\n        } else {\n          pch1 = NULL;\n          pch2 = NULL;\n          pch3 = NULL;\n        }\n      }\n    }\n  }\n  if (pch1 == NULL || pch2 == NULL || pch3 == NULL) return 0;\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   cutoff function\n------------------------------------------------------------------------- */\n\ndouble PairEIM::funccutoff(double rp, double rc, double r)\n{\n  double rbig = setfl->rbig;\n  double rsmall = setfl->rsmall;\n\n  double a = (rsmall-rbig)/(rc-rp)*(r-rp)+rbig;\n  a = erfc(a);\n  double b = erfc(rbig);\n  double c = erfc(rsmall);\n  return (a-c)/(b-c);\n}\n\n/* ----------------------------------------------------------------------\n   pair interaction function phi\n------------------------------------------------------------------------- */\n\ndouble PairEIM::funcphi(int i, int j, double r)\n{\n  int ij;\n  double value = 0.0;\n  if (i == j) ij = i;\n  else if (i < j) ij = nelements*(i+1) - (i+1)*(i+2)/2 + j;\n  else ij = nelements*(j+1) - (j+1)*(j+2)/2 + i;\n  if (r < 0.2) r = 0.2;\n  if (setfl->tp[ij] == 1) {\n    double a = setfl->Eb[ij]*setfl->alpha[ij] /\n      (setfl->beta[ij]-setfl->alpha[ij]);\n    double b = setfl->Eb[ij]*setfl->beta[ij] /\n      (setfl->beta[ij]-setfl->alpha[ij]);\n    if (r < setfl->rcutphiA[ij]) {\n      value -= a*exp(-setfl->beta[ij]*(r/setfl->r0[ij]-1.0))*\n        funccutoff(setfl->r0[ij],setfl->rcutphiA[ij],r);\n    }\n    if (r < setfl-> rcutphiR[ij]) {\n      value += b*exp(-setfl->alpha[ij]*(r/setfl->r0[ij]-1.0))*\n        funccutoff(setfl->r0[ij],setfl->rcutphiR[ij],r);\n    }\n  } else if (setfl->tp[ij] == 2) {\n    double a=setfl->Eb[ij]*setfl->alpha[ij]*pow(setfl->r0[ij],setfl->beta[ij])/\n      (setfl->beta[ij]-setfl->alpha[ij]);\n    double b=a*setfl->beta[ij]/setfl->alpha[ij]*\n      pow(setfl->r0[ij],setfl->alpha[ij]-setfl->beta[ij]);\n    if (r < setfl->rcutphiA[ij]) {\n      value -= a/pow(r,setfl->beta[ij])*\n        funccutoff(setfl->r0[ij],setfl->rcutphiA[ij],r);\n    }\n    if (r < setfl-> rcutphiR[ij]) {\n      value += b/pow(r,setfl->alpha[ij])*\n        funccutoff(setfl->r0[ij],setfl->rcutphiR[ij],r);\n    }\n  }\n  return value;\n}\n\n/* ----------------------------------------------------------------------\n   ion propensity function sigma\n------------------------------------------------------------------------- */\n\ndouble PairEIM::funcsigma(int i, int j, double r)\n{\n  int ij;\n  double value = 0.0;\n  if (i == j) ij = i;\n  else if (i < j) ij = nelements*(i+1) - (i+1)*(i+2)/2 + j;\n  else ij = nelements*(j+1) - (j+1)*(j+2)/2 + i;\n  if (r < 0.2) r = 0.2;\n  if (r < setfl->rcutq[ij]) {\n    value = setfl->Asigma[ij]*(setfl->negativity[j]-setfl->negativity[i]) *\n      funccutoff(setfl->rq[ij],setfl->rcutq[ij],r);\n  }\n  return value;\n}\n\n/* ----------------------------------------------------------------------\n   charge-charge interaction function sigma\n------------------------------------------------------------------------- */\n\ndouble PairEIM::funccoul(int i, int j, double r)\n{\n  int ij;\n  double value = 0.0;\n  if (i == j) ij = i;\n  else if (i < j) ij = nelements*(i+1) - (i+1)*(i+2)/2 + j;\n  else ij = nelements*(j+1) - (j+1)*(j+2)/2 + i;\n  if (r < 0.2) r = 0.2;\n  if (r < setfl->rcutsigma[ij]) {\n    value = setfl->Ac[ij]*exp(-setfl->zeta[ij]*r)*\n      funccutoff(setfl->rs[ij],setfl->rcutsigma[ij],r);\n  }\n  return value;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairEIM::pack_forward_comm(int n, int *list, double *buf,\n                               int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  m = 0;\n  if (rhofp == 1) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = rho[j];\n    }\n  }\n  if (rhofp == 2) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = fp[j];\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEIM::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  if (rhofp == 1) {\n    for (i = first; i < last; i++) rho[i] = buf[m++];\n  }\n  if (rhofp == 2) {\n    for (i = first; i < last; i++) fp[i] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairEIM::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  if (rhofp == 1) {\n    for (i = first; i < last; i++) buf[m++] = rho[i];\n  }\n  if (rhofp == 2) {\n    for (i = first; i < last; i++) buf[m++] = fp[i];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEIM::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  if (rhofp == 1) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      rho[j] += buf[m++];\n    }\n  }\n  if (rhofp == 2) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      fp[j] += buf[m++];\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairEIM::memory_usage()\n{\n  double bytes = maxeatom * sizeof(double);\n  bytes += maxvatom*6 * sizeof(double);\n  bytes += 2 * nmax * sizeof(double);\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Chuanfu Luo (luochuanfu@gmail.com)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"angle_table.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\nenum{LINEAR,SPLINE};\n\n#define MAXLINE 1024\n#define SMALL 0.001\n#define TINY  1.E-10\n\n/* ---------------------------------------------------------------------- */\n\nAngleTable::AngleTable(LAMMPS *lmp) : Angle(lmp)\n{\n  writedata = 0;\n  ntables = 0;\n  tables = NULL;\n}\n\n/* ---------------------------------------------------------------------- */\n\nAngleTable::~AngleTable()\n{\n  for (int m = 0; m < ntables; m++) free_table(&tables[m]);\n  memory->sfree(tables);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(theta0);\n    memory->destroy(tabindex);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleTable::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,n,type;\n  double eangle,f1[3],f3[3];\n  double delx1,dely1,delz1,delx2,dely2,delz2;\n  double rsq1,rsq2,r1,r2,c,s,a,a11,a12,a22;\n  double theta,u,mdu; //mdu: minus du, -du/dx=f\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // angle (cos and sin)\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n    s = 1.0/s;\n\n    // tabulated force & energy\n\n    theta = acos(c);\n    uf_lookup(type,theta,u,mdu);\n\n    if (eflag) eangle = u;\n\n    a = mdu * s;\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    f1[0] = a11*delx1 + a12*delx2;\n    f1[1] = a11*dely1 + a12*dely2;\n    f1[2] = a11*delz1 + a12*delz2;\n    f3[0] = a22*delx2 + a12*delx1;\n    f3[1] = a22*dely2 + a12*dely1;\n    f3[2] = a22*delz2 + a12*delz1;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleTable::allocate()\n{\n  allocated = 1;\n  int n = atom->nangletypes;\n\n  memory->create(theta0,n+1,\"angle:theta0\");\n  memory->create(tabindex,n+1,\"angle:tabindex\");\n\n  memory->create(setflag,n+1,\"angle:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid AngleTable::settings(int narg, char **arg)\n{\n  if (narg != 2) error->all(FLERR,\"Illegal angle_style command\");\n\n  if (strcmp(arg[0],\"linear\") == 0) tabstyle = LINEAR;\n  else if (strcmp(arg[0],\"spline\") == 0) tabstyle = SPLINE;\n  else error->all(FLERR,\"Unknown table style in angle style table\");\n\n  tablength = force->inumeric(FLERR,arg[1]);\n  if (tablength < 2) error->all(FLERR,\"Illegal number of angle table entries\");\n\n  // delete old tables, since cannot just change settings\n\n  for (int m = 0; m < ntables; m++) free_table(&tables[m]);\n  memory->sfree(tables);\n\n  if (allocated) {\n     memory->destroy(setflag);\n     memory->destroy(tabindex);\n  }\n  allocated = 0;\n\n  ntables = 0;\n  tables = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid AngleTable::coeff(int narg, char **arg)\n{\n  if (narg != 3) error->all(FLERR,\"Illegal angle_coeff command\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nangletypes,ilo,ihi);\n\n  int me;\n  MPI_Comm_rank(world,&me);\n  tables = (Table *)\n    memory->srealloc(tables,(ntables+1)*sizeof(Table),\"angle:tables\");\n  Table *tb = &tables[ntables];\n  null_table(tb);\n  if (me == 0) read_table(tb,arg[1],arg[2]);\n  bcast_table(tb);\n\n  // error check on table parameters\n\n  if (tb->ninput <= 1) error->one(FLERR,\"Invalid angle table length\");\n\n  double alo,ahi;\n  alo = tb->afile[0];\n  ahi = tb->afile[tb->ninput-1];\n  if (fabs(alo-0.0) > TINY || fabs(ahi-180.0) > TINY)\n    error->all(FLERR,\"Angle table must range from 0 to 180 degrees\");\n\n  // convert theta from degrees to radians\n\n  for (int i = 0; i < tb->ninput; i++){\n    tb->afile[i] *= MY_PI/180.0;\n    tb->ffile[i] *= 180.0/MY_PI;\n  }\n\n  // spline read-in and compute a,e,f vectors within table\n\n  spline_table(tb);\n  compute_table(tb);\n\n  // store ptr to table in tabindex\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    tabindex[i] = ntables;\n    setflag[i] = 1;\n    theta0[i] = tb->theta0;\n    count++;\n  }\n  ntables++;\n\n  if (count == 0) error->all(FLERR,\"Illegal angle_coeff command\");\n}\n\n/* ----------------------------------------------------------------------\n   return an equilbrium angle length\n   should not be used, since don't know minimum of tabulated function\n------------------------------------------------------------------------- */\n\ndouble AngleTable::equilibrium_angle(int i)\n{\n  return theta0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to restart file\n ------------------------------------------------------------------------- */\n\nvoid AngleTable::write_restart(FILE *fp)\n{\n  fwrite(&tabstyle,sizeof(int),1,fp);\n  fwrite(&tablength,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n    proc 0 reads from restart file, bcasts\n ------------------------------------------------------------------------- */\n\nvoid AngleTable::read_restart(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&tabstyle,sizeof(int),1,fp);\n    fread(&tablength,sizeof(int),1,fp);\n  }\n  MPI_Bcast(&tabstyle,1,MPI_INT,0,world);\n  MPI_Bcast(&tablength,1,MPI_INT,0,world);\n\n  allocate();\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleTable::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  double theta = acos(c);\n  double u=0.0;\n  u_lookup(type,theta,u);\n  return u;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleTable::null_table(Table *tb)\n{\n  tb->afile = tb->efile = tb->ffile = NULL;\n  tb->e2file = tb->f2file = NULL;\n  tb->ang = tb->e = tb->de = NULL;\n  tb->f = tb->df = tb->e2 = tb->f2 = NULL;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleTable::free_table(Table *tb)\n{\n  memory->destroy(tb->afile);\n  memory->destroy(tb->efile);\n  memory->destroy(tb->ffile);\n  memory->destroy(tb->e2file);\n  memory->destroy(tb->f2file);\n\n  memory->destroy(tb->ang);\n  memory->destroy(tb->e);\n  memory->destroy(tb->de);\n  memory->destroy(tb->f);\n  memory->destroy(tb->df);\n  memory->destroy(tb->e2);\n  memory->destroy(tb->f2);\n}\n\n/* ----------------------------------------------------------------------\n   read table file, only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid AngleTable::read_table(Table *tb, char *file, char *keyword)\n{\n  char line[MAXLINE];\n\n  // open file\n\n  FILE *fp = force->open_potential(file);\n  if (fp == NULL) {\n    char str[128];\n    sprintf(str,\"Cannot open file %s\",file);\n    error->one(FLERR,str);\n  }\n\n  // loop until section found with matching keyword\n\n  while (1) {\n    if (fgets(line,MAXLINE,fp) == NULL)\n      error->one(FLERR,\"Did not find keyword in table file\");\n    if (strspn(line,\" \\t\\n\") == strlen(line)) continue;    // blank line\n    if (line[0] == '#') continue;                          // comment\n    char *word = strtok(line,\" \\t\\n\\r\");\n    if (strcmp(word,keyword) == 0) break;           // matching keyword\n    fgets(line,MAXLINE,fp);                         // no match, skip section\n    param_extract(tb,line);\n    fgets(line,MAXLINE,fp);\n    for (int i = 0; i < tb->ninput; i++) fgets(line,MAXLINE,fp);\n  }\n\n  // read args on 2nd line of section\n  // allocate table arrays for file values\n\n  fgets(line,MAXLINE,fp);\n  param_extract(tb,line);\n  memory->create(tb->afile,tb->ninput,\"angle:afile\");\n  memory->create(tb->efile,tb->ninput,\"angle:efile\");\n  memory->create(tb->ffile,tb->ninput,\"angle:ffile\");\n\n  // read a,e,f table values from file\n\n  int itmp;\n  fgets(line,MAXLINE,fp);\n  for (int i = 0; i < tb->ninput; i++) {\n    fgets(line,MAXLINE,fp);\n    sscanf(line,\"%d %lg %lg %lg\",\n      &itmp,&tb->afile[i],&tb->efile[i],&tb->ffile[i]);\n  }\n\n  fclose(fp);\n}\n\n/* ----------------------------------------------------------------------\n   build spline representation of e,f over entire range of read-in table\n   this function sets these values in e2file,f2file\n------------------------------------------------------------------------- */\n\nvoid AngleTable::spline_table(Table *tb)\n{\n  memory->create(tb->e2file,tb->ninput,\"angle:e2file\");\n  memory->create(tb->f2file,tb->ninput,\"angle:f2file\");\n\n  double ep0 = - tb->ffile[0];\n  double epn = - tb->ffile[tb->ninput-1];\n  spline(tb->afile,tb->efile,tb->ninput,ep0,epn,tb->e2file);\n\n  if (tb->fpflag == 0) {\n    tb->fplo = (tb->ffile[1] - tb->ffile[0]) / (tb->afile[1] - tb->afile[0]);\n    tb->fphi = (tb->ffile[tb->ninput-1] - tb->ffile[tb->ninput-2]) /\n      (tb->afile[tb->ninput-1] - tb->afile[tb->ninput-2]);\n  }\n\n  double fp0 = tb->fplo;\n  double fpn = tb->fphi;\n  spline(tb->afile,tb->ffile,tb->ninput,fp0,fpn,tb->f2file);\n}\n\n/* ----------------------------------------------------------------------\n   compute a,e,f vectors from splined values\n------------------------------------------------------------------------- */\n\nvoid AngleTable::compute_table(Table *tb)\n{\n  // delta = table spacing in angle for N-1 bins\n\n  int tlm1 = tablength-1;\n  tb->delta = MY_PI / tlm1;\n  tb->invdelta = 1.0/tb->delta;\n  tb->deltasq6 = tb->delta*tb->delta / 6.0;\n\n  // N-1 evenly spaced bins in angle from 0 to PI\n  // ang,e,f = value at lower edge of bin\n  // de,df values = delta values of e,f\n  // ang,e,f are N in length so de,df arrays can compute difference\n\n  memory->create(tb->ang,tablength,\"angle:ang\");\n  memory->create(tb->e,tablength,\"angle:e\");\n  memory->create(tb->de,tlm1,\"angle:de\");\n  memory->create(tb->f,tablength,\"angle:f\");\n  memory->create(tb->df,tlm1,\"angle:df\");\n  memory->create(tb->e2,tablength,\"angle:e2\");\n  memory->create(tb->f2,tablength,\"angle:f2\");\n\n  double a;\n  for (int i = 0; i < tablength; i++) {\n    a = i*tb->delta;\n    tb->ang[i] = a;\n          tb->e[i] = splint(tb->afile,tb->efile,tb->e2file,tb->ninput,a);\n          tb->f[i] = splint(tb->afile,tb->ffile,tb->f2file,tb->ninput,a);\n  }\n\n  for (int i = 0; i < tlm1; i++) {\n    tb->de[i] = tb->e[i+1] - tb->e[i];\n    tb->df[i] = tb->f[i+1] - tb->f[i];\n  }\n\n  double ep0 = - tb->f[0];\n  double epn = - tb->f[tlm1];\n  spline(tb->ang,tb->e,tablength,ep0,epn,tb->e2);\n  spline(tb->ang,tb->f,tablength,tb->fplo,tb->fphi,tb->f2);\n}\n\n/* ----------------------------------------------------------------------\n   extract attributes from parameter line in table section\n   format of line: N value FP fplo fphi EQ theta0\n   N is required, other params are optional\n------------------------------------------------------------------------- */\n\nvoid AngleTable::param_extract(Table *tb, char *line)\n{\n  tb->ninput = 0;\n  tb->fpflag = 0;\n  tb->theta0 = 180.0;\n\n  char *word = strtok(line,\" \\t\\n\\r\\f\");\n  while (word) {\n    if (strcmp(word,\"N\") == 0) {\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->ninput = atoi(word);\n    } else if (strcmp(word,\"FP\") == 0) {\n      tb->fpflag = 1;\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->fplo = atof(word);\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->fphi = atof(word);\n      tb->fplo *= (180.0/MY_PI)*(180.0/MY_PI);\n      tb->fphi *= (180.0/MY_PI)*(180.0/MY_PI);\n    } else if (strcmp(word,\"EQ\") == 0) {\n      word = strtok(NULL,\" \\t\\n\\r\\f\");\n      tb->theta0 = atof(word);\n    } else {\n      error->one(FLERR,\"Invalid keyword in angle table parameters\");\n    }\n    word = strtok(NULL,\" \\t\\n\\r\\f\");\n  }\n\n  if (tb->ninput == 0) error->one(FLERR,\"Angle table parameters did not set N\");\n}\n\n/* ----------------------------------------------------------------------\n   broadcast read-in table info from proc 0 to other procs\n   this function communicates these values in Table:\n     ninput,afile,efile,ffile,fpflag,fplo,fphi,theta0\n------------------------------------------------------------------------- */\n\nvoid AngleTable::bcast_table(Table *tb)\n{\n  MPI_Bcast(&tb->ninput,1,MPI_INT,0,world);\n\n  int me;\n  MPI_Comm_rank(world,&me);\n  if (me > 0) {\n    memory->create(tb->afile,tb->ninput,\"angle:afile\");\n    memory->create(tb->efile,tb->ninput,\"angle:efile\");\n    memory->create(tb->ffile,tb->ninput,\"angle:ffile\");\n  }\n\n  MPI_Bcast(tb->afile,tb->ninput,MPI_DOUBLE,0,world);\n  MPI_Bcast(tb->efile,tb->ninput,MPI_DOUBLE,0,world);\n  MPI_Bcast(tb->ffile,tb->ninput,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&tb->fpflag,1,MPI_INT,0,world);\n  if (tb->fpflag) {\n    MPI_Bcast(&tb->fplo,1,MPI_DOUBLE,0,world);\n    MPI_Bcast(&tb->fphi,1,MPI_DOUBLE,0,world);\n  }\n  MPI_Bcast(&tb->theta0,1,MPI_DOUBLE,0,world);\n}\n\n/* ----------------------------------------------------------------------\n   spline and splint routines modified from Numerical Recipes\n------------------------------------------------------------------------- */\n\nvoid AngleTable::spline(double *x, double *y, int n,\n                       double yp1, double ypn, double *y2)\n{\n  int i,k;\n  double p,qn,sig,un;\n  double *u = new double[n];\n\n  if (yp1 > 0.99e30) y2[0] = u[0] = 0.0;\n  else {\n    y2[0] = -0.5;\n    u[0] = (3.0/(x[1]-x[0])) * ((y[1]-y[0]) / (x[1]-x[0]) - yp1);\n  }\n  for (i = 1; i < n-1; i++) {\n    sig = (x[i]-x[i-1]) / (x[i+1]-x[i-1]);\n    p = sig*y2[i-1] + 2.0;\n    y2[i] = (sig-1.0) / p;\n    u[i] = (y[i+1]-y[i]) / (x[i+1]-x[i]) - (y[i]-y[i-1]) / (x[i]-x[i-1]);\n    u[i] = (6.0*u[i] / (x[i+1]-x[i-1]) - sig*u[i-1]) / p;\n  }\n  if (ypn > 0.99e30) qn = un = 0.0;\n  else {\n    qn = 0.5;\n    un = (3.0/(x[n-1]-x[n-2])) * (ypn - (y[n-1]-y[n-2]) / (x[n-1]-x[n-2]));\n  }\n  y2[n-1] = (un-qn*u[n-2]) / (qn*y2[n-2] + 1.0);\n  for (k = n-2; k >= 0; k--) y2[k] = y2[k]*y2[k+1] + u[k];\n\n  delete [] u;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleTable::splint(double *xa, double *ya, double *y2a, int n, double x)\n{\n  int klo,khi,k;\n  double h,b,a,y;\n\n  klo = 0;\n  khi = n-1;\n  while (khi-klo > 1) {\n    k = (khi+klo) >> 1;\n    if (xa[k] > x) khi = k;\n    else klo = k;\n  }\n  h = xa[khi]-xa[klo];\n  a = (xa[khi]-x) / h;\n  b = (x-xa[klo]) / h;\n  y = a*ya[klo] + b*ya[khi] +\n    ((a*a*a-a)*y2a[klo] + (b*b*b-b)*y2a[khi]) * (h*h)/6.0;\n  return y;\n}\n\n/* ----------------------------------------------------------------------\n   calculate potential u and force f at angle x\n------------------------------------------------------------------------- */\n\nvoid AngleTable::uf_lookup(int type, double x, double &u, double &f)\n{\n  int itable;\n  double fraction,a,b;\n\n  Table *tb = &tables[tabindex[type]];\n\n  if (tabstyle == LINEAR) {\n    itable = static_cast<int> ( x * tb->invdelta);\n    fraction = (x - tb->ang[itable]) * tb->invdelta;\n    u = tb->e[itable] + fraction*tb->de[itable];\n    f = tb->f[itable] + fraction*tb->df[itable];\n  } else if (tabstyle == SPLINE) {\n    itable = static_cast<int> ( x * tb->invdelta);\n    fraction = (x - tb->ang[itable]) * tb->invdelta;\n\n    b = (x - tb->ang[itable]) * tb->invdelta;\n    a = 1.0 - b;\n    u = a * tb->e[itable] + b * tb->e[itable+1] +\n      ((a*a*a-a)*tb->e2[itable] + (b*b*b-b)*tb->e2[itable+1]) *\n      tb->deltasq6;\n    f = a * tb->f[itable] + b * tb->f[itable+1] +\n      ((a*a*a-a)*tb->f2[itable] + (b*b*b-b)*tb->f2[itable+1]) *\n      tb->deltasq6;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   calculate potential u at angle x\n------------------------------------------------------------------------- */\n\nvoid AngleTable::u_lookup(int type, double x, double &u)\n{\n  int itable;\n  double fraction,a,b;\n\n  Table *tb = &tables[tabindex[type]];\n\n  if (tabstyle == LINEAR) {\n    itable = static_cast<int> ( x * tb->invdelta);\n    fraction = (x - tb->ang[itable]) * tb->invdelta;\n    u = tb->e[itable] + fraction*tb->de[itable];\n  } else if (tabstyle == SPLINE) {\n    itable = static_cast<int> ( x * tb->invdelta);\n    fraction = (x - tb->ang[itable]) * tb->invdelta;\n\n    b = (x - tb->ang[itable]) * tb->invdelta;\n    a = 1.0 - b;\n    u = a * tb->e[itable] + b * tb->e[itable+1] +\n      ((a*a*a-a)*tb->e2[itable] + (b*b*b-b)*tb->e2[itable+1]) *\n      tb->deltasq6;\n  }\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under \n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Reese Jones, Xiaowang Zhou (SNL)\n   This modifies from pair_tersoff.cpp by Aidan Thompson (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_polymorphic.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairPolymorphic::PairPolymorphic(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  one_coeff = 1;\n\n  nelements = 0;\n  elements = NULL;\n  pairParameters = NULL;\n  tripletParameters = NULL;\n  elem2param = NULL;\n  elem3param = NULL;\n  map = NULL;\n  epsilon = 0.0;\n  neighsize = 0;\n  firstneighV = NULL;\n  firstneighW = NULL;\n  firstneighW1 = NULL;\n  delxV = NULL;\n  delyV = NULL;\n  delzV = NULL;\n  drV = NULL;\n  delxW = NULL;\n  delyW = NULL;\n  delzW = NULL;\n  drW = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairPolymorphic::~PairPolymorphic()\n{\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n  delete [] match;\n  memory->destroy(pairParameters);\n  memory->destroy(tripletParameters);\n  memory->destroy(elem2param);\n  memory->destroy(elem3param);\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n    delete [] firstneighV; \n    delete [] firstneighW; \n    delete [] firstneighW1;\n    delete [] delxV; \n    delete [] delyV; \n    delete [] delzV; \n    delete [] drV; \n    delete [] delxW; \n    delete [] delyW; \n    delete [] delzW; \n    delete [] drW; \n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::compute(int eflag, int vflag)\n{\n  tagint itag,jtag;\n  int i,j,k,ii,jj,kk,kk1,inum,jnum;\n  int itype,jtype,ktype;\n  int iparam_ii,iparam_jj,iparam_kk,iparam_ij,iparam_ik,iparam_ijk;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,r0,r1,r2;\n  double delr1[3],delr2[3],fi[3],fj[3],fk[3];\n  double zeta_ij,prefactor,wfac,pfac,gfac,fa,fa_d,bij,bij_d;\n  double costheta;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  double emb;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    if (neighsize < jnum) {\n      delete [] firstneighV;\n      delete [] delxV;\n      delete [] delyV;\n      delete [] delzV;\n      delete [] drV;\n      delete [] firstneighW;\n      delete [] delxW;\n      delete [] delyW;\n      delete [] delzW;\n      delete [] drW;\n      delete [] firstneighW1;\n      neighsize = jnum + 20;\n      firstneighV = new int[neighsize];\n      delxV = new double[neighsize];\n      delyV = new double[neighsize];\n      delzV = new double[neighsize];\n      drV = new double[neighsize];\n      firstneighW = new int[neighsize];\n      delxW = new double[neighsize];\n      delyW = new double[neighsize];\n      delzW = new double[neighsize];\n      drW = new double[neighsize];\n      firstneighW1 = new int[neighsize];\n    }\n\n    if (eta) {\n      iparam_ii = elem2param[itype][itype];\n      PairParameters & p = pairParameters[iparam_ii];\n      emb = (p.F)->get_vmax();\n    }\n\n    numneighV = -1;\n    numneighW = -1;\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtype = map[type[j]];\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      if (rsq >= cutmaxsq) continue;\n      r0 = sqrt(rsq);\n\n      iparam_ij = elem2param[itype][jtype];\n      PairParameters & p = pairParameters[iparam_ij];\n\n// do not include the neighbor if get_vmax() <= epsilon because the function is near zero\n      if (eta) {\n        if (emb > epsilon) {\n          iparam_jj = elem2param[jtype][jtype];\n          PairParameters & q = pairParameters[iparam_jj];\n          if (rsq < (q.W)->get_xmaxsq() && (q.W)->get_vmax() > epsilon) {\n            numneighW = numneighW + 1;\n            firstneighW[numneighW] = j;\n            delxW[numneighW] = delx;\n            delyW[numneighW] = dely;\n            delzW[numneighW] = delz;\n            drW[numneighW] =  r0;\n          }\n        }\n      } else {\n        if ((p.F)->get_vmax() > epsilon) {\n          if (rsq < (p.V)->get_xmaxsq() && (p.V)->get_vmax() > epsilon) {\n            numneighV = numneighV + 1;\n            firstneighV[numneighV] = j;\n            delxV[numneighV] = delx;\n            delyV[numneighV] = dely;\n            delzV[numneighV] = delz;\n            drV[numneighV] =  r0;\n          }\n          if (rsq < (p.W)->get_xmaxsq() && (p.W)->get_vmax() > epsilon) {\n            numneighW = numneighW + 1;\n            firstneighW[numneighW] = j;\n            delxW[numneighW] = delx;\n            delyW[numneighW] = dely;\n            delzW[numneighW] = delz;\n            drW[numneighW] =  r0;\n          }\n        }\n      }\n\n    // two-body interactions, skip half of them\n\n      jtag = tag[j];\n      if (itag > jtag) {\n\tif ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n\tif ((itag+jtag) % 2 == 1) continue;\n      } else {\n\tif (x[j][2] < x[i][2]) continue;\n\tif (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n\tif (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      if (rsq >= (p.U)->get_xmaxsq() || (p.U)->get_vmax() <= epsilon) continue;\n      (p.U)->value(r0,evdwl,eflag,fpair,1);\n      fpair = -fpair/r0;\n\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n\t\t\t   evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    if (eta) {\n\n      if (emb > epsilon) {\n\n        iparam_ii = elem2param[itype][itype];\n        PairParameters & p = pairParameters[iparam_ii];\n\n        // accumulate bondorder zeta for each i-j interaction via loop over k\n\n        zeta_ij = 0.0;\n\n        for (kk = 0; kk <= numneighW; kk++) {\n          k = firstneighW[kk];\n          ktype = map[type[k]];\n \n          iparam_kk = elem2param[ktype][ktype];\n          PairParameters & q = pairParameters[iparam_kk];\n\n          (q.W)->value(drW[kk],wfac,1,fpair,0);\n\n          zeta_ij += wfac;\n        }\n\n        // pairwise force due to zeta\n\n        (p.F)->value(zeta_ij,bij,1,bij_d,1);\n\n        prefactor = 0.5* bij_d;\n        if (eflag) evdwl = -0.5*bij;\n\n        if (evflag) ev_tally(i,i,nlocal,newton_pair,evdwl,0.0,0.0,delx,dely,delz);\n\n        // attractive term via loop over k\n\n        for (kk = 0; kk <= numneighW; kk++) {\n          k = firstneighW[kk];\n          ktype = map[type[k]];\n\n          delr2[0] = -delxW[kk];\n          delr2[1] = -delyW[kk];\n          delr2[2] = -delzW[kk];\n\n          iparam_kk = elem2param[ktype][ktype];\n          PairParameters & q = pairParameters[iparam_kk];\n\n          (q.W)->value(drW[kk],wfac,0,fpair,1);\n          fpair = -prefactor*fpair/drW[kk];\n\n          f[i][0] += delr2[0]*fpair;\n          f[i][1] += delr2[1]*fpair;\n          f[i][2] += delr2[2]*fpair;\n          f[k][0] -= delr2[0]*fpair;\n          f[k][1] -= delr2[1]*fpair;\n          f[k][2] -= delr2[2]*fpair;\n \n          if (vflag_atom) v_tally2(i, k, -fpair, delr2);\n        }\n      }\n\n    } else {\n\n      for (jj = 0; jj <= numneighV; jj++) {\n        j = firstneighV[jj];\n        jtype = map[type[j]];\n\n        iparam_ij = elem2param[itype][jtype];\n        PairParameters & p = pairParameters[iparam_ij];\n\n        delr1[0] = -delxV[jj];\n        delr1[1] = -delyV[jj];\n        delr1[2] = -delzV[jj];\n        r1 = drV[jj];\n\n        // accumulate bondorder zeta for each i-j interaction via loop over k\n\n        zeta_ij = 0.0;\n\n        numneighW1 = -1;\n        for (kk = 0; kk <= numneighW; kk++) {\n          k = firstneighW[kk];\n          if (j == k) continue;\n          ktype = map[type[k]];\n          iparam_ijk = elem3param[jtype][itype][ktype]; \n          TripletParameters & trip = tripletParameters[iparam_ijk];\n          if ((trip.G)->get_vmax() <= epsilon) continue;\n\n          numneighW1 = numneighW1 + 1;\n          firstneighW1[numneighW1] = kk;\n\n          delr2[0] = -delxW[kk];\n          delr2[1] = -delyW[kk];\n          delr2[2] = -delzW[kk];\n          r2 = drW[kk];\n\n          costheta = (delr1[0]*delr2[0] + delr1[1]*delr2[1] +\n                      delr1[2]*delr2[2]) / (r1*r2);\n\n          iparam_ik = elem2param[itype][ktype];\n          PairParameters & q = pairParameters[iparam_ik];\n\n          (q.W)->value(r2,wfac,1,fpair,0);\n          (q.P)->value(r1-(p.xi)*r2,pfac,1,fpair,0);\n          (trip.G)->value(costheta,gfac,1,fpair,0);\n \n          zeta_ij += wfac*pfac*gfac;\n        }\n\n        // pairwise force due to zeta\n\n        (p.V)->value(r1,fa,1,fa_d,1);\n        (p.F)->value(zeta_ij,bij,1,bij_d,1);\n        fpair = -0.5*bij*fa_d / r1;\n        prefactor = 0.5* fa * bij_d;\n        if (eflag) evdwl = -0.5*bij*fa;\n \n        f[i][0] += delr1[0]*fpair;\n        f[i][1] += delr1[1]*fpair;\n        f[i][2] += delr1[2]*fpair;\n        f[j][0] -= delr1[0]*fpair;\n        f[j][1] -= delr1[1]*fpair;\n        f[j][2] -= delr1[2]*fpair;\n \n        if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                             evdwl,0.0,-fpair,-delr1[0],-delr1[1],-delr1[2]);\n\n        // attractive term via loop over k\n\n        for (kk1 = 0; kk1 <= numneighW1; kk1++) {\n          kk = firstneighW1[kk1];\n          k = firstneighW[kk];\n          ktype = map[type[k]];\n          iparam_ijk = elem3param[jtype][itype][ktype];\n          TripletParameters & trip = tripletParameters[iparam_ijk];\n\n          delr2[0] = -delxW[kk];\n          delr2[1] = -delyW[kk];\n          delr2[2] = -delzW[kk];\n          r2 = drW[kk];\n\n          iparam_ik = elem2param[itype][ktype];\n          PairParameters & q = pairParameters[iparam_ik];\n \n          attractive(&q,&trip,prefactor,r1,r2,delr1,delr2,fi,fj,fk);\n \n          f[i][0] += fi[0];\n          f[i][1] += fi[1];\n          f[i][2] += fi[2];\n          f[j][0] += fj[0];\n          f[j][1] += fj[1];\n          f[j][2] += fj[2];\n          f[k][0] += fk[0];\n          f[k][1] += fk[1];\n          f[k][2] += fk[2];\n \n          if (vflag_atom) v_tally3(i,j,k,fj,fk,delr1,delr2);\n        }\n      }\n    }\n  }\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  map = new int[n+1];\n\n  neighsize = 40;\n  firstneighV = new int[neighsize];\n  delxV = new double[neighsize];\n  delyV = new double[neighsize];\n  delzV = new double[neighsize];\n  drV = new double[neighsize];\n  firstneighW = new int[neighsize];\n  delxW = new double[neighsize];\n  delyW = new double[neighsize];\n  delzW = new double[neighsize];\n  drW = new double[neighsize];\n  firstneighW1 = new int[neighsize];\n}\n\n/* ----------------------------------------------------------------------\n   global settings \n------------------------------------------------------------------------- */\n\nvoid PairPolymorphic::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairPolymorphic::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg == 4 + atom->ntypes) {\n     narg--;\n     epsilon = atof(arg[narg]);\n  } else if (narg != 3 + atom->ntypes) {\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n  }\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n  \n  read_file(arg[2]);\n  setup_params();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n\tsetflag[i][j] = 1;\n\tcount++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairPolymorphic::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style polymorphic requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style polymorphic requires newton pair on\");\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairPolymorphic::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::read_file(char *file)\n{\n  char line[MAXLINE],*ptr;\n  int n;\n\n  // open file on proc 0\n  FILE *fp=NULL;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open polymorphic potential file %s\",file);\n      error->one(FLERR,str);\n    }\n    // move past comments to first data line\n    fgets(line,MAXLINE,fp);\n    while (line == strchr(line,'#')) fgets(line,MAXLINE,fp);\n    n = strlen(line) + 1;\n  }\n  MPI_Bcast(&n,1,MPI_INT,0,world);\n  MPI_Bcast(line,n,MPI_CHAR,0,world);\n  ptr = strtok(line,\" \\t\\n\\r\\f\"); // 1st line, 1st token\n  int ntypes = atoi(ptr);\n  if (ntypes != nelements)\n    error->all(FLERR,\"Incorrect number of elements in potential file\");\n  match = new int[nelements];\n  ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 1st line, 2nd token\n  eta = (atoi(ptr)>0) ? true:false;\n\n  // map the elements in the potential file to LAMMPS atom types\n  for (int i = 0; i < nelements; i++) {\n    if (comm->me == 0) {\n      fgets(line,MAXLINE,fp);\n      n = strlen(line) + 1;\n    }\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n    ptr = strtok(line,\" \\t\\n\\r\\f\"); // 1st token\n    ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 2st token\n    ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 3st token\n    int j;\n    for (j = 0; j < nelements; j++) {\n      if (strcmp(ptr,elements[j]) == 0) break;\n    }\n    if (j == nelements) \n      error->all(FLERR,\"Element not defined in potential file\");\n    match[i] = j;\n  }\n  // sizes\n  if (comm->me == 0) {\n    fgets(line,MAXLINE,fp);\n    n = strlen(line) + 1;\n  }\n\n  // Note: the format of this line has changed between the\n  // 2015-06-06 and 2015-12-09 versions of the pair style.\n\n  MPI_Bcast(&n,1,MPI_INT,0,world);\n  MPI_Bcast(line,n,MPI_CHAR,0,world);\n  nr = ng = nx = 0;\n  ptr = strtok(line,\" \\t\\n\\r\\f\"); // 1st token\n  if (ptr) nr = atoi(ptr);\n  ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 2nd token\n  if (ptr) ng = atoi(ptr);\n  ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 3rd token\n  if (ptr) nx = atoi(ptr);\n  ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 4th token\n  if (ptr) maxX = atof(ptr);\n  if (ptr == NULL)\n    error->all(FLERR,\"Potential file incompatible with this pair style version\");\n  if ((ng == 0) || (nr == 0) || (nx == 0))\n    error->all(FLERR,\"Error reading potential file header\");\n\n  npair = nelements*(nelements+1)/2;\n  ntriple = nelements*nelements*nelements;\n  pairParameters = (PairParameters*)\n    memory->srealloc(pairParameters,npair*sizeof(PairParameters),\n    \"pair:pairParameters\");\n  tripletParameters = (TripletParameters*)\n    memory->srealloc(tripletParameters,ntriple*sizeof(TripletParameters),\n    \"pair:tripletParameters\");\n\n  // cutoffs\n  for (int i = 0; i < npair; i++) {\n    PairParameters & p = pairParameters[i];\n    if (comm->me == 0) {\n      fgets(line,MAXLINE,fp);\n      n = strlen(line) + 1;\n    }\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n    ptr = strtok(line,\" \\t\\n\\r\\f\"); // 1st token\n    p.cut = atof(ptr);\n    p.cutsq = p.cut*p.cut;\n    ptr = strtok(NULL,\" \\t\\n\\r\\f\"); // 2nd token\n    p.xi = (atoi(ptr)>0) ? true:false;\n  }\n\n  // set cutmax to max of all params\n  cutmax = 0.0;\n  for (int i = 0; i < npair; i++) {\n    PairParameters & p = pairParameters[i];\n    if (p.cut > cutmax) cutmax = p.cut;\n  }\n  cutmaxsq = cutmax*cutmax;\n\n  // start reading tabular functions\n  double * singletable = new double[nr];\n  for (int i = 0; i < npair; i++) { // U\n    PairParameters & p = pairParameters[i];\n    if (comm->me == 0) {\n      grab(fp,nr,singletable);\n    }\n    MPI_Bcast(singletable,nr,MPI_DOUBLE,0,world);\n    p.U = new tabularFunction(nr,0.0,p.cut);\n    (p.U)->set_values(nr,0.0,p.cut,singletable,epsilon);\n  }\n  for (int i = 0; i < npair; i++) { // V\n    PairParameters & p = pairParameters[i];\n    if (comm->me == 0) {\n      grab(fp,nr,singletable);\n    }\n    MPI_Bcast(singletable,nr,MPI_DOUBLE,0,world);\n    p.V = new tabularFunction(nr,0.0,p.cut);\n    (p.V)->set_values(nr,0.0,p.cut,singletable,epsilon);\n  }\n  for (int i = 0; i < npair; i++) { // W\n    PairParameters & p = pairParameters[i];\n    if (comm->me == 0) {\n      grab(fp,nr,singletable);\n    }\n    MPI_Bcast(singletable,nr,MPI_DOUBLE,0,world);\n    p.W = new tabularFunction(nr,0.0,p.cut);\n    (p.W)->set_values(nr,0.0,p.cut,singletable,epsilon);\n  }\n  for (int i = 0; i < npair; i++) { // P\n    PairParameters & p = pairParameters[i];\n    if (comm->me == 0) {\n      grab(fp,nr,singletable);\n    }\n    MPI_Bcast(singletable,nr,MPI_DOUBLE,0,world);\n    p.P = new tabularFunction(nr,-cutmax,cutmax);\n    (p.P)->set_values(nr,-cutmax,cutmax,singletable,epsilon);\n  }\n  delete[] singletable;\n  singletable = new double[ng];\n  for (int i = 0; i < ntriple; i++) { // G\n    TripletParameters & p = tripletParameters[i];\n    if (comm->me == 0) {\n      grab(fp,ng,singletable);\n    }\n    MPI_Bcast(singletable,ng,MPI_DOUBLE,0,world);\n    p.G = new tabularFunction(ng,-1.0,1.0);\n    (p.G)->set_values(ng,-1.0,1.0,singletable,epsilon);\n  }\n  delete[] singletable;\n  singletable = new double[nx];\n  for (int i = 0; i < npair; i++) { // F\n    PairParameters & p = pairParameters[i];\n    if (comm->me == 0) {\n      grab(fp,nx,singletable);\n    }\n    MPI_Bcast(singletable,nx,MPI_DOUBLE,0,world);\n    p.F = new tabularFunction(nx,0.0,maxX);\n    (p.F)->set_values(nx,0.0,maxX,singletable,epsilon);\n  }\n  delete[] singletable;\n  if (comm->me == 0) {\n    fclose(fp);\n  }\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::setup_params()\n{\n  int i,j,k,n;\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,\"pair:elem2param\");\n  memory->destroy(elem3param);\n  memory->create(elem3param,nelements,nelements,nelements,\"pair:elem3param\");\n\n  // map atom pair to parameter index\n\n  n = 0;\n  for (i = 0; i < nelements; i++) {\n    elem2param[match[i]][match[i]] = n;\n    n++;\n  }\n  for (i = 0; i < nelements-1; i++) {\n  for (j = i+1; j < nelements; j++) {\n    elem2param[match[i]][match[j]] = n;\n    elem2param[match[j]][match[i]] = n;\n    n++;\n  }\n  }\n\n  // map atom triplet to parameter index\n  \n  n = 0;\n  for (i = 0; i < nelements; i++)\n  for (j = 0; j < nelements; j++)\n  for (k = 0; k < nelements; k++) {\n    elem3param[match[i]][match[j]][match[k]] = n;\n    n++;\n  }\n\n//   for debugging, call write_tables() to check the tabular functions \n//   if (comm->me == 0) {\n//     write_tables(51);\n//     errorX->all(FLERR,\"Test potential tables\");\n//   }\n}  \n\n/* ----------------------------------------------------------------------\n   attractive term\n------------------------------------------------------------------------- */\n\nvoid PairPolymorphic::attractive(PairParameters *p, TripletParameters *trip,\n                            double prefactor, double rij, double rik,\n                            double *delrij, double *delrik,\n                            double *fi, double *fj, double *fk)\n{\n  double rij_hat[3],rik_hat[3];\n  double rijinv,rikinv;\n\n  rijinv = 1.0/rij;\n  vec3_scale(rijinv,delrij,rij_hat);\n  \n  rikinv = 1.0/rik;\n  vec3_scale(rikinv,delrik,rik_hat);\n\n  ters_zetaterm_d(prefactor,rij_hat,rij,rik_hat,rik,fi,fj,fk,p,trip);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::ters_zetaterm_d(double prefactor,\n                                 double *rij_hat, double rij,\n                                 double *rik_hat, double rik,\n                                 double *dri, double *drj, double *drk,\n                                 PairParameters *p, TripletParameters *trip)\n{\n  double gijk,gijk_d,ex_delr,ex_delr_d,fc,dfc,cos_theta;\n  double dcosdri[3],dcosdrj[3],dcosdrk[3];\n\n  cos_theta = vec3_dot(rij_hat,rik_hat);\n\n  (p->W)->value(rik,fc,1,dfc,1);\n  (p->P)->value(rij-(p->xi)*rik,ex_delr,1,ex_delr_d,1);\n  (trip->G)->value(cos_theta,gijk,1,gijk_d,1);\n\n  costheta_d(rij_hat,rij,rik_hat,rik,dcosdri,dcosdrj,dcosdrk);\n\n  // compute the derivative wrt Ri\n  // dri = -dfc*gijk*ex_delr*rik_hat;\n  // dri += fc*gijk_d*ex_delr*dcosdri;\n  // dri += fc*gijk*ex_delr_d*(rik_hat - rij_hat);\n\n  vec3_scale(-dfc*gijk*ex_delr,rik_hat,dri);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdri,dri,dri);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rik_hat,dri,dri);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rij_hat,dri,dri);\n  vec3_scale(prefactor,dri,dri);\n\n  // compute the derivative wrt Rj\n  // drj = fc*gijk_d*ex_delr*dcosdrj;\n  // drj += fc*gijk*ex_delr_d*rij_hat;\n\n  vec3_scale(fc*gijk_d*ex_delr,dcosdrj,drj);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rij_hat,drj,drj);\n  vec3_scale(prefactor,drj,drj);\n\n  // compute the derivative wrt Rk\n  // drk = dfc*gijk*ex_delr*rik_hat;\n  // drk += fc*gijk_d*ex_delr*dcosdrk;\n  // drk += -fc*gijk*ex_delr_d*rik_hat;\n\n  vec3_scale(dfc*gijk*ex_delr,rik_hat,drk);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdrk,drk,drk);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rik_hat,drk,drk);\n  vec3_scale(prefactor,drk,drk);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::costheta_d(double *rij_hat, double rij,\n\t\t\t     double *rik_hat, double rik,\n\t\t\t     double *dri, double *drj, double *drk)\n{\n  // first element is devative wrt Ri, second wrt Rj, third wrt Rk\n\n  double cos_theta = vec3_dot(rij_hat,rik_hat);\n\n  vec3_scaleadd(-cos_theta,rij_hat,rik_hat,drj);\n  vec3_scale(1.0/rij,drj,drj);\n  vec3_scaleadd(-cos_theta,rik_hat,rij_hat,drk);\n  vec3_scale(1.0/rik,drk,drk);\n  vec3_add(drj,drk,dri);\n  vec3_scale(-1.0,dri,dri);\n}\n\n/* ----------------------------------------------------------------------\n *    grab n values from file fp and put them in list\n *       values can be several to a line\n *          only called by proc 0\n *          ------------------------------------------------------------------------- */\n \nvoid PairPolymorphic::grab(FILE *fp, int n, double *list)\n{\n  char *ptr;\n  char line[MAXLINE];\n \n  int i = 0;\n  while (i < n) {\n    fgets(line,MAXLINE,fp);\n    ptr = strtok(line,\" \\t\\n\\r\\f\");\n    list[i++] = atof(ptr);\n    while ((ptr = strtok(NULL,\" \\t\\n\\r\\f\")))\n      list[i++] = atof(ptr);\n  }\n}\n \n/* ---------------------------------------------------------------------- */\n\nvoid PairPolymorphic::write_tables(int npts)\n{\n  char tag[6] = \"\";\n  if (comm->me != 0) sprintf(tag,\"%d\",comm->me);\n  FILE* fp =  NULL;\n  double  xmin,xmax,x,uf,vf,wf,pf,gf,ff,ufp,vfp,wfp,pfp,gfp,ffp;\n  char line[MAXLINE];\n  for (int i = 0; i < nelements; i++) {\n  for (int j = 0; j < nelements; j++) {\n    strcpy(line,elements[i]);\n    strcat(line,elements[j]);\n    strcat(line,\"_UVW\");\n    strcat(line,tag);\n    fp = fopen(line, \"w\");\n    int iparam_ij = elem2param[i][j];\n    PairParameters & pair = pairParameters[iparam_ij];\n    xmin = (pair.U)->get_xmin();\n    xmax = (pair.U)->get_xmax();\n    double xl = xmax - xmin;\n    xmin = xmin - 0.5*xl;\n    xmax = xmax + 0.5*xl;\n    for (int k = 0; k < npts; k++) {\n      x = xmin + (xmax-xmin) * k / (npts-1);\n      (pair.U)->value(x, uf, 1, ufp, 1);\n      (pair.V)->value(x, vf, 1, vfp, 1);\n      (pair.W)->value(x, wf, 1, wfp, 1);\n      fprintf(fp,\"%12.4f %12.4f %12.4f %12.4f %12.4f %12.4f %12.4f \\n\",x,uf,vf,wf,ufp,vfp,wfp);\n    }\n    fclose(fp);\n  }\n  }\n  for (int i = 0; i < nelements; i++) {\n  for (int j = 0; j < nelements; j++) {\n    strcpy(line,elements[i]);\n    strcat(line,elements[j]);\n    strcat(line,\"_P\");\n    strcat(line,tag);\n    fp = fopen(line, \"w\");\n    int iparam_ij = elem2param[i][j];\n    PairParameters & pair = pairParameters[iparam_ij];\n    xmin = (pair.P)->get_xmin();\n    xmax = (pair.P)->get_xmax();\n    double xl = xmax - xmin;\n    xmin = xmin - 0.5*xl;\n    xmax = xmax + 0.5*xl;\n    for (int k = 0; k < npts; k++) {\n      x = xmin + (xmax-xmin) * k / (npts-1);\n      (pair.P)->value(x, pf, 1, pfp, 1);\n      fprintf(fp,\"%12.4f %12.4f %12.4f \\n\",x,pf,pfp);\n    }\n    fclose(fp);\n  }\n  }\n  for (int i = 0; i < nelements; i++) {\n  for (int j = 0; j < nelements; j++) {\n  for (int k = 0; k < nelements; k++) {\n    strcpy(line,elements[i]);\n    strcat(line,elements[j]);\n    strcat(line,elements[k]);\n    strcat(line,\"_G\");\n    strcat(line,tag);\n    fp = fopen(line, \"w\");\n    int iparam_ij = elem3param[i][j][k];\n    TripletParameters & pair = tripletParameters[iparam_ij];\n    xmin = (pair.G)->get_xmin();\n    xmax = (pair.G)->get_xmax();\n    for (int n = 0; n < npts; n++) {\n      x = xmin + (xmax-xmin) * n / (npts-1);\n      (pair.G)->value(x, gf, 1, gfp, 1);\n      fprintf(fp,\"%12.4f %12.4f %12.4f \\n\",x,gf,gfp);\n    }\n    fclose(fp);\n  }\n  }\n  }\n  for (int i = 0; i < nelements; i++) {\n  for (int j = 0; j < nelements; j++) {\n    strcpy(line,elements[i]);\n    strcat(line,elements[j]);\n    strcat(line,\"_F\");\n    strcat(line,tag);\n    fp = fopen(line, \"w\");\n    int iparam_ij = elem2param[i][j];\n    PairParameters & pair = pairParameters[iparam_ij];\n    xmin = (pair.F)->get_xmin();\n    xmax = (pair.F)->get_xmax();\n    double xl = xmax - xmin;\n    xmin = xmin - 0.5*xl;\n    xmax = xmax + 0.5*xl;\n    for (int k = 0; k < npts; k++) {\n      x = xmin + (xmax-xmin) * k / (npts-1);\n      (pair.F)->value(x, ff, 1, ffp, 1);\n      fprintf(fp,\"%12.4f %12.4f %12.4f \\n\",x,ff,ffp);\n    }\n    fclose(fp);\n  }\n  }\n\n}\n\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under \n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(polymorphic,PairPolymorphic)\n\n#else\n\n#ifndef LMP_PAIR_POLYMORPHIC_H\n#define LMP_PAIR_POLYMORPHIC_H\n\n#include \"pair.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairPolymorphic : public Pair {\n\n  public:\n\n  PairPolymorphic(class LAMMPS *);\n  virtual ~PairPolymorphic();\n  virtual void compute(int, int);\n  void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n\n  protected:\n\n  class tabularFunction {\n\n    public:\n\n    tabularFunction() {\n      size = 0;\n      xmin = 0.0;\n      xmax = 0.0;\n      xmaxsq = xmax*xmax;\n      vmax = 0.0;\n      xs = NULL;\n      ys = NULL;\n      ys1 = NULL;\n      ys2 = NULL;\n      ys3 = NULL;\n      ys4 = NULL;\n      ys5 = NULL;\n      ys6 = NULL;\n    }\n    tabularFunction(int n) {\n      size = n;\n      xmin = 0.0;\n      xmax = 0.0;\n      xmaxsq = xmax*xmax;\n      xs = new double[n];\n      ys = new double[n];\n      ys1 = new double[n];\n      ys2 = new double[n];\n      ys3 = new double[n];\n      ys4 = new double[n];\n      ys5 = new double[n];\n      ys6 = new double[n];\n    }\n    tabularFunction(int n, double x1, double x2) {\n      size = n;\n      xmin = x1;\n      xmax = x2; \n      xmaxsq = xmax*xmax;\n      xs = new double[n];\n      ys = new double[n];\n      ys1 = new double[n];\n      ys2 = new double[n];\n      ys3 = new double[n];\n      ys4 = new double[n];\n      ys5 = new double[n];\n      ys6 = new double[n];\n    }\n    virtual ~tabularFunction() {\n      if (xs) delete [] xs; \n      if (ys) delete [] ys; \n      if (ys1) delete [] ys1; \n      if (ys2) delete [] ys2;\n      if (ys3) delete [] ys3;\n      if (ys4) delete [] ys4;\n      if (ys5) delete [] ys5;\n      if (ys6) delete [] ys6;\n    }\n    void set_xrange(double x1, double x2) {\n      xmin = x1;\n      xmax = x2;\n      xmaxsq = xmax*xmax;\n    }\n    void set_values(int n, double x1, double x2, double * values, double epsilon)\n    {\n      int i0;\n      i0 = n-1;\n//    shrink (remove near zero points) reduces cutoff radius, and therefore computational cost\n//    do not shrink when x2 < 1.1 (angular function) or x2 > 20.0 (non-radial function)\n      if (x2 >= 1.1 && x2 <= 20.0) {\n        for (int i = n-1; i >= 0; i--) {\n          if (fabs(values[i]) > epsilon) {\n            i0 = i;\n            break;\n          }\n        }\n      }\n//    do not shrink when when list is abnormally small\n      if (i0 < 10/n) {\n        i0 = n-1;\n      } else if (i0 < n-1) {\n        values[i0] = 0.0;\n        i0 = i0 + 1;\n        values[i0] = 0.0;\n      }\n      xmin = x1;\n      xmax = x1 + (x2-x1)/(n -1)*i0;\n      xmaxsq = xmax*xmax;\n      n = i0+1;\n      resize(n);\n      memcpy(ys,values,n*sizeof(double));\n      initialize();\n    }\n    void value(double x, double &y, int ny, double &y1, int ny1)\n    {\n      double ps = (x - xmin) * rdx;\n      int ks = ps + 0.5;\n      if (ks > size-1) ks = size-1;\n      if (ks < 0 ) ks = 0;\n      ps = ps - ks;\n      if (ny) y = ((ys3[ks]*ps + ys2[ks])*ps + ys1[ks])*ps + ys[ks];\n      if (ny1) y1 = (ys6[ks]*ps + ys5[ks])*ps + ys4[ks];\n    }\n    void print_value()\n    {\n      printf(\"%d %f %f %f \\n\",size,xmin,xmax,rdx);\n      printf(\" \\n\");\n      for (int i = 0; i < size; i++) {\n        printf(\"%f %f \\n\",xs[i],ys[i]);\n      }\n    }\n    double get_xmin() {\n      return xmin;\n    }\n    double get_xmax() {\n      return xmax;\n    }\n    double get_xmaxsq() {\n      return xmaxsq;\n    }\n    double get_rdx() {\n      return rdx;\n    }\n    double get_vmax() {\n      return vmax;\n    }\n\n    protected:\n\n    void resize(int n) {\n      if (n != size) {\n        size = n;\n        if (xs) delete [] xs;\n        xs = new double[n];\n        if (ys) delete [] ys;\n        ys = new double[n];\n        if (ys1) delete [] ys1;\n        ys1 = new double[n];\n        if (ys2) delete [] ys2;\n        ys2 = new double[n];\n        if (ys3) delete [] ys3;\n        ys3 = new double[n];\n        if (ys4) delete [] ys4;\n        ys4 = new double[n];\n        if (ys5) delete [] ys5;\n        ys5 = new double[n];\n        if (ys6) delete [] ys6;\n        ys6 = new double[n];\n      }\n    }\n    void initialize() {\n      int n = size;\n      rdx = (xmax-xmin)/(n-1.0);\n      vmax = 0.0;\n      for (int i = 0; i < n; i++) {\n        if (fabs(ys[i]) > vmax) vmax = fabs(ys[i]);\n      }\n      for (int i = 0; i < n; i++) {\n        xs[i] = xmin+i*rdx;\n      }\n      rdx = 1.0 / rdx;\n      ys1[0] = ys[1] - ys[0];\n      ys1[1] = 0.5 * (ys[2] - ys[0]);\n      ys1[n-2] = 0.5 * (ys[n-1] - ys[n-3]);\n      ys1[n-1] = ys[n-1] - ys[n-2];\n      for (int i = 2; i < n-2; i++) {\n        ys1[i]=((ys[i-2]-ys[i+2])+ 8.0*(ys[i+1]-ys[i-1]))/12.0;\n      }\n      for (int i = 0; i < n-1; i++) {\n        ys2[i]=3.0*(ys[i+1]-ys[i])-2.0*ys1[i]-ys1[i+1];\n        ys3[i]=ys1[i]+ys1[i+1]-2.0*(ys[i+1]-ys[i]);\n      }\n      ys2[n-1]=0.0;\n      ys3[n-1]=0.0;\n      for (int i = 0; i < n; i++) {\n        ys4[i]=ys1[i]*rdx;\n        ys5[i]=2.0*ys2[i]*rdx;\n        ys6[i]=3.0*ys3[i]*rdx;\n      }\n    }\n    int size;\n    double xmin,xmax,xmaxsq,rdx,vmax;\n    double * ys, * ys1, * ys2, * ys3, * ys4, * ys5, * ys6;\n    double * xs;\n  };\n\n  struct PairParameters {\n    double cut;\n    double cutsq;\n    bool xi; // \"indicator\"\n    class tabularFunction * U;\n    class tabularFunction * V;\n    class tabularFunction * W;\n    class tabularFunction * P;\n    class tabularFunction * F;\n    PairParameters() {\n      cut = 0.0;\n      cutsq = 0.0;\n      xi =  true;\n      U = NULL;\n      V = NULL;\n      W = NULL;\n      P = NULL;\n      F = NULL;\n    };\n  };\n  struct TripletParameters {\n    class tabularFunction * G;\n    TripletParameters() {\n      G = NULL;\n    };\n  };\n\n  double epsilon;\n  bool eta; // global indicator\n  int nx,nr,ng; // table sizes\n  double maxX;\n  \n  // parameter sets\n  PairParameters    * pairParameters;    // for I-J interaction\n  TripletParameters * tripletParameters; // for I-J-K interaction\n\n  int neighsize,numneighV,numneighW,numneighW1;\n  int *firstneighV,*firstneighW,*firstneighW1;\n  double *delxV,*delyV,*delzV,*drV;\n  double *delxW,*delyW,*delzW,*drW;\n  \n  char **elements;              // names of unique elements\n  int **elem2param;             // map: element pairs to parameters\n  int ***elem3param;            // map: element triplets to parameters\n  int *map;                     // mapping from atom types to elements\n  double cutmax;                // max cutoff for all elements\n  double cutmaxsq;\n  int nelements;                // # of unique elements\n  int npair,ntriple;\n  int *match;\n\n  void allocate();\n  void grab(FILE *, int, double *);\n\n  virtual void read_file(char *);\n  void setup_params();\n  void write_tables(int);\n\n  void attractive(PairParameters *, TripletParameters *, double, double,\n                  double, double *, double *, double *, double *, double *);\n\n  void ters_zetaterm_d(double, double *, double, double *, double, double *,\n                       double *, double *, PairParameters *, TripletParameters *);\n  void costheta_d(double *, double, double *, double,\n\t\t  double *, double *, double *);\n\n  // inlined functions for efficiency\n\n  inline double vec3_dot(const double x[3], const double y[3]) const {\n    return x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n  }\n\n  inline void vec3_add(const double x[3], const double y[3], \n\t\t       double * const z) const {\n    z[0] = x[0]+y[0];  z[1] = x[1]+y[1];  z[2] = x[2]+y[2];\n  }\n\n  inline void vec3_scale(const double k, const double x[3],\n\t\t\t double y[3]) const {\n    y[0] = k*x[0];  y[1] = k*x[1];  y[2] = k*x[2];\n  }\n\n  inline void vec3_scaleadd(const double k, const double x[3], \n\t\t\t    const double y[3], double * const z) const {\n    z[0] = k*x[0]+y[0];\n    z[1] = k*x[1]+y[1];\n    z[2] = k*x[2]+y[2];\n  }\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style polymorphic requires atom IDs\n\nThis is a requirement to use the polymorphic potential.\n\nE: Pair style polymorphic requires newton pair on\n\nSee the newton command.  This is a restriction to use the polymorphic\npotential.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Cannot open polymorphic potential file %s\n\nThe specified polymorphic potential file cannot be opened.  Check that\nthe path and name are correct.\n\nE: Incorrect number of elements in potential file\n\nSelf-explanatory.\n\nE: Element not defined in potential file\n\nThe specified element is not in the potential file.\n\n*/\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef ATOM_CLASS\n\nAtomStyle(angle,AtomVecAngle)\n\n#else\n\n#ifndef LMP_ATOM_VEC_ANGLE_H\n#define LMP_ATOM_VEC_ANGLE_H\n\n#include \"atom_vec.h\"\n\nnamespace LAMMPS_NS {\n\nclass AtomVecAngle : public AtomVec {\n public:\n  AtomVecAngle(class LAMMPS *);\n  virtual ~AtomVecAngle() {}\n  void grow(int);\n  void grow_reset();\n  void copy(int, int, int);\n  virtual int pack_comm(int, int *, double *, int, int *);\n  virtual int pack_comm_vel(int, int *, double *, int, int *);\n  virtual void unpack_comm(int, int, double *);\n  virtual void unpack_comm_vel(int, int, double *);\n  int pack_reverse(int, int, double *);\n  void unpack_reverse(int, int *, double *);\n  virtual int pack_border(int, int *, double *, int, int *);\n  virtual int pack_border_vel(int, int *, double *, int, int *);\n  int pack_border_hybrid(int, int *, double *);\n  virtual void unpack_border(int, int, double *);\n  virtual void unpack_border_vel(int, int, double *);\n  int unpack_border_hybrid(int, int, double *);\n  virtual int pack_exchange(int, double *);\n  virtual int unpack_exchange(double *);\n  int size_restart();\n  int pack_restart(int, double *);\n  int unpack_restart(double *);\n  void create_atom(int, double *);\n  void data_atom(double *, imageint, char **);\n  int data_atom_hybrid(int, char **);\n  void pack_data(double **);\n  int pack_data_hybrid(int, double *);\n  void write_data(FILE *, int, double **);\n  int write_data_hybrid(FILE *, double *);\n  bigint memory_usage();\n\n protected:\n  tagint *tag;\n  int *type,*mask;\n  imageint *image;\n  double **x,**v,**f;\n  tagint *molecule;\n  int **nspecial;\n  tagint **special;\n  int *num_bond;\n  int **bond_type;\n  tagint **bond_atom;\n  int *num_angle;\n  int **angle_type;\n  tagint **angle_atom1,**angle_atom2,**angle_atom3;\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Per-processor system is too big\n\nThe number of owned atoms plus ghost atoms on a single\nprocessor must fit in 32-bit integer.\n\nE: Invalid atom type in Atoms section of data file\n\nAtom types must range from 1 to specified # of types.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <stdlib.h>\n#include \"atom_vec_angle.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"domain.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nAtomVecAngle::AtomVecAngle(LAMMPS *lmp) : AtomVec(lmp)\n{\n  molecular = 1;\n  bonds_allow = angles_allow = 1;\n  mass_type = 1;\n\n  comm_x_only = comm_f_only = 1;\n  size_forward = 3;\n  size_reverse = 3;\n  size_border = 7;\n  size_velocity = 3;\n  size_data_atom = 6;\n  size_data_vel = 4;\n  xcol_data = 4;\n\n  atom->molecule_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   grow atom arrays\n   n = 0 grows arrays by a chunk\n   n > 0 allocates arrays to size n\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::grow(int n)\n{\n  if (n == 0) grow_nmax();\n  else nmax = n;\n  atom->nmax = nmax;\n  if (nmax < 0 || nmax > MAXSMALLINT)\n    error->one(FLERR,\"Per-processor system is too big\");\n\n  tag = memory->grow(atom->tag,nmax,\"atom:tag\");\n  type = memory->grow(atom->type,nmax,\"atom:type\");\n  mask = memory->grow(atom->mask,nmax,\"atom:mask\");\n  image = memory->grow(atom->image,nmax,\"atom:image\");\n  x = memory->grow(atom->x,nmax,3,\"atom:x\");\n  v = memory->grow(atom->v,nmax,3,\"atom:v\");\n  f = memory->grow(atom->f,nmax*comm->nthreads,3,\"atom:f\");\n\n  molecule = memory->grow(atom->molecule,nmax,\"atom:molecule\");\n\n  nspecial = memory->grow(atom->nspecial,nmax,3,\"atom:nspecial\");\n  special = memory->grow(atom->special,nmax,atom->maxspecial,\"atom:special\");\n\n  num_bond = memory->grow(atom->num_bond,nmax,\"atom:num_bond\");\n  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,\n                           \"atom:bond_type\");\n  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,\n                           \"atom:bond_atom\");\n\n  num_angle = memory->grow(atom->num_angle,nmax,\"atom:num_angle\");\n  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,\n                            \"atom:angle_type\");\n  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom1\");\n  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom2\");\n  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,\n                             \"atom:angle_atom3\");\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);\n}\n\n/* ----------------------------------------------------------------------\n   reset local array ptrs\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::grow_reset()\n{\n  tag = atom->tag; type = atom->type;\n  mask = atom->mask; image = atom->image;\n  x = atom->x; v = atom->v; f = atom->f;\n  molecule = atom->molecule;\n  nspecial = atom->nspecial; special = atom->special;\n  num_bond = atom->num_bond; bond_type = atom->bond_type;\n  bond_atom = atom->bond_atom;\n  num_angle = atom->num_angle; angle_type = atom->angle_type;\n  angle_atom1 = atom->angle_atom1; angle_atom2 = atom->angle_atom2;\n  angle_atom3 = atom->angle_atom3;\n}\n\n/* ----------------------------------------------------------------------\n   copy atom I info to atom J\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::copy(int i, int j, int delflag)\n{\n  int k;\n\n  tag[j] = tag[i];\n  type[j] = type[i];\n  mask[j] = mask[i];\n  image[j] = image[i];\n  x[j][0] = x[i][0];\n  x[j][1] = x[i][1];\n  x[j][2] = x[i][2];\n  v[j][0] = v[i][0];\n  v[j][1] = v[i][1];\n  v[j][2] = v[i][2];\n\n  molecule[j] = molecule[i];\n\n  num_bond[j] = num_bond[i];\n  for (k = 0; k < num_bond[j]; k++) {\n    bond_type[j][k] = bond_type[i][k];\n    bond_atom[j][k] = bond_atom[i][k];\n  }\n\n  num_angle[j] = num_angle[i];\n  for (k = 0; k < num_angle[j]; k++) {\n    angle_type[j][k] = angle_type[i][k];\n    angle_atom1[j][k] = angle_atom1[i][k];\n    angle_atom2[j][k] = angle_atom2[i][k];\n    angle_atom3[j][k] = angle_atom3[i][k];\n  }\n\n  nspecial[j][0] = nspecial[i][0];\n  nspecial[j][1] = nspecial[i][1];\n  nspecial[j][2] = nspecial[i][2];\n  for (k = 0; k < nspecial[j][2]; k++) special[j][k] = special[i][k];\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_comm(int n, int *list, double *buf,\n                            int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_comm_vel(int n, int *list, double *buf,\n                                int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;\n      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;\n      dz = pbc[2]*domain->zprd;\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecAngle::unpack_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecAngle::unpack_comm_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_reverse(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    buf[m++] = f[i][0];\n    buf[m++] = f[i][1];\n    buf[m++] = f[i][2];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecAngle::unpack_reverse(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    f[j][0] += buf[m++];\n    f[j][1] += buf[m++];\n    f[j][2] += buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_border(int n, int *list, double *buf,\n                              int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0] + dx;\n      buf[m++] = x[j][1] + dy;\n      buf[m++] = x[j][2] + dz;\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_border_vel(int n, int *list, double *buf,\n                                  int pbc_flag, int *pbc)\n{\n  int i,j,m;\n  double dx,dy,dz,dvx,dvy,dvz;\n\n  m = 0;\n  if (pbc_flag == 0) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = x[j][0];\n      buf[m++] = x[j][1];\n      buf[m++] = x[j][2];\n      buf[m++] = ubuf(tag[j]).d;\n      buf[m++] = ubuf(type[j]).d;\n      buf[m++] = ubuf(mask[j]).d;\n      buf[m++] = ubuf(molecule[j]).d;\n      buf[m++] = v[j][0];\n      buf[m++] = v[j][1];\n      buf[m++] = v[j][2];\n    }\n  } else {\n    if (domain->triclinic == 0) {\n      dx = pbc[0]*domain->xprd;\n      dy = pbc[1]*domain->yprd;\n      dz = pbc[2]*domain->zprd;\n    } else {\n      dx = pbc[0];\n      dy = pbc[1];\n      dz = pbc[2];\n    }\n    if (!deform_vremap) {\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        buf[m++] = v[j][0];\n        buf[m++] = v[j][1];\n        buf[m++] = v[j][2];\n      }\n    } else {\n      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];\n      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];\n      dvz = pbc[2]*h_rate[2];\n      for (i = 0; i < n; i++) {\n        j = list[i];\n        buf[m++] = x[j][0] + dx;\n        buf[m++] = x[j][1] + dy;\n        buf[m++] = x[j][2] + dz;\n        buf[m++] = ubuf(tag[j]).d;\n        buf[m++] = ubuf(type[j]).d;\n        buf[m++] = ubuf(mask[j]).d;\n        buf[m++] = ubuf(molecule[j]).d;\n        if (mask[i] & deform_groupbit) {\n          buf[m++] = v[j][0] + dvx;\n          buf[m++] = v[j][1] + dvy;\n          buf[m++] = v[j][2] + dvz;\n        } else {\n          buf[m++] = v[j][0];\n          buf[m++] = v[j][1];\n          buf[m++] = v[j][2];\n        }\n      }\n    }\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_border_hybrid(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = ubuf(molecule[j]).d;\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecAngle::unpack_border(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AtomVecAngle::unpack_border_vel(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) {\n    if (i == nmax) grow(0);\n    x[i][0] = buf[m++];\n    x[i][1] = buf[m++];\n    x[i][2] = buf[m++];\n    tag[i] = (tagint) ubuf(buf[m++]).i;\n    type[i] = (int) ubuf(buf[m++]).i;\n    mask[i] = (int) ubuf(buf[m++]).i;\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n    v[i][0] = buf[m++];\n    v[i][1] = buf[m++];\n    v[i][2] = buf[m++];\n  }\n\n  if (atom->nextra_border)\n    for (int iextra = 0; iextra < atom->nextra_border; iextra++)\n      m += modify->fix[atom->extra_border[iextra]]->\n        unpack_border(n,first,&buf[m]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::unpack_border_hybrid(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++)\n    molecule[i] = (tagint) ubuf(buf[m++]).i;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   pack data for atom I for sending to another proc\n   xyz must be 1st 3 values, so comm::exchange() can test on them\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_exchange(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(bond_type[i][k]).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_angle[i]).d;\n  for (k = 0; k < num_angle[i]; k++) {\n    buf[m++] = ubuf(angle_type[i][k]).d;\n    buf[m++] = ubuf(angle_atom1[i][k]).d;\n    buf[m++] = ubuf(angle_atom2[i][k]).d;\n    buf[m++] = ubuf(angle_atom3[i][k]).d;\n  }\n\n  buf[m++] = ubuf(nspecial[i][0]).d;\n  buf[m++] = ubuf(nspecial[i][1]).d;\n  buf[m++] = ubuf(nspecial[i][2]).d;\n  for (k = 0; k < nspecial[i][2]; k++) buf[m++] = ubuf(special[i][k]).d;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint AtomVecAngle::unpack_exchange(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_angle[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_angle[nlocal]; k++) {\n    angle_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][1] = (int) ubuf(buf[m++]).i;\n  nspecial[nlocal][2] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < nspecial[nlocal][2]; k++)\n    special[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n\n  if (atom->nextra_grow)\n    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)\n      m += modify->fix[atom->extra_grow[iextra]]->\n        unpack_exchange(nlocal,&buf[m]);\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   size of restart data for all atoms owned by this proc\n   include extra data stored by fixes\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::size_restart()\n{\n  int i;\n\n  int nlocal = atom->nlocal;\n  int n = 0;\n  for (i = 0; i < nlocal; i++)\n    n += 14 + 2*num_bond[i] + 4*num_angle[i];\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      for (i = 0; i < nlocal; i++)\n        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);\n\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom I's data for restart file including extra quantities\n   xyz must be 1st 3 values, so that read_restart can test on them\n   molecular types may be negative, but write as positive\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_restart(int i, double *buf)\n{\n  int k;\n\n  int m = 1;\n  buf[m++] = x[i][0];\n  buf[m++] = x[i][1];\n  buf[m++] = x[i][2];\n  buf[m++] = ubuf(tag[i]).d;\n  buf[m++] = ubuf(type[i]).d;\n  buf[m++] = ubuf(mask[i]).d;\n  buf[m++] = ubuf(image[i]).d;\n  buf[m++] = v[i][0];\n  buf[m++] = v[i][1];\n  buf[m++] = v[i][2];\n\n  buf[m++] = ubuf(molecule[i]).d;\n\n  buf[m++] = ubuf(num_bond[i]).d;\n  for (k = 0; k < num_bond[i]; k++) {\n    buf[m++] = ubuf(MAX(bond_type[i][k],-bond_type[i][k])).d;\n    buf[m++] = ubuf(bond_atom[i][k]).d;\n  }\n\n  buf[m++] = ubuf(num_angle[i]).d;\n  for (k = 0; k < num_angle[i]; k++) {\n    buf[m++] = ubuf(MAX(angle_type[i][k],-angle_type[i][k])).d;\n    buf[m++] = ubuf(angle_atom1[i][k]).d;\n    buf[m++] = ubuf(angle_atom2[i][k]).d;\n    buf[m++] = ubuf(angle_atom3[i][k]).d;\n  }\n\n  if (atom->nextra_restart)\n    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)\n      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);\n\n  buf[0] = m;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   unpack data for one atom from restart file including extra quantities\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::unpack_restart(double *buf)\n{\n  int k;\n\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) {\n    grow(0);\n    if (atom->nextra_store)\n      memory->grow(atom->extra,nmax,atom->nextra_store,\"atom:extra\");\n  }\n\n  int m = 1;\n  x[nlocal][0] = buf[m++];\n  x[nlocal][1] = buf[m++];\n  x[nlocal][2] = buf[m++];\n  tag[nlocal] = (tagint) ubuf(buf[m++]).i;\n  type[nlocal] = (int) ubuf(buf[m++]).i;\n  mask[nlocal] = (int) ubuf(buf[m++]).i;\n  image[nlocal] = (imageint) ubuf(buf[m++]).i;\n  v[nlocal][0] = buf[m++];\n  v[nlocal][1] = buf[m++];\n  v[nlocal][2] = buf[m++];\n\n  molecule[nlocal] = (tagint) ubuf(buf[m++]).i;\n\n  num_bond[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_bond[nlocal]; k++) {\n    bond_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    bond_atom[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  num_angle[nlocal] = (int) ubuf(buf[m++]).i;\n  for (k = 0; k < num_angle[nlocal]; k++) {\n    angle_type[nlocal][k] = (int) ubuf(buf[m++]).i;\n    angle_atom1[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom2[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n    angle_atom3[nlocal][k] = (tagint) ubuf(buf[m++]).i;\n  }\n\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  double **extra = atom->extra;\n  if (atom->nextra_store) {\n    int size = static_cast<int> (buf[0]) - m;\n    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];\n  }\n\n  atom->nlocal++;\n  return m;\n}\n\n/* ----------------------------------------------------------------------\n   create one atom of itype at coord\n   set other values to defaults\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::create_atom(int itype, double *coord)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = 0;\n  type[nlocal] = itype;\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n  mask[nlocal] = 1;\n  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |\n    ((imageint) IMGMAX << IMGBITS) | IMGMAX;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n\n  molecule[nlocal] = 0;\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n  nspecial[nlocal][0] = nspecial[nlocal][1] = nspecial[nlocal][2] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack one line from Atoms section of data file\n   initialize other atom quantities\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::data_atom(double *coord, imageint imagetmp, char **values)\n{\n  int nlocal = atom->nlocal;\n  if (nlocal == nmax) grow(0);\n\n  tag[nlocal] = ATOTAGINT(values[0]);\n  molecule[nlocal] = ATOTAGINT(values[1]);\n  type[nlocal] = atoi(values[2]);\n  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)\n    error->one(FLERR,\"Invalid atom type in Atoms section of data file\");\n\n  x[nlocal][0] = coord[0];\n  x[nlocal][1] = coord[1];\n  x[nlocal][2] = coord[2];\n\n  image[nlocal] = imagetmp;\n\n  mask[nlocal] = 1;\n  v[nlocal][0] = 0.0;\n  v[nlocal][1] = 0.0;\n  v[nlocal][2] = 0.0;\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n\n  atom->nlocal++;\n}\n\n/* ----------------------------------------------------------------------\n   unpack hybrid quantities from one line in Atoms section of data file\n   initialize other atom quantities for this sub-style\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::data_atom_hybrid(int nlocal, char **values)\n{\n  molecule[nlocal] = ATOTAGINT(values[0]);\n\n  num_bond[nlocal] = 0;\n  num_angle[nlocal] = 0;\n\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   pack atom info for data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::pack_data(double **buf)\n{\n  int nlocal = atom->nlocal;\n  for (int i = 0; i < nlocal; i++) {\n    buf[i][0] = ubuf(tag[i]).d;\n    buf[i][1] = ubuf(molecule[i]).d;\n    buf[i][2] = ubuf(type[i]).d;\n    buf[i][3] = x[i][0];\n    buf[i][4] = x[i][1];\n    buf[i][5] = x[i][2];\n    buf[i][6] = ubuf((image[i] & IMGMASK) - IMGMAX).d;\n    buf[i][7] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;\n    buf[i][8] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   pack hybrid atom info for data file\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::pack_data_hybrid(int i, double *buf)\n{\n  buf[0] = ubuf(molecule[i]).d;\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   write atom info to data file including 3 image flags\n------------------------------------------------------------------------- */\n\nvoid AtomVecAngle::write_data(FILE *fp, int n, double **buf)\n{\n  for (int i = 0; i < n; i++)\n    fprintf(fp,TAGINT_FORMAT \" \" TAGINT_FORMAT\n            \" %d %-1.16e %-1.16e %-1.16e %d %d %d\\n\",\n            (tagint) ubuf(buf[i][0]).i,(tagint) ubuf(buf[i][1]).i,\n            (int) ubuf(buf[i][2]).i,\n            buf[i][3],buf[i][4],buf[i][5],\n            (int) ubuf(buf[i][6]).i,(int) ubuf(buf[i][7]).i,\n            (int) ubuf(buf[i][8]).i);\n}\n\n/* ----------------------------------------------------------------------\n   write hybrid atom info to data file\n------------------------------------------------------------------------- */\n\nint AtomVecAngle::write_data_hybrid(FILE *fp, double *buf)\n{\n  fprintf(fp,\" \" TAGINT_FORMAT,(tagint) ubuf(buf[0]).i);\n  return 1;\n}\n\n/* ----------------------------------------------------------------------\n   return # of bytes of allocated memory\n------------------------------------------------------------------------- */\n\nbigint AtomVecAngle::memory_usage()\n{\n  bigint bytes = 0;\n\n  if (atom->memcheck(\"tag\")) bytes += memory->usage(tag,nmax);\n  if (atom->memcheck(\"type\")) bytes += memory->usage(type,nmax);\n  if (atom->memcheck(\"mask\")) bytes += memory->usage(mask,nmax);\n  if (atom->memcheck(\"image\")) bytes += memory->usage(image,nmax);\n  if (atom->memcheck(\"x\")) bytes += memory->usage(x,nmax,3);\n  if (atom->memcheck(\"v\")) bytes += memory->usage(v,nmax,3);\n  if (atom->memcheck(\"f\")) bytes += memory->usage(f,nmax*comm->nthreads,3);\n\n  if (atom->memcheck(\"molecule\")) bytes += memory->usage(molecule,nmax);\n  if (atom->memcheck(\"nspecial\")) bytes += memory->usage(nspecial,nmax,3);\n  if (atom->memcheck(\"special\"))\n    bytes += memory->usage(special,nmax,atom->maxspecial);\n\n  if (atom->memcheck(\"num_bond\")) bytes += memory->usage(num_bond,nmax);\n  if (atom->memcheck(\"bond_type\"))\n    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);\n  if (atom->memcheck(\"bond_atom\"))\n    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);\n\n  if (atom->memcheck(\"num_angle\")) bytes += memory->usage(num_angle,nmax);\n  if (atom->memcheck(\"angle_type\"))\n    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom1\"))\n    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom2\"))\n    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);\n  if (atom->memcheck(\"angle_atom3\"))\n    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);\n\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(tersoff/mod,PairTersoffMOD)\n\n#else\n\n#ifndef LMP_PAIR_TERSOFF_MOD_H\n#define LMP_PAIR_TERSOFF_MOD_H\n\n#include \"pair_tersoff.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairTersoffMOD : public PairTersoff {\n public:\n  PairTersoffMOD(class LAMMPS *);\n  ~PairTersoffMOD() {}\n\n protected:\n  virtual void read_file(char *);\n  virtual void setup_params();\n  double zeta(Param *, double, double, double *, double *);\n\n  double ters_fc(double, Param *);\n  double ters_fc_d(double, Param *);\n  double ters_bij(double, Param *);\n  double ters_bij_d(double, Param *);\n  void ters_zetaterm_d(double, double *, double, double *, double,\n\t\t\t       double *, double *, double *, Param *);\n\n  // inlined functions for efficiency\n  // these replace but do not override versions in PairTersoff\n  // since overriding virtual inlined functions is best avoided\n\n  inline double ters_gijk_mod(const double costheta,\n                              const Param * const param) const {\n    const double ters_c1 = param->c1;\n    const double ters_c2 = param->c2;\n    const double ters_c3 = param->c3;\n    const double ters_c4 = param->c4;\n    const double ters_c5 = param->c5;\n    const double tmp_h = (param->h - costheta)*(param->h - costheta);\n\n    return ters_c1 + (ters_c2*tmp_h/(ters_c3 + tmp_h)) *\n      (1.0 + ters_c4*exp(-ters_c5*tmp_h));\n  }\n\n  inline double ters_gijk_d_mod(const double costheta,\n                                const Param * const param) const {\n    const double ters_c2 = param->c2;\n    const double ters_c3 = param->c3;\n    const double ters_c4 = param->c4;\n    const double ters_c5 = param->c5;\n    const double tmp_h = (param->h - costheta)*(param->h - costheta);\n    const double g1 = (param->h - costheta)/(ters_c3 + tmp_h);\n    const double g2 = exp(-ters_c5*tmp_h);\n\n    return -2.0*ters_c2*g1*((1 + ters_c4*g2)*(1 + g1*(costheta - param->h)) -\n                            tmp_h*ters_c4*ters_c5*g2);\n  }\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Cannot open Tersoff potential file %s\n\nThe specified potential file cannot be opened.  Check that the path\nand name are correct.\n\nE: Incorrect format in Tersoff potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal Tersoff parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\nE: Potential file has duplicate entry\n\nThe potential file has more than one entry for the same element.\n\nE: Potential file is missing an entry\n\nThe potential file does not have a needed entry.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Aidan Thompson (SNL) - original Tersoff implementation\n                        Vitaly Dozhdikov (JIHT of RAS) - MOD addition\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_tersoff_mod.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairTersoffMOD::PairTersoffMOD(LAMMPS *lmp) : PairTersoff(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffMOD::read_file(char *file)\n{\n  int params_per_line = 20;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open Tersoff potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n\t    eof = 1;\n\t    fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n\t      eof = 1;\n\t      fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in Tersoff potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n\t\t\t\t\t  \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].lam3 = atof(words[4]);\n    params[nparams].h = atof(words[5]);\n    params[nparams].powern = atof(words[6]);\n    params[nparams].beta = atof(words[7]);\n    params[nparams].lam2 = atof(words[8]);\n    params[nparams].bigb = atof(words[9]);\n    params[nparams].bigr = atof(words[10]);\n    params[nparams].bigd = atof(words[11]);\n    params[nparams].lam1 = atof(words[12]);\n    params[nparams].biga = atof(words[13]);\n    params[nparams].powern_del = atof(words[14]);\n    params[nparams].c1 = atof(words[15]);\n    params[nparams].c2 = atof(words[16]);\n    params[nparams].c3 = atof(words[17]);\n    params[nparams].c4 = atof(words[18]);\n    params[nparams].c5 = atof(words[19]);\n\n    // currently only allow m exponent of 1\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    if (\n\tparams[nparams].lam3 < 0.0 || params[nparams].powern < 0.0 ||\n\tparams[nparams].beta < 0.0 || params[nparams].lam2 < 0.0 ||\n\tparams[nparams].bigb < 0.0 || params[nparams].bigr < 0.0 ||\n\tparams[nparams].bigd < 0.0 ||\n                               params[nparams].bigd > params[nparams].bigr ||\n\tparams[nparams].lam3 < 0.0 || params[nparams].biga < 0.0 ||\n\tparams[nparams].powerm - params[nparams].powermint != 0.0 ||\n    (params[nparams].powermint != 3 && params[nparams].powermint != 1))\n      error->all(FLERR,\"Illegal Tersoff parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffMOD::setup_params()\n{\n  int i,j,k,m,n;\n\n  // set elem2param for all element triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n\tn = -1;\n\tfor (m = 0; m < nparams; m++) {\n\t  if (i == params[m].ielement && j == params[m].jelement &&\n\t      k == params[m].kelement) {\n\t    if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n\t    n = m;\n\t  }\n\t}\n\tif (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n\telem2param[i][j][k] = n;\n      }\n\n\n  // compute parameter values derived from inputs\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cut = params[m].bigr + params[m].bigd;\n    params[m].cutsq = params[m].cut*params[m].cut;\n\n    params[m].ca1 = pow(2.0*params[m].powern_del*1.0e-16,-1.0/params[m].powern);\n    params[m].ca4 = 1.0/params[m].ca1;\n  }\n\n  // set cutmax to max of all params\n\n  cutmax = 0.0;\n  for (m = 0; m < nparams; m++)\n    if (params[m].cut > cutmax) cutmax = params[m].cut;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffMOD::zeta(Param *param, double rsqij, double rsqik,\n\t\t\t double *delrij, double *delrik)\n{\n  double rij,rik,costheta,arg,ex_delr;\n\n  rij = sqrt(rsqij);\n  rik = sqrt(rsqik);\n  costheta = (delrij[0]*delrik[0] + delrij[1]*delrik[1] +\n\t      delrij[2]*delrik[2]) / (rij*rik);\n\n  if (param->powermint == 3) arg = pow(param->lam3 * (rij-rik),3.0);\n  else arg = param->lam3 * (rij-rik);\n\n  if (arg > 69.0776) ex_delr = 1.e30;\n  else if (arg < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(arg);\n\n  return ters_fc(rik,param) * ters_gijk_mod(costheta,param) * ex_delr;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffMOD::ters_fc(double r, Param *param)\n{\n  double ters_R = param->bigr;\n  double ters_D = param->bigd;\n\n  if (r < ters_R-ters_D) return 1.0;\n  if (r > ters_R+ters_D) return 0.0;\n  return 0.5*(1.0 - 1.125*sin(MY_PI2*(r - ters_R)/ters_D) -\n              0.125*sin(3*MY_PI2*(r - ters_R)/ters_D));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffMOD::ters_fc_d(double r, Param *param)\n{\n  double ters_R = param->bigr;\n  double ters_D = param->bigd;\n\n  if (r < ters_R-ters_D) return 0.0;\n  if (r > ters_R+ters_D) return 0.0;\n  return -(0.375*MY_PI4/ters_D) * (3*cos(MY_PI2*(r - ters_R)/ters_D) +\n                                   cos(3*MY_PI2*(r - ters_R)/ters_D));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffMOD::ters_bij(double zeta, Param *param)\n{\n  double tmp = param->beta * zeta;\n  if (tmp > param->ca1) return pow(tmp, -param->powern/(2.0*param->powern_del));\n  if (tmp < param->ca4) return 1.0;\n  return pow(1.0 + pow(tmp,param->powern), -1.0/(2.0*param->powern_del));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffMOD::ters_bij_d(double zeta, Param *param)\n{\n  double tmp = param->beta * zeta;\n  if (tmp > param->ca1) return -0.5*(param->powern/param->powern_del)*\n\t  pow(tmp,-0.5*(param->powern/param->powern_del)) / zeta;\n  if (tmp < param->ca4) return 0.0;\n\n  double tmp_n = pow(tmp,param->powern);\n  return -0.5 *(param->powern/param->powern_del)*\n\t  pow(1.0+tmp_n, -1.0-(1.0/(2.0*param->powern_del)))*tmp_n / zeta;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffMOD::ters_zetaterm_d(double prefactor,\n\t\t\t\t  double *rij_hat, double rij,\n\t\t\t\t  double *rik_hat, double rik,\n\t\t\t\t  double *dri, double *drj, double *drk,\n\t\t\t\t  Param *param)\n{\n  double gijk,gijk_d,ex_delr,ex_delr_d,fc,dfc,cos_theta,tmp;\n  double dcosdri[3],dcosdrj[3],dcosdrk[3];\n\n  fc = ters_fc(rik,param);\n  dfc = ters_fc_d(rik,param);\n  if (param->powermint == 3) tmp = pow(param->lam3 * (rij-rik),3.0);\n  else tmp = param->lam3 * (rij-rik);\n\n  if (tmp > 69.0776) ex_delr = 1.e30;\n  else if (tmp < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(tmp);\n\n  if (param->powermint == 3)\n    ex_delr_d = 3.0*pow(param->lam3,3.0) * pow(rij-rik,2.0)*ex_delr;\n  else ex_delr_d = param->lam3 * ex_delr;\n\n  cos_theta = vec3_dot(rij_hat,rik_hat);\n  gijk = ters_gijk_mod(cos_theta,param);\n  gijk_d = ters_gijk_d_mod(cos_theta,param);\n  costheta_d(rij_hat,rij,rik_hat,rik,dcosdri,dcosdrj,dcosdrk);\n\n  // compute the derivative wrt Ri\n  // dri = -dfc*gijk*ex_delr*rik_hat;\n  // dri += fc*gijk_d*ex_delr*dcosdri;\n  // dri += fc*gijk*ex_delr_d*(rik_hat - rij_hat);\n\n  vec3_scale(-dfc*gijk*ex_delr,rik_hat,dri);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdri,dri,dri);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rik_hat,dri,dri);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rij_hat,dri,dri);\n  vec3_scale(prefactor,dri,dri);\n\n  // compute the derivative wrt Rj\n  // drj = fc*gijk_d*ex_delr*dcosdrj;\n  // drj += fc*gijk*ex_delr_d*rij_hat;\n\n  vec3_scale(fc*gijk_d*ex_delr,dcosdrj,drj);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rij_hat,drj,drj);\n  vec3_scale(prefactor,drj,drj);\n\n  // compute the derivative wrt Rk\n  // drk = dfc*gijk*ex_delr*rik_hat;\n  // drk += fc*gijk_d*ex_delr*dcosdrk;\n  // drk += -fc*gijk*ex_delr_d*rik_hat;\n\n  vec3_scale(dfc*gijk*ex_delr,rik_hat,drk);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdrk,drk,drk);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rik_hat,drk,drk);\n  vec3_scale(prefactor,drk,drk);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"bond_fene_expand.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"update.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nBondFENEExpand::BondFENEExpand(LAMMPS *lmp) : Bond(lmp)\n{\n  TWO_1_3 = pow(2.0,(1.0/3.0));\n}\n\n/* ---------------------------------------------------------------------- */\n\nBondFENEExpand::~BondFENEExpand()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(r0);\n    memory->destroy(epsilon);\n    memory->destroy(sigma);\n    memory->destroy(shift);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondFENEExpand::compute(int eflag, int vflag)\n{\n  int i1,i2,n,type;\n  double delx,dely,delz,ebond,fbond;\n  double rsq,r0sq,rlogarg,sr2,sr6;\n  double r,rshift,rshiftsq;\n\n  ebond = sr6 = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    // force from log term\n\n    rsq = delx*delx + dely*dely + delz*delz;\n    r = sqrt(rsq);\n    rshift = r - shift[type];\n    rshiftsq = rshift*rshift;\n    r0sq = r0[type] * r0[type];\n    rlogarg = 1.0 - rshiftsq/r0sq;\n\n    // if r -> r0, then rlogarg < 0.0 which is an error\n    // issue a warning and reset rlogarg = epsilon\n    // if r > 2*r0 something serious is wrong, abort\n\n    if (rlogarg < 0.1) {\n      char str[128];\n      sprintf(str,\"FENE bond too long: \" BIGINT_FORMAT \" \"\n              TAGINT_FORMAT \" \" TAGINT_FORMAT \" %g\",\n              update->ntimestep,atom->tag[i1],atom->tag[i2],sqrt(rsq));\n      error->warning(FLERR,str,0);\n      if (rlogarg <= -3.0) error->one(FLERR,\"Bad FENE bond\");\n      rlogarg = 0.1;\n    }\n\n    fbond = -k[type]*rshift/rlogarg/r;\n\n    // force from LJ term\n\n    if (rshiftsq < TWO_1_3*sigma[type]*sigma[type]) {\n      sr2 = sigma[type]*sigma[type]/rshiftsq;\n      sr6 = sr2*sr2*sr2;\n      fbond += 48.0*epsilon[type]*sr6*(sr6-0.5)/rshift/r;\n    }\n\n    // energy\n\n    if (eflag) {\n      ebond = -0.5 * k[type]*r0sq*log(rlogarg);\n      if (rshiftsq < TWO_1_3*sigma[type]*sigma[type])\n        ebond += 4.0*epsilon[type]*sr6*(sr6-1.0) + epsilon[type];\n    }\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondFENEExpand::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(k,n+1,\"bond:k\");\n  memory->create(r0,n+1,\"bond:r0\");\n  memory->create(epsilon,n+1,\"bond:epsilon\");\n  memory->create(sigma,n+1,\"bond:sigma\");\n  memory->create(shift,n+1,\"bond:shift\");\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid BondFENEExpand::coeff(int narg, char **arg)\n{\n  if (narg != 6) error->all(FLERR,\"Incorrect args for bond coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  double r0_one = force->numeric(FLERR,arg[2]);\n  double epsilon_one = force->numeric(FLERR,arg[3]);\n  double sigma_one = force->numeric(FLERR,arg[4]);\n  double shift_one = force->numeric(FLERR,arg[5]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    r0[i] = r0_one;\n    epsilon[i] = epsilon_one;\n    sigma[i] = sigma_one;\n    shift[i] = shift_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for bond coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   check if special_bond settings are valid\n------------------------------------------------------------------------- */\n\nvoid BondFENEExpand::init_style()\n{\n  // special bonds should be 0 1 1\n\n  if (force->special_lj[1] != 0.0 || force->special_lj[2] != 1.0 ||\n      force->special_lj[3] != 1.0) {\n    if (comm->me == 0)\n      error->warning(FLERR,\"Use special bonds = 0,1,1 with bond style fene/expand\");\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondFENEExpand::equilibrium_distance(int i)\n{\n  return 0.97*sigma[i] + shift[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid BondFENEExpand::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&r0[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&epsilon[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&sigma[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&shift[1],sizeof(double),atom->nbondtypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid BondFENEExpand::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&r0[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&epsilon[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&sigma[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&shift[1],sizeof(double),atom->nbondtypes,fp);\n  }\n  MPI_Bcast(&k[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&epsilon[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&sigma[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&shift[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nbondtypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid BondFENEExpand::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nbondtypes; i++)\n    fprintf(fp,\"%d %g %g %g %g %g\\n\",i,k[i],r0[i],epsilon[i],sigma[i],shift[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondFENEExpand::single(int type, double rsq, int i, int j,\n                        double &fforce)\n{\n  double r = sqrt(rsq);\n  double rshift = r - shift[type];\n  double rshiftsq = rshift*rshift;\n  double r0sq = r0[type] * r0[type];\n  double rlogarg = 1.0 - rshiftsq/r0sq;\n\n  // if r -> r0, then rlogarg < 0.0 which is an error\n  // issue a warning and reset rlogarg = epsilon\n  // if r > 2*r0 something serious is wrong, abort\n\n  if (rlogarg < 0.1) {\n    char str[128];\n    sprintf(str,\"FENE bond too long: \" BIGINT_FORMAT \" %g\",\n            update->ntimestep,sqrt(rsq));\n    error->warning(FLERR,str,0);\n    if (rlogarg <= -3.0) error->one(FLERR,\"Bad FENE bond\");\n    rlogarg = 0.1;\n  }\n\n  double eng = -0.5 * k[type]*r0sq*log(rlogarg);\n  fforce = -k[type]*rshift/rlogarg/r;\n  if (rshiftsq < TWO_1_3*sigma[type]*sigma[type]) {\n    double sr2,sr6;\n    sr2 = sigma[type]*sigma[type]/rshiftsq;\n    sr6 = sr2*sr2*sr2;\n    eng += 4.0*epsilon[type]*sr6*(sr6-1.0) + epsilon[type];\n    fforce += 48.0*epsilon[type]*sr6*(sr6-0.5)/rshift/r;\n  }\n\n  return eng;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(eam/fs,PairEAMFS)\n\n#else\n\n#ifndef LMP_PAIR_EAM_FS_H\n#define LMP_PAIR_EAM_FS_H\n\n#include \"pair_eam.h\"\n\nnamespace LAMMPS_NS {\n\n// need virtual public b/c of how eam/fs/opt inherits from it\n\nclass PairEAMFS : virtual public PairEAM {\n public:\n  PairEAMFS(class LAMMPS *);\n  virtual ~PairEAMFS() {}\n  void coeff(int, char **);\n\n protected:\n  void read_file(char *);\n  void file2array();\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: No matching element in EAM potential file\n\nThe EAM potential file does not contain elements that match the\nrequested elements.\n\nE: Cannot open EAM potential file %s\n\nThe specified EAM potential file cannot be opened.  Check that the\npath and name are correct.\n\nE: Incorrect element names in EAM potential file\n\nThe element names in the EAM file do not match those requested.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Tim Lau (MIT)\n------------------------------------------------------------------------- */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_eam_fs.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n\n/* ---------------------------------------------------------------------- */\n\nPairEAMFS::PairEAMFS(LAMMPS *lmp) : PairEAM(lmp)\n{\n  one_coeff = 1;\n  manybody_flag = 1;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n   read EAM Finnis-Sinclair file\n------------------------------------------------------------------------- */\n\nvoid PairEAMFS::coeff(int narg, char **arg)\n{\n  int i,j;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read EAM Finnis-Sinclair file\n\n  if (fs) {\n    for (i = 0; i < fs->nelements; i++) delete [] fs->elements[i];\n    delete [] fs->elements;\n    delete [] fs->mass;\n    memory->destroy(fs->frho);\n    memory->destroy(fs->rhor);\n    memory->destroy(fs->z2r);\n    delete fs;\n  }\n  fs = new Fs();\n  read_file(arg[2]);\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < fs->nelements; j++)\n      if (strcmp(arg[i],fs->elements[j]) == 0) break;\n    if (j < fs->nelements) map[i-2] = j;\n    else error->all(FLERR,\"No matching element in EAM potential file\");\n  }\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  int n = atom->ntypes;\n  for (i = 1; i <= n; i++)\n    for (j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n  // set mass of atom type if i = j\n\n  int count = 0;\n  for (i = 1; i <= n; i++) {\n    for (j = i; j <= n; j++) {\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        if (i == j) atom->set_mass(FLERR,i,fs->mass[map[i]]);\n        count++;\n      }\n      scale[i][j] = 1.0;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   read a multi-element DYNAMO setfl file\n------------------------------------------------------------------------- */\n\nvoid PairEAMFS::read_file(char *filename)\n{\n  Fs *file = fs;\n\n  // open potential file\n\n  int me = comm->me;\n  FILE *fptr;\n  char line[MAXLINE];\n\n  if (me == 0) {\n    fptr = force->open_potential(filename);\n    if (fptr == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open EAM potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read and broadcast header\n  // extract element names from nelements line\n\n  int n;\n  if (me == 0) {\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    n = strlen(line) + 1;\n  }\n  MPI_Bcast(&n,1,MPI_INT,0,world);\n  MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n  sscanf(line,\"%d\",&file->nelements);\n  int nwords = atom->count_words(line);\n  if (nwords != file->nelements + 1)\n    error->all(FLERR,\"Incorrect element names in EAM potential file\");\n\n  char **words = new char*[file->nelements+1];\n  nwords = 0;\n  strtok(line,\" \\t\\n\\r\\f\");\n  while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n  file->elements = new char*[file->nelements];\n  for (int i = 0; i < file->nelements; i++) {\n    n = strlen(words[i]) + 1;\n    file->elements[i] = new char[n];\n    strcpy(file->elements[i],words[i]);\n  }\n  delete [] words;\n\n  if (me == 0) {\n    fgets(line,MAXLINE,fptr);\n    nwords = sscanf(line,\"%d %lg %d %lg %lg\",\n           &file->nrho,&file->drho,&file->nr,&file->dr,&file->cut);\n  }\n\n  MPI_Bcast(&nwords,1,MPI_INT,0,world);\n  MPI_Bcast(&file->nrho,1,MPI_INT,0,world);\n  MPI_Bcast(&file->drho,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->nr,1,MPI_INT,0,world);\n  MPI_Bcast(&file->dr,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->cut,1,MPI_DOUBLE,0,world);\n\n  if ((nwords != 5) || (file->nrho <= 0) || (file->nr <= 0) || (file->dr <= 0.0))\n    error->all(FLERR,\"Invalid EAM potential file\");\n\n  file->mass = new double[file->nelements];\n  memory->create(file->frho,file->nelements,file->nrho+1,\n                                              \"pair:frho\");\n  memory->create(file->rhor,file->nelements,file->nelements,\n                 file->nr+1,\"pair:rhor\");\n  memory->create(file->z2r,file->nelements,file->nelements,\n                 file->nr+1,\"pair:z2r\");\n\n  int i,j,tmp;\n  for (i = 0; i < file->nelements; i++) {\n    if (me == 0) {\n      fgets(line,MAXLINE,fptr);\n      sscanf(line,\"%d %lg\",&tmp,&file->mass[i]);\n    }\n    MPI_Bcast(&file->mass[i],1,MPI_DOUBLE,0,world);\n\n    if (me == 0) grab(fptr,file->nrho,&file->frho[i][1]);\n    MPI_Bcast(&file->frho[i][1],file->nrho,MPI_DOUBLE,0,world);\n\n    for (j = 0; j < file->nelements; j++) {\n      if (me == 0) grab(fptr,file->nr,&file->rhor[i][j][1]);\n      MPI_Bcast(&file->rhor[i][j][1],file->nr,MPI_DOUBLE,0,world);\n    }\n  }\n\n  for (i = 0; i < file->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      if (me == 0) grab(fptr,file->nr,&file->z2r[i][j][1]);\n      MPI_Bcast(&file->z2r[i][j][1],file->nr,MPI_DOUBLE,0,world);\n    }\n\n  // close the potential file\n\n  if (me == 0) fclose(fptr);\n}\n\n/* ----------------------------------------------------------------------\n   copy read-in setfl potential to standard array format\n------------------------------------------------------------------------- */\n\nvoid PairEAMFS::file2array()\n{\n  int i,j,m,n;\n  int ntypes = atom->ntypes;\n\n  // set function params directly from fs file\n\n  nrho = fs->nrho;\n  nr = fs->nr;\n  drho = fs->drho;\n  dr = fs->dr;\n  rhomax = (nrho-1) * drho;\n\n  // ------------------------------------------------------------------\n  // setup frho arrays\n  // ------------------------------------------------------------------\n\n  // allocate frho arrays\n  // nfrho = # of fs elements + 1 for zero array\n\n  nfrho = fs->nelements + 1;\n  memory->destroy(frho);\n  memory->create(frho,nfrho,nrho+1,\"pair:frho\");\n\n  // copy each element's frho to global frho\n\n  for (i = 0; i < fs->nelements; i++)\n    for (m = 1; m <= nrho; m++) frho[i][m] = fs->frho[i][m];\n\n  // add extra frho of zeroes for non-EAM types to point to (pair hybrid)\n  // this is necessary b/c fp is still computed for non-EAM atoms\n\n  for (m = 1; m <= nrho; m++) frho[nfrho-1][m] = 0.0;\n\n  // type2frho[i] = which frho array (0 to nfrho-1) each atom type maps to\n  // if atom type doesn't point to element (non-EAM atom in pair hybrid)\n  // then map it to last frho array of zeroes\n\n  for (i = 1; i <= ntypes; i++)\n    if (map[i] >= 0) type2frho[i] = map[i];\n    else type2frho[i] = nfrho-1;\n\n  // ------------------------------------------------------------------\n  // setup rhor arrays\n  // ------------------------------------------------------------------\n\n  // allocate rhor arrays\n  // nrhor = square of # of fs elements\n\n  nrhor = fs->nelements * fs->nelements;\n  memory->destroy(rhor);\n  memory->create(rhor,nrhor,nr+1,\"pair:rhor\");\n\n  // copy each element pair rhor to global rhor\n\n  n = 0;\n  for (i = 0; i < fs->nelements; i++)\n    for (j = 0; j < fs->nelements; j++) {\n      for (m = 1; m <= nr; m++) rhor[n][m] = fs->rhor[i][j][m];\n      n++;\n    }\n\n  // type2rhor[i][j] = which rhor array (0 to nrhor-1) each type pair maps to\n  // for fs files, there is a full NxN set of rhor arrays\n  // OK if map = -1 (non-EAM atom in pair hybrid) b/c type2rhor not used\n\n  for (i = 1; i <= ntypes; i++)\n    for (j = 1; j <= ntypes; j++)\n      type2rhor[i][j] = map[i] * fs->nelements + map[j];\n\n  // ------------------------------------------------------------------\n  // setup z2r arrays\n  // ------------------------------------------------------------------\n\n  // allocate z2r arrays\n  // nz2r = N*(N+1)/2 where N = # of fs elements\n\n  nz2r = fs->nelements * (fs->nelements+1) / 2;\n  memory->destroy(z2r);\n  memory->create(z2r,nz2r,nr+1,\"pair:z2r\");\n\n  // copy each element pair z2r to global z2r, only for I >= J\n\n  n = 0;\n  for (i = 0; i < fs->nelements; i++)\n    for (j = 0; j <= i; j++) {\n      for (m = 1; m <= nr; m++) z2r[n][m] = fs->z2r[i][j][m];\n      n++;\n    }\n\n  // type2z2r[i][j] = which z2r array (0 to nz2r-1) each type pair maps to\n  // set of z2r arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // if map = -1 (non-EAM atom in pair hybrid):\n  //   type2z2r is not used by non-opt\n  //   but set type2z2r to 0 since accessed by opt\n\n  int irow,icol;\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) {\n        type2z2r[i][j] = 0;\n        continue;\n      }\n      if (irow < icol) {\n        irow = map[j];\n        icol = map[i];\n      }\n      n = 0;\n      for (m = 0; m < irow; m++) n += m + 1;\n      n += icol;\n      type2z2r[i][j] = n;\n    }\n  }\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Dominik Wójt (Wroclaw University of Technology)\n     based on pair_airebo by Ase Henry (MIT)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <mpi.h>\n#include \"pair_lcbop.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"my_page.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define TOL 1.0e-9\n#define PGDELTA 1\n\n/* ---------------------------------------------------------------------- */\n\nPairLCBOP::PairLCBOP(LAMMPS *lmp) : Pair(lmp) {\n  single_enable = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n  ghostneigh = 1;\n\n  maxlocal = 0;\n  SR_numneigh = NULL;\n  SR_firstneigh = NULL;\n  ipage = NULL;\n  pgsize = oneatom = 0;\n\n  N = NULL;\n  M = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairLCBOP::~PairLCBOP()\n{\n  memory->destroy(SR_numneigh);\n  memory->sfree(SR_firstneigh);\n  delete [] ipage;\n  memory->destroy(N);\n  memory->destroy(M);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(cutghost);\n\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairLCBOP::compute(int eflag, int vflag)\n{\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n\n  SR_neigh();\n  FSR(eflag,vflag);\n  FLR(eflag,vflag);\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n  memory->create(cutghost,n+1,n+1,\"pair:cutghost\");\n\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::settings(int narg, char **arg) {\n  if( narg != 0 ) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::coeff(int narg, char **arg)\n{\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to C and NULL\n  // map[i] = which element (0 for C) the Ith atom type is, -1 if NULL\n\n  for (int i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n    } else if (strcmp(arg[i],\"C\") == 0) {\n      map[i-2] = 0;\n    } else error->all(FLERR,\"Incorrect args for pair coefficients\");\n  }\n\n  // read potential file and initialize fitting splines\n\n  read_file(arg[2]);\n  spline_init();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  int n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style LCBOP requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style LCBOP requires newton pair on\");\n\n  // need a full neighbor list, including neighbors of ghosts\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n  neighbor->requests[irequest]->ghost = 1;\n\n  // local SR neighbor list\n  // create pages if first time or if neighbor pgsize/oneatom has changed\n\n  int create = 0;\n  if (ipage == NULL) create = 1;\n  if (pgsize != neighbor->pgsize) create = 1;\n  if (oneatom != neighbor->oneatom) create = 1;\n\n  if (create) {\n    delete [] ipage;\n    pgsize = neighbor->pgsize;\n    oneatom = neighbor->oneatom;\n\n    int nmypage = comm->nthreads;\n    ipage = new MyPage<int>[nmypage];\n    for (int i = 0; i < nmypage; i++)\n      ipage[i].init(oneatom,pgsize,PGDELTA);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairLCBOP::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  // cut3rebo = 3 SR distances\n\n  cut3rebo = 3.0 * r_2;\n\n  // cutmax = furthest distance from an owned atom\n  //          at which another atom will feel force, i.e. the ghost cutoff\n  // for SR term in potential:\n  //   interaction = M-K-I-J-L-N with I = owned and J = ghost\n  //   I to N is max distance = 3 SR distances\n  // for V_LR term in potential:\n  //   r_2_LR\n  // cutghost = SR cutoff used in SR_neigh() for neighbors of ghosts\n\n  double cutmax = MAX( cut3rebo,r_2_LR );\n\n  cutghost[i][j] = r_2;\n  cutLRsq = r_2_LR*r_2_LR;\n\n  cutghost[j][i] = cutghost[i][j];\n\n  r_2_sq = r_2*r_2;\n\n  return cutmax;\n}\n\n/* ----------------------------------------------------------------------\n   create SR neighbor list from main neighbor list\n   SR neighbor list stores neighbors of ghost atoms\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::SR_neigh()\n{\n  int i,j,ii,jj,n,allnum,jnum;\n  double xtmp,ytmp,ztmp,delx,dely,delz,rsq,dS;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  int *neighptr;\n\n  double **x = atom->x;\n\n  if (atom->nmax > maxlocal) {  // ensure ther is enough space\n    maxlocal = atom->nmax;      // for atoms and ghosts allocated\n    memory->destroy(SR_numneigh);\n    memory->sfree(SR_firstneigh);\n    memory->destroy(N);\n    memory->destroy(M);\n    memory->create(SR_numneigh,maxlocal,\"LCBOP:numneigh\");\n    SR_firstneigh = (int **) memory->smalloc(maxlocal*sizeof(int *),\n                           \"LCBOP:firstneigh\");\n    memory->create(N,maxlocal,\"LCBOP:N\");\n    memory->create(M,maxlocal,\"LCBOP:M\");\n  }\n\n  allnum = list->inum + list->gnum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // store all SR neighs of owned and ghost atoms\n  // scan full neighbor list of I\n\n  ipage->reset();\n\n  for (ii = 0; ii < allnum; ii++) {\n    i = ilist[ii];\n\n    n = 0;\n    neighptr = ipage->vget();\n\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    N[i] = 0.0;\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < r_2_sq) {\n        neighptr[n++] = j;\n        N[i] += f_c(sqrt(rsq),r_1,r_2,&dS);\n      }\n    }\n\n    SR_firstneigh[i] = neighptr;\n    SR_numneigh[i] = n;\n    ipage->vgot(n);\n    if (ipage->status())\n      error->one(FLERR,\"Neighbor list overflow, boost neigh_modify one\");\n  }\n\n  // calculate M_i\n\n  for (ii = 0; ii < allnum; ii++) {\n    i = ilist[ii];\n\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    M[i] = 0.0;\n\n    jlist = SR_firstneigh[i];\n    jnum = SR_numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < r_2_sq) {\n        double f_c_ij = f_c(sqrt(rsq),r_1,r_2,&dS);\n        double Nji = N[j]-f_c_ij;\n        // F(xij) = 1-f_c_LR(Nji, 2,3,&dummy)\n        M[i] += f_c_ij * ( 1-f_c_LR(Nji, 2,3,&dS) );\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n  Short range forces and energy\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::FSR(int eflag, int vflag)\n{\n  int i,j,jj,ii,inum;\n  tagint itag,jtag;\n  double delx,dely,delz,fpair,xtmp,ytmp,ztmp;\n  double r_sq,rijmag,f_c_ij,df_c_ij;\n  double VR,dVRdi,VA,Bij,dVAdi,dVA;\n  double del[3];\n  int *ilist,*SR_neighs;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n\n  // two-body interactions from SR neighbor list, skip half of them\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    SR_neighs = SR_firstneigh[i];\n\n    for (jj = 0; jj < SR_numneigh[i]; jj++) {\n      j = SR_neighs[jj];\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      delx = x[i][0] - x[j][0];\n      dely = x[i][1] - x[j][1];\n      delz = x[i][2] - x[j][2];\n      r_sq = delx*delx + dely*dely + delz*delz;\n      rijmag = sqrt(r_sq);\n      f_c_ij = f_c( rijmag,r_1,r_2,&df_c_ij );\n      if( f_c_ij <= TOL ) continue;\n\n      VR = A*exp(-alpha*rijmag);\n      dVRdi = -alpha*VR;\n      dVRdi = dVRdi*f_c_ij + df_c_ij*VR; // VR -> VR * f_c_ij\n      VR *= f_c_ij;\n\n      VA = dVA = 0.0;\n      {\n        double term = B_1 * exp(-beta_1*rijmag);\n        VA += term;\n        dVA += -beta_1 * term;\n        term = B_2 * exp(-beta_2*rijmag);\n        VA += term;\n        dVA += -beta_2 * term;\n      }\n      dVA = dVA*f_c_ij + df_c_ij*VA; // VA -> VA * f_c_ij\n      VA *= f_c_ij;\n      del[0] = delx;\n      del[1] = dely;\n      del[2] = delz;\n      Bij = bondorder(i,j,del,rijmag,VA,f,vflag_atom);\n      dVAdi = Bij*dVA;\n\n      // F = (dVRdi+dVAdi)*(-grad rijmag)\n      // grad_i rijmag =  \\vec{rij} /rijmag\n      // grad_j rijmag = -\\vec{rij} /rijmag\n      fpair = -(dVRdi-dVAdi) / rijmag;\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      double evdwl=0.0;\n      if (eflag) evdwl = VR - Bij*VA;\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n        evdwl,0.0,fpair,delx,dely,delz);\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   compute long range forces and energy\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::FLR(int eflag, int vflag)\n{\n  int i,j,jj,ii;\n  tagint itag,jtag;\n  double delx,dely,delz,fpair,xtmp,ytmp,ztmp;\n  double r_sq,rijmag,f_c_ij,df_c_ij;\n  double V,dVdi;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  int inum = list->inum;\n  int *ilist = list->ilist;\n  int *numneigh = list->numneigh;\n  int **firstneigh = list->firstneigh;\n\n  // two-body interactions from full neighbor list, skip half of them\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    int *neighs = firstneigh[i];\n\n    for (jj = 0; jj < numneigh[i]; jj++) {\n      j = neighs[jj];\n      j &= NEIGHMASK;\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      delx = x[i][0] - x[j][0];\n      dely = x[i][1] - x[j][1];\n      delz = x[i][2] - x[j][2];\n      r_sq = delx*delx + dely*dely + delz*delz;\n      rijmag = sqrt(r_sq);\n      f_c_ij = 1-f_c( rijmag,r_1,r_2,&df_c_ij );\n      df_c_ij = -df_c_ij;\n      // derivative may be inherited from previous call, see f_c_LR definition\n      f_c_ij *= f_c_LR( rijmag, r_1_LR, r_2_LR, &df_c_ij );\n      if( f_c_ij <= TOL ) continue;\n\n      V = dVdi = 0;\n      if( rijmag<r_0 ) {\n        double exp_part = exp( -lambda_1*(rijmag-r_0) );\n        V = eps_1*( exp_part*exp_part - 2*exp_part) + v_1;\n        dVdi = 2*eps_1*lambda_1*exp_part*( 1-exp_part );\n      } else {\n        double exp_part = exp( -lambda_2*(rijmag-r_0) );\n        V = eps_2*( exp_part*exp_part - 2*exp_part) + v_2;\n        dVdi = 2*eps_2*lambda_2*exp_part*( 1-exp_part );\n      }\n      dVdi = dVdi*f_c_ij + df_c_ij*V; // V -> V * f_c_ij\n      V *= f_c_ij;\n\n      // F = (dVdi)*(-grad rijmag)\n      // grad_i rijmag =  \\vec{rij} /rijmag\n      // grad_j rijmag = -\\vec{rij} /rijmag\n      fpair = -dVdi / rijmag;\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      double evdwl=0.0;\n      if (eflag) evdwl = V;\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n        evdwl,0.0,fpair,delx,dely,delz);\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   forces for Nij and Mij\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::FNij( int i, int j, double factor, double **f, int vflag_atom ) {\n  int atomi = i;\n  int atomj = j;\n  int *SR_neighs = SR_firstneigh[i];\n  double **x = atom->x;\n  for( int k=0; k<SR_numneigh[i]; k++ ) {\n    int atomk = SR_neighs[k];\n    if (atomk != atomj) {\n      double rik[3];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      double riksq = (rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]);\n      if( riksq > r_1*r_1 ) { // &&  riksq < r_2*r_2, if second condition not fulfilled neighbor would not be in the list\n        double rikmag = sqrt(riksq);\n        double df_c_ik;\n        f_c( rikmag, r_1, r_2, &df_c_ik );\n\n        // F = factor*df_c_ik*(-grad rikmag)\n        // grad_i rikmag =  \\vec{rik} /rikmag\n        // grad_k rikmag = -\\vec{rik} /rikmag\n        double fpair = -factor*df_c_ik / rikmag;\n        f[atomi][0] += rik[0]*fpair;\n        f[atomi][1] += rik[1]*fpair;\n        f[atomi][2] += rik[2]*fpair;\n        f[atomk][0] -= rik[0]*fpair;\n        f[atomk][1] -= rik[1]*fpair;\n        f[atomk][2] -= rik[2]*fpair;\n\n        if (vflag_atom) v_tally2(atomi,atomk,fpair,rik);\n      }\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairLCBOP::FMij( int i, int j, double factor, double **f, int vflag_atom ) {\n  int atomi = i;\n  int atomj = j;\n  int *SR_neighs = SR_firstneigh[i];\n  double **x = atom->x;\n  for( int k=0; k<SR_numneigh[i]; k++ ) {\n    int atomk = SR_neighs[k];\n    if (atomk != atomj) {\n      double rik[3];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      double rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      double df_c_ik;\n      double f_c_ik = f_c( rikmag, r_1, r_2, &df_c_ik );\n      double Nki = N[k]-(f_c_ik);\n//      double Mij = M[i] - f_c_ij*( 1-f_c(Nji, 2,3,&dummy) );\n      double dF=0;\n      double Fx = 1-f_c_LR(Nki, 2,3,&dF);\n      dF = -dF;\n\n      if( df_c_ik > TOL ) {\n        double factor2 = factor*df_c_ik*Fx;\n        // F = factor2*(-grad rikmag)\n        // grad_i rikmag =  \\vec{rik} /rikmag\n        // grad_k rikmag = -\\vec{rik} /rikmag\n        double fpair = -factor2 / rikmag;\n        f[atomi][0] += rik[0]*fpair;\n        f[atomi][1] += rik[1]*fpair;\n        f[atomi][2] += rik[2]*fpair;\n        f[atomk][0] -= rik[0]*fpair;\n        f[atomk][1] -= rik[1]*fpair;\n        f[atomk][2] -= rik[2]*fpair;\n        if (vflag_atom) v_tally2(atomi,atomk,fpair,rik);\n      }\n\n      if( dF > TOL ) {\n        double factor2 = factor*f_c_ik*dF;\n        FNij( atomk, atomi, factor2, f, vflag_atom );\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   Bij function\n------------------------------------------------------------------------- */\n\ndouble PairLCBOP::bondorder(int i, int j, double rij[3],\n    double rijmag, double VA,\n    double **f, int vflag_atom)\n{\n\n  double bij, bji;\n  /* bij & bji */{\n    double rji[3];\n    rji[0] = -rij[0]; rji[1] = -rij[1]; rji[2] = -rij[2];\n    bij = b(i,j,rij,rijmag,VA,f,vflag_atom);\n    bji = b(j,i,rji,rijmag,VA,f,vflag_atom);\n  }\n\n  double Fij_conj;\n  /* F_conj */{\n    double dummy;\n\n    double df_c_ij;\n    double f_c_ij = f_c( rijmag, r_1, r_2, &df_c_ij );\n    double Nij = MIN( 3, N[i]-(f_c_ij) );\n    double Nji = MIN( 3, N[j]-(f_c_ij) );\n\n    // F(xij) = 1-f_c(Nji, 2,3,&dummy)\n    double Mij = M[i] - f_c_ij*( 1-f_c(Nji, 2,3,&dummy) );\n    double Mji = M[j] - f_c_ij*( 1-f_c(Nij, 2,3,&dummy) );\n    Mij = MIN( Mij, 3 );\n    Mji = MIN( Mji, 3 );\n\n    double Nij_el, dNij_el_dNij, dNij_el_dMij;\n    double Nji_el, dNji_el_dNji, dNji_el_dMji;\n    {\n      double num_Nij_el = 4 - Mij;\n      double num_Nji_el = 4 - Mji;\n      double den_Nij_el = Nij + 1 - Mij;\n      double den_Nji_el = Nji + 1 - Mji;\n      Nij_el = num_Nij_el / den_Nij_el;\n      Nji_el = num_Nji_el / den_Nji_el;\n      dNij_el_dNij = -Nij_el/den_Nij_el;\n      dNji_el_dNji = -Nji_el/den_Nji_el;\n      dNij_el_dMij = ( -1 + Nij_el ) /den_Nij_el;\n      dNji_el_dMji = ( -1 + Nji_el ) /den_Nji_el;\n    }\n\n    double Nconj;\n    double dNconj_dNij;\n    double dNconj_dNji;\n    double dNconj_dNel;\n    {\n      double num_Nconj = ( Nij+1 )*( Nji+1 )*( Nij_el+Nji_el ) - 4*( Nij+Nji+2);\n      double den_Nconj = Nij*( 3-Nij )*( Nji+1 ) + Nji*( 3-Nji )*( Nij+1 ) + eps;\n      Nconj = num_Nconj / den_Nconj;\n      if( Nconj <= 0 ) {\n        Nconj = 0;\n        dNconj_dNij = 0;\n        dNconj_dNji = 0;\n        dNconj_dNel = 0;\n      } else if( Nconj >= 1 ) {\n        Nconj = 1;\n        dNconj_dNij = 0;\n        dNconj_dNji = 0;\n        dNconj_dNel = 0;\n      } else {\n        dNconj_dNij = (\n            ( (Nji+1)*(Nij_el + Nji_el)-4)\n            - Nconj*( (Nji+1)*(3-2*Nij) + Nji*(3-Nji) )\n          ) /den_Nconj;\n        dNconj_dNji = (\n            ( (Nij+1)*(Nji_el + Nij_el)-4)\n            - Nconj*( (Nij+1)*(3-2*Nji) + Nij*(3-Nij) )\n          ) /den_Nconj;\n        dNconj_dNel = (Nij+1)*(Nji+1) / den_Nconj;\n      }\n    }\n\n    double dF_dNij, dF_dNji, dF_dNconj;\n    Fij_conj = F_conj( Nij, Nji, Nconj, &dF_dNij, &dF_dNji, &dF_dNconj );\n\n    /*forces for Nij*/\n    if( 3-Nij > TOL ) {\n      double factor = -VA*0.5*( dF_dNij + dF_dNconj*( dNconj_dNij + dNconj_dNel*dNij_el_dNij ) );\n      FNij( i, j, factor, f, vflag_atom );\n    }\n    /*forces for Nji*/\n    if( 3-Nji > TOL ) {\n      double factor = -VA*0.5*( dF_dNji + dF_dNconj*( dNconj_dNji + dNconj_dNel*dNji_el_dNji ) );\n      FNij( j, i, factor, f, vflag_atom );\n    }\n    /*forces for Mij*/\n    if( 3-Mij > TOL ) {\n      double factor = -VA*0.5*( dF_dNconj*dNconj_dNel*dNij_el_dMij );\n      FMij( i, j, factor, f, vflag_atom );\n    }\n    if( 3-Mji > TOL ) {\n      double factor = -VA*0.5*( dF_dNconj*dNconj_dNel*dNji_el_dMji );\n      FMij( j, i, factor, f, vflag_atom );\n    }\n  }\n\n\n  double Bij = 0.5*( bij + bji + Fij_conj );\n  return Bij;\n}\n\n/* ----------------------------------------------------------------------\n  bij function\n------------------------------------------------------------------------- */\n\ndouble PairLCBOP::b(int i, int j, double rij[3],\n                 double rijmag, double VA,\n                 double **f, int vflag_atom) {\n  int *SR_neighs = SR_firstneigh[i];\n  double **x = atom->x;\n  int atomi = i;\n  int atomj = j;\n\n  //calculate bij magnitude\n  double bij = 1.0;\n  for (int k = 0; k < SR_numneigh[i]; k++) {\n    int atomk = SR_neighs[k];\n    if (atomk != atomj) {\n      double rik[3];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      double rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      double delta_ijk = rijmag-rikmag;\n      double dummy;\n      double f_c_ik = f_c( rikmag, r_1, r_2, &dummy );\n      double cos_ijk = ((rij[0]*rik[0])+(rij[1]*rik[1])+(rij[2]*rik[2]))\n                / (rijmag*rikmag);\n      cos_ijk = MIN(cos_ijk,1.0);\n      cos_ijk = MAX(cos_ijk,-1.0);\n\n      double G = gSpline(cos_ijk,   &dummy);\n      double H = hSpline(delta_ijk, &dummy);\n      bij += (f_c_ik*G*H);\n    }\n  }\n  bij = pow( bij, -delta );\n\n  // bij forces\n\n  for (int k = 0; k < SR_numneigh[i]; k++) {\n    int atomk = SR_neighs[k];\n    if (atomk != atomj) {\n      double rik[3];\n      rik[0] = x[atomi][0]-x[atomk][0];\n      rik[1] = x[atomi][1]-x[atomk][1];\n      rik[2] = x[atomi][2]-x[atomk][2];\n      double rikmag = sqrt((rik[0]*rik[0])+(rik[1]*rik[1])+(rik[2]*rik[2]));\n      double delta_ijk = rijmag-rikmag;\n      double df_c_ik;\n      double f_c_ik = f_c( rikmag, r_1, r_2, &df_c_ik );\n      double cos_ijk = ((rij[0]*rik[0])+(rij[1]*rik[1])+(rij[2]*rik[2]))\n                / (rijmag*rikmag);\n      cos_ijk = MIN(cos_ijk,1.0);\n      cos_ijk = MAX(cos_ijk,-1.0);\n\n      double dcos_ijk_dri[3],dcos_ijk_drj[3],dcos_ijk_drk[3];\n      dcos_ijk_drj[0] = -rik[0] / (rijmag*rikmag)\n             + cos_ijk * rij[0] / (rijmag*rijmag);\n      dcos_ijk_drj[1] = -rik[1] / (rijmag*rikmag)\n             + cos_ijk * rij[1] / (rijmag*rijmag);\n      dcos_ijk_drj[2] = -rik[2] / (rijmag*rikmag)\n             + cos_ijk * rij[2] / (rijmag*rijmag);\n\n      dcos_ijk_drk[0] = -rij[0] / (rijmag*rikmag)\n             + cos_ijk * rik[0] / (rikmag*rikmag);\n      dcos_ijk_drk[1] = -rij[1] / (rijmag*rikmag)\n             + cos_ijk * rik[1] / (rikmag*rikmag);\n      dcos_ijk_drk[2] = -rij[2] / (rijmag*rikmag)\n             + cos_ijk * rik[2] / (rikmag*rikmag);\n\n      dcos_ijk_dri[0] = -dcos_ijk_drk[0] - dcos_ijk_drj[0];\n      dcos_ijk_dri[1] = -dcos_ijk_drk[1] - dcos_ijk_drj[1];\n      dcos_ijk_dri[2] = -dcos_ijk_drk[2] - dcos_ijk_drj[2];\n\n      double dG, dH;\n      double G = gSpline( cos_ijk,   &dG );\n      double H = hSpline( delta_ijk, &dH );\n      double tmp = -VA*0.5*(-0.5*bij*bij*bij);\n\n      double fi[3], fj[3], fk[3];\n\n      double tmp2 = -tmp*df_c_ik*G*H/rikmag;\n      // F = tmp*df_c_ik*G*H*(-grad rikmag)\n      // grad_i rikmag =  \\vec{rik} /rikmag\n      // grad_k rikmag = -\\vec{rik} /rikmag\n      fi[0] =  tmp2*rik[0];\n      fi[1] =  tmp2*rik[1];\n      fi[2] =  tmp2*rik[2];\n      fk[0] = -tmp2*rik[0];\n      fk[1] = -tmp2*rik[1];\n      fk[2] = -tmp2*rik[2];\n\n\n      tmp2 = -tmp*f_c_ik*dG*H;\n      // F = tmp*f_c_ik*dG*H*(-grad cos_ijk)\n      // grad_i cos_ijk = dcos_ijk_dri\n      // grad_j cos_ijk = dcos_ijk_drj\n      // grad_k cos_ijk = dcos_ijk_drk\n      fi[0] += tmp2*dcos_ijk_dri[0];\n      fi[1] += tmp2*dcos_ijk_dri[1];\n      fi[2] += tmp2*dcos_ijk_dri[2];\n      fj[0] =  tmp2*dcos_ijk_drj[0];\n      fj[1] =  tmp2*dcos_ijk_drj[1];\n      fj[2] =  tmp2*dcos_ijk_drj[2];\n      fk[0] += tmp2*dcos_ijk_drk[0];\n      fk[1] += tmp2*dcos_ijk_drk[1];\n      fk[2] += tmp2*dcos_ijk_drk[2];\n\n      tmp2 = -tmp*f_c_ik*G*dH;\n      // F = tmp*f_c_ik*G*dH*(-grad delta_ijk)\n      // grad_i delta_ijk =  \\vec{rij} /rijmag - \\vec{rik} /rijmag\n      // grad_j delta_ijk = -\\vec{rij} /rijmag\n      // grad_k delta_ijk =  \\vec{rik} /rikmag\n      fi[0] += tmp2*( rij[0]/rijmag - rik[0]/rikmag );\n      fi[1] += tmp2*( rij[1]/rijmag - rik[1]/rikmag );\n      fi[2] += tmp2*( rij[2]/rijmag - rik[2]/rikmag );\n      fj[0] += tmp2*( -rij[0]/rijmag );\n      fj[1] += tmp2*( -rij[1]/rijmag );\n      fj[2] += tmp2*( -rij[2]/rijmag );\n      fk[0] += tmp2*( rik[0]/rikmag );\n      fk[1] += tmp2*( rik[1]/rikmag );\n      fk[2] += tmp2*( rik[2]/rikmag );\n\n      f[atomi][0] += fi[0]; f[atomi][1] += fi[1]; f[atomi][2] += fi[2];\n      f[atomj][0] += fj[0]; f[atomj][1] += fj[1]; f[atomj][2] += fj[2];\n      f[atomk][0] += fk[0]; f[atomk][1] += fk[1]; f[atomk][2] += fk[2];\n\n      if (vflag_atom) {\n        double rji[3], rki[3];\n        rji[0] = -rij[0]; rji[1] = -rij[1]; rji[2] = -rij[2];\n        rki[0] = -rik[0]; rki[1] = -rik[1]; rki[2] = -rik[2];\n        v_tally3(atomi,atomj,atomk,fj,fk,rji,rki);\n      }\n    }\n  }\n\n  return bij;\n}\n\n/* ----------------------------------------------------------------------\n   spline interpolation for G\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::g_decompose_x( double x, size_t *field_idx, double *offset ) {\n  size_t i=0;\n  while( i<(6-1) && !( x<gX[i+1] ) )\n    i++;\n  *field_idx = i;\n  *offset = ( x - gX[i] );\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairLCBOP::gSpline( double x, double *dgdc ) {\n  size_t i;\n  double x_n;\n  g_decompose_x( x, &i, &x_n );\n  double sum = 0;\n  *dgdc = 0;\n  double pow_x_n = 1.0;\n  for( size_t j=0; j<5; j++ ) {\n      sum += gC[j][i]*pow_x_n;\n      *dgdc += gC[j+1][i]*(j+1)*pow_x_n;\n      pow_x_n *= x_n;\n  }\n  sum += gC[5][i]*pow_x_n;\n  return sum;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairLCBOP::hSpline( double x, double *dhdx ) {\n  if( x < -d ) {\n      double z = kappa*( x+d );\n      double y = pow(z, 10.0);\n      double w = pow( 1+y, -0.1 );\n      *dhdx = kappa*L*w/(1+y);\n      return L*( 1 + z*w );\n    }\n    if( x > d ) {\n      *dhdx = R_1;\n      return R_0 + R_1*( x-d );\n    }\n\n      double result = 1 + C_1*x;\n      *dhdx    = C_1*result;\n    double pow_x = x*x;\n      result  += 0.5*C_1*C_1*pow_x;\n    pow_x *= x;// == x^3\n      *dhdx   += 4*C_4*pow_x;\n    pow_x *= x;// == x^4\n      result  += C_4*pow_x;\n    pow_x *= x;// == x^5\n      *dhdx   += 6*C_6*pow_x;\n    pow_x *= x;// == x^5\n      result += C_6*pow_x;\n    return result;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairLCBOP::F_conj( double N_ij, double N_ji, double N_conj_ij, double *dFN_ij, double *dFN_ji, double *dFN_ij_conj ) {\n  size_t N_ij_int         = MIN( static_cast<size_t>( floor( N_ij ) ), 2 ); // 2 is the highest number of field\n  size_t N_ji_int         = MIN( static_cast<size_t>( floor( N_ji ) ), 2 ); // cast to suppress warning\n  double x                = N_ij - N_ij_int;\n  double y                = N_ji - N_ji_int;\n  const TF_conj_field &f0 = F_conj_field[N_ij_int][N_ji_int][0];\n  const TF_conj_field &f1 = F_conj_field[N_ij_int][N_ji_int][1];\n  double F_0 = 0;\n  double F_1 = 0;\n  double dF_0_dx = 0, dF_0_dy = 0;\n  double dF_1_dx = 0, dF_1_dy = 0;\n  double l, r;\n  if( N_conj_ij < 1 ) {\n    l = (1-y)* (1-x);   r = ( f0.f_00 + x*     x*   f0.f_x_10   + y*     y*   f0.f_y_01 );    F_0 += l*r;   dF_0_dx += -(1-y)*r +l*2*x*    f0.f_x_10;    dF_0_dy += -(1-x)*r +l*2*y*    f0.f_y_01;\n    l = (1-y)*  x;      r = ( f0.f_10 + (1-x)*(1-x)*f0.f_x_00   + y*     y*   f0.f_y_11 );    F_0 += l*r;   dF_0_dx +=  (1-y)*r -l*2*(1-x)*f0.f_x_00;    dF_0_dy += -x*    r +l*2*y*    f0.f_y_11;\n    l = y*     (1-x);   r = ( f0.f_01 + x*     x*   f0.f_x_11   + (1-y)*(1-y)*f0.f_y_00 );    F_0 += l*r;   dF_0_dx += -y*    r +l*2*x*    f0.f_x_11;    dF_0_dy +=  (1-x)*r -l*2*(1-y)*f0.f_y_00;\n    l = y*      x;      r = ( f0.f_11 + (1-x)*(1-x)*f0.f_x_01   + (1-y)*(1-y)*f0.f_y_10 );    F_0 += l*r;   dF_0_dx +=  y*    r -l*2*(1-x)*f0.f_x_01;    dF_0_dy +=  x*    r -l*2*(1-y)*f0.f_y_10;\n  }\n  if( N_conj_ij > 0 ) {\n    l = (1-y)* (1-x);   r = ( f0.f_00 + x*     x*   f1.f_x_10   + y*     y*   f1.f_y_01 );    F_1 += l*r;   dF_1_dx += -(1-y)*r +l*2*x*    f1.f_x_10;    dF_1_dy += -(1-x)*r +l*2*y*    f1.f_y_01;\n    l = (1-y)*  x;      r = ( f1.f_10 + (1-x)*(1-x)*f1.f_x_00   + y*     y*   f1.f_y_11 );    F_1 += l*r;   dF_1_dx +=  (1-y)*r -l*2*(1-x)*f1.f_x_00;    dF_1_dy += -x*    r +l*2*y*    f1.f_y_11;\n    l = y*     (1-x);   r = ( f1.f_01 + x*     x*   f1.f_x_11   + (1-y)*(1-y)*f1.f_y_00 );    F_1 += l*r;   dF_1_dx += -y*    r +l*2*x*    f1.f_x_11;    dF_1_dy +=  (1-x)*r -l*2*(1-y)*f1.f_y_00;\n    l = y*      x;      r = ( f1.f_11 + (1-x)*(1-x)*f1.f_x_01   + (1-y)*(1-y)*f1.f_y_10 );    F_1 += l*r;   dF_1_dx +=  y*    r -l*2*(1-x)*f1.f_x_01;    dF_1_dy +=  x*    r -l*2*(1-y)*f1.f_y_10;\n  }\n  double result = (1-N_conj_ij)*F_0 + N_conj_ij*F_1;\n  *dFN_ij = (1-N_conj_ij)*dF_0_dx + N_conj_ij*dF_1_dx;\n  *dFN_ji = (1-N_conj_ij)*dF_0_dy + N_conj_ij*dF_1_dy;\n  *dFN_ij_conj = -F_0 + F_1;\n\n  return result;\n}\n\n/* ----------------------------------------------------------------------\n   read LCBOP potential file\n------------------------------------------------------------------------- */\n\nvoid PairLCBOP::read_file(char *filename)\n{\n  int i,k,l;\n  char s[MAXLINE];\n\n  MPI_Comm_rank(world,&me);\n\n  // read file on proc 0\n\n  if (me == 0) {\n    FILE *fp = force->open_potential(filename);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open LCBOP potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n\n    // skip initial comment lines\n\n    while (1) {\n      fgets(s,MAXLINE,fp);\n      if (s[0] != '#') break;\n    }\n\n    // read parameters\n\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&r_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&r_2);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&gamma_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&A);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&B_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&B_2);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&alpha);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&beta_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&beta_2);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&d);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&C_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&C_4);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&C_6);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&L);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&kappa);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&R_0);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&R_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&r_0);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&r_1_LR);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&r_2_LR);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&v_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&v_2);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&eps_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&eps_2);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&lambda_1);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&lambda_2);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&eps);\n    fgets(s,MAXLINE,fp);    sscanf(s,\"%lg\",&delta);\n\n    while (1) {\n      fgets(s,MAXLINE,fp);\n      if (s[0] != '#') break;\n    }\n\n    // F_conj spline\n\n    for (k = 0; k < 2; k++) { // 2 values of N_ij_conj\n      for (l = 0; l < 3; l++) { // 3 types of data: f, dfdx, dfdy\n        for (i = 0; i < 4; i++) { // 4x4 matrix\n          fgets(s,MAXLINE,fp);\n          sscanf(s,\"%lg %lg %lg %lg\",\n            &F_conj_data[i][0][k][l],\n            &F_conj_data[i][1][k][l],\n            &F_conj_data[i][2][k][l],\n            &F_conj_data[i][3][k][l]);\n        }\n        while (1) { fgets(s,MAXLINE,fp); if (s[0] != '#') break; }\n      }\n    }\n\n    // G spline\n\n    // x coordinates of mesh points\n    fgets(s,MAXLINE,fp);\n    sscanf( s,\"%lg %lg %lg %lg %lg %lg\",\n      &gX[0], &gX[1], &gX[2],\n      &gX[3], &gX[4], &gX[5] );\n\n    for (i = 0; i < 6; i++) { // for each power in polynomial\n      fgets(s,MAXLINE,fp);\n      sscanf( s,\"%lg %lg %lg %lg %lg\",\n        &gC[i][0], &gC[i][1], &gC[i][2],\n        &gC[i][3], &gC[i][4] );\n    }\n\n    fclose(fp);\n  }\n\n  // broadcast read-in and setup values\n\n  MPI_Bcast(&r_1      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r_2      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&gamma_1  ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&A        ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&B_1      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&B_2      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&alpha    ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&beta_1   ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&beta_2   ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&d        ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&C_1      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&C_4      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&C_6      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&L        ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&kappa    ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&R_0      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&R_1      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r_0      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r_1_LR   ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r_2_LR   ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&v_1      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&v_2      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&eps_1    ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&eps_2    ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&lambda_1 ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&lambda_2 ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&eps      ,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&delta    ,1,MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&gX[0]    ,6,MPI_DOUBLE,0,world);\n  MPI_Bcast(&gC[0][0] ,(6-1)*(5+1),MPI_DOUBLE,0,world);\n\n  MPI_Bcast(&F_conj_data[0],6*4*4,MPI_DOUBLE,0,world);\n}\n\n/* ----------------------------------------------------------------------\n   init coefficients for TF_conj\n------------------------------------------------------------------------- */\n\n#include <iostream>\n#include <fstream>\n#include <functional>\ntemplate< class function > void print_function( double x_0, double x_1, size_t n, function f, std::ostream &stream ) {\n  double dx = (x_1-x_0)/n;\n  for( double x=x_0; x<=x_1+0.0001; x+=dx ) {\n    double f_val, df;\n    f_val = f(x, &df);\n    stream << x << \" \" << f_val << \"   \" << df << std::endl;\n  }\n  stream << std::endl;\n}\n\nvoid PairLCBOP::spline_init() {\n  for( size_t N_conj_ij=0; N_conj_ij<2; N_conj_ij++ ) // N_conj_ij\n  for( size_t N_ij=0; N_ij<4-1; N_ij++ )\n  for( size_t N_ji=0; N_ji<4-1; N_ji++ ) {\n    TF_conj_field &field = F_conj_field[N_ij][N_ji][N_conj_ij];\n    field.f_00 = F_conj_data[N_ij  ][N_ji  ][N_conj_ij][0];\n    field.f_01 = F_conj_data[N_ij  ][N_ji+1][N_conj_ij][0];\n    field.f_10 = F_conj_data[N_ij+1][N_ji  ][N_conj_ij][0];\n    field.f_11 = F_conj_data[N_ij+1][N_ji+1][N_conj_ij][0];\n\n    field.f_x_00 =   F_conj_data[N_ij  ][N_ji  ][N_conj_ij][1] - field.f_10 + field.f_00;\n    field.f_x_01 =   F_conj_data[N_ij  ][N_ji+1][N_conj_ij][1] - field.f_11 + field.f_01;\n    field.f_x_10 = -(F_conj_data[N_ij+1][N_ji  ][N_conj_ij][1] - field.f_10 + field.f_00);\n    field.f_x_11 = -(F_conj_data[N_ij+1][N_ji+1][N_conj_ij][1] - field.f_11 + field.f_01);\n\n    field.f_y_00 =   F_conj_data[N_ij  ][N_ji  ][N_conj_ij][2] - field.f_01 + field.f_00;\n    field.f_y_01 = -(F_conj_data[N_ij  ][N_ji+1][N_conj_ij][2] - field.f_01 + field.f_00);\n    field.f_y_10 =   F_conj_data[N_ij+1][N_ji  ][N_conj_ij][2] - field.f_11 + field.f_10;\n    field.f_y_11 = -(F_conj_data[N_ij+1][N_ji+1][N_conj_ij][2] - field.f_11 + field.f_10);\n  }\n\n  //some testing:\n//  std::ofstream file( \"test.txt\" );\n//    file << \"gX:\\n\";\n//    file  << gX[0] << \" \"\n//          << gX[1] << \" \"\n//          << gX[2] << \" \"\n//          << gX[3] << \" \"\n//          << gX[4] << \" \"\n//          << gX[5] << std::endl;\n//    file << \"gC:\\n\";\n//    for( int i=0; i<6; i++ )\n//      file  << gC[i][0] << \" \"\n//            << gC[i][1] << \" \"\n//            << gC[i][2] << \" \"\n//            << gC[i][3] << \" \"\n//            << gC[i][4] << std::endl;\n//    file << std::endl;\n//\n//    file << \"gamma_1 = \" << gamma_1 << std::endl;\n//    file << \"r_1 = \" << r_1 << std::endl;\n//    file << \"r_2 = \" << r_2 << std::endl;\n//    file << \"A = \" << A << std::endl;\n//    file << \"B_1 = \" << B_1 << std::endl;\n//    file << \"B_2 = \" << B_2 << std::endl;\n//    file << \"alpha = \" << alpha << std::endl;\n//    file << \"beta_1 = \" << beta_1 << std::endl;\n//    file << \"beta_2 = \" << beta_2 << std::endl;\n//    file << \"d = \" << d << std::endl;\n//    file << \"C_1 = \" << C_1 << std::endl;\n//    file << \"C_4 = \" << C_4 << std::endl;\n//    file << \"C_6 = \" << C_6 << std::endl;\n//    file << \"L = \" << L << std::endl;\n//    file << \"kappa = \" << kappa << std::endl;\n//    file << \"R_0 = \" << R_0 << std::endl;\n//    file << \"R_1 = \" << R_1 << std::endl;\n//    file << \"r_0 = \" << r_0 << std::endl;\n//    file << \"r_1_LR = \" << r_1_LR << std::endl;\n//    file << \"r_2_LR = \" << r_2_LR << std::endl;\n//    file << \"v_1 = \" << v_1 << std::endl;\n//    file << \"v_2 = \" << v_2 << std::endl;\n//    file << \"eps_1 = \" << eps_1 << std::endl;\n//    file << \"eps_2 = \" << eps_2 << std::endl;\n//    file << \"lambda_1 = \" << lambda_1 << std::endl;\n//    file << \"lambda_2 = \" << lambda_2 << std::endl;\n//    file << \"eps = \" << eps << std::endl;\n//    file << \"delta = \" << delta << std::endl;\n//    file << \"r_2_sq = \" << r_2_sq << std::endl;\n//    file << std::endl;\n//\n//\n//    file << \"gSpline:\" << std::endl;\n//    double x_1 = 1, x_0 = -1;\n//    int n=1000;\n//    double dx = (x_1-x_0)/n;\n//    for( double x=x_0; x<=x_1+0.0001; x+=dx ) {\n//      double g, dg;\n//      g = gSpline(x, &dg);\n//      file << x << \" \" << g << \" \" << dg << std::endl;\n//    }\n//    file << std::endl;\n//\n//  file << \"hSpline:\" << std::endl;\n//  double x_1 = 1, x_0 = -1;\n//  int n=1000;\n//  double dx = (x_1-x_0)/n;\n//  for( double x=x_0; x<=x_1+0.0001; x+=dx ) {\n//    double h, dh;\n//    h = hSpline(x, &dh);\n//    file << x << \" \" << h << \" \" << dh << std::endl;\n//  }\n//  file << std::endl;\n//\n//\n//  file << \"f_c:\" << std::endl;\n//  double x_1 = 4, x_0 = 0;\n//  int n=1000;\n//  double dx = (x_1-x_0)/n;\n//  for( double x=x_0; x<=x_1+0.0001; x+=dx ) {\n//    double f, df;\n//    f = f_c(x, r_1, r_2, &df);\n//    file << x << \" \" << f << \" \" << df << std::endl;\n//  }\n//  file << std::endl;\n\n//  file << \"F_conj_data\\n\";\n//  for (int k = 0; k < 2; k++) { // 2 values of N_ij_conj\n//    for (int l = 0; l < 3; l++) { // 3 types of data: f, dfdx, dfdy\n//      for (int i = 0; i < 4; i++) { // 4x4 matrix\n//        file\n//          << F_conj_data[i][0][k][l] << \" \"\n//          << F_conj_data[i][1][k][l] << \" \"\n//          << F_conj_data[i][2][k][l] << \" \"\n//          << F_conj_data[i][3][k][l] << std::endl;\n//      }\n//    file << std::endl;\n//    }\n//  }\n//\n//\n//  file << \"F_conj_0 \";\n//  double dummy;\n//  for( double y=0; y<=3.0+0.0001; y+=0.1 )\n//    file << y << \" \";\n//  file << std::endl;\n//  for( double x=0; x<=3.0+0.0001; x+=0.1 ){\n//    file << x << \" \";\n//    for( double y=0; y<=3.0+0.0001; y+=0.1 )\n//      file << F_conj( x, y, 0, &dummy, &dummy, &dummy ) << \" \";\n//    file << std::endl;\n//  }\n//\n//  file << \"dF0_dx \";\n//  for( double y=0; y<=3.0+0.0001; y+=0.1 )\n//    file << y << \" \";\n//  file << std::endl;\n//  for( double x=0; x<=3.0+0.0001; x+=0.1 ){\n//    file << x << \" \";\n//    for( double y=0; y<=3.0+0.0001; y+=0.1 ) {\n//      double dF_dx;\n//      F_conj( x, y, 0, &dF_dx, &dummy, &dummy );\n//      file << dF_dx << \" \";\n//    }\n//    file << std::endl;\n//  }\n//\n//\n//\n//  file << \"F_conj_1 \";\n//  for( double y=0; y<=3.0+0.0001; y+=0.1 )\n//    file << y << \" \";\n//  file << std::endl;\n//  for( double x=0; x<=3.0+0.0001; x+=0.1 ){\n//    file << x << \" \";\n//    for( double y=0; y<=3.0+0.0001; y+=0.1 )\n//      file << F_conj( x, y, 0, &dummy, &dummy, &dummy ) << \" \";\n//    file << std::endl;\n//  }\n\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairLCBOP::memory_usage()\n{\n  double bytes = 0.0;\n  bytes += maxlocal * sizeof(int);\n  bytes += maxlocal * sizeof(int *);\n\n  for (int i = 0; i < comm->nthreads; i++)\n    bytes += ipage[i].size();\n\n  bytes += 3*maxlocal * sizeof(double);\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(lcbop,PairLCBOP)\n\n#else\n\n#ifndef LMP_PAIR_LCBOP_H\n#define LMP_PAIR_LCBOP_H\n\n#include \"pair.h\"\n#include \"my_page.h\"\n#include <math.h>\n#include \"math_const.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairLCBOP : public Pair {\n public:\n  PairLCBOP(class LAMMPS *);\n  virtual ~PairLCBOP();\n  virtual void compute(int, int);\n  virtual void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n  double memory_usage();\n\n protected:\n  int **pages;                     // neighbor list pages\n  int *map;                        // 0 (C) or -1 (NULL) for each type\n\n  int me;\n\n  double cutLR;                    // LR cutoff\n\n  double cutLRsq;                  // LR cutoff squared\n  double cut3rebo;                 // maximum distance for 3rd SR neigh\n\n  int maxlocal;                    // size of numneigh, firstneigh arrays\n  int maxpage;                     // # of pages currently allocated\n  int pgsize;                      // size of neighbor page\n  int oneatom;                     // max # of neighbors for one atom\n  MyPage<int> *ipage;              // neighbor list pages\n  int *SR_numneigh;                // # of pair neighbors for each atom\n  int **SR_firstneigh;             // ptr to 1st neighbor of each atom\n\n  double *N;                       // sum of cutoff fns ( f_C ) with SR neighs\n  double *M;                       // sum_j f_C_ij*F(N_j - f_C_ij)\n\n  double\n    r_1, r_2, gamma_1, A, B_1, B_2, alpha, beta_1, beta_2,\n    d, C_1, C_4, C_6, L, kappa, R_0, R_1,\n    r_0, r_1_LR, r_2_LR,\n    v_1, v_2, eps_1, eps_2, lambda_1, lambda_2, eps, delta;\n  double r_2_sq;\n\n  // splines coefficients\n  struct TF_conj_field {\n    double\n        f_00,\n        f_01,\n        f_10,\n        f_11,\n        f_x_00,\n        f_x_01,\n        f_x_10,\n        f_x_11,\n        f_y_00,\n        f_y_01,\n        f_y_10,\n        f_y_11;\n  } F_conj_field[3][3][2];\n\n  double F_conj_data[4][4][2][3]; // temporary data from file\n  double gX[6];        // x coordinates for described points[# of points];\n  double gC[5+1][6-1]; // coefficients for each period between described points [degree of polynomial+1][# of points-1]\n\n  void SR_neigh();\n  void FSR(int, int);\n  void FLR(int, int);\n\n  void FNij( int, int, double, double**, int );\n  void FMij( int, int, double, double**, int );\n  double bondorder( int, int, double*, double, double, double**, int );\n  double b        ( int, int, double*, double, double, double**, int );\n\n  double gSpline( double, double* );\n  double hSpline( double, double* );\n  void g_decompose_x( double, size_t*, double* );\n  double F_conj( double, double, double, double*, double*, double* );\n\n  void read_file( char * );\n\n  void spline_init();\n\n  void allocate();\n\n  // ----------------------------------------------------------------------\n  // S'(t) and S(t) cutoff functions\n  // added to header for inlining\n  // ----------------------------------------------------------------------\n\n  /* ----------------------------------------------------------------------\n     short range cutoff function\n     return cutoff and dX = derivative\n     no side effects\n  ------------------------------------------------------------------------- */\n\n  inline double f_c(double Xij, double Xmin, double Xmax, double *dX) const {\n    double cutoff;\n\n    double t = (Xij-Xmin) / (Xmax-Xmin);\n    if (t <= 0.0) {\n      cutoff = 1.0;\n      *dX = 0.0;\n    } else if (t >= 1.0) {\n      cutoff = 0.0;\n      *dX = 0.0;\n    } else {\n      double z = t*t*t-1;\n      cutoff = exp( gamma_1*t*t*t/z );\n      *dX = cutoff * (-3*gamma_1*t*t)/z/z / (Xmax-Xmin);\n    }\n    return cutoff;\n  };\n\n  /* ----------------------------------------------------------------------\n     long range cutoff function\n     return cutoff and dX = derivative\n     no side effects\n  ------------------------------------------------------------------------- */\n\n  inline double f_c_LR(double Xij, double Xmin, double Xmax, double *dX) const {\n    double cutoff;\n\n    double t = (Xij-Xmin) / (Xmax-Xmin);\n    if (t <= 0.0) {\n      cutoff = 1.0;\n      //dX = 0.0; this way the derivative is inherited from previous cut off function call\n    } else if (t >= 1.0) {\n      cutoff = 0.0;\n      *dX = 0.0;\n    } else {\n      cutoff = ( 1.0+cos(MathConst::MY_PI*t) )/2.0;\n      *dX = -MathConst::MY_PI*sin(MathConst::MY_PI*t)/2/(Xmax-Xmin);\n    }\n    return cutoff;\n  };\n\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style LCBOP requires atom IDs\n\nThis is a requirement to use the LCBOP potential.\n\nE: Pair style LCBOP requires newton pair on\n\nSee the newton command.  This is a restriction to use the Tersoff\npotential.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Neighbor list overflow, boost neigh_modify one\n\nThere are too many neighbors of a single atom.  Use the neigh_modify\ncommand to increase the max number of neighbors allowed for one atom.\nYou may also want to boost the page size.\n\nE: Cannot open LCBOP potential file %s\n\nThe specified LCBOP potential file cannot be opened.  Check that the\npath and name are correct.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Jeff Greathouse (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"bond_morse.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nBondMorse::BondMorse(LAMMPS *lmp) : Bond(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nBondMorse::~BondMorse()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(d0);\n    memory->destroy(alpha);\n    memory->destroy(r0);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondMorse::compute(int eflag, int vflag)\n{\n  int i1,i2,n,type;\n  double delx,dely,delz,ebond,fbond;\n  double rsq,r,dr,ralpha;\n\n  ebond = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **bondlist = neighbor->bondlist;\n  int nbondlist = neighbor->nbondlist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nbondlist; n++) {\n    i1 = bondlist[n][0];\n    i2 = bondlist[n][1];\n    type = bondlist[n][2];\n\n    delx = x[i1][0] - x[i2][0];\n    dely = x[i1][1] - x[i2][1];\n    delz = x[i1][2] - x[i2][2];\n\n    rsq = delx*delx + dely*dely + delz*delz;\n    r = sqrt(rsq);\n    dr = r - r0[type];\n    ralpha = exp(-alpha[type]*dr);\n\n    // force & energy\n\n    if (r > 0.0) fbond = -2.0*d0[type]*alpha[type]*(1-ralpha)*ralpha/r;\n    else fbond = 0.0;\n\n    if (eflag) ebond = d0[type]*(1-ralpha)*(1-ralpha);\n\n    // apply force to each of 2 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += delx*fbond;\n      f[i1][1] += dely*fbond;\n      f[i1][2] += delz*fbond;\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= delx*fbond;\n      f[i2][1] -= dely*fbond;\n      f[i2][2] -= delz*fbond;\n    }\n\n    if (evflag) ev_tally(i1,i2,nlocal,newton_bond,ebond,fbond,delx,dely,delz);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid BondMorse::allocate()\n{\n  allocated = 1;\n  int n = atom->nbondtypes;\n\n  memory->create(d0,n+1,\"bond:d0\");\n  memory->create(alpha,n+1,\"bond:alpha\");\n  memory->create(r0,n+1,\"bond:r0\");\n  memory->create(setflag,n+1,\"bond:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid BondMorse::coeff(int narg, char **arg)\n{\n  if (narg != 4) error->all(FLERR,\"Incorrect args for bond coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nbondtypes,ilo,ihi);\n\n  double d0_one = force->numeric(FLERR,arg[1]);\n  double alpha_one = force->numeric(FLERR,arg[2]);\n  double r0_one = force->numeric(FLERR,arg[3]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    d0[i] = d0_one;\n    alpha[i] = alpha_one;\n    r0[i] = r0_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for bond coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   return an equilbrium bond length\n------------------------------------------------------------------------- */\n\ndouble BondMorse::equilibrium_distance(int i)\n{\n  return r0[i];\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid BondMorse::write_restart(FILE *fp)\n{\n  fwrite(&d0[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&alpha[1],sizeof(double),atom->nbondtypes,fp);\n  fwrite(&r0[1],sizeof(double),atom->nbondtypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid BondMorse::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&d0[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&alpha[1],sizeof(double),atom->nbondtypes,fp);\n    fread(&r0[1],sizeof(double),atom->nbondtypes,fp);\n  }\n  MPI_Bcast(&d0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&alpha[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&r0[1],atom->nbondtypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nbondtypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid BondMorse::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nbondtypes; i++)\n    fprintf(fp,\"%d %g %g %g\\n\",i,d0[i],alpha[i],r0[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble BondMorse::single(int type, double rsq, int i, int j,\n                         double &fforce)\n{\n  double r = sqrt(rsq);\n  double dr = r - r0[type];\n  double ralpha = exp(-alpha[type]*dr);\n  fforce = 0;\n  if (r > 0.0) fforce = -2.0*d0[type]*alpha[type]*(1-ralpha)*ralpha/r;\n  return d0[type]*(1-ralpha)*(1-ralpha);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier (SNL)\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"dihedral_charmm.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"update.h\"\n#include \"respa.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define TOLERANCE 0.05\n\n/* ---------------------------------------------------------------------- */\n\nDihedralCharmm::DihedralCharmm(LAMMPS *lmp) : Dihedral(lmp)\n{\n  weightflag = 0;\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nDihedralCharmm::~DihedralCharmm()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(multiplicity);\n    memory->destroy(shift);\n    memory->destroy(cos_shift);\n    memory->destroy(sin_shift);\n    memory->destroy(weight);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralCharmm::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,i,m,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double edihedral,f1[3],f2[3],f3[3],f4[3];\n  double ax,ay,az,bx,by,bz,rasq,rbsq,rgsq,rg,rginv,ra2inv,rb2inv,rabinv;\n  double df,df1,ddf1,fg,hg,fga,hgb,gaa,gbb;\n  double dtfx,dtfy,dtfz,dtgx,dtgy,dtgz,dthx,dthy,dthz;\n  double c,s,p,sx2,sy2,sz2;\n  int itype,jtype;\n  double delx,dely,delz,rsq,r2inv,r6inv;\n  double forcecoul,forcelj,fpair,ecoul,evdwl;\n\n  edihedral = evdwl = ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  // insure pair->ev_tally() will use 1-4 virial contribution\n\n  if (weightflag && vflag_global == 2)\n    force->pair->vflag_either = force->pair->vflag_global = 1;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n  int *atomtype = atom->type;\n  int **dihedrallist = neighbor->dihedrallist;\n  int ndihedrallist = neighbor->ndihedrallist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n  double qqrd2e = force->qqrd2e;\n\n  for (n = 0; n < ndihedrallist; n++) {\n    i1 = dihedrallist[n][0];\n    i2 = dihedrallist[n][1];\n    i3 = dihedrallist[n][2];\n    i4 = dihedrallist[n][3];\n    type = dihedrallist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    ax = vb1y*vb2zm - vb1z*vb2ym;\n    ay = vb1z*vb2xm - vb1x*vb2zm;\n    az = vb1x*vb2ym - vb1y*vb2xm;\n    bx = vb3y*vb2zm - vb3z*vb2ym;\n    by = vb3z*vb2xm - vb3x*vb2zm;\n    bz = vb3x*vb2ym - vb3y*vb2xm;\n\n    rasq = ax*ax + ay*ay + az*az;\n    rbsq = bx*bx + by*by + bz*bz;\n    rgsq = vb2xm*vb2xm + vb2ym*vb2ym + vb2zm*vb2zm;\n    rg = sqrt(rgsq);\n\n    rginv = ra2inv = rb2inv = 0.0;\n    if (rg > 0) rginv = 1.0/rg;\n    if (rasq > 0) ra2inv = 1.0/rasq;\n    if (rbsq > 0) rb2inv = 1.0/rbsq;\n    rabinv = sqrt(ra2inv*rb2inv);\n\n    c = (ax*bx + ay*by + az*bz)*rabinv;\n    s = rg*rabinv*(ax*vb3x + ay*vb3y + az*vb3z);\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Dihedral problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    m = multiplicity[type];\n    p = 1.0;\n    ddf1 = df1 = 0.0;\n\n    for (i = 0; i < m; i++) {\n      ddf1 = p*c - df1*s;\n      df1 = p*s + df1*c;\n      p = ddf1;\n    }\n\n    p = p*cos_shift[type] + df1*sin_shift[type];\n    df1 = df1*cos_shift[type] - ddf1*sin_shift[type];\n    df1 *= -m;\n    p += 1.0;\n\n    if (m == 0) {\n      p = 1.0 + cos_shift[type];\n      df1 = 0.0;\n    }\n\n    if (eflag) edihedral = k[type] * p;\n\n    fg = vb1x*vb2xm + vb1y*vb2ym + vb1z*vb2zm;\n    hg = vb3x*vb2xm + vb3y*vb2ym + vb3z*vb2zm;\n    fga = fg*ra2inv*rginv;\n    hgb = hg*rb2inv*rginv;\n    gaa = -ra2inv*rg;\n    gbb = rb2inv*rg;\n\n    dtfx = gaa*ax;\n    dtfy = gaa*ay;\n    dtfz = gaa*az;\n    dtgx = fga*ax - hgb*bx;\n    dtgy = fga*ay - hgb*by;\n    dtgz = fga*az - hgb*bz;\n    dthx = gbb*bx;\n    dthy = gbb*by;\n    dthz = gbb*bz;\n\n    df = -k[type] * df1;\n\n    sx2 = df*dtgx;\n    sy2 = df*dtgy;\n    sz2 = df*dtgz;\n\n    f1[0] = df*dtfx;\n    f1[1] = df*dtfy;\n    f1[2] = df*dtfz;\n\n    f2[0] = sx2 - f1[0];\n    f2[1] = sy2 - f1[1];\n    f2[2] = sz2 - f1[2];\n\n    f4[0] = df*dthx;\n    f4[1] = df*dthy;\n    f4[2] = df*dthz;\n\n    f3[0] = -sx2 - f4[0];\n    f3[1] = -sy2 - f4[1];\n    f3[2] = -sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,edihedral,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n\n    // 1-4 LJ and Coulomb interactions\n    // tally energy/virial in pair, using newton_bond as newton flag\n\n    if (weight[type] > 0.0) {\n      itype = atomtype[i1];\n      jtype = atomtype[i4];\n\n      delx = x[i1][0] - x[i4][0];\n      dely = x[i1][1] - x[i4][1];\n      delz = x[i1][2] - x[i4][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      r2inv = 1.0/rsq;\n      r6inv = r2inv*r2inv*r2inv;\n\n      if (implicit) forcecoul = qqrd2e * q[i1]*q[i4]*r2inv;\n      else forcecoul = qqrd2e * q[i1]*q[i4]*sqrt(r2inv);\n      forcelj = r6inv * (lj14_1[itype][jtype]*r6inv - lj14_2[itype][jtype]);\n      fpair = weight[type] * (forcelj+forcecoul)*r2inv;\n\n      if (eflag) {\n        ecoul = weight[type] * forcecoul;\n        evdwl = r6inv * (lj14_3[itype][jtype]*r6inv - lj14_4[itype][jtype]);\n        evdwl *= weight[type];\n      }\n\n      if (newton_bond || i1 < nlocal) {\n        f[i1][0] += delx*fpair;\n        f[i1][1] += dely*fpair;\n        f[i1][2] += delz*fpair;\n      }\n      if (newton_bond || i4 < nlocal) {\n        f[i4][0] -= delx*fpair;\n        f[i4][1] -= dely*fpair;\n        f[i4][2] -= delz*fpair;\n      }\n\n      if (evflag) force->pair->ev_tally(i1,i4,nlocal,newton_bond,\n                                        evdwl,ecoul,fpair,delx,dely,delz);\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralCharmm::allocate()\n{\n  allocated = 1;\n  int n = atom->ndihedraltypes;\n\n  memory->create(k,n+1,\"dihedral:k\");\n  memory->create(multiplicity,n+1,\"dihedral:k\");\n  memory->create(shift,n+1,\"dihedral:shift\");\n  memory->create(cos_shift,n+1,\"dihedral:cos_shift\");\n  memory->create(sin_shift,n+1,\"dihedral:sin_shift\");\n  memory->create(weight,n+1,\"dihedral:weight\");\n\n  memory->create(setflag,n+1,\"dihedral:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmm::coeff(int narg, char **arg)\n{\n  if (narg != 5) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->ndihedraltypes,ilo,ihi);\n\n  // require integer values of shift for backwards compatibility\n  // arbitrary phase angle shift could be allowed, but would break\n  //   backwards compatibility and is probably not needed\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  int multiplicity_one = force->inumeric(FLERR,arg[2]);\n  int shift_one = force->inumeric(FLERR,arg[3]);\n  double weight_one = force->numeric(FLERR,arg[4]);\n\n  if (multiplicity_one < 0)\n    error->all(FLERR,\"Incorrect multiplicity arg for dihedral coefficients\");\n  if (weight_one < 0.0 || weight_one > 1.0)\n    error->all(FLERR,\"Incorrect weight arg for dihedral coefficients\");\n  if (weight_one > 0.0) weightflag=1;\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    shift[i] = shift_one;\n    cos_shift[i] = cos(MY_PI*shift_one/180.0);\n    sin_shift[i] = sin(MY_PI*shift_one/180.0);\n    multiplicity[i] = multiplicity_one;\n    weight[i] = weight_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   error check and initialize all values needed for force computation\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmm::init_style()\n{\n  if (strstr(update->integrate_style,\"respa\")) {\n    Respa *r = (Respa *) update->integrate;\n    if (r->level_pair >= 0 && (r->level_pair != r->level_dihedral))\n      error->all(FLERR,\"Dihedral style charmm must be set to same\"\n                 \" r-RESPA level as 'pair'\");\n    if (r->level_outer >= 0 && (r->level_outer != r->level_dihedral))\n      error->all(FLERR,\"Dihedral style charmm must be set to same\"\n                 \" r-RESPA level as 'outer'\");\n  }\n\n  // insure use of CHARMM pair_style if any weight factors are non-zero\n  // set local ptrs to LJ 14 arrays setup by Pair\n  // also verify that the correct 1-4 scaling is set\n\n  if (weightflag) {\n\n    if ((force->special_lj[3] != 0.0) || (force->special_coul[3] != 0.0))\n      error->all(FLERR,\"Must use 'special_bonds charmm' with\"\n                 \" dihedral style charmm for use with CHARMM pair styles\");\n\n    int itmp;\n    if (force->pair == NULL)\n      error->all(FLERR,\"Dihedral charmm is incompatible with Pair style\");\n    lj14_1 = (double **) force->pair->extract(\"lj14_1\",itmp);\n    lj14_2 = (double **) force->pair->extract(\"lj14_2\",itmp);\n    lj14_3 = (double **) force->pair->extract(\"lj14_3\",itmp);\n    lj14_4 = (double **) force->pair->extract(\"lj14_4\",itmp);\n    int *ptr = (int *) force->pair->extract(\"implicit\",itmp);\n    if (!lj14_1 || !lj14_2 || !lj14_3 || !lj14_4 || !ptr)\n      error->all(FLERR,\"Dihedral charmm is incompatible with Pair style\");\n    implicit = *ptr;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmm::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&multiplicity[1],sizeof(int),atom->ndihedraltypes,fp);\n  fwrite(&shift[1],sizeof(int),atom->ndihedraltypes,fp);\n  fwrite(&weight[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&weightflag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmm::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&multiplicity[1],sizeof(int),atom->ndihedraltypes,fp);\n    fread(&shift[1],sizeof(int),atom->ndihedraltypes,fp);\n    fread(&weight[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&weightflag,sizeof(int),1,fp);\n  }\n  MPI_Bcast(&k[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&multiplicity[1],atom->ndihedraltypes,MPI_INT,0,world);\n  MPI_Bcast(&shift[1],atom->ndihedraltypes,MPI_INT,0,world);\n  MPI_Bcast(&weight[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&weightflag,1,MPI_INT,0,world);\n\n  for (int i = 1; i <= atom->ndihedraltypes; i++) {\n    setflag[i] = 1;\n    cos_shift[i] = cos(MY_PI*shift[i]/180.0);\n    sin_shift[i] = sin(MY_PI*shift[i]/180.0);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmm::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ndihedraltypes; i++)\n    fprintf(fp,\"%d %g %d %d %g\\n\",i,k[i],multiplicity[i],shift[i],weight[i]);\n}\n\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Paul Crozier (SNL)\n                         Alexander Stukowski\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <float.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"fix_atom_swap.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"atom_vec_hybrid.h\"\n#include \"update.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"comm.h\"\n#include \"compute.h\"\n#include \"group.h\"\n#include \"domain.h\"\n#include \"region.h\"\n#include \"random_park.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"bond.h\"\n#include \"angle.h\"\n#include \"dihedral.h\"\n#include \"improper.h\"\n#include \"kspace.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n#include \"thermo.h\"\n#include \"output.h\"\n#include \"neighbor.h\"\n#include <iostream>\n\nusing namespace std;\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\nusing namespace MathConst;\n\n/* ---------------------------------------------------------------------- */\n\nFixAtomSwap::FixAtomSwap(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg),\n  idregion(NULL), type_list(NULL), mu(NULL), qtype(NULL), \n  sqrt_mass_ratio(NULL), local_swap_iatom_list(NULL), \n  local_swap_jatom_list(NULL), local_swap_atom_list(NULL), \n  random_equal(NULL), random_unequal(NULL), c_pe(NULL)\n{\n  if (narg < 10) error->all(FLERR,\"Illegal fix atom/swap command\");\n\n  dynamic_group_allow = 1;\n\n  vector_flag = 1;\n  size_vector = 2;\n  global_freq = 1;\n  extvector = 0;\n  restart_global = 1;\n  time_depend = 1;\n  \n  // required args\n\n  nevery = force->inumeric(FLERR,arg[3]);\n  ncycles = force->inumeric(FLERR,arg[4]);\n  seed = force->inumeric(FLERR,arg[5]);\n  double temperature = force->numeric(FLERR,arg[6]);\n  beta = 1.0/(force->boltz*temperature);\n\n  if (nevery <= 0) error->all(FLERR,\"Illegal fix atom/swap command\");\n  if (ncycles < 0) error->all(FLERR,\"Illegal fix atom/swap command\");\n  if (seed <= 0) error->all(FLERR,\"Illegal fix atom/swap command\");\n\n  memory->create(type_list,atom->ntypes,\"atom/swap:type_list\");\n  memory->create(mu,atom->ntypes+1,\"atom/swap:mu\");\n  for (int i = 1; i <= atom->ntypes; i++) mu[i] = 0.0;\n\n  // read options from end of input line\n\n  options(narg-7,&arg[7]);\n\n  // random number generator, same for all procs\n\n  random_equal = new RanPark(lmp,seed);\n\n  // random number generator, not the same for all procs\n\n  random_unequal = new RanPark(lmp,seed);\n\n  // set up reneighboring\n\n  force_reneighbor = 1;\n  next_reneighbor = update->ntimestep + 1;\n\n  // zero out counters\n\n  nswap_attempts = 0.0;\n  nswap_successes = 0.0;\n\n  atom_swap_nmax = 0;\n  local_swap_atom_list = NULL;\n  local_swap_iatom_list = NULL;\n  local_swap_jatom_list = NULL;\n\n  // set comm size needed by this Fix\n\n  if (atom->q_flag) comm_forward = 2;\n  else comm_forward = 1;\n\n}\n\n/* ----------------------------------------------------------------------\n   parse optional parameters at end of input line\n------------------------------------------------------------------------- */\n\nvoid FixAtomSwap::options(int narg, char **arg)\n{\n  if (narg < 0) error->all(FLERR,\"Illegal fix atom/swap command\");\n\n  regionflag = 0;\n  conserve_ke_flag = 1;\n  semi_grand_flag = 0;\n  nswaptypes = 0;\n  nmutypes = 0;\n  iregion = -1;\n\n  int iarg = 0;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"region\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix atom/swap command\");\n      iregion = domain->find_region(arg[iarg+1]);\n      if (iregion == -1)\n        error->all(FLERR,\"Region ID for fix atom/swap does not exist\");\n      int n = strlen(arg[iarg+1]) + 1;\n      idregion = new char[n];\n      strcpy(idregion,arg[iarg+1]);\n      regionflag = 1;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"ke\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix atom/swap command\");\n      if (strcmp(arg[iarg+1],\"no\") == 0) conserve_ke_flag = 0;\n      else if (strcmp(arg[iarg+1],\"yes\") == 0) conserve_ke_flag = 1;\n      else error->all(FLERR,\"Illegal fix atom/swap command\");\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"semi-grand\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix atom/swap command\");\n      if (strcmp(arg[iarg+1],\"no\") == 0) semi_grand_flag = 0;\n      else if (strcmp(arg[iarg+1],\"yes\") == 0) semi_grand_flag = 1;\n      else error->all(FLERR,\"Illegal fix atom/swap command\");\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"types\") == 0) {\n      if (iarg+3 > narg) error->all(FLERR,\"Illegal fix atom/swap command\");\n      iarg++;\n      while (iarg < narg) {\n        if (isalpha(arg[iarg][0])) break;\n\tif (nswaptypes >= atom->ntypes) error->all(FLERR,\"Illegal fix atom/swap command\");\n        type_list[nswaptypes] = force->numeric(FLERR,arg[iarg]);\n\tnswaptypes++;\n        iarg++;\n      }\n    } else if (strcmp(arg[iarg],\"mu\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix atom/swap command\");\n      iarg++;\n      while (iarg < narg) {\n        if (isalpha(arg[iarg][0])) break;\n        nmutypes++;\n\tif (nmutypes > atom->ntypes) error->all(FLERR,\"Illegal fix atom/swap command\");\n        mu[nmutypes] = force->numeric(FLERR,arg[iarg]);\n        iarg++;\n      }\n    } else error->all(FLERR,\"Illegal fix atom/swap command\");\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixAtomSwap::~FixAtomSwap()\n{\n  memory->destroy(type_list);\n  memory->destroy(mu);\n  memory->destroy(qtype);\n  memory->destroy(sqrt_mass_ratio);\n  if (regionflag) delete [] idregion;\n  delete random_equal;\n  delete random_unequal;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixAtomSwap::setmask()\n{\n  int mask = 0;\n  mask |= PRE_EXCHANGE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixAtomSwap::init()\n{\n  char *id_pe = (char *) \"thermo_pe\";\n  int ipe = modify->find_compute(id_pe);\n  c_pe = modify->compute[ipe];\n\n  int *type = atom->type;\n\n  if (nswaptypes < 2)\n    error->all(FLERR,\"Must specify at least 2 types in fix atom/swap command\");\n\n  if (semi_grand_flag) {\n    if (nswaptypes != nmutypes)\n      error->all(FLERR,\"Need nswaptypes mu values in fix atom/swap command\");\n  } else {\n    if (nswaptypes != 2)\n      error->all(FLERR,\"Only 2 types allowed when not using semi-grand in fix atom/swap command\");\n    if (nmutypes != 0)\n      error->all(FLERR,\"Mu not allowed when not using semi-grand in fix atom/swap command\");\n  }\n\n  for (int iswaptype = 0; iswaptype < nswaptypes; iswaptype++)\n    if (type_list[iswaptype] <= 0 || type_list[iswaptype] > atom->ntypes)\n      error->all(FLERR,\"Invalid atom type in fix atom/swap command\");\n\n  // this is only required for non-semi-grand\n  // in which case, nswaptypes = 2\n\n  if (atom->q_flag && !semi_grand_flag) {\n    double qmax,qmin;\n    int firstall,first;\n    memory->create(qtype,nswaptypes,\"atom/swap:qtype\");\n    for (int iswaptype = 0; iswaptype < nswaptypes; iswaptype++) {\n      first = 1;\n      for (int i = 0; i < atom->nlocal; i++) {\n        if (atom->mask[i] & groupbit) {\n\t  if (type[i] == type_list[iswaptype]) {\n\t    if (first) {\n\t      qtype[iswaptype] = atom->q[i];\n\t      first = 0;\n\t    } else if (qtype[iswaptype] != atom->q[i])\n\t      error->one(FLERR,\"All atoms of a swapped type must have the same charge.\");\n\t  }\n\t}\n      }\n      MPI_Allreduce(&first,&firstall,1,MPI_INT,MPI_MIN,world);\n      if (firstall) error->all(FLERR,\"At least one atom of each swapped type must be present to define charges.\");\n      if (first) qtype[iswaptype] = -DBL_MAX;\n      MPI_Allreduce(&qtype[iswaptype],&qmax,1,MPI_DOUBLE,MPI_MAX,world);\n      if (first) qtype[iswaptype] = DBL_MAX;\n      MPI_Allreduce(&qtype[iswaptype],&qmin,1,MPI_DOUBLE,MPI_MIN,world);\n      if (qmax != qmin) error->all(FLERR,\"All atoms of a swapped type must have same charge.\");\n    }\n  }\n\n  memory->create(sqrt_mass_ratio,atom->ntypes+1,atom->ntypes+1,\"atom/swap:sqrt_mass_ratio\");\n  for (int itype = 1; itype <= atom->ntypes; itype++)\n    for (int jtype = 1; jtype <= atom->ntypes; jtype++)\n      sqrt_mass_ratio[itype][jtype] = sqrt(atom->mass[itype]/atom->mass[jtype]);\n\n  // check to see if itype and jtype cutoffs are the same\n  // if not, reneighboring will be needed between swaps\n\n  double **cutsq = force->pair->cutsq;\n  unequal_cutoffs = false;\n  for (int iswaptype = 0; iswaptype < nswaptypes; iswaptype++)\n    for (int jswaptype = 0; jswaptype < nswaptypes; jswaptype++)\n      for (int ktype = 1; ktype <= atom->ntypes; ktype++)\n        if (cutsq[type_list[iswaptype]][ktype] != cutsq[type_list[jswaptype]][ktype])\n          unequal_cutoffs = true;\n\n  // check that no swappable atoms are in atom->firstgroup\n  // swapping such an atom might not leave firstgroup atoms first\n\n  if (atom->firstgroup >= 0) {\n    int *mask = atom->mask;\n    int firstgroupbit = group->bitmask[atom->firstgroup];\n\n    int flag = 0;\n    for (int i = 0; i < atom->nlocal; i++)\n      if ((mask[i] == groupbit) && (mask[i] && firstgroupbit)) flag = 1;\n\n    int flagall;\n    MPI_Allreduce(&flag,&flagall,1,MPI_INT,MPI_SUM,world);\n\n    if (flagall)\n      error->all(FLERR,\"Cannot do atom/swap on atoms in atom_modify first group\");\n  }\n}\n\n/* ----------------------------------------------------------------------\n   attempt Monte Carlo swaps\n------------------------------------------------------------------------- */\n\nvoid FixAtomSwap::pre_exchange()\n{\n  // just return if should not be called on this timestep\n\n  if (next_reneighbor != update->ntimestep) return;\n\n  if (domain->triclinic) domain->x2lamda(atom->nlocal);\n  domain->pbc();\n  comm->exchange();\n  comm->borders();\n  if (domain->triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n  if (modify->n_pre_neighbor) modify->pre_neighbor();\n  neighbor->build();\n\n  energy_stored = energy_full();\n\n  int nsuccess = 0;\n  if (semi_grand_flag) {\n    update_semi_grand_atoms_list();\n    for (int i = 0; i < ncycles; i++) nsuccess += attempt_semi_grand();\n  } else {\n    update_swap_atoms_list();\n    for (int i = 0; i < ncycles; i++) nsuccess += attempt_swap();\n  }\n\n  nswap_attempts += ncycles;\n  nswap_successes += nsuccess;\n\n  energy_full();\n  next_reneighbor = update->ntimestep + nevery;\n}\n\n/* ----------------------------------------------------------------------\nNote: atom charges are assumed equal and so are not updated\n------------------------------------------------------------------------- */\n\nint FixAtomSwap::attempt_semi_grand()\n{\n  if (nswap == 0) return 0;\n\n  double energy_before = energy_stored;\n\n  int itype,jtype,jswaptype;\n  int i = pick_semi_grand_atom();\n  if (i >= 0) {\n    jswaptype = static_cast<int> (nswaptypes*random_unequal->uniform());\n    jtype = type_list[jswaptype];\n    itype = atom->type[i];\n    while (itype == jtype) {\n      jswaptype = static_cast<int> (nswaptypes*random_unequal->uniform());\n      jtype = type_list[jswaptype];\n    }\n    atom->type[i] = jtype;\n  }\n\n  if (unequal_cutoffs) {\n    if (domain->triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    comm->exchange();\n    comm->borders();\n    if (domain->triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    if (modify->n_pre_neighbor) modify->pre_neighbor();\n    neighbor->build();\n  } else {\n    comm->forward_comm_fix(this);\n  }\n\n  if (force->kspace) force->kspace->qsum_qsq();\n  double energy_after = energy_full();\n\n  int success = 0;\n  if (i >= 0)\n    if (random_unequal->uniform() <\n      exp(-beta*(energy_after - energy_before\n            + mu[jtype] - mu[itype]))) success = 1;\n\n  int success_all = 0;\n  MPI_Allreduce(&success,&success_all,1,MPI_INT,MPI_MAX,world);\n\n  if (success_all) {\n    update_semi_grand_atoms_list();\n    energy_stored = energy_after;\n    if (conserve_ke_flag) {\n      if (i >= 0) {\n        atom->v[i][0] *= sqrt_mass_ratio[itype][jtype];\n        atom->v[i][1] *= sqrt_mass_ratio[itype][jtype];\n        atom->v[i][2] *= sqrt_mass_ratio[itype][jtype];\n      }\n    }\n    return 1;\n  } else {\n    if (i >= 0) {\n      atom->type[i] = itype;\n    }\n    if (force->kspace) force->kspace->qsum_qsq();\n    energy_stored = energy_before;\n\n    if (unequal_cutoffs) {\n      if (domain->triclinic) domain->x2lamda(atom->nlocal);\n      domain->pbc();\n      comm->exchange();\n      comm->borders();\n      if (domain->triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n      if (modify->n_pre_neighbor) modify->pre_neighbor();\n      neighbor->build();\n    } else {\n      comm->forward_comm_fix(this);\n    }\n  }\n  return 0;\n}\n\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nint FixAtomSwap::attempt_swap()\n{\n  if ((niswap == 0) || (njswap == 0)) return 0;\n\n  double energy_before = energy_stored;\n\n  int i = pick_i_swap_atom();\n  int j = pick_j_swap_atom();\n  int itype = type_list[0];\n  int jtype = type_list[1];\n\n  if (i >= 0) {\n    atom->type[i] = jtype;\n    if (atom->q_flag) atom->q[i] = qtype[1];\n  }\n  if (j >= 0) {\n    atom->type[j] = itype;\n    if (atom->q_flag) atom->q[j] = qtype[0];\n  }\n\n  if (unequal_cutoffs) {\n    if (domain->triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    comm->exchange();\n    comm->borders();\n    if (domain->triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    if (modify->n_pre_neighbor) modify->pre_neighbor();\n    neighbor->build();\n  } else {\n    comm->forward_comm_fix(this);\n  }\n\n  double energy_after = energy_full();\n\n  if (random_equal->uniform() <\n      exp(beta*(energy_before - energy_after))) {\n    update_swap_atoms_list();\n    energy_stored = energy_after;\n    if (conserve_ke_flag) {\n      if (i >= 0) {\n        atom->v[i][0] *= sqrt_mass_ratio[itype][jtype];\n        atom->v[i][1] *= sqrt_mass_ratio[itype][jtype];\n        atom->v[i][2] *= sqrt_mass_ratio[itype][jtype];\n      }\n      if (j >= 0) {\n        atom->v[j][0] *= sqrt_mass_ratio[jtype][itype];\n        atom->v[j][1] *= sqrt_mass_ratio[jtype][itype];\n        atom->v[j][2] *= sqrt_mass_ratio[jtype][itype];\n      }\n    }\n    return 1;\n  } else {\n    if (i >= 0) {\n      atom->type[i] =  type_list[0];\n      if (atom->q_flag) atom->q[i] = qtype[0];\n    }\n    if (j >= 0) {\n      atom->type[j] =  type_list[1];\n      if (atom->q_flag) atom->q[j] = qtype[1];\n    }\n    energy_stored = energy_before;\n\n    if (unequal_cutoffs) {\n      if (domain->triclinic) domain->x2lamda(atom->nlocal);\n      domain->pbc();\n      comm->exchange();\n      comm->borders();\n      if (domain->triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n      if (modify->n_pre_neighbor) modify->pre_neighbor();\n      neighbor->build();\n    } else {\n      comm->forward_comm_fix(this);\n    }\n  }\n  return 0;\n}\n\n/* ----------------------------------------------------------------------\n   compute system potential energy\n------------------------------------------------------------------------- */\n\ndouble FixAtomSwap::energy_full()\n{\n  int eflag = 1;\n  int vflag = 0;\n\n  if (modify->n_pre_neighbor) modify->pre_neighbor();\n  if (modify->n_pre_force) modify->pre_force(vflag);\n\n  if (force->pair) force->pair->compute(eflag,vflag);\n\n  if (atom->molecular) {\n    if (force->bond) force->bond->compute(eflag,vflag);\n    if (force->angle) force->angle->compute(eflag,vflag);\n    if (force->dihedral) force->dihedral->compute(eflag,vflag);\n    if (force->improper) force->improper->compute(eflag,vflag);\n  }\n\n  if (force->kspace) force->kspace->compute(eflag,vflag);\n\n  if (modify->n_post_force) modify->post_force(vflag);\n  if (modify->n_end_of_step) modify->end_of_step();\n\n  update->eflag_global = update->ntimestep;\n  double total_energy = c_pe->compute_scalar();\n\n  return total_energy;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nint FixAtomSwap::pick_semi_grand_atom()\n{\n  int i = -1;\n  int iwhichglobal = static_cast<int> (nswap*random_equal->uniform());\n  if ((iwhichglobal >= nswap_before) &&\n      (iwhichglobal < nswap_before + nswap_local)) {\n    int iwhichlocal = iwhichglobal - nswap_before;\n    i = local_swap_atom_list[iwhichlocal];\n  }\n\n  return i;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nint FixAtomSwap::pick_i_swap_atom()\n{\n  int i = -1;\n  int iwhichglobal = static_cast<int> (niswap*random_equal->uniform());\n  if ((iwhichglobal >= niswap_before) &&\n      (iwhichglobal < niswap_before + niswap_local)) {\n    int iwhichlocal = iwhichglobal - niswap_before;\n    i = local_swap_iatom_list[iwhichlocal];\n  }\n\n  return i;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nint FixAtomSwap::pick_j_swap_atom()\n{\n  int j = -1;\n  int jwhichglobal = static_cast<int> (njswap*random_equal->uniform());\n  if ((jwhichglobal >= njswap_before) &&\n      (jwhichglobal < njswap_before + njswap_local)) {\n    int jwhichlocal = jwhichglobal - njswap_before;\n    j = local_swap_jatom_list[jwhichlocal];\n  }\n\n  return j;\n}\n\n/* ----------------------------------------------------------------------\n   update the list of gas atoms\n------------------------------------------------------------------------- */\n\nvoid FixAtomSwap::update_semi_grand_atoms_list()\n{\n  int nlocal = atom->nlocal;\n  double **x = atom->x;\n\n  if (atom->nmax > atom_swap_nmax) {\n    memory->sfree(local_swap_atom_list);\n    atom_swap_nmax = atom->nmax;\n    local_swap_atom_list = (int *) memory->smalloc(atom_swap_nmax*sizeof(int),\n     \"MCSWAP:local_swap_atom_list\");\n  }\n\n  nswap_local = 0;\n\n  if (regionflag) {\n\n    for (int i = 0; i < nlocal; i++) {\n      if (domain->regions[iregion]->match(x[i][0],x[i][1],x[i][2]) == 1) {\n        if (atom->mask[i] & groupbit) {\n\t  int itype = atom->type[i];\n\t  int iswaptype;\n\t  for (iswaptype = 0; iswaptype < nswaptypes; iswaptype++)\n\t    if (itype == type_list[iswaptype]) break;\n\t  if (iswaptype == nswaptypes) continue;\n          local_swap_atom_list[nswap_local] = i;\n          nswap_local++;\n        }\n      }\n    }\n\n  } else {\n    for (int i = 0; i < nlocal; i++) {\n      if (atom->mask[i] & groupbit) {\n\t  int itype = atom->type[i];\n\t  int iswaptype;\n\t  for (iswaptype = 0; iswaptype < nswaptypes; iswaptype++)\n\t    if (itype == type_list[iswaptype]) break;\n\t  if (iswaptype == nswaptypes) continue;\n        local_swap_atom_list[nswap_local] = i;\n        nswap_local++;\n      }\n    }\n  }\n\n  MPI_Allreduce(&nswap_local,&nswap,1,MPI_INT,MPI_SUM,world);\n  MPI_Scan(&nswap_local,&nswap_before,1,MPI_INT,MPI_SUM,world);\n  nswap_before -= nswap_local;\n}\n\n\n/* ----------------------------------------------------------------------\n   update the list of gas atoms\n------------------------------------------------------------------------- */\n\nvoid FixAtomSwap::update_swap_atoms_list()\n{\n  int nlocal = atom->nlocal;\n  int *type = atom->type;\n  double **x = atom->x;\n\n  if (atom->nmax > atom_swap_nmax) {\n    memory->sfree(local_swap_iatom_list);\n    memory->sfree(local_swap_jatom_list);\n    atom_swap_nmax = atom->nmax;\n    local_swap_iatom_list = (int *) memory->smalloc(atom_swap_nmax*sizeof(int),\n     \"MCSWAP:local_swap_iatom_list\");\n    local_swap_jatom_list = (int *) memory->smalloc(atom_swap_nmax*sizeof(int),\n     \"MCSWAP:local_swap_jatom_list\");\n  }\n\n  niswap_local = 0;\n  njswap_local = 0;\n\n  if (regionflag) {\n\n    for (int i = 0; i < nlocal; i++) {\n      if (domain->regions[iregion]->match(x[i][0],x[i][1],x[i][2]) == 1) {\n        if (atom->mask[i] & groupbit) {\n          if (type[i] ==  type_list[0]) {\n            local_swap_iatom_list[niswap_local] = i;\n            niswap_local++;\n          } else if (type[i] ==  type_list[1]) {\n            local_swap_jatom_list[njswap_local] = i;\n            njswap_local++;\n          }\n        }\n      }\n    }\n\n  } else {\n    for (int i = 0; i < nlocal; i++) {\n      if (atom->mask[i] & groupbit) {\n        if (type[i] ==  type_list[0]) {\n          local_swap_iatom_list[niswap_local] = i;\n          niswap_local++;\n        } else if (type[i] ==  type_list[1]) {\n          local_swap_jatom_list[njswap_local] = i;\n          njswap_local++;\n        }\n      }\n    }\n  }\n\n  MPI_Allreduce(&niswap_local,&niswap,1,MPI_INT,MPI_SUM,world);\n  MPI_Scan(&niswap_local,&niswap_before,1,MPI_INT,MPI_SUM,world);\n  niswap_before -= niswap_local;\n\n  MPI_Allreduce(&njswap_local,&njswap,1,MPI_INT,MPI_SUM,world);\n  MPI_Scan(&njswap_local,&njswap_before,1,MPI_INT,MPI_SUM,world);\n  njswap_before -= njswap_local;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixAtomSwap::pack_forward_comm(int n, int *list, double *buf, int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  int *type = atom->type;\n  double *q = atom->q;\n\n  m = 0;\n\n  if (atom->q_flag) {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = type[j];\n      buf[m++] = q[j];\n    }\n  } else {\n    for (i = 0; i < n; i++) {\n      j = list[i];\n      buf[m++] = type[j];\n    }\n  }\n\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixAtomSwap::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  int *type = atom->type;\n  double *q = atom->q;\n\n  m = 0;\n  last = first + n;\n\n  if (atom->q_flag) {\n    for (i = first; i < last; i++) {\n      type[i] = static_cast<int> (buf[m++]);\n      q[i] = buf[m++];\n    }\n  } else {\n    for (i = first; i < last; i++)\n      type[i] = static_cast<int> (buf[m++]);\n  }\n}\n\n/* ----------------------------------------------------------------------\n  return acceptance ratio\n------------------------------------------------------------------------- */\n\ndouble FixAtomSwap::compute_vector(int n)\n{\n  if (n == 0) return nswap_attempts;\n  if (n == 1) return nswap_successes;\n  return 0.0;\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble FixAtomSwap::memory_usage()\n{\n  double bytes = atom_swap_nmax * sizeof(int);\n  return bytes;\n}\n\n/* ----------------------------------------------------------------------\n   pack entire state of Fix into one write\n------------------------------------------------------------------------- */\n\nvoid FixAtomSwap::write_restart(FILE *fp)\n{\n  int n = 0;\n  double list[4];\n  list[n++] = random_equal->state();\n  list[n++] = random_unequal->state();\n  list[n++] = next_reneighbor;\n\n  if (comm->me == 0) {\n    int size = n * sizeof(double);\n    fwrite(&size,sizeof(int),1,fp);\n    fwrite(list,sizeof(double),n,fp);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   use state info from restart file to restart the Fix\n------------------------------------------------------------------------- */\n\nvoid FixAtomSwap::restart(char *buf)\n{\n  int n = 0;\n  double *list = (double *) buf;\n\n  seed = static_cast<int> (list[n++]);\n  random_equal->reset(seed);\n\n  seed = static_cast<int> (list[n++]);\n  random_unequal->reset(seed);\n\n  next_reneighbor = static_cast<int> (list[n++]);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier, Aidan Thompson (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"fix_gcmc.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"atom_vec_hybrid.h\"\n#include \"molecule.h\"\n#include \"update.h\"\n#include \"modify.h\"\n#include \"fix.h\"\n#include \"comm.h\"\n#include \"compute.h\"\n#include \"group.h\"\n#include \"domain.h\"\n#include \"region.h\"\n#include \"random_park.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"bond.h\"\n#include \"angle.h\"\n#include \"dihedral.h\"\n#include \"improper.h\"\n#include \"kspace.h\"\n#include \"math_extra.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n#include \"thermo.h\"\n#include \"output.h\"\n#include \"neighbor.h\"\n#include <iostream>\n\nusing namespace std;\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\nusing namespace MathConst;\n\n// large energy value used to signal overlap\n\n#define MAXENERGYSIGNAL 1.0e100\n\n// this must be lower than MAXENERGYSIGNAL\n// by a large amount, so that it is still\n// less than total energy when negative\n// energy contributions are added to MAXENERGYSIGNAL\n\n#define MAXENERGYTEST 1.0e50\n\nenum{ATOM,MOLECULE};\n\n/* ---------------------------------------------------------------------- */\n\nFixGCMC::FixGCMC(LAMMPS *lmp, int narg, char **arg) :\n  Fix(lmp, narg, arg),\n  idregion(NULL), full_flag(0), ngroups(0), groupstrings(NULL), ngrouptypes(0), grouptypestrings(NULL),\n  grouptypebits(NULL), grouptypes(NULL), local_gas_list(NULL), atom_coord(NULL), random_equal(NULL), random_unequal(NULL),\n  coords(NULL), imageflags(NULL), fixrigid(NULL), fixshake(NULL), idrigid(NULL), idshake(NULL)\n{\n  if (narg < 11) error->all(FLERR,\"Illegal fix gcmc command\");\n\n  if (atom->molecular == 2)\n    error->all(FLERR,\"Fix gcmc does not (yet) work with atom_style template\");\n\n  dynamic_group_allow = 1;\n\n  vector_flag = 1;\n  size_vector = 8;\n  global_freq = 1;\n  extvector = 0;\n  restart_global = 1;\n  time_depend = 1;\n\n  // required args\n\n  nevery = force->inumeric(FLERR,arg[3]);\n  nexchanges = force->inumeric(FLERR,arg[4]);\n  nmcmoves = force->inumeric(FLERR,arg[5]);\n  ngcmc_type = force->inumeric(FLERR,arg[6]);\n  seed = force->inumeric(FLERR,arg[7]);\n  reservoir_temperature = force->numeric(FLERR,arg[8]);\n  chemical_potential = force->numeric(FLERR,arg[9]);\n  displace = force->numeric(FLERR,arg[10]);\n\n  if (nevery <= 0) error->all(FLERR,\"Illegal fix gcmc command\");\n  if (nexchanges < 0) error->all(FLERR,\"Illegal fix gcmc command\");\n  if (nmcmoves < 0) error->all(FLERR,\"Illegal fix gcmc command\");\n  if (seed <= 0) error->all(FLERR,\"Illegal fix gcmc command\");\n  if (reservoir_temperature < 0.0)\n    error->all(FLERR,\"Illegal fix gcmc command\");\n  if (displace < 0.0) error->all(FLERR,\"Illegal fix gcmc command\");\n\n  // read options from end of input line\n\n  options(narg-11,&arg[11]);\n\n  // random number generator, same for all procs\n\n  random_equal = new RanPark(lmp,seed);\n\n  // random number generator, not the same for all procs\n\n  random_unequal = new RanPark(lmp,seed);\n\n  // error checks on region and its extent being inside simulation box\n\n  region_xlo = region_xhi = region_ylo = region_yhi =\n    region_zlo = region_zhi = 0.0;\n  if (regionflag) {\n    if (domain->regions[iregion]->bboxflag == 0)\n      error->all(FLERR,\"Fix gcmc region does not support a bounding box\");\n    if (domain->regions[iregion]->dynamic_check())\n      error->all(FLERR,\"Fix gcmc region cannot be dynamic\");\n\n    region_xlo = domain->regions[iregion]->extent_xlo;\n    region_xhi = domain->regions[iregion]->extent_xhi;\n    region_ylo = domain->regions[iregion]->extent_ylo;\n    region_yhi = domain->regions[iregion]->extent_yhi;\n    region_zlo = domain->regions[iregion]->extent_zlo;\n    region_zhi = domain->regions[iregion]->extent_zhi;\n\n    if (region_xlo < domain->boxlo[0] || region_xhi > domain->boxhi[0] ||\n        region_ylo < domain->boxlo[1] || region_yhi > domain->boxhi[1] ||\n        region_zlo < domain->boxlo[2] || region_zhi > domain->boxhi[2])\n      error->all(FLERR,\"Fix gcmc region extends outside simulation box\");\n\n    // estimate region volume using MC trials\n\n    double coord[3];\n    int inside = 0;\n    int attempts = 10000000;\n    for (int i = 0; i < attempts; i++) {\n      coord[0] = region_xlo + random_equal->uniform() * (region_xhi-region_xlo);\n      coord[1] = region_ylo + random_equal->uniform() * (region_yhi-region_ylo);\n      coord[2] = region_zlo + random_equal->uniform() * (region_zhi-region_zlo);\n      if (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) != 0)\n        inside++;\n    }\n\n    double max_region_volume = (region_xhi - region_xlo)*\n     (region_yhi - region_ylo)*(region_zhi - region_zlo);\n\n    region_volume = max_region_volume*static_cast<double> (inside)/\n     static_cast<double> (attempts);\n  }\n\n  // error check and further setup for mode = MOLECULE\n\n  if (mode == MOLECULE) {\n    if (onemols[imol]->xflag == 0)\n      error->all(FLERR,\"Fix gcmc molecule must have coordinates\");\n    if (onemols[imol]->typeflag == 0)\n      error->all(FLERR,\"Fix gcmc molecule must have atom types\");\n    if (ngcmc_type != 0)\n      error->all(FLERR,\"Atom type must be zero in fix gcmc mol command\");\n    if (onemols[imol]->qflag == 1 && atom->q == NULL)\n      error->all(FLERR,\"Fix gcmc molecule has charges, but atom style does not\");\n\n    if (atom->molecular == 2 && onemols != atom->avec->onemols)\n      error->all(FLERR,\"Fix gcmc molecule template ID must be same \"\n                 \"as atom_style template ID\");\n    onemols[imol]->check_attributes(0);\n  }\n\n  if (charge_flag && atom->q == NULL)\n    error->all(FLERR,\"Fix gcmc atom has charge, but atom style does not\");\n\n  if (rigidflag && mode == ATOM)\n    error->all(FLERR,\"Cannot use fix gcmc rigid and not molecule\");\n  if (shakeflag && mode == ATOM)\n    error->all(FLERR,\"Cannot use fix gcmc shake and not molecule\");\n  if (rigidflag && shakeflag)\n    error->all(FLERR,\"Cannot use fix gcmc rigid and shake\");\n  if (rigidflag && (nmcmoves > 0))\n    error->all(FLERR,\"Cannot use fix gcmc rigid with MC moves\");\n  if (shakeflag && (nmcmoves > 0))\n    error->all(FLERR,\"Cannot use fix gcmc shake with MC moves\");\n\n  // setup of coords and imageflags array\n\n  if (mode == ATOM) natoms_per_molecule = 1;\n  else natoms_per_molecule = onemols[imol]->natoms;\n  memory->create(coords,natoms_per_molecule,3,\"gcmc:coords\");\n  memory->create(imageflags,natoms_per_molecule,\"gcmc:imageflags\");\n  memory->create(atom_coord,natoms_per_molecule,3,\"gcmc:atom_coord\");\n\n  // compute the number of MC cycles that occur nevery timesteps\n\n  ncycles = nexchanges + nmcmoves;\n\n  // set up reneighboring\n\n  force_reneighbor = 1;\n  next_reneighbor = update->ntimestep + 1;\n\n  // zero out counters\n\n  ntranslation_attempts = 0.0;\n  ntranslation_successes = 0.0;\n  nrotation_attempts = 0.0;\n  nrotation_successes = 0.0;\n  ndeletion_attempts = 0.0;\n  ndeletion_successes = 0.0;\n  ninsertion_attempts = 0.0;\n  ninsertion_successes = 0.0;\n\n  gcmc_nmax = 0;\n  local_gas_list = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   parse optional parameters at end of input line\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::options(int narg, char **arg)\n{\n  if (narg < 0) error->all(FLERR,\"Illegal fix gcmc command\");\n\n  // defaults\n\n  mode = ATOM;\n  max_rotation_angle = 10*MY_PI/180;\n  regionflag = 0;\n  iregion = -1;\n  region_volume = 0;\n  max_region_attempts = 1000;\n  molecule_group = 0;\n  molecule_group_bit = 0;\n  molecule_group_inversebit = 0;\n  exclusion_group = 0;\n  exclusion_group_bit = 0;\n  pressure_flag = false;\n  pressure = 0.0;\n  fugacity_coeff = 1.0;\n  rigidflag = 0;\n  shakeflag = 0;\n  charge = 0.0;\n  charge_flag = false;\n  full_flag = false;\n  ngroups = 0;\n  int ngroupsmax = 0;\n  groupstrings = NULL;\n  ngrouptypes = 0;\n  int ngrouptypesmax = 0;\n  grouptypestrings = NULL;\n  grouptypes = NULL;\n  grouptypebits = NULL;\n  energy_intra = 0.0;\n  tfac_insert = 1.0;\n  overlap_cutoffsq = 0.0;\n  overlap_flag = 0;\n\n  int iarg = 0;\n  while (iarg < narg) {\n  if (strcmp(arg[iarg],\"mol\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      imol = atom->find_molecule(arg[iarg+1]);\n      if (imol == -1)\n        error->all(FLERR,\"Molecule template ID for fix gcmc does not exist\");\n      if (atom->molecules[imol]->nset > 1 && comm->me == 0)\n        error->warning(FLERR,\"Molecule template for \"\n                       \"fix gcmc has multiple molecules\");\n      mode = MOLECULE;\n      onemols = atom->molecules;\n      nmol = onemols[imol]->nset;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"region\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      iregion = domain->find_region(arg[iarg+1]);\n      if (iregion == -1)\n        error->all(FLERR,\"Region ID for fix gcmc does not exist\");\n      int n = strlen(arg[iarg+1]) + 1;\n      idregion = new char[n];\n      strcpy(idregion,arg[iarg+1]);\n      regionflag = 1;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"maxangle\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      max_rotation_angle = force->numeric(FLERR,arg[iarg+1]);\n      max_rotation_angle *= MY_PI/180;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"pressure\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      pressure = force->numeric(FLERR,arg[iarg+1]);\n      pressure_flag = true;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"fugacity_coeff\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      fugacity_coeff = force->numeric(FLERR,arg[iarg+1]);\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"charge\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      charge = force->numeric(FLERR,arg[iarg+1]);\n      charge_flag = true;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"rigid\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      int n = strlen(arg[iarg+1]) + 1;\n      delete [] idrigid;\n      idrigid = new char[n];\n      strcpy(idrigid,arg[iarg+1]);\n      rigidflag = 1;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"shake\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      int n = strlen(arg[iarg+1]) + 1;\n      delete [] idshake;\n      idshake = new char[n];\n      strcpy(idshake,arg[iarg+1]);\n      shakeflag = 1;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"full_energy\") == 0) {\n      full_flag = true;\n      iarg += 1;\n    } else if (strcmp(arg[iarg],\"group\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      if (ngroups >= ngroupsmax) {\n        ngroupsmax = ngroups+1;\n        groupstrings = (char **)\n          memory->srealloc(groupstrings,\n                           ngroupsmax*sizeof(char *),\n                           \"fix_gcmc:groupstrings\");\n      }\n      int n = strlen(arg[iarg+1]) + 1;\n      groupstrings[ngroups] = new char[n];\n      strcpy(groupstrings[ngroups],arg[iarg+1]);\n      ngroups++;\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"grouptype\") == 0) {\n      if (iarg+3 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      if (ngrouptypes >= ngrouptypesmax) {\n        ngrouptypesmax = ngrouptypes+1;\n        grouptypes = (int*) memory->srealloc(grouptypes,ngrouptypesmax*sizeof(int),\n                         \"fix_gcmc:grouptypes\");\n        grouptypestrings = (char**)\n          memory->srealloc(grouptypestrings,\n                           ngrouptypesmax*sizeof(char *),\n                           \"fix_gcmc:grouptypestrings\");\n      }\n      grouptypes[ngrouptypes] = atoi(arg[iarg+1]);\n      int n = strlen(arg[iarg+2]) + 1;\n      grouptypestrings[ngrouptypes] = new char[n];\n      strcpy(grouptypestrings[ngrouptypes],arg[iarg+2]);\n      ngrouptypes++;\n      iarg += 3;\n    } else if (strcmp(arg[iarg],\"intra_energy\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      energy_intra = force->numeric(FLERR,arg[iarg+1]);\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"tfac_insert\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      tfac_insert = force->numeric(FLERR,arg[iarg+1]);\n      iarg += 2;\n    } else if (strcmp(arg[iarg],\"overlap_cutoff\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix gcmc command\");\n      double rtmp = force->numeric(FLERR,arg[iarg+1]);\n      overlap_cutoffsq = rtmp*rtmp;\n      overlap_flag = 1;\n      iarg += 2;\n    } else error->all(FLERR,\"Illegal fix gcmc command\");\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixGCMC::~FixGCMC()\n{\n  if (regionflag) delete [] idregion;\n  delete random_equal;\n  delete random_unequal;\n\n  memory->destroy(local_gas_list);\n  memory->destroy(atom_coord);\n  memory->destroy(coords);\n  memory->destroy(imageflags);\n\n  delete [] idrigid;\n  delete [] idshake;\n\n  if (ngroups > 0) {\n    for (int igroup = 0; igroup < ngroups; igroup++)\n      delete [] groupstrings[igroup];\n    memory->sfree(groupstrings);\n  }\n\n  if (ngrouptypes > 0) {\n    memory->destroy(grouptypes);\n    memory->destroy(grouptypebits);\n    for (int igroup = 0; igroup < ngrouptypes; igroup++)\n      delete [] grouptypestrings[igroup];\n    memory->sfree(grouptypestrings);\n  }\n  if (full_flag && group) {\n    int igroupall = group->find(\"all\");\n    neighbor->exclusion_group_group_delete(exclusion_group,igroupall);\n  }\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixGCMC::setmask()\n{\n  int mask = 0;\n  mask |= PRE_EXCHANGE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixGCMC::init()\n{\n\n  triclinic = domain->triclinic;\n\n  // decide whether to switch to the full_energy option\n\n  if (!full_flag) {\n    if ((force->kspace) ||\n        (force->pair == NULL) ||\n        (force->pair->single_enable == 0) ||\n        (force->pair_match(\"hybrid\",0)) ||\n        (force->pair_match(\"eam\",0)) ||\n        (force->pair->tail_flag)\n        ) {\n      full_flag = true;\n      if (comm->me == 0)\n        error->warning(FLERR,\"Fix gcmc using full_energy option\");\n    }\n  }\n\n  if (full_flag) {\n    char *id_pe = (char *) \"thermo_pe\";\n    int ipe = modify->find_compute(id_pe);\n    c_pe = modify->compute[ipe];\n  }\n\n  int *type = atom->type;\n\n  if (mode == ATOM) {\n    if (ngcmc_type <= 0 || ngcmc_type > atom->ntypes)\n      error->all(FLERR,\"Invalid atom type in fix gcmc command\");\n  }\n\n  // if mode == ATOM, warn if any deletable atom has a mol ID\n\n  if ((mode == ATOM) && atom->molecule_flag) {\n    tagint *molecule = atom->molecule;\n    int flag = 0;\n    for (int i = 0; i < atom->nlocal; i++)\n      if (type[i] == ngcmc_type)\n        if (molecule[i]) flag = 1;\n    int flagall;\n    MPI_Allreduce(&flag,&flagall,1,MPI_INT,MPI_SUM,world);\n    if (flagall && comm->me == 0)\n      error->all(FLERR,\n       \"Fix gcmc cannot exchange individual atoms belonging to a molecule\");\n  }\n\n  // if mode == MOLECULE, check for unset mol IDs\n\n  if (mode == MOLECULE) {\n    tagint *molecule = atom->molecule;\n    int *mask = atom->mask;\n    int flag = 0;\n    for (int i = 0; i < atom->nlocal; i++)\n      if (mask[i] == groupbit)\n        if (molecule[i] == 0) flag = 1;\n    int flagall;\n    MPI_Allreduce(&flag,&flagall,1,MPI_INT,MPI_SUM,world);\n    if (flagall && comm->me == 0)\n      error->all(FLERR,\n       \"All mol IDs should be set for fix gcmc group atoms\");\n  }\n\n  if (((mode == MOLECULE) && (atom->molecule_flag == 0)) ||\n      ((mode == MOLECULE) && (!atom->tag_enable || !atom->map_style)))\n    error->all(FLERR,\n               \"Fix gcmc molecule command requires that \"\n               \"atoms have molecule attributes\");\n\n  // if rigidflag defined, check for rigid/small fix\n  // its molecule template must be same as this one\n\n  fixrigid = NULL;\n  if (rigidflag) {\n    int ifix = modify->find_fix(idrigid);\n    if (ifix < 0) error->all(FLERR,\"Fix gcmc rigid fix does not exist\");\n    fixrigid = modify->fix[ifix];\n    int tmp;\n    if (&onemols[imol] != (Molecule **) fixrigid->extract(\"onemol\",tmp))\n      error->all(FLERR,\n                 \"Fix gcmc and fix rigid/small not using \"\n                 \"same molecule template ID\");\n  }\n\n  // if shakeflag defined, check for SHAKE fix\n  // its molecule template must be same as this one\n\n  fixshake = NULL;\n  if (shakeflag) {\n    int ifix = modify->find_fix(idshake);\n    if (ifix < 0) error->all(FLERR,\"Fix gcmc shake fix does not exist\");\n    fixshake = modify->fix[ifix];\n    int tmp;\n    if (&onemols[imol] != (Molecule **) fixshake->extract(\"onemol\",tmp))\n      error->all(FLERR,\"Fix gcmc and fix shake not using \"\n                 \"same molecule template ID\");\n  }\n\n  if (domain->dimension == 2)\n    error->all(FLERR,\"Cannot use fix gcmc in a 2d simulation\");\n\n  // create a new group for interaction exclusions\n  // used for attempted atom or molecule deletions\n  // skip if already exists from previous init()\n\n  if (full_flag && !exclusion_group_bit) {\n    char **group_arg = new char*[4];\n\n    // create unique group name for atoms to be excluded\n\n    int len = strlen(id) + 30;\n    group_arg[0] = new char[len];\n    sprintf(group_arg[0],\"FixGCMC:gcmc_exclusion_group:%s\",id);\n    group_arg[1] = (char *) \"subtract\";\n    group_arg[2] = (char *) \"all\";\n    group_arg[3] = (char *) \"all\";\n    group->assign(4,group_arg);\n    exclusion_group = group->find(group_arg[0]);\n    if (exclusion_group == -1)\n      error->all(FLERR,\"Could not find fix gcmc exclusion group ID\");\n    exclusion_group_bit = group->bitmask[exclusion_group];\n\n    // neighbor list exclusion setup\n    // turn off interactions between group all and the exclusion group\n\n    int narg = 4;\n    char **arg = new char*[narg];;\n    arg[0] = (char *) \"exclude\";\n    arg[1] = (char *) \"group\";\n    arg[2] = group_arg[0];\n    arg[3] = (char *) \"all\";\n    neighbor->modify_params(narg,arg);\n    delete [] group_arg[0];\n    delete [] group_arg;\n    delete [] arg;\n  }\n\n  // create a new group for temporary use with selected molecules\n\n  if (mode == MOLECULE) {\n    char **group_arg = new char*[3];\n    // create unique group name for atoms to be rotated\n    int len = strlen(id) + 30;\n    group_arg[0] = new char[len];\n    sprintf(group_arg[0],\"FixGCMC:rotation_gas_atoms:%s\",id);\n    group_arg[1] = (char *) \"molecule\";\n    char digits[12];\n    sprintf(digits,\"%d\",-1);\n    group_arg[2] = digits;\n    group->assign(3,group_arg);\n    molecule_group = group->find(group_arg[0]);\n    if (molecule_group == -1)\n      error->all(FLERR,\"Could not find fix gcmc rotation group ID\");\n    molecule_group_bit = group->bitmask[molecule_group];\n    molecule_group_inversebit = molecule_group_bit ^ ~0;\n    delete [] group_arg[0];\n    delete [] group_arg;\n  }\n\n  // get all of the needed molecule data if mode == MOLECULE,\n  // otherwise just get the gas mass\n\n  if (mode == MOLECULE) {\n\n    onemols[imol]->compute_mass();\n    onemols[imol]->compute_com();\n    gas_mass = onemols[imol]->masstotal;\n    for (int i = 0; i < onemols[imol]->natoms; i++) {\n      onemols[imol]->x[i][0] -= onemols[imol]->com[0];\n      onemols[imol]->x[i][1] -= onemols[imol]->com[1];\n      onemols[imol]->x[i][2] -= onemols[imol]->com[2];\n    }\n    onemols[imol]->com[0] = 0;\n    onemols[imol]->com[1] = 0;\n    onemols[imol]->com[2] = 0;\n\n  } else gas_mass = atom->mass[ngcmc_type];\n\n  if (gas_mass <= 0.0)\n    error->all(FLERR,\"Illegal fix gcmc gas mass <= 0\");\n\n  // check that no deletable atoms are in atom->firstgroup\n  // deleting such an atom would not leave firstgroup atoms first\n\n  if (atom->firstgroup >= 0) {\n    int *mask = atom->mask;\n    int firstgroupbit = group->bitmask[atom->firstgroup];\n\n    int flag = 0;\n    for (int i = 0; i < atom->nlocal; i++)\n      if ((mask[i] == groupbit) && (mask[i] && firstgroupbit)) flag = 1;\n\n    int flagall;\n    MPI_Allreduce(&flag,&flagall,1,MPI_INT,MPI_SUM,world);\n\n    if (flagall)\n      error->all(FLERR,\"Cannot do GCMC on atoms in atom_modify first group\");\n  }\n\n  // compute beta, lambda, sigma, and the zz factor\n  // For LJ units, lambda=1\n  beta = 1.0/(force->boltz*reservoir_temperature);\n  if (strcmp(update->unit_style,\"lj\") == 0)\n    zz = exp(beta*chemical_potential);\n  else {\n    double lambda = sqrt(force->hplanck*force->hplanck/\n                         (2.0*MY_PI*gas_mass*force->mvv2e*\n                        force->boltz*reservoir_temperature));\n    zz = exp(beta*chemical_potential)/(pow(lambda,3.0));\n  }\n\n  sigma = sqrt(force->boltz*reservoir_temperature*tfac_insert/gas_mass/force->mvv2e);\n  if (pressure_flag) zz = pressure*fugacity_coeff*beta/force->nktv2p;\n\n  imagezero = ((imageint) IMGMAX << IMG2BITS) |\n             ((imageint) IMGMAX << IMGBITS) | IMGMAX;\n\n  // construct group bitmask for all new atoms\n  // aggregated over all group keywords\n\n  groupbitall = 1 | groupbit;\n  for (int igroup = 0; igroup < ngroups; igroup++) {\n    int jgroup = group->find(groupstrings[igroup]);\n    if (jgroup == -1)\n      error->all(FLERR,\"Could not find specified fix gcmc group ID\");\n    groupbitall |= group->bitmask[jgroup];\n  }\n\n  // construct group type bitmasks\n  // not aggregated over all group keywords\n\n  if (ngrouptypes > 0) {\n    memory->create(grouptypebits,ngrouptypes,\"fix_gcmc:grouptypebits\");\n    for (int igroup = 0; igroup < ngrouptypes; igroup++) {\n      int jgroup = group->find(grouptypestrings[igroup]);\n      if (jgroup == -1)\n        error->all(FLERR,\"Could not find specified fix gcmc group ID\");\n      grouptypebits[igroup] = group->bitmask[jgroup];\n    }\n  }\n\n}\n\n/* ----------------------------------------------------------------------\n   attempt Monte Carlo translations, rotations, insertions, and deletions\n   done before exchange, borders, reneighbor\n   so that ghost atoms and neighbor lists will be correct\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::pre_exchange()\n{\n  // just return if should not be called on this timestep\n\n  if (next_reneighbor != update->ntimestep) return;\n\n  xlo = domain->boxlo[0];\n  xhi = domain->boxhi[0];\n  ylo = domain->boxlo[1];\n  yhi = domain->boxhi[1];\n  zlo = domain->boxlo[2];\n  zhi = domain->boxhi[2];\n  if (triclinic) {\n    sublo = domain->sublo_lamda;\n    subhi = domain->subhi_lamda;\n  } else {\n    sublo = domain->sublo;\n    subhi = domain->subhi;\n  }\n\n  if (regionflag) volume = region_volume;\n  else volume = domain->xprd * domain->yprd * domain->zprd;\n\n  if (triclinic) domain->x2lamda(atom->nlocal);\n  domain->pbc();\n  comm->exchange();\n  atom->nghost = 0;\n  comm->borders();\n  if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n  update_gas_atoms_list();\n\n  if (full_flag) {\n    energy_stored = energy_full();\n    if (overlap_flag && energy_stored > MAXENERGYTEST)\n        error->warning(FLERR,\"Energy of old configuration in \"\n                       \"fix gcmc is > MAXENERGYTEST.\");\n\n    if (mode == MOLECULE) {\n      for (int i = 0; i < ncycles; i++) {\n        int random_int_fraction =\n          static_cast<int>(random_equal->uniform()*ncycles) + 1;\n        if (random_int_fraction <= nmcmoves) {\n          if (random_equal->uniform() < 0.5) attempt_molecule_translation_full();\n          else attempt_molecule_rotation_full();\n        } else {\n          if (random_equal->uniform() < 0.5) attempt_molecule_deletion_full();\n          else attempt_molecule_insertion_full();\n        }\n      }\n    } else {\n      for (int i = 0; i < ncycles; i++) {\n        int random_int_fraction =\n          static_cast<int>(random_equal->uniform()*ncycles) + 1;\n        if (random_int_fraction <= nmcmoves) {\n          attempt_atomic_translation_full();\n        } else {\n          if (random_equal->uniform() < 0.5) attempt_atomic_deletion_full();\n          else attempt_atomic_insertion_full();\n        }\n      }\n    }\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    comm->exchange();\n    atom->nghost = 0;\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n\n  } else {\n\n    if (mode == MOLECULE) {\n      for (int i = 0; i < ncycles; i++) {\n        int random_int_fraction =\n          static_cast<int>(random_equal->uniform()*ncycles) + 1;\n        if (random_int_fraction <= nmcmoves) {\n          if (random_equal->uniform() < 0.5) attempt_molecule_translation();\n          else attempt_molecule_rotation();\n        } else {\n          if (random_equal->uniform() < 0.5) attempt_molecule_deletion();\n          else attempt_molecule_insertion();\n        }\n      }\n    } else {\n      for (int i = 0; i < ncycles; i++) {\n        int random_int_fraction =\n          static_cast<int>(random_equal->uniform()*ncycles) + 1;\n        if (random_int_fraction <= nmcmoves) {\n          attempt_atomic_translation();\n        } else {\n          if (random_equal->uniform() < 0.5) attempt_atomic_deletion();\n          else attempt_atomic_insertion();\n        }\n      }\n    }\n  }\n  next_reneighbor = update->ntimestep + nevery;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_atomic_translation()\n{\n  ntranslation_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  int i = pick_random_gas_atom();\n\n  int success = 0;\n  if (i >= 0) {\n    double **x = atom->x;\n    double energy_before = energy(i,ngcmc_type,-1,x[i]);\n    if (overlap_flag && energy_before > MAXENERGYTEST)\n        error->warning(FLERR,\"Energy of old configuration in \"\n                       \"fix gcmc is > MAXENERGYTEST.\");\n    double rsq = 1.1;\n    double rx,ry,rz;\n    rx = ry = rz = 0.0;\n    double coord[3];\n    while (rsq > 1.0) {\n      rx = 2*random_unequal->uniform() - 1.0;\n      ry = 2*random_unequal->uniform() - 1.0;\n      rz = 2*random_unequal->uniform() - 1.0;\n      rsq = rx*rx + ry*ry + rz*rz;\n    }\n    coord[0] = x[i][0] + displace*rx;\n    coord[1] = x[i][1] + displace*ry;\n    coord[2] = x[i][2] + displace*rz;\n    if (regionflag) {\n      while (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) == 0) {\n        rsq = 1.1;\n        while (rsq > 1.0) {\n          rx = 2*random_unequal->uniform() - 1.0;\n          ry = 2*random_unequal->uniform() - 1.0;\n          rz = 2*random_unequal->uniform() - 1.0;\n          rsq = rx*rx + ry*ry + rz*rz;\n        }\n        coord[0] = x[i][0] + displace*rx;\n        coord[1] = x[i][1] + displace*ry;\n        coord[2] = x[i][2] + displace*rz;\n      }\n    }\n    if (!domain->inside_nonperiodic(coord))\n      error->one(FLERR,\"Fix gcmc put atom outside box\");\n\n    double energy_after = energy(i,ngcmc_type,-1,coord);\n\n    if (energy_after < MAXENERGYTEST &&\n        random_unequal->uniform() <\n        exp(beta*(energy_before - energy_after))) {\n      x[i][0] = coord[0];\n      x[i][1] = coord[1];\n      x[i][2] = coord[2];\n      success = 1;\n    }\n  }\n\n  int success_all = 0;\n  MPI_Allreduce(&success,&success_all,1,MPI_INT,MPI_MAX,world);\n\n  if (success_all) {\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    comm->exchange();\n    atom->nghost = 0;\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    ntranslation_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_atomic_deletion()\n{\n  ndeletion_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  int i = pick_random_gas_atom();\n\n  int success = 0;\n  if (i >= 0) {\n    double deletion_energy = energy(i,ngcmc_type,-1,atom->x[i]);\n    if (random_unequal->uniform() <\n        ngas*exp(beta*deletion_energy)/(zz*volume)) {\n      atom->avec->copy(atom->nlocal-1,i,1);\n      atom->nlocal--;\n      success = 1;\n    }\n  }\n\n  int success_all = 0;\n  MPI_Allreduce(&success,&success_all,1,MPI_INT,MPI_MAX,world);\n\n  if (success_all) {\n    atom->natoms--;\n    if (atom->tag_enable) {\n      if (atom->map_style) atom->map_init();\n    }\n    atom->nghost = 0;\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    ndeletion_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_atomic_insertion()\n{\n  double lamda[3];\n\n  ninsertion_attempts += 1.0;\n\n  // pick coordinates for insertion point\n\n  double coord[3];\n  if (regionflag) {\n    int region_attempt = 0;\n    coord[0] = region_xlo + random_equal->uniform() * (region_xhi-region_xlo);\n    coord[1] = region_ylo + random_equal->uniform() * (region_yhi-region_ylo);\n    coord[2] = region_zlo + random_equal->uniform() * (region_zhi-region_zlo);\n    while (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) == 0) {\n      coord[0] = region_xlo + random_equal->uniform() * (region_xhi-region_xlo);\n      coord[1] = region_ylo + random_equal->uniform() * (region_yhi-region_ylo);\n      coord[2] = region_zlo + random_equal->uniform() * (region_zhi-region_zlo);\n      region_attempt++;\n      if (region_attempt >= max_region_attempts) return;\n    }\n    if (triclinic) domain->x2lamda(coord,lamda);\n  } else {\n    if (triclinic == 0) {\n      coord[0] = xlo + random_equal->uniform() * (xhi-xlo);\n      coord[1] = ylo + random_equal->uniform() * (yhi-ylo);\n      coord[2] = zlo + random_equal->uniform() * (zhi-zlo);\n    } else {\n      lamda[0] = random_equal->uniform();\n      lamda[1] = random_equal->uniform();\n      lamda[2] = random_equal->uniform();\n\n      // wasteful, but necessary\n\n      if (lamda[0] == 1.0) lamda[0] = 0.0;\n      if (lamda[1] == 1.0) lamda[1] = 0.0;\n      if (lamda[2] == 1.0) lamda[2] = 0.0;\n\n      domain->lamda2x(lamda,coord);\n    }\n  }\n\n  int proc_flag = 0;\n  if (triclinic == 0) {\n    domain->remap(coord);\n    if (!domain->inside(coord))\n      error->one(FLERR,\"Fix gcmc put atom outside box\");\n    if (coord[0] >= sublo[0] && coord[0] < subhi[0] &&\n        coord[1] >= sublo[1] && coord[1] < subhi[1] &&\n        coord[2] >= sublo[2] && coord[2] < subhi[2]) proc_flag = 1;\n  } else {\n    if (lamda[0] >= sublo[0] && lamda[0] < subhi[0] &&\n        lamda[1] >= sublo[1] && lamda[1] < subhi[1] &&\n        lamda[2] >= sublo[2] && lamda[2] < subhi[2]) proc_flag = 1;\n  }\n\n  int success = 0;\n  if (proc_flag) {\n    int ii = -1;\n    if (charge_flag) {\n      ii = atom->nlocal + atom->nghost;\n      if (ii >= atom->nmax) atom->avec->grow(0);\n      atom->q[ii] = charge;\n    }\n    double insertion_energy = energy(ii,ngcmc_type,-1,coord);\n\n    if (insertion_energy < MAXENERGYTEST &&\n        random_unequal->uniform() <\n        zz*volume*exp(-beta*insertion_energy)/(ngas+1)) {\n      atom->avec->create_atom(ngcmc_type,coord);\n      int m = atom->nlocal - 1;\n\n      // add to groups\n      // optionally add to type-based groups\n\n      atom->mask[m] = groupbitall;\n      for (int igroup = 0; igroup < ngrouptypes; igroup++) {\n        if (ngcmc_type == grouptypes[igroup])\n          atom->mask[m] |= grouptypebits[igroup];\n      }\n\n      atom->v[m][0] = random_unequal->gaussian()*sigma;\n      atom->v[m][1] = random_unequal->gaussian()*sigma;\n      atom->v[m][2] = random_unequal->gaussian()*sigma;\n      modify->create_attribute(m);\n\n      success = 1;\n    }\n  }\n\n  int success_all = 0;\n  MPI_Allreduce(&success,&success_all,1,MPI_INT,MPI_MAX,world);\n\n  if (success_all) {\n    atom->natoms++;\n    if (atom->tag_enable) {\n      atom->tag_extend();\n      if (atom->map_style) atom->map_init();\n    }\n    atom->nghost = 0;\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    ninsertion_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_translation()\n{\n  ntranslation_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  tagint translation_molecule = pick_random_gas_molecule();\n  if (translation_molecule == -1) return;\n\n  double energy_before_sum = molecule_energy(translation_molecule);\n  if (overlap_flag && energy_before_sum > MAXENERGYTEST)\n    error->warning(FLERR,\"Energy of old configuration in \"\n                   \"fix gcmc is > MAXENERGYTEST.\");\n\n  double **x = atom->x;\n  double rx,ry,rz;\n  double com_displace[3],coord[3];\n  double rsq = 1.1;\n  while (rsq > 1.0) {\n    rx = 2*random_equal->uniform() - 1.0;\n    ry = 2*random_equal->uniform() - 1.0;\n    rz = 2*random_equal->uniform() - 1.0;\n    rsq = rx*rx + ry*ry + rz*rz;\n  }\n  com_displace[0] = displace*rx;\n  com_displace[1] = displace*ry;\n  com_displace[2] = displace*rz;\n\n  if (regionflag) {\n    int *mask = atom->mask;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (atom->molecule[i] == translation_molecule) {\n        mask[i] |= molecule_group_bit;\n      } else {\n        mask[i] &= molecule_group_inversebit;\n      }\n    }\n    double com[3];\n    com[0] = com[1] = com[2] = 0.0;\n    group->xcm(molecule_group,gas_mass,com);\n    coord[0] = com[0] + displace*rx;\n    coord[1] = com[1] + displace*ry;\n    coord[2] = com[2] + displace*rz;\n    while (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) == 0) {\n      rsq = 1.1;\n      while (rsq > 1.0) {\n        rx = 2*random_equal->uniform() - 1.0;\n        ry = 2*random_equal->uniform() - 1.0;\n        rz = 2*random_equal->uniform() - 1.0;\n        rsq = rx*rx + ry*ry + rz*rz;\n      }\n      coord[0] = com[0] + displace*rx;\n      coord[1] = com[1] + displace*ry;\n      coord[2] = com[2] + displace*rz;\n    }\n    com_displace[0] = displace*rx;\n    com_displace[1] = displace*ry;\n    com_displace[2] = displace*rz;\n  }\n\n  double energy_after = 0.0;\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (atom->molecule[i] == translation_molecule) {\n      coord[0] = x[i][0] + com_displace[0];\n      coord[1] = x[i][1] + com_displace[1];\n      coord[2] = x[i][2] + com_displace[2];\n      if (!domain->inside_nonperiodic(coord))\n        error->one(FLERR,\"Fix gcmc put atom outside box\");\n      energy_after += energy(i,atom->type[i],translation_molecule,coord);\n    }\n  }\n\n  double energy_after_sum = 0.0;\n  MPI_Allreduce(&energy_after,&energy_after_sum,1,MPI_DOUBLE,MPI_SUM,world);\n\n  if (energy_after_sum < MAXENERGYTEST &&\n      random_equal->uniform() <\n      exp(beta*(energy_before_sum - energy_after_sum))) {\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (atom->molecule[i] == translation_molecule) {\n        x[i][0] += com_displace[0];\n        x[i][1] += com_displace[1];\n        x[i][2] += com_displace[2];\n      }\n    }\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    comm->exchange();\n    atom->nghost = 0;\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    ntranslation_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_rotation()\n{\n  nrotation_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  tagint rotation_molecule = pick_random_gas_molecule();\n  if (rotation_molecule == -1) return;\n\n  double energy_before_sum = molecule_energy(rotation_molecule);\n  if (overlap_flag && energy_before_sum > MAXENERGYTEST)\n    error->warning(FLERR,\"Energy of old configuration in \"\n                   \"fix gcmc is > MAXENERGYTEST.\");\n\n  int *mask = atom->mask;\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (atom->molecule[i] == rotation_molecule) {\n      mask[i] |= molecule_group_bit;\n    } else {\n      mask[i] &= molecule_group_inversebit;\n    }\n  }\n\n  double com[3];\n  com[0] = com[1] = com[2] = 0.0;\n  group->xcm(molecule_group,gas_mass,com);\n\n  // generate point in unit cube\n  // then restrict to unit sphere\n\n  double r[3],rotmat[3][3],quat[4];\n  double rsq = 1.1;\n  while (rsq > 1.0) {\n    r[0] = 2.0*random_equal->uniform() - 1.0;\n    r[1] = 2.0*random_equal->uniform() - 1.0;\n    r[2] = 2.0*random_equal->uniform() - 1.0;\n    rsq = MathExtra::dot3(r, r);\n  }\n\n  double theta = random_equal->uniform() * max_rotation_angle;\n  MathExtra::norm3(r);\n  MathExtra::axisangle_to_quat(r,theta,quat);\n  MathExtra::quat_to_mat(quat,rotmat);\n\n  double **x = atom->x;\n  imageint *image = atom->image;\n  double energy_after = 0.0;\n  int n = 0;\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (mask[i] & molecule_group_bit) {\n      double xtmp[3];\n      domain->unmap(x[i],image[i],xtmp);\n      xtmp[0] -= com[0];\n      xtmp[1] -= com[1];\n      xtmp[2] -= com[2];\n      MathExtra::matvec(rotmat,xtmp,atom_coord[n]);\n      atom_coord[n][0] += com[0];\n      atom_coord[n][1] += com[1];\n      atom_coord[n][2] += com[2];\n      xtmp[0] = atom_coord[n][0];\n      xtmp[1] = atom_coord[n][1];\n      xtmp[2] = atom_coord[n][2];\n      domain->remap(xtmp);\n      if (!domain->inside(xtmp))\n        error->one(FLERR,\"Fix gcmc put atom outside box\");\n      energy_after += energy(i,atom->type[i],rotation_molecule,xtmp);\n      n++;\n    }\n  }\n\n  double energy_after_sum = 0.0;\n  MPI_Allreduce(&energy_after,&energy_after_sum,1,MPI_DOUBLE,MPI_SUM,world);\n\n  if (energy_after_sum < MAXENERGYTEST &&\n      random_equal->uniform() <\n      exp(beta*(energy_before_sum - energy_after_sum))) {\n    int n = 0;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (mask[i] & molecule_group_bit) {\n        image[i] = imagezero;\n        x[i][0] = atom_coord[n][0];\n        x[i][1] = atom_coord[n][1];\n        x[i][2] = atom_coord[n][2];\n        domain->remap(x[i],image[i]);\n        n++;\n      }\n    }\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    domain->pbc();\n    comm->exchange();\n    atom->nghost = 0;\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    nrotation_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_deletion()\n{\n  ndeletion_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  tagint deletion_molecule = pick_random_gas_molecule();\n  if (deletion_molecule == -1) return;\n\n  double deletion_energy_sum = molecule_energy(deletion_molecule);\n\n  if (random_equal->uniform() <\n      ngas*exp(beta*deletion_energy_sum)/(zz*volume*natoms_per_molecule)) {\n    int i = 0;\n    while (i < atom->nlocal) {\n      if (atom->molecule[i] == deletion_molecule) {\n        atom->avec->copy(atom->nlocal-1,i,1);\n        atom->nlocal--;\n      } else i++;\n    }\n    atom->natoms -= natoms_per_molecule;\n    if (atom->map_style) atom->map_init();\n    atom->nghost = 0;\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    ndeletion_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_insertion()\n{\n  double lamda[3];\n  ninsertion_attempts += 1.0;\n\n  double com_coord[3];\n  if (regionflag) {\n    int region_attempt = 0;\n    com_coord[0] = region_xlo + random_equal->uniform() *\n      (region_xhi-region_xlo);\n    com_coord[1] = region_ylo + random_equal->uniform() *\n      (region_yhi-region_ylo);\n    com_coord[2] = region_zlo + random_equal->uniform() *\n      (region_zhi-region_zlo);\n    while (domain->regions[iregion]->match(com_coord[0],com_coord[1],\n                                           com_coord[2]) == 0) {\n      com_coord[0] = region_xlo + random_equal->uniform() *\n        (region_xhi-region_xlo);\n      com_coord[1] = region_ylo + random_equal->uniform() *\n        (region_yhi-region_ylo);\n      com_coord[2] = region_zlo + random_equal->uniform() *\n        (region_zhi-region_zlo);\n      region_attempt++;\n      if (region_attempt >= max_region_attempts) return;\n    }\n    if (triclinic) domain->x2lamda(com_coord,lamda);\n  } else {\n    if (triclinic == 0) {\n      com_coord[0] = xlo + random_equal->uniform() * (xhi-xlo);\n      com_coord[1] = ylo + random_equal->uniform() * (yhi-ylo);\n      com_coord[2] = zlo + random_equal->uniform() * (zhi-zlo);\n    } else {\n      lamda[0] = random_equal->uniform();\n      lamda[1] = random_equal->uniform();\n      lamda[2] = random_equal->uniform();\n\n      // wasteful, but necessary\n\n      if (lamda[0] == 1.0) lamda[0] = 0.0;\n      if (lamda[1] == 1.0) lamda[1] = 0.0;\n      if (lamda[2] == 1.0) lamda[2] = 0.0;\n\n      domain->lamda2x(lamda,com_coord);\n    }\n  }\n\n  // generate point in unit cube\n  // then restrict to unit sphere\n\n  double r[3],rotmat[3][3],quat[4];\n  double rsq = 1.1;\n  while (rsq > 1.0) {\n    r[0] = 2.0*random_equal->uniform() - 1.0;\n    r[1] = 2.0*random_equal->uniform() - 1.0;\n    r[2] = 2.0*random_equal->uniform() - 1.0;\n    rsq = MathExtra::dot3(r, r);\n  }\n\n  double theta = random_equal->uniform() * MY_2PI;\n  MathExtra::norm3(r);\n  MathExtra::axisangle_to_quat(r,theta,quat);\n  MathExtra::quat_to_mat(quat,rotmat);\n\n  double insertion_energy = 0.0;\n  bool procflag[natoms_per_molecule];\n\n  for (int i = 0; i < natoms_per_molecule; i++) {\n    MathExtra::matvec(rotmat,onemols[imol]->x[i],atom_coord[i]);\n    atom_coord[i][0] += com_coord[0];\n    atom_coord[i][1] += com_coord[1];\n    atom_coord[i][2] += com_coord[2];\n\n    // use temporary variable for remapped position\n    // so unmapped position is preserved in atom_coord\n\n    double xtmp[3];\n    xtmp[0] = atom_coord[i][0];\n    xtmp[1] = atom_coord[i][1];\n    xtmp[2] = atom_coord[i][2];\n    domain->remap(xtmp);\n    if (!domain->inside(xtmp))\n      error->one(FLERR,\"Fix gcmc put atom outside box\");\n\n    procflag[i] = false;\n    if (triclinic == 0) {\n      if (xtmp[0] >= sublo[0] && xtmp[0] < subhi[0] &&\n          xtmp[1] >= sublo[1] && xtmp[1] < subhi[1] &&\n          xtmp[2] >= sublo[2] && xtmp[2] < subhi[2]) procflag[i] = true;\n    } else {\n      domain->x2lamda(xtmp,lamda);\n      if (lamda[0] >= sublo[0] && lamda[0] < subhi[0] &&\n          lamda[1] >= sublo[1] && lamda[1] < subhi[1] &&\n          lamda[2] >= sublo[2] && lamda[2] < subhi[2]) procflag[i] = true;\n    }\n\n    if (procflag[i]) {\n      int ii = -1;\n      if (onemols[imol]->qflag == 1) {\n        ii = atom->nlocal + atom->nghost;\n        if (ii >= atom->nmax) atom->avec->grow(0);\n        atom->q[ii] = onemols[imol]->q[i];\n      }\n      insertion_energy += energy(ii,onemols[imol]->type[i],-1,xtmp);\n    }\n  }\n\n  double insertion_energy_sum = 0.0;\n  MPI_Allreduce(&insertion_energy,&insertion_energy_sum,1,\n                MPI_DOUBLE,MPI_SUM,world);\n\n  if (insertion_energy_sum < MAXENERGYTEST &&\n      random_equal->uniform() < zz*volume*natoms_per_molecule*\n      exp(-beta*insertion_energy_sum)/(ngas + natoms_per_molecule)) {\n\n    tagint maxmol = 0;\n    for (int i = 0; i < atom->nlocal; i++) maxmol = MAX(maxmol,atom->molecule[i]);\n    tagint maxmol_all;\n    MPI_Allreduce(&maxmol,&maxmol_all,1,MPI_LMP_TAGINT,MPI_MAX,world);\n    maxmol_all++;\n    if (maxmol_all >= MAXTAGINT)\n      error->all(FLERR,\"Fix gcmc ran out of available molecule IDs\");\n\n    tagint maxtag = 0;\n    for (int i = 0; i < atom->nlocal; i++) maxtag = MAX(maxtag,atom->tag[i]);\n    tagint maxtag_all;\n    MPI_Allreduce(&maxtag,&maxtag_all,1,MPI_LMP_TAGINT,MPI_MAX,world);\n\n    int nlocalprev = atom->nlocal;\n\n    double vnew[3];\n    vnew[0] = random_equal->gaussian()*sigma;\n    vnew[1] = random_equal->gaussian()*sigma;\n    vnew[2] = random_equal->gaussian()*sigma;\n\n    for (int i = 0; i < natoms_per_molecule; i++) {\n      if (procflag[i]) {\n        atom->avec->create_atom(onemols[imol]->type[i],atom_coord[i]);\n        int m = atom->nlocal - 1;\n\n        // add to groups\n        // optionally add to type-based groups\n\n        atom->mask[m] = groupbitall;\n        for (int igroup = 0; igroup < ngrouptypes; igroup++) {\n          if (ngcmc_type == grouptypes[igroup])\n            atom->mask[m] |= grouptypebits[igroup];\n        }\n\n        atom->image[m] = imagezero;\n        domain->remap(atom->x[m],atom->image[m]);\n        atom->molecule[m] = maxmol_all;\n        if (maxtag_all+i+1 >= MAXTAGINT)\n          error->all(FLERR,\"Fix gcmc ran out of available atom IDs\");\n        atom->tag[m] = maxtag_all + i + 1;\n        atom->v[m][0] = vnew[0];\n        atom->v[m][1] = vnew[1];\n        atom->v[m][2] = vnew[2];\n\n        atom->add_molecule_atom(onemols[imol],i,m,maxtag_all);\n        modify->create_attribute(m);\n      }\n    }\n\n    // FixRigidSmall::set_molecule stores rigid body attributes\n    // FixShake::set_molecule stores shake info for molecule\n\n    for (int submol = 0; submol < nmol; ++submol) {\n      if (rigidflag)\n        fixrigid->set_molecule(nlocalprev,maxtag_all,submol,com_coord,vnew,quat);\n      else if (shakeflag)\n        fixshake->set_molecule(nlocalprev,maxtag_all,submol,com_coord,vnew,quat);\n    }\n    atom->natoms += natoms_per_molecule;\n    if (atom->natoms < 0)\n      error->all(FLERR,\"Too many total atoms\");\n    atom->nbonds += onemols[imol]->nbonds;\n    atom->nangles += onemols[imol]->nangles;\n    atom->ndihedrals += onemols[imol]->ndihedrals;\n    atom->nimpropers += onemols[imol]->nimpropers;\n    if (atom->map_style) atom->map_init();\n    atom->nghost = 0;\n    if (triclinic) domain->x2lamda(atom->nlocal);\n    comm->borders();\n    if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n    update_gas_atoms_list();\n    ninsertion_successes += 1.0;\n  }\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_atomic_translation_full()\n{\n  ntranslation_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  double energy_before = energy_stored;\n\n  int i = pick_random_gas_atom();\n\n  double **x = atom->x;\n  double xtmp[3];\n\n  xtmp[0] = xtmp[1] = xtmp[2] = 0.0;\n\n  tagint tmptag = -1;\n\n  if (i >= 0) {\n\n    double rsq = 1.1;\n    double rx,ry,rz;\n    rx = ry = rz = 0.0;\n    double coord[3];\n    while (rsq > 1.0) {\n      rx = 2*random_unequal->uniform() - 1.0;\n      ry = 2*random_unequal->uniform() - 1.0;\n      rz = 2*random_unequal->uniform() - 1.0;\n      rsq = rx*rx + ry*ry + rz*rz;\n    }\n    coord[0] = x[i][0] + displace*rx;\n    coord[1] = x[i][1] + displace*ry;\n    coord[2] = x[i][2] + displace*rz;\n    if (regionflag) {\n      while (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) == 0) {\n        rsq = 1.1;\n        while (rsq > 1.0) {\n          rx = 2*random_unequal->uniform() - 1.0;\n          ry = 2*random_unequal->uniform() - 1.0;\n          rz = 2*random_unequal->uniform() - 1.0;\n          rsq = rx*rx + ry*ry + rz*rz;\n        }\n        coord[0] = x[i][0] + displace*rx;\n        coord[1] = x[i][1] + displace*ry;\n        coord[2] = x[i][2] + displace*rz;\n      }\n    }\n    if (!domain->inside_nonperiodic(coord))\n      error->one(FLERR,\"Fix gcmc put atom outside box\");\n    xtmp[0] = x[i][0];\n    xtmp[1] = x[i][1];\n    xtmp[2] = x[i][2];\n    x[i][0] = coord[0];\n    x[i][1] = coord[1];\n    x[i][2] = coord[2];\n\n    tmptag = atom->tag[i];\n  }\n\n  double energy_after = energy_full();\n\n  if (energy_after < MAXENERGYTEST &&\n      random_equal->uniform() <\n      exp(beta*(energy_before - energy_after))) {\n    energy_stored = energy_after;\n    ntranslation_successes += 1.0;\n  } else {\n\n    tagint tmptag_all;\n    MPI_Allreduce(&tmptag,&tmptag_all,1,MPI_LMP_TAGINT,MPI_MAX,world);\n\n    double xtmp_all[3];\n    MPI_Allreduce(&xtmp,&xtmp_all,3,MPI_DOUBLE,MPI_SUM,world);\n\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (tmptag_all == atom->tag[i]) {\n        x[i][0] = xtmp_all[0];\n        x[i][1] = xtmp_all[1];\n        x[i][2] = xtmp_all[2];\n      }\n    }\n    energy_stored = energy_before;\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_atomic_deletion_full()\n{\n  double q_tmp;\n  const int q_flag = atom->q_flag;\n\n  ndeletion_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  double energy_before = energy_stored;\n\n  const int i = pick_random_gas_atom();\n\n  int tmpmask;\n  if (i >= 0) {\n    tmpmask = atom->mask[i];\n    atom->mask[i] = exclusion_group_bit;\n    if (q_flag) {\n      q_tmp = atom->q[i];\n      atom->q[i] = 0.0;\n    }\n  }\n  if (force->kspace) force->kspace->qsum_qsq();\n  double energy_after = energy_full();\n\n  if (random_equal->uniform() <\n      ngas*exp(beta*(energy_before - energy_after))/(zz*volume)) {\n    if (i >= 0) {\n      atom->avec->copy(atom->nlocal-1,i,1);\n      atom->nlocal--;\n    }\n    atom->natoms--;\n    if (atom->map_style) atom->map_init();\n    ndeletion_successes += 1.0;\n    energy_stored = energy_after;\n  } else {\n    if (i >= 0) {\n      atom->mask[i] = tmpmask;\n      if (q_flag) atom->q[i] = q_tmp;\n    }\n    if (force->kspace) force->kspace->qsum_qsq();\n    energy_stored = energy_before;\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_atomic_insertion_full()\n{\n  double lamda[3];\n  ninsertion_attempts += 1.0;\n\n  double energy_before = energy_stored;\n\n  double coord[3];\n  if (regionflag) {\n    int region_attempt = 0;\n    coord[0] = region_xlo + random_equal->uniform() * (region_xhi-region_xlo);\n    coord[1] = region_ylo + random_equal->uniform() * (region_yhi-region_ylo);\n    coord[2] = region_zlo + random_equal->uniform() * (region_zhi-region_zlo);\n    while (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) == 0) {\n      coord[0] = region_xlo + random_equal->uniform() * (region_xhi-region_xlo);\n      coord[1] = region_ylo + random_equal->uniform() * (region_yhi-region_ylo);\n      coord[2] = region_zlo + random_equal->uniform() * (region_zhi-region_zlo);\n      region_attempt++;\n      if (region_attempt >= max_region_attempts) return;\n    }\n    if (triclinic) domain->x2lamda(coord,lamda);\n  } else {\n    if (triclinic == 0) {\n      coord[0] = xlo + random_equal->uniform() * (xhi-xlo);\n      coord[1] = ylo + random_equal->uniform() * (yhi-ylo);\n      coord[2] = zlo + random_equal->uniform() * (zhi-zlo);\n    } else {\n      lamda[0] = random_equal->uniform();\n      lamda[1] = random_equal->uniform();\n      lamda[2] = random_equal->uniform();\n\n      // wasteful, but necessary\n\n      if (lamda[0] == 1.0) lamda[0] = 0.0;\n      if (lamda[1] == 1.0) lamda[1] = 0.0;\n      if (lamda[2] == 1.0) lamda[2] = 0.0;\n\n      domain->lamda2x(lamda,coord);\n    }\n  }\n\n  int proc_flag = 0;\n  if (triclinic == 0) {\n    domain->remap(coord);\n    if (!domain->inside(coord))\n      error->one(FLERR,\"Fix gcmc put atom outside box\");\n    if (coord[0] >= sublo[0] && coord[0] < subhi[0] &&\n        coord[1] >= sublo[1] && coord[1] < subhi[1] &&\n        coord[2] >= sublo[2] && coord[2] < subhi[2]) proc_flag = 1;\n  } else {\n    if (lamda[0] >= sublo[0] && lamda[0] < subhi[0] &&\n        lamda[1] >= sublo[1] && lamda[1] < subhi[1] &&\n        lamda[2] >= sublo[2] && lamda[2] < subhi[2]) proc_flag = 1;\n  }\n\n  if (proc_flag) {\n    atom->avec->create_atom(ngcmc_type,coord);\n    int m = atom->nlocal - 1;\n\n    // add to groups\n    // optionally add to type-based groups\n\n    atom->mask[m] = groupbitall;\n    for (int igroup = 0; igroup < ngrouptypes; igroup++) {\n      if (ngcmc_type == grouptypes[igroup])\n        atom->mask[m] |= grouptypebits[igroup];\n    }\n\n    atom->v[m][0] = random_unequal->gaussian()*sigma;\n    atom->v[m][1] = random_unequal->gaussian()*sigma;\n    atom->v[m][2] = random_unequal->gaussian()*sigma;\n    if (charge_flag) atom->q[m] = charge;\n    modify->create_attribute(m);\n  }\n\n  atom->natoms++;\n  if (atom->tag_enable) {\n    atom->tag_extend();\n    if (atom->map_style) atom->map_init();\n  }\n  atom->nghost = 0;\n  if (triclinic) domain->x2lamda(atom->nlocal);\n  comm->borders();\n  if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n  if (force->kspace) force->kspace->qsum_qsq();\n  double energy_after = energy_full();\n\n  if (energy_after < MAXENERGYTEST &&\n      random_equal->uniform() <\n      zz*volume*exp(beta*(energy_before - energy_after))/(ngas+1)) {\n\n    ninsertion_successes += 1.0;\n    energy_stored = energy_after;\n  } else {\n    atom->natoms--;\n    if (proc_flag) atom->nlocal--;\n    if (force->kspace) force->kspace->qsum_qsq();\n    energy_stored = energy_before;\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_translation_full()\n{\n  ntranslation_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  tagint translation_molecule = pick_random_gas_molecule();\n  if (translation_molecule == -1) return;\n\n  double energy_before = energy_stored;\n\n  double **x = atom->x;\n  double rx,ry,rz;\n  double com_displace[3],coord[3];\n  double rsq = 1.1;\n  while (rsq > 1.0) {\n    rx = 2*random_equal->uniform() - 1.0;\n    ry = 2*random_equal->uniform() - 1.0;\n    rz = 2*random_equal->uniform() - 1.0;\n    rsq = rx*rx + ry*ry + rz*rz;\n  }\n  com_displace[0] = displace*rx;\n  com_displace[1] = displace*ry;\n  com_displace[2] = displace*rz;\n\n  if (regionflag) {\n    int *mask = atom->mask;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (atom->molecule[i] == translation_molecule) {\n        mask[i] |= molecule_group_bit;\n      } else {\n        mask[i] &= molecule_group_inversebit;\n      }\n    }\n    double com[3];\n    com[0] = com[1] = com[2] = 0.0;\n    group->xcm(molecule_group,gas_mass,com);\n    coord[0] = com[0] + displace*rx;\n    coord[1] = com[1] + displace*ry;\n    coord[2] = com[2] + displace*rz;\n    while (domain->regions[iregion]->match(coord[0],coord[1],coord[2]) == 0) {\n      rsq = 1.1;\n      while (rsq > 1.0) {\n        rx = 2*random_equal->uniform() - 1.0;\n        ry = 2*random_equal->uniform() - 1.0;\n        rz = 2*random_equal->uniform() - 1.0;\n        rsq = rx*rx + ry*ry + rz*rz;\n      }\n      coord[0] = com[0] + displace*rx;\n      coord[1] = com[1] + displace*ry;\n      coord[2] = com[2] + displace*rz;\n    }\n    com_displace[0] = displace*rx;\n    com_displace[1] = displace*ry;\n    com_displace[2] = displace*rz;\n  }\n\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (atom->molecule[i] == translation_molecule) {\n      x[i][0] += com_displace[0];\n      x[i][1] += com_displace[1];\n      x[i][2] += com_displace[2];\n      if (!domain->inside_nonperiodic(x[i]))\n        error->one(FLERR,\"Fix gcmc put atom outside box\");\n    }\n  }\n\n  double energy_after = energy_full();\n\n  if (energy_after < MAXENERGYTEST &&\n      random_equal->uniform() <\n      exp(beta*(energy_before - energy_after))) {\n    ntranslation_successes += 1.0;\n    energy_stored = energy_after;\n  } else {\n    energy_stored = energy_before;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (atom->molecule[i] == translation_molecule) {\n        x[i][0] -= com_displace[0];\n        x[i][1] -= com_displace[1];\n        x[i][2] -= com_displace[2];\n      }\n    }\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_rotation_full()\n{\n  nrotation_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  tagint rotation_molecule = pick_random_gas_molecule();\n  if (rotation_molecule == -1) return;\n\n  double energy_before = energy_stored;\n\n  int *mask = atom->mask;\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (atom->molecule[i] == rotation_molecule) {\n      mask[i] |= molecule_group_bit;\n    } else {\n      mask[i] &= molecule_group_inversebit;\n    }\n  }\n\n  double com[3];\n  com[0] = com[1] = com[2] = 0.0;\n  group->xcm(molecule_group,gas_mass,com);\n\n  // generate point in unit cube\n  // then restrict to unit sphere\n\n  double r[3],rotmat[3][3],quat[4];\n  double rsq = 1.1;\n  while (rsq > 1.0) {\n    r[0] = 2.0*random_equal->uniform() - 1.0;\n    r[1] = 2.0*random_equal->uniform() - 1.0;\n    r[2] = 2.0*random_equal->uniform() - 1.0;\n    rsq = MathExtra::dot3(r, r);\n  }\n\n  double theta = random_equal->uniform() * max_rotation_angle;\n  MathExtra::norm3(r);\n  MathExtra::axisangle_to_quat(r,theta,quat);\n  MathExtra::quat_to_mat(quat,rotmat);\n\n  double **x = atom->x;\n  imageint *image = atom->image;\n  imageint image_orig[natoms_per_molecule];\n  int n = 0;\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (mask[i] & molecule_group_bit) {\n      atom_coord[n][0] = x[i][0];\n      atom_coord[n][1] = x[i][1];\n      atom_coord[n][2] = x[i][2];\n      image_orig[n] = image[i];\n      double xtmp[3];\n      domain->unmap(x[i],image[i],xtmp);\n      xtmp[0] -= com[0];\n      xtmp[1] -= com[1];\n      xtmp[2] -= com[2];\n      MathExtra::matvec(rotmat,xtmp,x[i]);\n      x[i][0] += com[0];\n      x[i][1] += com[1];\n      x[i][2] += com[2];\n      image[i] = imagezero;\n      domain->remap(x[i],image[i]);\n      if (!domain->inside(x[i]))\n        error->one(FLERR,\"Fix gcmc put atom outside box\");\n      n++;\n    }\n  }\n\n  double energy_after = energy_full();\n\n  if (energy_after < MAXENERGYTEST &&\n      random_equal->uniform() <\n      exp(beta*(energy_before - energy_after))) {\n    nrotation_successes += 1.0;\n    energy_stored = energy_after;\n  } else {\n    energy_stored = energy_before;\n    int n = 0;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (mask[i] & molecule_group_bit) {\n        x[i][0] = atom_coord[n][0];\n        x[i][1] = atom_coord[n][1];\n        x[i][2] = atom_coord[n][2];\n        image[i] = image_orig[n];\n        n++;\n      }\n    }\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_deletion_full()\n{\n  ndeletion_attempts += 1.0;\n\n  if (ngas == 0) return;\n\n  tagint deletion_molecule = pick_random_gas_molecule();\n  if (deletion_molecule == -1) return;\n\n  double energy_before = energy_stored;\n\n  int m = 0;\n  double q_tmp[natoms_per_molecule];\n  int tmpmask[atom->nlocal];\n  for (int i = 0; i < atom->nlocal; i++) {\n    if (atom->molecule[i] == deletion_molecule) {\n      tmpmask[i] = atom->mask[i];\n      atom->mask[i] = exclusion_group_bit;\n      toggle_intramolecular(i);\n      if (atom->q_flag) {\n        q_tmp[m] = atom->q[i];\n        m++;\n        atom->q[i] = 0.0;\n      }\n    }\n  }\n  if (force->kspace) force->kspace->qsum_qsq();\n  double energy_after = energy_full();\n\n  // energy_before corrected by energy_intra\n\n  double deltaphi = ngas*exp(beta*((energy_before - energy_intra) - energy_after))/(zz*volume*natoms_per_molecule);\n\n  if (random_equal->uniform() < deltaphi) {\n    int i = 0;\n    while (i < atom->nlocal) {\n      if (atom->molecule[i] == deletion_molecule) {\n        atom->avec->copy(atom->nlocal-1,i,1);\n        atom->nlocal--;\n      } else i++;\n    }\n    atom->natoms -= natoms_per_molecule;\n    if (atom->map_style) atom->map_init();\n    ndeletion_successes += 1.0;\n    energy_stored = energy_after;\n  } else {\n    energy_stored = energy_before;\n    int m = 0;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (atom->molecule[i] == deletion_molecule) {\n        atom->mask[i] = tmpmask[i];\n        toggle_intramolecular(i);\n        if (atom->q_flag) {\n          atom->q[i] = q_tmp[m];\n          m++;\n        }\n      }\n    }\n    if (force->kspace) force->kspace->qsum_qsq();\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::attempt_molecule_insertion_full()\n{\n  double lamda[3];\n  ninsertion_attempts += 1.0;\n\n  double energy_before = energy_stored;\n\n  tagint maxmol = 0;\n  for (int i = 0; i < atom->nlocal; i++) maxmol = MAX(maxmol,atom->molecule[i]);\n  tagint maxmol_all;\n  MPI_Allreduce(&maxmol,&maxmol_all,1,MPI_LMP_TAGINT,MPI_MAX,world);\n  maxmol_all++;\n  if (maxmol_all >= MAXTAGINT)\n    error->all(FLERR,\"Fix gcmc ran out of available molecule IDs\");\n  int insertion_molecule = maxmol_all;\n\n  tagint maxtag = 0;\n  for (int i = 0; i < atom->nlocal; i++) maxtag = MAX(maxtag,atom->tag[i]);\n  tagint maxtag_all;\n  MPI_Allreduce(&maxtag,&maxtag_all,1,MPI_LMP_TAGINT,MPI_MAX,world);\n\n  int nlocalprev = atom->nlocal;\n\n  double com_coord[3];\n  if (regionflag) {\n    int region_attempt = 0;\n    com_coord[0] = region_xlo + random_equal->uniform() *\n      (region_xhi-region_xlo);\n    com_coord[1] = region_ylo + random_equal->uniform() *\n      (region_yhi-region_ylo);\n    com_coord[2] = region_zlo + random_equal->uniform() *\n      (region_zhi-region_zlo);\n    while (domain->regions[iregion]->match(com_coord[0],com_coord[1],\n                                           com_coord[2]) == 0) {\n      com_coord[0] = region_xlo + random_equal->uniform() *\n        (region_xhi-region_xlo);\n      com_coord[1] = region_ylo + random_equal->uniform() *\n        (region_yhi-region_ylo);\n      com_coord[2] = region_zlo + random_equal->uniform() *\n        (region_zhi-region_zlo);\n      region_attempt++;\n      if (region_attempt >= max_region_attempts) return;\n    }\n    if (triclinic) domain->x2lamda(com_coord,lamda);\n  } else {\n    if (triclinic == 0) {\n      com_coord[0] = xlo + random_equal->uniform() * (xhi-xlo);\n      com_coord[1] = ylo + random_equal->uniform() * (yhi-ylo);\n      com_coord[2] = zlo + random_equal->uniform() * (zhi-zlo);\n    } else {\n      lamda[0] = random_equal->uniform();\n      lamda[1] = random_equal->uniform();\n      lamda[2] = random_equal->uniform();\n\n      // wasteful, but necessary\n\n      if (lamda[0] == 1.0) lamda[0] = 0.0;\n      if (lamda[1] == 1.0) lamda[1] = 0.0;\n      if (lamda[2] == 1.0) lamda[2] = 0.0;\n\n      domain->lamda2x(lamda,com_coord);\n    }\n\n  }\n\n  // generate point in unit cube\n  // then restrict to unit sphere\n\n  double r[3],rotmat[3][3],quat[4];\n  double rsq = 1.1;\n  while (rsq > 1.0) {\n    r[0] = 2.0*random_equal->uniform() - 1.0;\n    r[1] = 2.0*random_equal->uniform() - 1.0;\n    r[2] = 2.0*random_equal->uniform() - 1.0;\n    rsq = MathExtra::dot3(r, r);\n  }\n\n  double theta = random_equal->uniform() * MY_2PI;\n  MathExtra::norm3(r);\n  MathExtra::axisangle_to_quat(r,theta,quat);\n  MathExtra::quat_to_mat(quat,rotmat);\n\n  double vnew[3];\n  vnew[0] = random_equal->gaussian()*sigma;\n  vnew[1] = random_equal->gaussian()*sigma;\n  vnew[2] = random_equal->gaussian()*sigma;\n\n  for (int i = 0; i < natoms_per_molecule; i++) {\n    double xtmp[3];\n    MathExtra::matvec(rotmat,onemols[imol]->x[i],xtmp);\n    xtmp[0] += com_coord[0];\n    xtmp[1] += com_coord[1];\n    xtmp[2] += com_coord[2];\n\n    // need to adjust image flags in remap()\n\n    imageint imagetmp = imagezero;\n    domain->remap(xtmp,imagetmp);\n    if (!domain->inside(xtmp))\n      error->one(FLERR,\"Fix gcmc put atom outside box\");\n\n    int proc_flag = 0;\n    if (triclinic == 0) {\n      if (xtmp[0] >= sublo[0] && xtmp[0] < subhi[0] &&\n          xtmp[1] >= sublo[1] && xtmp[1] < subhi[1] &&\n          xtmp[2] >= sublo[2] && xtmp[2] < subhi[2]) proc_flag = 1;\n    } else {\n      domain->x2lamda(xtmp,lamda);\n      if (lamda[0] >= sublo[0] && lamda[0] < subhi[0] &&\n          lamda[1] >= sublo[1] && lamda[1] < subhi[1] &&\n          lamda[2] >= sublo[2] && lamda[2] < subhi[2]) proc_flag = 1;\n    }\n\n    if (proc_flag) {\n      atom->avec->create_atom(onemols[imol]->type[i],xtmp);\n      int m = atom->nlocal - 1;\n\n      // add to groups\n      // optionally add to type-based groups\n\n      atom->mask[m] = groupbitall;\n      for (int igroup = 0; igroup < ngrouptypes; igroup++) {\n        if (ngcmc_type == grouptypes[igroup])\n          atom->mask[m] |= grouptypebits[igroup];\n      }\n\n      atom->image[m] = imagetmp;\n      atom->molecule[m] = insertion_molecule;\n      if (maxtag_all+i+1 >= MAXTAGINT)\n        error->all(FLERR,\"Fix gcmc ran out of available atom IDs\");\n      atom->tag[m] = maxtag_all + i + 1;\n      atom->v[m][0] = vnew[0];\n      atom->v[m][1] = vnew[1];\n      atom->v[m][2] = vnew[2];\n\n      atom->add_molecule_atom(onemols[imol],i,m,maxtag_all);\n      modify->create_attribute(m);\n    }\n  }\n\n  // FixRigidSmall::set_molecule stores rigid body attributes\n  // FixShake::set_molecule stores shake info for molecule\n\n  for (int submol = 0; submol < nmol; ++submol) {\n    if (rigidflag)\n      fixrigid->set_molecule(nlocalprev,maxtag_all,submol,com_coord,vnew,quat);\n    else if (shakeflag)\n      fixshake->set_molecule(nlocalprev,maxtag_all,submol,com_coord,vnew,quat);\n  }\n  atom->natoms += natoms_per_molecule;\n  if (atom->natoms < 0)\n    error->all(FLERR,\"Too many total atoms\");\n  atom->nbonds += onemols[imol]->nbonds;\n  atom->nangles += onemols[imol]->nangles;\n  atom->ndihedrals += onemols[imol]->ndihedrals;\n  atom->nimpropers += onemols[imol]->nimpropers;\n  if (atom->map_style) atom->map_init();\n  atom->nghost = 0;\n  if (triclinic) domain->x2lamda(atom->nlocal);\n  comm->borders();\n  if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n  if (force->kspace) force->kspace->qsum_qsq();\n  double energy_after = energy_full();\n\n  // energy_after corrected by energy_intra\n\n  double deltaphi = zz*volume*natoms_per_molecule*\n    exp(beta*(energy_before - (energy_after - energy_intra)))/(ngas + natoms_per_molecule);\n\n  if (energy_after < MAXENERGYTEST &&\n      random_equal->uniform() < deltaphi) {\n\n    ninsertion_successes += 1.0;\n    energy_stored = energy_after;\n\n  } else {\n\n    atom->nbonds -= onemols[imol]->nbonds;\n    atom->nangles -= onemols[imol]->nangles;\n    atom->ndihedrals -= onemols[imol]->ndihedrals;\n    atom->nimpropers -= onemols[imol]->nimpropers;\n    atom->natoms -= natoms_per_molecule;\n\n    energy_stored = energy_before;\n    int i = 0;\n    while (i < atom->nlocal) {\n      if (atom->molecule[i] == insertion_molecule) {\n        atom->avec->copy(atom->nlocal-1,i,1);\n        atom->nlocal--;\n      } else i++;\n    }\n    if (force->kspace) force->kspace->qsum_qsq();\n  }\n  update_gas_atoms_list();\n}\n\n/* ----------------------------------------------------------------------\n   compute particle's interaction energy with the rest of the system\n------------------------------------------------------------------------- */\n\ndouble FixGCMC::energy(int i, int itype, tagint imolecule, double *coord)\n{\n  double delx,dely,delz,rsq;\n\n  double **x = atom->x;\n  int *type = atom->type;\n  tagint *molecule = atom->molecule;\n  int nall = atom->nlocal + atom->nghost;\n  pair = force->pair;\n  cutsq = force->pair->cutsq;\n\n  double fpair = 0.0;\n  double factor_coul = 1.0;\n  double factor_lj = 1.0;\n\n  double total_energy = 0.0;\n\n  for (int j = 0; j < nall; j++) {\n\n    if (i == j) continue;\n    if (mode == MOLECULE)\n      if (imolecule == molecule[j]) continue;\n\n    delx = coord[0] - x[j][0];\n    dely = coord[1] - x[j][1];\n    delz = coord[2] - x[j][2];\n    rsq = delx*delx + dely*dely + delz*delz;\n    int jtype = type[j];\n\n    // if overlap check requested, if overlap,\n    // return signal value for energy\n\n    if (overlap_flag && rsq < overlap_cutoffsq)\n      return MAXENERGYSIGNAL;\n\n    if (rsq < cutsq[itype][jtype])\n      total_energy +=\n        pair->single(i,j,itype,jtype,rsq,factor_coul,factor_lj,fpair);\n  }\n\n  return total_energy;\n}\n\n/* ----------------------------------------------------------------------\n   compute the energy of the given gas molecule in its current position\n   sum across all procs that own atoms of the given molecule\n------------------------------------------------------------------------- */\n\ndouble FixGCMC::molecule_energy(tagint gas_molecule_id)\n{\n  double mol_energy = 0.0;\n  for (int i = 0; i < atom->nlocal; i++)\n    if (atom->molecule[i] == gas_molecule_id) {\n      mol_energy += energy(i,atom->type[i],gas_molecule_id,atom->x[i]);\n    }\n\n  double mol_energy_sum = 0.0;\n  MPI_Allreduce(&mol_energy,&mol_energy_sum,1,MPI_DOUBLE,MPI_SUM,world);\n\n  return mol_energy_sum;\n}\n\n/* ----------------------------------------------------------------------\n   compute system potential energy\n------------------------------------------------------------------------- */\n\ndouble FixGCMC::energy_full()\n{\n  int imolecule;\n\n  if (triclinic) domain->x2lamda(atom->nlocal);\n  domain->pbc();\n  comm->exchange();\n  atom->nghost = 0;\n  comm->borders();\n  if (triclinic) domain->lamda2x(atom->nlocal+atom->nghost);\n  if (modify->n_pre_neighbor) modify->pre_neighbor();\n  neighbor->build();\n  int eflag = 1;\n  int vflag = 0;\n\n  // if overlap check requested, if overlap,\n  // return signal value for energy\n\n  if (overlap_flag) {\n    int overlaptestall;\n    int overlaptest = 0;\n    double delx,dely,delz,rsq;\n    double **x = atom->x;\n    tagint *molecule = atom->molecule;\n    int nall = atom->nlocal + atom->nghost;\n    for (int i = 0; i < atom->nlocal; i++) {\n      if (mode == MOLECULE) imolecule = molecule[i];\n      for (int j = i+1; j < nall; j++) {\n        if (mode == MOLECULE)\n          if (imolecule == molecule[j]) continue;\n\n        delx = x[i][0] - x[j][0];\n        dely = x[i][1] - x[j][1];\n        delz = x[i][2] - x[j][2];\n        rsq = delx*delx + dely*dely + delz*delz;\n\n        if (rsq < overlap_cutoffsq) {\n          overlaptest = 1;\n          break;\n        }\n      }\n      if (overlaptest) break;\n    }\n    MPI_Allreduce(&overlaptest, &overlaptestall, 1,\n                  MPI_INT, MPI_MAX, world);\n    if (overlaptestall) return MAXENERGYSIGNAL;\n  }\n\n  // clear forces so they don't accumulate over multiple\n  // calls within fix gcmc timestep, e.g. for fix shake\n\n  size_t nbytes = sizeof(double) * (atom->nlocal + atom->nghost);\n  if (nbytes) memset(&atom->f[0][0],0,3*nbytes);\n\n  if (modify->n_pre_force) modify->pre_force(vflag);\n\n  if (force->pair) force->pair->compute(eflag,vflag);\n\n  if (atom->molecular) {\n    if (force->bond) force->bond->compute(eflag,vflag);\n    if (force->angle) force->angle->compute(eflag,vflag);\n    if (force->dihedral) force->dihedral->compute(eflag,vflag);\n    if (force->improper) force->improper->compute(eflag,vflag);\n  }\n\n  if (force->kspace) force->kspace->compute(eflag,vflag);\n\n  // unlike Verlet, not performing a reverse_comm() or forces here\n  // b/c GCMC does not care about forces\n  // don't think it will mess up energy due to any post_force() fixes\n\n  if (modify->n_post_force) modify->post_force(vflag);\n  if (modify->n_end_of_step) modify->end_of_step();\n\n  // NOTE: all fixes with THERMO_ENERGY mask set and which\n  //   operate at pre_force() or post_force() or end_of_step()\n  //   and which user has enable via fix_modify thermo yes,\n  //   will contribute to total MC energy via pe->compute_scalar()\n\n  update->eflag_global = update->ntimestep;\n  double total_energy = c_pe->compute_scalar();\n\n  return total_energy;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nint FixGCMC::pick_random_gas_atom()\n{\n  int i = -1;\n  int iwhichglobal = static_cast<int> (ngas*random_equal->uniform());\n  if ((iwhichglobal >= ngas_before) &&\n      (iwhichglobal < ngas_before + ngas_local)) {\n    int iwhichlocal = iwhichglobal - ngas_before;\n    i = local_gas_list[iwhichlocal];\n  }\n\n  return i;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\ntagint FixGCMC::pick_random_gas_molecule()\n{\n  int iwhichglobal = static_cast<int> (ngas*random_equal->uniform());\n  tagint gas_molecule_id = 0;\n  if ((iwhichglobal >= ngas_before) &&\n      (iwhichglobal < ngas_before + ngas_local)) {\n    int iwhichlocal = iwhichglobal - ngas_before;\n    int i = local_gas_list[iwhichlocal];\n    gas_molecule_id = atom->molecule[i];\n  }\n\n  tagint gas_molecule_id_all = 0;\n  MPI_Allreduce(&gas_molecule_id,&gas_molecule_id_all,1,\n                MPI_LMP_TAGINT,MPI_MAX,world);\n\n  return gas_molecule_id_all;\n}\n\n/* ----------------------------------------------------------------------\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::toggle_intramolecular(int i)\n{\n  if (atom->avec->bonds_allow)\n    for (int m = 0; m < atom->num_bond[i]; m++)\n      atom->bond_type[i][m] = -atom->bond_type[i][m];\n\n  if (atom->avec->angles_allow)\n    for (int m = 0; m < atom->num_angle[i]; m++)\n      atom->angle_type[i][m] = -atom->angle_type[i][m];\n\n  if (atom->avec->dihedrals_allow)\n    for (int m = 0; m < atom->num_dihedral[i]; m++)\n      atom->dihedral_type[i][m] = -atom->dihedral_type[i][m];\n\n  if (atom->avec->impropers_allow)\n    for (int m = 0; m < atom->num_improper[i]; m++)\n      atom->improper_type[i][m] = -atom->improper_type[i][m];\n}\n\n/* ----------------------------------------------------------------------\n   update the list of gas atoms\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::update_gas_atoms_list()\n{\n  int nlocal = atom->nlocal;\n  int *mask = atom->mask;\n  tagint *molecule = atom->molecule;\n  double **x = atom->x;\n\n  if (atom->nmax > gcmc_nmax) {\n    memory->sfree(local_gas_list);\n    gcmc_nmax = atom->nmax;\n    local_gas_list = (int *) memory->smalloc(gcmc_nmax*sizeof(int),\n     \"GCMC:local_gas_list\");\n  }\n\n  ngas_local = 0;\n\n  if (regionflag) {\n\n    if (mode == MOLECULE) {\n\n      tagint maxmol = 0;\n      for (int i = 0; i < nlocal; i++) maxmol = MAX(maxmol,molecule[i]);\n      tagint maxmol_all;\n      MPI_Allreduce(&maxmol,&maxmol_all,1,MPI_LMP_TAGINT,MPI_MAX,world);\n      double comx[maxmol_all];\n      double comy[maxmol_all];\n      double comz[maxmol_all];\n      for (int imolecule = 0; imolecule < maxmol_all; imolecule++) {\n        for (int i = 0; i < nlocal; i++) {\n          if (molecule[i] == imolecule) {\n            mask[i] |= molecule_group_bit;\n          } else {\n            mask[i] &= molecule_group_inversebit;\n          }\n        }\n        double com[3];\n        com[0] = com[1] = com[2] = 0.0;\n        group->xcm(molecule_group,gas_mass,com);\n\n        // remap unwrapped com into periodic box\n\n        domain->remap(com);\n        comx[imolecule] = com[0];\n        comy[imolecule] = com[1];\n        comz[imolecule] = com[2];\n      }\n\n      for (int i = 0; i < nlocal; i++) {\n        if (mask[i] & groupbit) {\n          if (domain->regions[iregion]->match(comx[molecule[i]],\n             comy[molecule[i]],comz[molecule[i]]) == 1) {\n            local_gas_list[ngas_local] = i;\n            ngas_local++;\n          }\n        }\n      }\n\n    } else {\n      for (int i = 0; i < nlocal; i++) {\n        if (mask[i] & groupbit) {\n          if (domain->regions[iregion]->match(x[i][0],x[i][1],x[i][2]) == 1) {\n            local_gas_list[ngas_local] = i;\n            ngas_local++;\n          }\n        }\n      }\n    }\n\n  } else {\n    for (int i = 0; i < nlocal; i++) {\n      if (mask[i] & groupbit) {\n        local_gas_list[ngas_local] = i;\n        ngas_local++;\n      }\n    }\n  }\n\n  MPI_Allreduce(&ngas_local,&ngas,1,MPI_INT,MPI_SUM,world);\n  MPI_Scan(&ngas_local,&ngas_before,1,MPI_INT,MPI_SUM,world);\n  ngas_before -= ngas_local;\n}\n\n/* ----------------------------------------------------------------------\n  return acceptance ratios\n------------------------------------------------------------------------- */\n\ndouble FixGCMC::compute_vector(int n)\n{\n  if (n == 0) return ntranslation_attempts;\n  if (n == 1) return ntranslation_successes;\n  if (n == 2) return ninsertion_attempts;\n  if (n == 3) return ninsertion_successes;\n  if (n == 4) return ndeletion_attempts;\n  if (n == 5) return ndeletion_successes;\n  if (n == 6) return nrotation_attempts;\n  if (n == 7) return nrotation_successes;\n  return 0.0;\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble FixGCMC::memory_usage()\n{\n  double bytes = gcmc_nmax * sizeof(int);\n  return bytes;\n}\n\n/* ----------------------------------------------------------------------\n   pack entire state of Fix into one write\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::write_restart(FILE *fp)\n{\n  int n = 0;\n  double list[4];\n  list[n++] = random_equal->state();\n  list[n++] = random_unequal->state();\n  list[n++] = next_reneighbor;\n\n  if (comm->me == 0) {\n    int size = n * sizeof(double);\n    fwrite(&size,sizeof(int),1,fp);\n    fwrite(list,sizeof(double),n,fp);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   use state info from restart file to restart the Fix\n------------------------------------------------------------------------- */\n\nvoid FixGCMC::restart(char *buf)\n{\n  int n = 0;\n  double *list = (double *) buf;\n\n  seed = static_cast<int> (list[n++]);\n  random_equal->reset(seed);\n\n  seed = static_cast<int> (list[n++]);\n  random_unequal->reset(seed);\n\n  next_reneighbor = static_cast<int> (list[n++]);\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Mike Brown (SNL)\n------------------------------------------------------------------------- */\n\n#ifndef LMP_MATH_EXTRA_H\n#define LMP_MATH_EXTRA_H\n\n#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include \"error.h\"\n\nnamespace MathExtra {\n\n  // 3 vector operations\n\n  inline void copy3(const double *v, double *ans);\n  inline void zero3(double *v);\n  inline void norm3(double *v);\n  inline void normalize3(const double *v, double *ans);\n  inline void snormalize3(const double, const double *v, double *ans);\n  inline void negate3(double *v);\n  inline void scale3(double s, double *v);\n  inline void add3(const double *v1, const double *v2, double *ans);\n  inline void scaleadd3(double s, const double *v1, const double *v2, \n                        double *ans);\n  inline void sub3(const double *v1, const double *v2, double *ans);\n  inline double len3(const double *v);\n  inline double lensq3(const double *v);\n  inline double distsq3(const double *v1, const double *v2);\n  inline double dot3(const double *v1, const double *v2);\n  inline void cross3(const double *v1, const double *v2, double *ans);\n\n  // 3x3 matrix operations\n\n  inline void col2mat(const double *ex, const double *ey, const double *ez,\n                      double m[3][3]);\n  inline double det3(const double mat[3][3]);\n  inline void diag_times3(const double *d, const double m[3][3],\n                          double ans[3][3]);\n  inline void times3_diag(const double m[3][3], const double *d,\n                          double ans[3][3]);\n  inline void plus3(const double m[3][3], const double m2[3][3],\n                    double ans[3][3]);\n  inline void times3(const double m[3][3], const double m2[3][3],\n                     double ans[3][3]);\n  inline void transpose_times3(const double m[3][3], const double m2[3][3],\n                               double ans[3][3]);\n  inline void times3_transpose(const double m[3][3], const double m2[3][3],\n                               double ans[3][3]);\n  inline void invert3(const double mat[3][3], double ans[3][3]);\n  inline void matvec(const double mat[3][3], const double *vec, double *ans);\n  inline void matvec(const double *ex, const double *ey, const double *ez,\n                     const double *vec, double *ans);\n  inline void transpose_matvec(const double mat[3][3], const double *vec,\n                               double *ans);\n  inline void transpose_matvec(const double *ex, const double *ey,\n                               const double *ez, const double *v,\n                               double *ans);\n  inline void transpose_diag3(const double m[3][3], const double *d,\n                              double ans[3][3]);\n  inline void vecmat(const double *v, const double m[3][3], double *ans);\n  inline void scalar_times3(const double f, double m[3][3]);\n\n  void write3(const double mat[3][3]);\n  int mldivide3(const double mat[3][3], const double *vec, double *ans);\n  int jacobi(double matrix[3][3], double *evalues, double evectors[3][3]);\n  void rotate(double matrix[3][3], int i, int j, int k, int l,\n              double s, double tau);\n  void richardson(double *q, double *m, double *w, double *moments, double dtq);\n  void no_squish_rotate(int k, double *p, double *q, double *inertia, \n                        double dt);\n\n  // shape matrix operations\n  // upper-triangular 3x3 matrix stored in Voigt notation as 6-vector\n\n  inline void multiply_shape_shape(const double *one, const double *two,\n                                   double *ans);\n\n  // quaternion operations\n\n  inline void qnormalize(double *q);\n  inline void qconjugate(double *q, double *qc);\n  inline void vecquat(double *a, double *b, double *c);\n  inline void quatvec(double *a, double *b, double *c);\n  inline void quatquat(double *a, double *b, double *c);\n  inline void invquatvec(double *a, double *b, double *c);\n  inline void axisangle_to_quat(const double *v, const double angle,\n                                double *quat);\n\n  void angmom_to_omega(double *m, double *ex, double *ey, double *ez,\n                       double *idiag, double *w);\n  void omega_to_angmom(double *w, double *ex, double *ey, double *ez,\n                       double *idiag, double *m);\n  void mq_to_omega(double *m, double *q, double *moments, double *w);\n  void exyz_to_q(double *ex, double *ey, double *ez, double *q);\n  void q_to_exyz(double *q, double *ex, double *ey, double *ez);\n  void quat_to_mat(const double *quat, double mat[3][3]);\n  void quat_to_mat_trans(const double *quat, double mat[3][3]);\n\n  // rotation operations\n\n  inline void rotation_generator_x(const double m[3][3], double ans[3][3]);\n  inline void rotation_generator_y(const double m[3][3], double ans[3][3]);\n  inline void rotation_generator_z(const double m[3][3], double ans[3][3]);\n  \n  void BuildRxMatrix(double R[3][3], const double angle);\n  void BuildRyMatrix(double R[3][3], const double angle);\n  void BuildRzMatrix(double R[3][3], const double angle);\n\n  // moment of inertia operations\n\n  void inertia_ellipsoid(double *shape, double *quat, double mass,\n                         double *inertia);\n  void inertia_line(double length, double theta, double mass,\n                    double *inertia);\n  void inertia_triangle(double *v0, double *v1, double *v2,\n                        double mass, double *inertia);\n  void inertia_triangle(double *idiag, double *quat, double mass,\n                        double *inertia);\n}\n\n/* ----------------------------------------------------------------------\n   copy a vector, return in ans\n------------------------------------------------------------------------- */\n\ninline void MathExtra::copy3(const double *v, double *ans)\n{\n  ans[0] = v[0];\n  ans[1] = v[1];\n  ans[2] = v[2];\n}\n\n/* ----------------------------------------------------------------------\n   set vector equal to zero\n------------------------------------------------------------------------- */\n\ninline void MathExtra::zero3(double *v)\n{\n  v[0] = 0.0;\n  v[1] = 0.0;\n  v[2] = 0.0;\n}\n\n/* ----------------------------------------------------------------------\n   normalize a vector in place\n------------------------------------------------------------------------- */\n\ninline void MathExtra::norm3(double *v)\n{\n  double scale = 1.0/sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);\n  v[0] *= scale;\n  v[1] *= scale;\n  v[2] *= scale;\n}\n\n/* ----------------------------------------------------------------------\n   normalize a vector, return in ans\n------------------------------------------------------------------------- */\n\ninline void MathExtra::normalize3(const double *v, double *ans)\n{\n  double scale = 1.0/sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);\n  ans[0] = v[0]*scale;\n  ans[1] = v[1]*scale;\n  ans[2] = v[2]*scale;\n}\n\n/* ----------------------------------------------------------------------\n   scale a vector to length\n------------------------------------------------------------------------- */\n\ninline void MathExtra::snormalize3(const double length, const double *v, \n                                   double *ans)\n{\n  double scale = length/sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);\n  ans[0] = v[0]*scale;\n  ans[1] = v[1]*scale;\n  ans[2] = v[2]*scale;\n}\n\n/* ----------------------------------------------------------------------\n   negate vector v\n------------------------------------------------------------------------- */\n\ninline void MathExtra::negate3(double *v)\n{\n  v[0] = -v[0];\n  v[1] = -v[1];\n  v[2] = -v[2];\n}\n\n/* ----------------------------------------------------------------------\n   scale vector v by s\n------------------------------------------------------------------------- */\n\ninline void MathExtra::scale3(double s, double *v)\n{\n  v[0] *= s;\n  v[1] *= s;\n  v[2] *= s;\n}\n\n/* ----------------------------------------------------------------------\n   ans = v1 + v2\n------------------------------------------------------------------------- */\n\ninline void MathExtra::add3(const double *v1, const double *v2, double *ans)\n{\n  ans[0] = v1[0] + v2[0];\n  ans[1] = v1[1] + v2[1];\n  ans[2] = v1[2] + v2[2];\n}\n\n/* ----------------------------------------------------------------------\n   ans = s*v1 + v2\n------------------------------------------------------------------------- */\n\ninline void MathExtra::scaleadd3(double s, const double *v1, \n                                 const double *v2, double *ans)\n{\n  ans[0] = s*v1[0] + v2[0];\n  ans[1] = s*v1[1] + v2[1];\n  ans[2] = s*v1[2] + v2[2];\n}\n\n/* ----------------------------------------------------------------------\n   ans = v1 - v2\n------------------------------------------------------------------------- */\n\ninline void MathExtra::sub3(const double *v1, const double *v2, double *ans)\n{\n  ans[0] = v1[0] - v2[0];\n  ans[1] = v1[1] - v2[1];\n  ans[2] = v1[2] - v2[2];\n}\n\n/* ----------------------------------------------------------------------\n   length of vector v\n------------------------------------------------------------------------- */\n\ninline double MathExtra::len3(const double *v)\n{\n  return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);\n}\n\n/* ----------------------------------------------------------------------\n   squared length of vector v, or dot product of v with itself\n------------------------------------------------------------------------- */\n\ninline double MathExtra::lensq3(const double *v)\n{\n  return v[0]*v[0] + v[1]*v[1] + v[2]*v[2];\n}\n\n/* ----------------------------------------------------------------------\n   ans = distance squared between pts v1 and v2\n------------------------------------------------------------------------- */\n\ninline double MathExtra::distsq3(const double *v1, const double *v2)\n{\n  double dx = v1[0] - v2[0];\n  double dy = v1[1] - v2[1];\n  double dz = v1[2] - v2[2];\n  return dx*dx + dy*dy + dz*dz;\n}\n\n/* ----------------------------------------------------------------------\n   dot product of 2 vectors\n------------------------------------------------------------------------- */\n\ninline double MathExtra::dot3(const double *v1, const double *v2)\n{\n  return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];\n}\n\n/* ----------------------------------------------------------------------\n   cross product of 2 vectors\n------------------------------------------------------------------------- */\n\ninline void MathExtra::cross3(const double *v1, const double *v2, double *ans)\n{\n  ans[0] = v1[1]*v2[2] - v1[2]*v2[1];\n  ans[1] = v1[2]*v2[0] - v1[0]*v2[2];\n  ans[2] = v1[0]*v2[1] - v1[1]*v2[0];\n}\n\n/* ----------------------------------------------------------------------\n   construct matrix from 3 column vectors\n------------------------------------------------------------------------- */\n\nvoid MathExtra::col2mat(const double *ex, const double *ey, const double *ez,\n                        double m[3][3])\n{\n  m[0][0] = ex[0];\n  m[1][0] = ex[1];\n  m[2][0] = ex[2];\n  m[0][1] = ey[0];\n  m[1][1] = ey[1];\n  m[2][1] = ey[2];\n  m[0][2] = ez[0];\n  m[1][2] = ez[1];\n  m[2][2] = ez[2];\n}\n\n/* ----------------------------------------------------------------------\n   determinant of a matrix\n------------------------------------------------------------------------- */\n\ninline double MathExtra::det3(const double m[3][3])\n{\n  double ans = m[0][0]*m[1][1]*m[2][2] - m[0][0]*m[1][2]*m[2][1] -\n    m[1][0]*m[0][1]*m[2][2] + m[1][0]*m[0][2]*m[2][1] +\n    m[2][0]*m[0][1]*m[1][2] - m[2][0]*m[0][2]*m[1][1];\n  return ans;\n}\n\n/* ----------------------------------------------------------------------\n   diagonal matrix times a full matrix\n------------------------------------------------------------------------- */\n\ninline void MathExtra::diag_times3(const double *d, const double m[3][3],\n                                   double ans[3][3])\n{\n  ans[0][0] = d[0]*m[0][0];\n  ans[0][1] = d[0]*m[0][1];\n  ans[0][2] = d[0]*m[0][2];\n  ans[1][0] = d[1]*m[1][0];\n  ans[1][1] = d[1]*m[1][1];\n  ans[1][2] = d[1]*m[1][2];\n  ans[2][0] = d[2]*m[2][0];\n  ans[2][1] = d[2]*m[2][1];\n  ans[2][2] = d[2]*m[2][2];\n}\n\n/* ----------------------------------------------------------------------\n   full matrix times a diagonal matrix\n------------------------------------------------------------------------- */\n\nvoid MathExtra::times3_diag(const double m[3][3], const double *d,\n                            double ans[3][3])\n{\n  ans[0][0] = m[0][0]*d[0];\n  ans[0][1] = m[0][1]*d[1];\n  ans[0][2] = m[0][2]*d[2];\n  ans[1][0] = m[1][0]*d[0];\n  ans[1][1] = m[1][1]*d[1];\n  ans[1][2] = m[1][2]*d[2];\n  ans[2][0] = m[2][0]*d[0];\n  ans[2][1] = m[2][1]*d[1];\n  ans[2][2] = m[2][2]*d[2];\n}\n\n/* ----------------------------------------------------------------------\n   add two matrices\n------------------------------------------------------------------------- */\n\ninline void MathExtra::plus3(const double m[3][3], const double m2[3][3],\n                             double ans[3][3])\n{\n  ans[0][0] = m[0][0]+m2[0][0];\n  ans[0][1] = m[0][1]+m2[0][1];\n  ans[0][2] = m[0][2]+m2[0][2];\n  ans[1][0] = m[1][0]+m2[1][0];\n  ans[1][1] = m[1][1]+m2[1][1];\n  ans[1][2] = m[1][2]+m2[1][2];\n  ans[2][0] = m[2][0]+m2[2][0];\n  ans[2][1] = m[2][1]+m2[2][1];\n  ans[2][2] = m[2][2]+m2[2][2];\n}\n\n/* ----------------------------------------------------------------------\n   multiply mat1 times mat2\n------------------------------------------------------------------------- */\n\ninline void MathExtra::times3(const double m[3][3], const double m2[3][3],\n                              double ans[3][3])\n{\n  ans[0][0] = m[0][0]*m2[0][0] + m[0][1]*m2[1][0] + m[0][2]*m2[2][0];\n  ans[0][1] = m[0][0]*m2[0][1] + m[0][1]*m2[1][1] + m[0][2]*m2[2][1];\n  ans[0][2] = m[0][0]*m2[0][2] + m[0][1]*m2[1][2] + m[0][2]*m2[2][2];\n  ans[1][0] = m[1][0]*m2[0][0] + m[1][1]*m2[1][0] + m[1][2]*m2[2][0];\n  ans[1][1] = m[1][0]*m2[0][1] + m[1][1]*m2[1][1] + m[1][2]*m2[2][1];\n  ans[1][2] = m[1][0]*m2[0][2] + m[1][1]*m2[1][2] + m[1][2]*m2[2][2];\n  ans[2][0] = m[2][0]*m2[0][0] + m[2][1]*m2[1][0] + m[2][2]*m2[2][0];\n  ans[2][1] = m[2][0]*m2[0][1] + m[2][1]*m2[1][1] + m[2][2]*m2[2][1];\n  ans[2][2] = m[2][0]*m2[0][2] + m[2][1]*m2[1][2] + m[2][2]*m2[2][2];\n}\n\n/* ----------------------------------------------------------------------\n   multiply the transpose of mat1 times mat2\n------------------------------------------------------------------------- */\n\ninline void MathExtra::transpose_times3(const double m[3][3], \n                                        const double m2[3][3],double ans[3][3])\n{\n  ans[0][0] = m[0][0]*m2[0][0] + m[1][0]*m2[1][0] + m[2][0]*m2[2][0];\n  ans[0][1] = m[0][0]*m2[0][1] + m[1][0]*m2[1][1] + m[2][0]*m2[2][1];\n  ans[0][2] = m[0][0]*m2[0][2] + m[1][0]*m2[1][2] + m[2][0]*m2[2][2];\n  ans[1][0] = m[0][1]*m2[0][0] + m[1][1]*m2[1][0] + m[2][1]*m2[2][0];\n  ans[1][1] = m[0][1]*m2[0][1] + m[1][1]*m2[1][1] + m[2][1]*m2[2][1];\n  ans[1][2] = m[0][1]*m2[0][2] + m[1][1]*m2[1][2] + m[2][1]*m2[2][2];\n  ans[2][0] = m[0][2]*m2[0][0] + m[1][2]*m2[1][0] + m[2][2]*m2[2][0];\n  ans[2][1] = m[0][2]*m2[0][1] + m[1][2]*m2[1][1] + m[2][2]*m2[2][1];\n  ans[2][2] = m[0][2]*m2[0][2] + m[1][2]*m2[1][2] + m[2][2]*m2[2][2];\n}\n\n/* ----------------------------------------------------------------------\n   multiply mat1 times transpose of mat2\n------------------------------------------------------------------------- */\n\ninline void MathExtra::times3_transpose(const double m[3][3], \n                                        const double m2[3][3],double ans[3][3])\n{\n  ans[0][0] = m[0][0]*m2[0][0] + m[0][1]*m2[0][1] + m[0][2]*m2[0][2];\n  ans[0][1] = m[0][0]*m2[1][0] + m[0][1]*m2[1][1] + m[0][2]*m2[1][2];\n  ans[0][2] = m[0][0]*m2[2][0] + m[0][1]*m2[2][1] + m[0][2]*m2[2][2];\n  ans[1][0] = m[1][0]*m2[0][0] + m[1][1]*m2[0][1] + m[1][2]*m2[0][2];\n  ans[1][1] = m[1][0]*m2[1][0] + m[1][1]*m2[1][1] + m[1][2]*m2[1][2];\n  ans[1][2] = m[1][0]*m2[2][0] + m[1][1]*m2[2][1] + m[1][2]*m2[2][2];\n  ans[2][0] = m[2][0]*m2[0][0] + m[2][1]*m2[0][1] + m[2][2]*m2[0][2];\n  ans[2][1] = m[2][0]*m2[1][0] + m[2][1]*m2[1][1] + m[2][2]*m2[1][2];\n  ans[2][2] = m[2][0]*m2[2][0] + m[2][1]*m2[2][1] + m[2][2]*m2[2][2];\n}\n\n/* ----------------------------------------------------------------------\n   invert a matrix\n   does NOT check for singular or badly scaled matrix\n------------------------------------------------------------------------- */\n\ninline void MathExtra::invert3(const double m[3][3], double ans[3][3])\n{\n  double den = m[0][0]*m[1][1]*m[2][2]-m[0][0]*m[1][2]*m[2][1];\n  den += -m[1][0]*m[0][1]*m[2][2]+m[1][0]*m[0][2]*m[2][1];\n  den += m[2][0]*m[0][1]*m[1][2]-m[2][0]*m[0][2]*m[1][1];\n\n  ans[0][0] = (m[1][1]*m[2][2]-m[1][2]*m[2][1]) / den;\n  ans[0][1] = -(m[0][1]*m[2][2]-m[0][2]*m[2][1]) / den;\n  ans[0][2] = (m[0][1]*m[1][2]-m[0][2]*m[1][1]) / den;\n  ans[1][0] = -(m[1][0]*m[2][2]-m[1][2]*m[2][0]) / den;\n  ans[1][1] = (m[0][0]*m[2][2]-m[0][2]*m[2][0]) / den;\n  ans[1][2] = -(m[0][0]*m[1][2]-m[0][2]*m[1][0]) / den;\n  ans[2][0] = (m[1][0]*m[2][1]-m[1][1]*m[2][0]) / den;\n  ans[2][1] = -(m[0][0]*m[2][1]-m[0][1]*m[2][0]) / den;\n  ans[2][2] = (m[0][0]*m[1][1]-m[0][1]*m[1][0]) / den;\n}\n\n/* ----------------------------------------------------------------------\n   matrix times vector\n------------------------------------------------------------------------- */\n\ninline void MathExtra::matvec(const double m[3][3], const double *v, \n                              double *ans)\n{\n  ans[0] = m[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2];\n  ans[1] = m[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2];\n  ans[2] = m[2][0]*v[0] + m[2][1]*v[1] + m[2][2]*v[2];\n}\n\n/* ----------------------------------------------------------------------\n   matrix times vector\n------------------------------------------------------------------------- */\n\ninline void MathExtra::matvec(const double *ex, const double *ey, \n                              const double *ez, const double *v, double *ans)\n{\n  ans[0] = ex[0]*v[0] + ey[0]*v[1] + ez[0]*v[2];\n  ans[1] = ex[1]*v[0] + ey[1]*v[1] + ez[1]*v[2];\n  ans[2] = ex[2]*v[0] + ey[2]*v[1] + ez[2]*v[2];\n}\n\n/* ----------------------------------------------------------------------\n   transposed matrix times vector\n------------------------------------------------------------------------- */\n\ninline void MathExtra::transpose_matvec(const double m[3][3], const double *v,\n                                 double *ans)\n{\n  ans[0] = m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2];\n  ans[1] = m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2];\n  ans[2] = m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2];\n}\n\n/* ----------------------------------------------------------------------\n   transposed matrix times vector\n------------------------------------------------------------------------- */\n\ninline void MathExtra::transpose_matvec(const double *ex, const double *ey,\n                                 const double *ez, const double *v,\n                                 double *ans)\n{\n  ans[0] = ex[0]*v[0] + ex[1]*v[1] + ex[2]*v[2];\n  ans[1] = ey[0]*v[0] + ey[1]*v[1] + ey[2]*v[2];\n  ans[2] = ez[0]*v[0] + ez[1]*v[1] + ez[2]*v[2];\n}\n\n/* ----------------------------------------------------------------------\n   transposed matrix times diagonal matrix\n------------------------------------------------------------------------- */\n\ninline void MathExtra::transpose_diag3(const double m[3][3], const double *d,\n                                double ans[3][3])\n{\n  ans[0][0] = m[0][0]*d[0];\n  ans[0][1] = m[1][0]*d[1];\n  ans[0][2] = m[2][0]*d[2];\n  ans[1][0] = m[0][1]*d[0];\n  ans[1][1] = m[1][1]*d[1];\n  ans[1][2] = m[2][1]*d[2];\n  ans[2][0] = m[0][2]*d[0];\n  ans[2][1] = m[1][2]*d[1];\n  ans[2][2] = m[2][2]*d[2];\n}\n\n/* ----------------------------------------------------------------------\n   row vector times matrix\n------------------------------------------------------------------------- */\n\ninline void MathExtra::vecmat(const double *v, const double m[3][3], \n                              double *ans)\n{\n  ans[0] = v[0]*m[0][0] + v[1]*m[1][0] + v[2]*m[2][0];\n  ans[1] = v[0]*m[0][1] + v[1]*m[1][1] + v[2]*m[2][1];\n  ans[2] = v[0]*m[0][2] + v[1]*m[1][2] + v[2]*m[2][2];\n}\n\n/* ----------------------------------------------------------------------\n   matrix times scalar, in place\n------------------------------------------------------------------------- */\n\ninline void MathExtra::scalar_times3(const double f, double m[3][3])\n{\n  m[0][0] *= f; m[0][1] *= f; m[0][2] *= f;\n  m[1][0] *= f; m[1][1] *= f; m[1][2] *= f;\n  m[2][0] *= f; m[2][1] *= f; m[2][2] *= f;\n}\n\n/* ----------------------------------------------------------------------\n   multiply 2 shape matrices\n   upper-triangular 3x3, stored as 6-vector in Voigt notation\n------------------------------------------------------------------------- */\n\ninline void MathExtra::multiply_shape_shape(const double *one, \n                                            const double *two, double *ans)\n{\n  ans[0] = one[0]*two[0];\n  ans[1] = one[1]*two[1];\n  ans[2] = one[2]*two[2];\n  ans[3] = one[1]*two[3] + one[3]*two[2];\n  ans[4] = one[0]*two[4] + one[5]*two[3] + one[4]*two[2];\n  ans[5] = one[0]*two[5] + one[5]*two[1];\n}\n\n/* ----------------------------------------------------------------------\n   normalize a quaternion\n------------------------------------------------------------------------- */\n\ninline void MathExtra::qnormalize(double *q)\n{\n  double norm = 1.0 / sqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);\n  q[0] *= norm;\n  q[1] *= norm;\n  q[2] *= norm;\n  q[3] *= norm;\n}\n\n/* ----------------------------------------------------------------------\n   conjugate of a quaternion: qc = conjugate of q\n   assume q is of unit length\n------------------------------------------------------------------------- */\n\ninline void MathExtra::qconjugate(double *q, double *qc)\n{\n  qc[0] = q[0];\n  qc[1] = -q[1];\n  qc[2] = -q[2];\n  qc[3] = -q[3];\n}\n\n/* ----------------------------------------------------------------------\n   vector-quaternion multiply: c = a*b, where a = (0,a)\n------------------------------------------------------------------------- */\n\ninline void MathExtra::vecquat(double *a, double *b, double *c)\n{\n  c[0] = -a[0]*b[1] - a[1]*b[2] - a[2]*b[3];\n  c[1] = b[0]*a[0] + a[1]*b[3] - a[2]*b[2];\n  c[2] = b[0]*a[1] + a[2]*b[1] - a[0]*b[3];\n  c[3] = b[0]*a[2] + a[0]*b[2] - a[1]*b[1];\n}\n\n/* ----------------------------------------------------------------------\n   quaternion-vector multiply: c = a*b, where b = (0,b)\n------------------------------------------------------------------------- */\n\ninline void MathExtra::quatvec(double *a, double *b, double *c)\n{\n  c[0] = -a[1]*b[0] - a[2]*b[1] - a[3]*b[2];\n  c[1] = a[0]*b[0] + a[2]*b[2] - a[3]*b[1];\n  c[2] = a[0]*b[1] + a[3]*b[0] - a[1]*b[2];\n  c[3] = a[0]*b[2] + a[1]*b[1] - a[2]*b[0];\n}\n\n/* ----------------------------------------------------------------------\n   quaternion-quaternion multiply: c = a*b\n------------------------------------------------------------------------- */\n\ninline void MathExtra::quatquat(double *a, double *b, double *c)\n{\n  c[0] = a[0]*b[0] - a[1]*b[1] - a[2]*b[2] - a[3]*b[3];\n  c[1] = a[0]*b[1] + b[0]*a[1] + a[2]*b[3] - a[3]*b[2];\n  c[2] = a[0]*b[2] + b[0]*a[2] + a[3]*b[1] - a[1]*b[3];\n  c[3] = a[0]*b[3] + b[0]*a[3] + a[1]*b[2] - a[2]*b[1];\n}\n\n/* ----------------------------------------------------------------------\n   quaternion multiply: c = inv(a)*b\n   a is a quaternion\n   b is a four component vector\n   c is a three component vector\n------------------------------------------------------------------------- */\n\ninline void MathExtra::invquatvec(double *a, double *b, double *c)\n{\n  c[0] = -a[1]*b[0] + a[0]*b[1] + a[3]*b[2] - a[2]*b[3];\n  c[1] = -a[2]*b[0] - a[3]*b[1] + a[0]*b[2] + a[1]*b[3];\n  c[2] = -a[3]*b[0] + a[2]*b[1] - a[1]*b[2] + a[0]*b[3];\n}\n\n/* ----------------------------------------------------------------------\n   compute quaternion from axis-angle rotation\n   v MUST be a unit vector\n------------------------------------------------------------------------- */\n\ninline void MathExtra::axisangle_to_quat(const double *v, const double angle,\n                                         double *quat)\n{\n  double halfa = 0.5*angle;\n  double sina = sin(halfa);\n  quat[0] = cos(halfa);\n  quat[1] = v[0]*sina;\n  quat[2] = v[1]*sina;\n  quat[3] = v[2]*sina;\n}\n\n/* ----------------------------------------------------------------------\n   Apply principal rotation generator about x to rotation matrix m\n------------------------------------------------------------------------- */\n\ninline void MathExtra::rotation_generator_x(const double m[3][3], \n                                            double ans[3][3])\n{\n  ans[0][0] = 0;\n  ans[0][1] = -m[0][2];\n  ans[0][2] = m[0][1];\n  ans[1][0] = 0;\n  ans[1][1] = -m[1][2];\n  ans[1][2] = m[1][1];\n  ans[2][0] = 0;\n  ans[2][1] = -m[2][2];\n  ans[2][2] = m[2][1];\n}\n\n/* ----------------------------------------------------------------------\n   Apply principal rotation generator about y to rotation matrix m\n------------------------------------------------------------------------- */\n\ninline void MathExtra::rotation_generator_y(const double m[3][3], \n                                            double ans[3][3])\n{\n  ans[0][0] = m[0][2];\n  ans[0][1] = 0;\n  ans[0][2] = -m[0][0];\n  ans[1][0] = m[1][2];\n  ans[1][1] = 0;\n  ans[1][2] = -m[1][0];\n  ans[2][0] = m[2][2];\n  ans[2][1] = 0;\n  ans[2][2] = -m[2][0];\n}\n\n/* ----------------------------------------------------------------------\n   Apply principal rotation generator about z to rotation matrix m\n------------------------------------------------------------------------- */\n\ninline void MathExtra::rotation_generator_z(const double m[3][3], \n                                            double ans[3][3])\n{\n  ans[0][0] = -m[0][1];\n  ans[0][1] = m[0][0];\n  ans[0][2] = 0;\n  ans[1][0] = -m[1][1];\n  ans[1][1] = m[1][0];\n  ans[1][2] = 0;\n  ans[2][0] = -m[2][1];\n  ans[2][1] = m[2][0];\n  ans[2][2] = 0;\n}\n\n#endif\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Ray Shan (Sandia, tnshan@sandia.gov)\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_comb.h\"\n#include \"pair_comb3.h\"\n#include \"fix_qeq_comb.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"group.h\"\n#include \"respa.h\"\n#include \"update.h\"\n#include \"memory.h\"\n#include \"error.h\"\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\n\n/* ---------------------------------------------------------------------- */\n\nFixQEQComb::FixQEQComb(LAMMPS *lmp, int narg, char **arg) : Fix(lmp, narg, arg),\n  fp(NULL), comb(NULL), comb3(NULL), qf(NULL), q1(NULL), q2(NULL)\n{\n  if (narg < 5) error->all(FLERR,\"Illegal fix qeq/comb command\");\n\n  peratom_flag = 1;\n  size_peratom_cols = 0;\n  peratom_freq = 1;\n  respa_level_support = 1;\n  ilevel_respa = 0;\n\n  nevery = force->inumeric(FLERR,arg[3]);\n  precision = force->numeric(FLERR,arg[4]);\n\n  if (nevery <= 0 || precision <= 0.0)\n    error->all(FLERR,\"Illegal fix qeq/comb command\");\n\n  MPI_Comm_rank(world,&me);\n\n  // optional args\n\n  int iarg = 5;\n  while (iarg < narg) {\n    if (strcmp(arg[iarg],\"file\") == 0) {\n      if (iarg+2 > narg) error->all(FLERR,\"Illegal fix qeq/comb command\");\n      if (me == 0) {\n        fp = fopen(arg[iarg+1],\"w\");\n        if (fp == NULL) {\n          char str[128];\n          sprintf(str,\"Cannot open fix qeq/comb file %s\",arg[iarg+1]);\n          error->one(FLERR,str);\n        }\n      }\n      iarg += 2;\n    } else error->all(FLERR,\"Illegal fix qeq/comb command\");\n  }\n\n  nmax = atom->nmax;\n  memory->create(qf,nmax,\"qeq:qf\");\n  memory->create(q1,nmax,\"qeq:q1\");\n  memory->create(q2,nmax,\"qeq:q2\");\n  vector_atom = qf;\n\n  // zero the vector since dump may access it on timestep 0\n  // zero the vector since a variable may access it before first run\n\n  int nlocal = atom->nlocal;\n  for (int i = 0; i < nlocal; i++) qf[i] = 0.0;\n\n  comb = NULL;\n  comb3 = NULL;\n\n  comm_forward = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nFixQEQComb::~FixQEQComb()\n{\n  if (me == 0 && fp) fclose(fp);\n  memory->destroy(qf);\n  memory->destroy(q1);\n  memory->destroy(q2);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixQEQComb::setmask()\n{\n  int mask = 0;\n  mask |= POST_FORCE;\n  mask |= POST_FORCE_RESPA;\n  mask |= MIN_POST_FORCE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixQEQComb::init()\n{\n  if (!atom->q_flag)\n    error->all(FLERR,\"Fix qeq/comb requires atom attribute q\");\n\n  comb = (PairComb *) force->pair_match(\"comb\",1);\n  comb3 = (PairComb3 *) force->pair_match(\"comb3\",1);\n  if (comb == NULL && comb3 == NULL)\n    error->all(FLERR,\"Must use pair_style comb or comb3 with fix qeq/comb\");\n\n  if (strstr(update->integrate_style,\"respa\")) {\n    ilevel_respa = ((Respa *) update->integrate)->nlevels-1;\n    if (respa_level >= 0) ilevel_respa = MIN(respa_level,ilevel_respa);\n  }\n\n  ngroup = group->count(igroup);\n  if (ngroup == 0) error->all(FLERR,\"Fix qeq/comb group has no atoms\");\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixQEQComb::setup(int vflag)\n{\n  firstflag = 1;\n  if (strstr(update->integrate_style,\"verlet\"))\n    post_force(vflag);\n  else {\n    ((Respa *) update->integrate)->copy_flevel_f(ilevel_respa);\n    post_force_respa(vflag,ilevel_respa,0);\n    ((Respa *) update->integrate)->copy_f_flevel(ilevel_respa);\n  }\n  firstflag = 0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixQEQComb::min_post_force(int vflag)\n{\n  post_force(vflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixQEQComb::post_force(int vflag)\n{\n  int i,ii,iloop,loopmax,inum,*ilist;\n  double heatpq,qmass,dtq,dtq2;\n  double enegchkall,enegmaxall;\n\n  if (update->ntimestep % nevery) return;\n\n  // reallocate work arrays if necessary\n  // qf = charge force\n  // q1 = charge displacement\n  // q2 = tmp storage of charge force for next iteration\n\n  if (atom->nmax > nmax) {\n    memory->destroy(qf);\n    memory->destroy(q1);\n    memory->destroy(q2);\n    nmax = atom->nmax;\n    memory->create(qf,nmax,\"qeq:qf\");\n    memory->create(q1,nmax,\"qeq:q1\");\n    memory->create(q2,nmax,\"qeq:q2\");\n    vector_atom = qf;\n  }\n\n  // more loops for first-time charge equilibrium\n\n  iloop = 0;\n  if (firstflag) loopmax = 200;\n  else loopmax = 100;\n\n  // charge-equilibration loop\n\n  if (me == 0 && fp)\n    fprintf(fp,\"Charge equilibration on step \" BIGINT_FORMAT \"\\n\",\n            update->ntimestep);\n\n  heatpq = 0.05;\n  qmass  = 0.016;\n  dtq    = 0.01;\n  dtq2   = 0.5*dtq*dtq/qmass;\n\n  double enegchk = 0.0;\n  double enegtot = 0.0;\n  double enegmax = 0.0;\n\n  double *q = atom->q;\n  int *mask = atom->mask;\n\n if (comb) {\n    inum = comb->list->inum;\n    ilist = comb->list->ilist;\n  }\n  if (comb3) {\n    inum = comb3->list->inum;\n    ilist = comb3->list->ilist;\n  }\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    q1[i] = q2[i] = qf[i] = 0.0;\n  }\n\n  for (iloop = 0; iloop < loopmax; iloop ++ ) {\n    for (ii = 0; ii < inum; ii++) {\n      i = ilist[ii];\n      if (mask[i] & groupbit) {\n        q1[i] += qf[i]*dtq2 - heatpq*q1[i];\n        q[i]  += q1[i];\n      }\n    }\n\n    comm->forward_comm_fix(this);\n    if(comb) enegtot = comb->yasu_char(qf,igroup);\n    if(comb3) enegtot = comb3->combqeq(qf,igroup);\n\n    enegtot /= ngroup;\n    enegchk = enegmax = 0.0;\n\n    for (ii = 0; ii < inum ; ii++) {\n      i = ilist[ii];\n      if (mask[i] & groupbit) {\n        q2[i] = enegtot-qf[i];\n        enegmax = MAX(enegmax,fabs(q2[i]));\n        enegchk += fabs(q2[i]);\n        qf[i] = q2[i];\n      }\n    }\n\n    MPI_Allreduce(&enegchk,&enegchkall,1,MPI_DOUBLE,MPI_SUM,world);\n    enegchk = enegchkall/ngroup;\n    MPI_Allreduce(&enegmax,&enegmaxall,1,MPI_DOUBLE,MPI_MAX,world);\n    enegmax = enegmaxall;\n\n    if (enegchk <= precision && enegmax <= 100.0*precision) break;\n\n    if (me == 0 && fp)\n      fprintf(fp,\"  iteration: %d, enegtot %.6g, \"\n              \"enegmax %.6g, fq deviation: %.6g\\n\",\n              iloop,enegtot,enegmax,enegchk);\n\n    for (ii = 0; ii < inum; ii++) {\n      i = ilist[ii];\n      if (mask[i] & groupbit)\n        q1[i] += qf[i]*dtq2 - heatpq*q1[i];\n    }\n  }\n\n  if (me == 0 && fp) {\n    if (iloop == loopmax)\n      fprintf(fp,\"Charges did not converge in %d iterations\\n\",iloop);\n    else\n      fprintf(fp,\"Charges converged in %d iterations to %.10f tolerance\\n\",\n              iloop,enegchk);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixQEQComb::post_force_respa(int vflag, int ilevel, int iloop)\n{\n  if (ilevel == ilevel_respa) post_force(vflag);\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble FixQEQComb::memory_usage()\n{\n  double bytes = atom->nmax*3 * sizeof(double);\n  return bytes;\n}\n/* ---------------------------------------------------------------------- */\n\nint FixQEQComb::pack_forward_comm(int n, int *list, double *buf,\n                                  int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i ++) {\n    j = list[i];\n    buf[m++] = atom->q[j];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixQEQComb::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n ;\n  for (i = first; i < last; i++) atom->q[i] = buf[m++];\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(tersoff/zbl,PairTersoffZBL)\n\n#else\n\n#ifndef LMP_PAIR_TERSOFF_ZBL_H\n#define LMP_PAIR_TERSOFF_ZBL_H\n\n#include \"pair_tersoff.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairTersoffZBL : public PairTersoff {\n public:\n  PairTersoffZBL(class LAMMPS *);\n  ~PairTersoffZBL() {}\n\n protected:\n  double global_a_0;                // Bohr radius for Coulomb repulsion\n  double global_epsilon_0;        // permittivity of vacuum for Coulomb repulsion\n  double global_e;                // proton charge (negative of electron charge)\n\n  void read_file(char *);\n  void repulsive(Param *, double, double &, int, double &);\n\n  double ters_fa(double, Param *);\n  double ters_fa_d(double, Param *);\n\n  double F_fermi(double, Param *);\n  double F_fermi_d(double, Param *);\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Pair tersoff/zbl requires metal or real units\n\nThis is a current restriction of this pair potential.\n\nE: Cannot open Tersoff potential file %s\n\nThe specified potential file cannot be opened.  Check that the path\nand name are correct.\n\nE: Incorrect format in Tersoff potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal Tersoff parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Aidan Thompson (SNL) - original Tersoff implementation\n                        David Farrell (NWU) - ZBL addition\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_tersoff_zbl.h\"\n#include \"atom.h\"\n#include \"update.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\n#include \"math_const.h\"\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairTersoffZBL::PairTersoffZBL(LAMMPS *lmp) : PairTersoff(lmp)\n{\n  // hard-wired constants in metal or real units\n  // a0 = Bohr radius\n  // epsilon0 = permittivity of vacuum = q / energy-distance units\n  // e = unit charge\n  // 1 Kcal/mole = 0.043365121 eV\n\n  if (strcmp(update->unit_style,\"metal\") == 0) {\n    global_a_0 = 0.529;\n    global_epsilon_0 = 0.00552635;\n    global_e = 1.0;\n  } else if (strcmp(update->unit_style,\"real\") == 0) {\n    global_a_0 = 0.529;\n    global_epsilon_0 = 0.00552635 * 0.043365121;\n    global_e = 1.0;\n  } else error->all(FLERR,\"Pair tersoff/zbl requires metal or real units\");\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffZBL::read_file(char *file)\n{\n  int params_per_line = 21;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open Tersoff potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in Tersoff potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].gamma = atof(words[4]);\n    params[nparams].lam3 = atof(words[5]);\n    params[nparams].c = atof(words[6]);\n    params[nparams].d = atof(words[7]);\n    params[nparams].h = atof(words[8]);\n    params[nparams].powern = atof(words[9]);\n    params[nparams].beta = atof(words[10]);\n    params[nparams].lam2 = atof(words[11]);\n    params[nparams].bigb = atof(words[12]);\n    params[nparams].bigr = atof(words[13]);\n    params[nparams].bigd = atof(words[14]);\n    params[nparams].lam1 = atof(words[15]);\n    params[nparams].biga = atof(words[16]);\n    params[nparams].Z_i = atof(words[17]);\n    params[nparams].Z_j = atof(words[18]);\n    params[nparams].ZBLcut = atof(words[19]);\n    params[nparams].ZBLexpscale = atof(words[20]);\n\n    // currently only allow m exponent of 1 or 3\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    if (\n        params[nparams].lam3 < 0.0 || params[nparams].c < 0.0 ||\n        params[nparams].d < 0.0 || params[nparams].powern < 0.0 ||\n        params[nparams].beta < 0.0 || params[nparams].lam2 < 0.0 ||\n        params[nparams].bigb < 0.0 || params[nparams].bigr < 0.0 ||\n        params[nparams].bigd < 0.0 ||\n        params[nparams].bigd > params[nparams].bigr ||\n        params[nparams].lam3 < 0.0 || params[nparams].biga < 0.0 ||\n        params[nparams].powerm - params[nparams].powermint != 0.0 ||\n        (params[nparams].powermint != 3 && params[nparams].powermint != 1) ||\n        params[nparams].gamma < 0.0 ||\n        params[nparams].Z_i < 1.0 || params[nparams].Z_j < 1.0 ||\n        params[nparams].ZBLcut < 0.0 || params[nparams].ZBLexpscale < 0.0)\n      error->all(FLERR,\"Illegal Tersoff parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairTersoffZBL::repulsive(Param *param, double rsq, double &fforce,\n                               int eflag, double &eng)\n{\n  double r,tmp_fc,tmp_fc_d,tmp_exp;\n\n  // Tersoff repulsive portion\n\n  r = sqrt(rsq);\n  tmp_fc = ters_fc(r,param);\n  tmp_fc_d = ters_fc_d(r,param);\n  tmp_exp = exp(-param->lam1 * r);\n  double fforce_ters = param->biga * tmp_exp * (tmp_fc_d - tmp_fc*param->lam1);\n  double eng_ters = tmp_fc * param->biga * tmp_exp;\n\n  // ZBL repulsive portion\n\n  double esq = pow(global_e,2.0);\n  double a_ij = (0.8854*global_a_0) /\n    (pow(param->Z_i,0.23) + pow(param->Z_j,0.23));\n  double premult = (param->Z_i * param->Z_j * esq)/(4.0*MY_PI*global_epsilon_0);\n  double r_ov_a = r/a_ij;\n  double phi = 0.1818*exp(-3.2*r_ov_a) + 0.5099*exp(-0.9423*r_ov_a) +\n    0.2802*exp(-0.4029*r_ov_a) + 0.02817*exp(-0.2016*r_ov_a);\n  double dphi = (1.0/a_ij) * (-3.2*0.1818*exp(-3.2*r_ov_a) -\n                              0.9423*0.5099*exp(-0.9423*r_ov_a) -\n                              0.4029*0.2802*exp(-0.4029*r_ov_a) -\n                              0.2016*0.02817*exp(-0.2016*r_ov_a));\n  double fforce_ZBL = premult*-phi/rsq + premult*dphi/r;\n  double eng_ZBL = premult*(1.0/r)*phi;\n\n  // combine two parts with smoothing by Fermi-like function\n\n  fforce = -(-F_fermi_d(r,param) * eng_ZBL +\n             (1.0 - F_fermi(r,param))*fforce_ZBL +\n             F_fermi_d(r,param)*eng_ters + F_fermi(r,param)*fforce_ters) / r;\n\n  if (eflag)\n    eng = (1.0 - F_fermi(r,param))*eng_ZBL + F_fermi(r,param)*eng_ters;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffZBL::ters_fa(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return -param->bigb * exp(-param->lam2 * r) * ters_fc(r,param) *\n    F_fermi(r,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairTersoffZBL::ters_fa_d(double r, Param *param)\n{\n  if (r > param->bigr + param->bigd) return 0.0;\n  return param->bigb * exp(-param->lam2 * r) *\n    (param->lam2 * ters_fc(r,param) * F_fermi(r,param) -\n     ters_fc_d(r,param) * F_fermi(r,param) - ters_fc(r,param) *\n     F_fermi_d(r,param));\n}\n\n/* ----------------------------------------------------------------------\n   Fermi-like smoothing function\n------------------------------------------------------------------------- */\n\ndouble PairTersoffZBL::F_fermi(double r, Param *param)\n{\n  return 1.0 / (1.0 + exp(-param->ZBLexpscale*(r-param->ZBLcut)));\n}\n\n/* ----------------------------------------------------------------------\n   Fermi-like smoothing function derivative with respect to r\n------------------------------------------------------------------------- */\n\ndouble PairTersoffZBL::F_fermi_d(double r, Param *param)\n{\n  return param->ZBLexpscale*exp(-param->ZBLexpscale*(r-param->ZBLcut)) /\n    pow(1.0 + exp(-param->ZBLexpscale*(r-param->ZBLcut)),2.0);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors:\n   Xiaohu Hu, CMB/ORNL (hux2@ornl.gov)\n   David Hyde-Volpe, Tigran Abramyan, and Robert A. Latour (Clemson University)\n   Chris Lorenz (Kings College-London)\n\n   Implementation of the CHARMM CMAP; adds an extra energy term for the\n   peptide backbone dihedrals.  The tools/ch2lmp/charmm2lammps.pl\n   conversion script, which generates an extra section in the LAMMPS data\n   file, is needed in order to generate the info used by this fix style.\n\n   References:\n   - MacKerell et al., J. Am. Chem. Soc. 126(2004):698-699.\n   - MacKerell et al., J. Comput. Chem. 25(2004):1400-1415.\n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include \"fix_cmap.h\"\n#include \"atom.h\"\n#include \"atom_vec.h\"\n#include \"update.h\"\n#include \"respa.h\"\n#include \"modify.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"group.h\"\n#include \"comm.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace FixConst;\nusing namespace MathConst;\n\n#define MAXLINE 256\n#define LISTDELTA 10000\n#define LB_FACTOR 1.5\n\n#define CMAPMAX 6   // max # of CMAP terms stored by one atom\n#define CMAPDIM 24  // grid map dimension is 24 x 24\n#define CMAPXMIN -360.0\n#define CMAPXMIN2 -180.0\n#define CMAPDX 15.0 // 360/CMAPDIM\n\n/* ---------------------------------------------------------------------- */\n\nFixCMAP::FixCMAP(LAMMPS *lmp, int narg, char **arg) : \n  Fix(lmp, narg, arg),\n  crosstermlist(NULL), num_crossterm(NULL), crossterm_type(NULL), \n  crossterm_atom1(NULL), crossterm_atom2(NULL), crossterm_atom3(NULL), \n  crossterm_atom4(NULL), crossterm_atom5(NULL),\n  g_axis(NULL), cmapgrid(NULL), d1cmapgrid(NULL), d2cmapgrid(NULL), \n  d12cmapgrid(NULL)\n{\n  if (narg != 4) error->all(FLERR,\"Illegal fix cmap command\");\n\n  restart_global = 1;\n  restart_peratom = 1;\n  peatom_flag = 1;\n  virial_flag = 1;\n  peratom_freq = 1;\n  scalar_flag = 1;\n  global_freq = 1;\n  extscalar = 1;\n  extvector = 1;\n  wd_header = 1;\n  wd_section = 1;\n\n  MPI_Comm_rank(world,&me);\n  MPI_Comm_size(world,&nprocs);\n\n  // allocate memory for CMAP data\n\n  memory->create(g_axis,CMAPDIM,\"cmap:g_axis\");\n  memory->create(cmapgrid,6,CMAPDIM,CMAPDIM,\"cmap:grid\");\n  memory->create(d1cmapgrid,6,CMAPDIM,CMAPDIM,\"cmap:d1grid\");\n  memory->create(d2cmapgrid,6,CMAPDIM,CMAPDIM,\"cmap:d2grid\");\n  memory->create(d12cmapgrid,6,CMAPDIM,CMAPDIM,\"cmap:d12grid\");\n\n  // read and setup CMAP data\n\n  read_grid_map(arg[3]);\n\n  // perform initial allocation of atom-based arrays\n  // register with Atom class\n\n  num_crossterm = NULL;\n  crossterm_type = NULL;\n  crossterm_atom1 = NULL;\n  crossterm_atom2 = NULL;\n  crossterm_atom3 = NULL;\n  crossterm_atom4 = NULL;\n  crossterm_atom5 = NULL;\n\n  nmax_previous = 0;\n  grow_arrays(atom->nmax);\n  atom->add_callback(0);\n  atom->add_callback(1);\n\n  // local list of crossterms\n\n  ncmap = 0;\n  maxcrossterm = 0;\n  crosstermlist = NULL;\n}\n\n/* --------------------------------------------------------------------- */\n\nFixCMAP::~FixCMAP()\n{\n  // unregister callbacks to this fix from Atom class\n\n  atom->delete_callback(id,0);\n  atom->delete_callback(id,1);\n\n  memory->destroy(g_axis);\n  memory->destroy(cmapgrid);\n  memory->destroy(d1cmapgrid);\n  memory->destroy(d2cmapgrid);\n  memory->destroy(d12cmapgrid);\n\n  memory->destroy(crosstermlist);\n\n  memory->destroy(num_crossterm);\n  memory->destroy(crossterm_type);\n  memory->destroy(crossterm_atom1);\n  memory->destroy(crossterm_atom2);\n  memory->destroy(crossterm_atom3);\n  memory->destroy(crossterm_atom4);\n  memory->destroy(crossterm_atom5);\n}\n\n/* ---------------------------------------------------------------------- */\n\nint FixCMAP::setmask()\n{\n  int mask = 0;\n  mask |= PRE_NEIGHBOR;\n  mask |= PRE_REVERSE;\n  mask |= POST_FORCE;\n  mask |= THERMO_ENERGY;\n  mask |= POST_FORCE_RESPA;\n  mask |= MIN_POST_FORCE;\n  return mask;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::init()\n{\n  int i;\n  double angle;\n\n  i = 0;\n  angle = -180.0;\n  while (angle < 180.0) {\n    g_axis[i] = angle;\n    angle += CMAPDX;\n    i++;\n  }\n\n  // pre-compute the derivatives of the maps\n\n  for (i = 0; i < 6; i++)\n    set_map_derivatives(cmapgrid[i],d1cmapgrid[i],d2cmapgrid[i],d12cmapgrid[i]);\n\n  // define newton_bond here in case restart file was read (not data file)\n\n  newton_bond = force->newton_bond;\n}\n\n/* --------------------------------------------------------------------- */\n\nvoid FixCMAP::setup(int vflag)\n{\n  pre_neighbor();\n\n  if (strstr(update->integrate_style,\"verlet\"))\n    post_force(vflag);\n  else {\n    ((Respa *) update->integrate)->copy_flevel_f(nlevels_respa-1);\n    post_force_respa(vflag,nlevels_respa-1,0);\n    ((Respa *) update->integrate)->copy_f_flevel(nlevels_respa-1);\n  }\n}\n\n/* --------------------------------------------------------------------- */\n\nvoid FixCMAP::setup_pre_neighbor()\n{\n  pre_neighbor();\n}\n\n/* --------------------------------------------------------------------- */\n\nvoid FixCMAP::setup_pre_reverse(int eflag, int vflag)\n{\n  pre_reverse(eflag,vflag);\n}\n\n/* --------------------------------------------------------------------- */\n\nvoid FixCMAP::min_setup(int vflag)\n{\n  pre_neighbor();\n  post_force(vflag);\n}\n\n/* ----------------------------------------------------------------------\n   store local neighbor list as if newton_bond = OFF, even if actually ON\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::pre_neighbor()\n{\n  int i,m,atom1,atom2,atom3,atom4,atom5;\n\n  // guesstimate initial length of local crossterm list\n  // if ncmap was not set (due to read_restart, no read_data),\n  //   then list will grow by LISTDELTA chunks\n\n  if (maxcrossterm == 0) {\n    if (nprocs == 1) maxcrossterm = ncmap;\n    else maxcrossterm = static_cast<int> (LB_FACTOR*ncmap/nprocs);\n    memory->create(crosstermlist,maxcrossterm,6,\"cmap:crosstermlist\");\n  }\n\n  int nlocal = atom->nlocal;\n\n  ncrosstermlist = 0;\n\n  for (i = 0; i < nlocal; i++) {\n    for (m = 0; m < num_crossterm[i]; m++) {\n      atom1 = atom->map(crossterm_atom1[i][m]);\n      atom2 = atom->map(crossterm_atom2[i][m]);\n      atom3 = atom->map(crossterm_atom3[i][m]);\n      atom4 = atom->map(crossterm_atom4[i][m]);\n      atom5 = atom->map(crossterm_atom5[i][m]);\n\n      if (atom1 == -1 || atom2 == -1 || atom3 == -1 ||\n          atom4 == -1 || atom5 == -1) {\n        char str[128];\n        sprintf(str,\"CMAP atoms \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT\n                \" missing on proc %d at step \" BIGINT_FORMAT,\n                crossterm_atom1[i][m],crossterm_atom2[i][m],\n                crossterm_atom3[i][m],crossterm_atom4[i][m],\n                crossterm_atom5[i][m],me,update->ntimestep);\n        error->one(FLERR,str);\n      }\n      atom1 = domain->closest_image(i,atom1);\n      atom2 = domain->closest_image(i,atom2);\n      atom3 = domain->closest_image(i,atom3);\n      atom4 = domain->closest_image(i,atom4);\n      atom5 = domain->closest_image(i,atom5);\n\n      if (i <= atom1 && i <= atom2 && i <= atom3 &&\n          i <= atom4 && i <= atom5) {\n        if (ncrosstermlist == maxcrossterm) {\n          maxcrossterm += LISTDELTA;\n          memory->grow(crosstermlist,maxcrossterm,6,\"cmap:crosstermlist\");\n        }\n        crosstermlist[ncrosstermlist][0] = atom1;\n        crosstermlist[ncrosstermlist][1] = atom2;\n        crosstermlist[ncrosstermlist][2] = atom3;\n        crosstermlist[ncrosstermlist][3] = atom4;\n        crosstermlist[ncrosstermlist][4] = atom5;\n        crosstermlist[ncrosstermlist][5] = crossterm_type[i][m];\n        ncrosstermlist++;\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   store eflag, so can use it in post_force to tally per-atom energies\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::pre_reverse(int eflag, int vflag)\n{\n  eflag_caller = eflag;\n}\n\n/* ----------------------------------------------------------------------\n   compute CMAP terms as if newton_bond = OFF, even if actually ON\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::post_force(int vflag)\n{\n  int n,i1,i2,i3,i4,i5,type,nlist;\n  int li1, li2, mli1,mli2,mli11,mli21,t1,li3,li4,mli3,mli4,mli31,mli41;\n  int list[5];\n  // vectors needed to calculate the cross-term dihedral angles\n  double vb21x,vb21y,vb21z,vb32x,vb32y,vb32z,vb34x,vb34y,vb34z;\n  double vb23x,vb23y,vb23z;\n  double vb43x,vb43y,vb43z,vb45x,vb45y,vb45z,a1x,a1y,a1z,b1x,b1y,b1z;\n  double a2x,a2y,a2z,b2x,b2y,b2z,r32,a1sq,b1sq,a2sq,b2sq,dpr21r32,dpr34r32;\n  double dpr32r43,dpr45r43,r43,vb12x,vb12y,vb12z,vb54x,vb54y,vb54z;\n  // cross-term dihedral angles\n  double phi,psi,phi1,psi1;\n  double f1[3],f2[3],f3[3],f4[3],f5[3],vcmap[6];\n  double gs[4],d1gs[4],d2gs[4],d12gs[4];\n  double engfraction;\n  // vectors needed for the gradient/force calculation\n  double dphidr1x,dphidr1y,dphidr1z,dphidr2x,dphidr2y,dphidr2z;\n  double dphidr3x,dphidr3y,dphidr3z,dphidr4x,dphidr4y,dphidr4z;\n  double dpsidr1x,dpsidr1y,dpsidr1z,dpsidr2x,dpsidr2y,dpsidr2z;\n  double dpsidr3x,dpsidr3y,dpsidr3z,dpsidr4x,dpsidr4y,dpsidr4z;\n\n  // Definition of cross-term dihedrals\n\n  //         phi dihedral\n  //   |--------------------|\n  //   a1-----a2-----a3-----a4-----a5    cross-term atoms\n  //   C      N      CA     C      N     cross-term atom types\n  //          |--------------------|\n  //               psi dihedral\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int nlocal = atom->nlocal;\n\n  ecmap = 0.0;\n  int eflag = eflag_caller;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  for (n = 0; n < ncrosstermlist; n++) {\n    i1 = crosstermlist[n][0];\n    i2 = crosstermlist[n][1];\n    i3 = crosstermlist[n][2];\n    i4 = crosstermlist[n][3];\n    i5 = crosstermlist[n][4];\n\n    type = crosstermlist[n][5];\n    if (type == 0) continue;\n\n    // calculate bond vectors for both dihedrals\n\n    // phi\n    // vb21 = r2 - r1\n\n      vb21x = x[i2][0] - x[i1][0];\n      vb21y = x[i2][1] - x[i1][1];\n      vb21z = x[i2][2] - x[i1][2];\n      vb12x = -1.0*vb21x;\n      vb12y = -1.0*vb21y;\n      vb12z = -1.0*vb21z;\n      vb32x = x[i3][0] - x[i2][0];\n      vb32y = x[i3][1] - x[i2][1];\n      vb32z = x[i3][2] - x[i2][2];\n      vb23x = -1.0*vb32x;\n      vb23y = -1.0*vb32y;\n      vb23z = -1.0*vb32z;\n\n      vb34x = x[i3][0] - x[i4][0];\n      vb34y = x[i3][1] - x[i4][1];\n      vb34z = x[i3][2] - x[i4][2];\n\n      // psi\n      // bond vectors same as for phi: vb32\n\n      vb43x = -1.0*vb34x;\n      vb43y = -1.0*vb34y;\n      vb43z = -1.0*vb34z;\n\n      vb45x = x[i4][0] - x[i5][0];\n      vb45y = x[i4][1] - x[i5][1];\n      vb45z = x[i4][2] - x[i5][2];\n      vb54x = -1.0*vb45x;\n      vb54y = -1.0*vb45y;\n      vb54z = -1.0*vb45z;\n\n      // calculate normal vectors for planes that define the dihedral angles\n\n      a1x = vb12y*vb23z - vb12z*vb23y;\n      a1y = vb12z*vb23x - vb12x*vb23z;\n      a1z = vb12x*vb23y - vb12y*vb23x;\n\n      b1x = vb43y*vb23z - vb43z*vb23y;\n      b1y = vb43z*vb23x - vb43x*vb23z;\n      b1z = vb43x*vb23y - vb43y*vb23x;\n\n      a2x = vb23y*vb34z - vb23z*vb34y;\n      a2y = vb23z*vb34x - vb23x*vb34z;\n      a2z = vb23x*vb34y - vb23y*vb34x;\n\n      b2x = vb45y*vb43z - vb45z*vb43y;\n      b2y = vb45z*vb43x - vb45x*vb43z;\n      b2z = vb45x*vb43y - vb45y*vb43x;\n\n      // calculate terms used later in calculations\n\n      r32 = sqrt(vb32x*vb32x + vb32y*vb32y + vb32z*vb32z);\n      a1sq = a1x*a1x + a1y*a1y + a1z*a1z;\n      b1sq = b1x*b1x + b1y*b1y + b1z*b1z;\n\n      r43 = sqrt(vb43x*vb43x + vb43y*vb43y + vb43z*vb43z);\n      a2sq = a2x*a2x + a2y*a2y + a2z*a2z;\n      b2sq = b2x*b2x + b2y*b2y + b2z*b2z;\n      //if (a1sq<0.0001 || b1sq<0.0001 || a2sq<0.0001 || b2sq<0.0001)\n      //  printf(\"a1sq b1sq a2sq b2sq: %f %f %f %f \\n\",a1sq,b1sq,a2sq,b2sq);\n      if (a1sq<0.0001 || b1sq<0.0001 || a2sq<0.0001 || b2sq<0.0001) continue;\n      dpr21r32 = vb21x*vb32x + vb21y*vb32y + vb21z*vb32z;\n      dpr34r32 = vb34x*vb32x + vb34y*vb32y + vb34z*vb32z;\n      dpr32r43 = vb32x*vb43x + vb32y*vb43y + vb32z*vb43z;\n      dpr45r43 = vb45x*vb43x + vb45y*vb43y + vb45z*vb43z;\n\n      // calculate the backbone dihedral angles as VMD and GROMACS\n\n      phi = dihedral_angle_atan2(vb21x,vb21y,vb21z,a1x,a1y,a1z,b1x,b1y,b1z,r32);\n      psi = dihedral_angle_atan2(vb32x,vb32y,vb32z,a2x,a2y,a2z,b2x,b2y,b2z,r43);\n\n      if (phi == 180.0) phi= -180.0;\n      if (psi == 180.0) psi= -180.0;\n\n      phi1 = phi;\n      if (phi1 < 0.0) phi1 += 360.0;\n      psi1 = psi;\n      if (psi1 < 0.0) psi1 += 360.0;\n\n      // find the neighbor grid point index\n\n      li1 = int(((phi1+CMAPXMIN2)/CMAPDX)+((CMAPDIM*1.0)/2.0));\n      li2 = int(((psi1+CMAPXMIN2)/CMAPDX)+((CMAPDIM*1.0)/2.0));\n\n      li3 = int((phi-CMAPXMIN2)/CMAPDX);\n      li4 = int((psi-CMAPXMIN2)/CMAPDX);\n      mli3 = li3 % CMAPDIM;\n      mli4 = li4 % CMAPDIM;\n      mli31 = (li3+1) % CMAPDIM;\n      mli41 = (li4+1)  %CMAPDIM;\n      mli1 = li1 % CMAPDIM;\n      mli2 = li2 % CMAPDIM;\n      mli11 = (li1+1) % CMAPDIM;\n      mli21 = (li2+1)  %CMAPDIM;\n      t1 = type-1;\n      if (t1 < 0 || t1 > 5) error->all(FLERR,\"Invalid CMAP crossterm_type\");\n\n      // determine the values and derivatives for the grid square points\n\n      gs[0] = cmapgrid[t1][mli3][mli4];\n      gs[1] = cmapgrid[t1][mli31][mli4];\n      gs[2] = cmapgrid[t1][mli31][mli41];\n      gs[3] = cmapgrid[t1][mli3][mli41];\n      d1gs[0] = d1cmapgrid[t1][mli1][mli2];\n      d1gs[1] = d1cmapgrid[t1][mli11][mli2];\n      d1gs[2] = d1cmapgrid[t1][mli11][mli21];\n      d1gs[3] = d1cmapgrid[t1][mli1][mli21];\n\n      d2gs[0] = d2cmapgrid[t1][mli1][mli2];\n      d2gs[1] = d2cmapgrid[t1][mli11][mli2];\n      d2gs[2] = d2cmapgrid[t1][mli11][mli21];\n      d2gs[3] = d2cmapgrid[t1][mli1][mli21];\n\n      d12gs[0] = d12cmapgrid[t1][mli1][mli2];\n      d12gs[1] = d12cmapgrid[t1][mli11][mli2];\n      d12gs[2] = d12cmapgrid[t1][mli11][mli21];\n      d12gs[3] = d12cmapgrid[t1][mli1][mli21];\n\n      // calculate the cmap energy and the gradient (dE/dphi,dE/dpsi)\n\n      bc_interpol(phi,psi,li3,li4,gs,d1gs,d2gs,d12gs);\n\n      // sum up cmap energy contributions\n\n      engfraction = 0.2 * E;\n      if (i1 < nlocal) ecmap += engfraction;\n      if (i2 < nlocal) ecmap += engfraction;\n      if (i3 < nlocal) ecmap += engfraction;\n      if (i4 < nlocal) ecmap += engfraction;\n      if (i5 < nlocal) ecmap += engfraction;\n\n      // calculate the derivatives dphi/dr_i\n\n      dphidr1x = 1.0*r32/a1sq*a1x;\n      dphidr1y = 1.0*r32/a1sq*a1y;\n      dphidr1z = 1.0*r32/a1sq*a1z;\n\n      dphidr2x = -1.0*r32/a1sq*a1x - dpr21r32/a1sq/r32*a1x +\n        dpr34r32/b1sq/r32*b1x;\n      dphidr2y = -1.0*r32/a1sq*a1y - dpr21r32/a1sq/r32*a1y +\n        dpr34r32/b1sq/r32*b1y;\n      dphidr2z = -1.0*r32/a1sq*a1z - dpr21r32/a1sq/r32*a1z +\n        dpr34r32/b1sq/r32*b1z;\n\n      dphidr3x = dpr34r32/b1sq/r32*b1x - dpr21r32/a1sq/r32*a1x - r32/b1sq*b1x;\n      dphidr3y = dpr34r32/b1sq/r32*b1y - dpr21r32/a1sq/r32*a1y - r32/b1sq*b1y;\n      dphidr3z = dpr34r32/b1sq/r32*b1z - dpr21r32/a1sq/r32*a1z - r32/b1sq*b1z;\n\n      dphidr4x = r32/b1sq*b1x;\n      dphidr4y = r32/b1sq*b1y;\n      dphidr4z = r32/b1sq*b1z;\n\n      // calculate the derivatives dpsi/dr_i\n\n      dpsidr1x = 1.0*r43/a2sq*a2x;\n      dpsidr1y = 1.0*r43/a2sq*a2y;\n      dpsidr1z = 1.0*r43/a2sq*a2z;\n\n      dpsidr2x = r43/a2sq*a2x + dpr32r43/a2sq/r43*a2x - dpr45r43/b2sq/r43*b2x;\n      dpsidr2y = r43/a2sq*a2y + dpr32r43/a2sq/r43*a2y - dpr45r43/b2sq/r43*b2y;\n      dpsidr2z = r43/a2sq*a2z + dpr32r43/a2sq/r43*a2z - dpr45r43/b2sq/r43*b2z;\n\n      dpsidr3x = dpr45r43/b2sq/r43*b2x - dpr32r43/a2sq/r43*a2x - r43/b2sq*b2x;\n      dpsidr3y = dpr45r43/b2sq/r43*b2y - dpr32r43/a2sq/r43*a2y - r43/b2sq*b2y;\n      dpsidr3z = dpr45r43/b2sq/r43*b2z - dpr32r43/a2sq/r43*a2z - r43/b2sq*b2z;\n\n      dpsidr4x = r43/b2sq*b2x;\n      dpsidr4y = r43/b2sq*b2y;\n      dpsidr4z = r43/b2sq*b2z;\n\n      // calculate forces on cross-term atoms: F = -(dE/dPhi)*(dPhi/dr)\n\n      f1[0] = dEdPhi*dphidr1x;\n      f1[1] = dEdPhi*dphidr1y;\n      f1[2] = dEdPhi*dphidr1z;\n      f2[0] = dEdPhi*dphidr2x + dEdPsi*dpsidr1x;\n      f2[1] = dEdPhi*dphidr2y + dEdPsi*dpsidr1y;\n      f2[2] = dEdPhi*dphidr2z + dEdPsi*dpsidr1z;\n      f3[0] = -dEdPhi*dphidr3x - dEdPsi*dpsidr2x;\n      f3[1] = -dEdPhi*dphidr3y - dEdPsi*dpsidr2y;\n      f3[2] = -dEdPhi*dphidr3z - dEdPsi*dpsidr2z;\n      f4[0] = -dEdPhi*dphidr4x - dEdPsi*dpsidr3x;\n      f4[1] = -dEdPhi*dphidr4y - dEdPsi*dpsidr3y;\n      f4[2] = -dEdPhi*dphidr4z - dEdPsi*dpsidr3z;\n      f5[0] = -dEdPsi*dpsidr4x;\n      f5[1] = -dEdPsi*dpsidr4y;\n      f5[2] = -dEdPsi*dpsidr4z;\n\n      // apply force to each of the 5 atoms\n\n      if (i1 < nlocal) {\n        f[i1][0] += f1[0];\n        f[i1][1] += f1[1];\n        f[i1][2] += f1[2];\n      }\n      if (i2 < nlocal) {\n        f[i2][0] += f2[0];\n        f[i2][1] += f2[1];\n        f[i2][2] += f2[2];\n      }\n      if (i3 < nlocal) {\n        f[i3][0] += f3[0];\n        f[i3][1] += f3[1];\n        f[i3][2] += f3[2];\n      }\n      if (i4 < nlocal) {\n        f[i4][0] += f4[0];\n        f[i4][1] += f4[1];\n        f[i4][2] += f4[2];\n      }\n      if (i5 < nlocal) {\n        f[i5][0] += f5[0];\n        f[i5][1] += f5[1];\n        f[i5][2] += f5[2];\n      }\n\n      // tally energy and/or virial\n\n      if (evflag) {\n        nlist = 0;\n        if (i1 < nlocal) list[nlist++] = i1;\n        if (i2 < nlocal) list[nlist++] = i2;\n        if (i3 < nlocal) list[nlist++] = i3;\n        if (i4 < nlocal) list[nlist++] = i4;\n        if (i5 < nlocal) list[nlist++] = i5;\n        vcmap[0] = (vb12x*f1[0])+(vb32x*f3[0])+((vb43x+vb32x)*f4[0])+\n          ((vb54x+vb43x+vb32x)*f5[0]);\n        vcmap[1] = (vb12y*f1[1])+(vb32y*f3[1])+((vb43y+vb32y)*f4[1])+\n          ((vb54y+vb43y+vb32y)*f5[1]);\n        vcmap[2] = (vb12z*f1[2])+(vb32z*f3[2])+((vb43z+vb32z)*f4[2])+\n          ((vb54z+vb43z+vb32z)*f5[2]);\n        vcmap[3] = (vb12x*f1[1])+(vb32x*f3[1])+((vb43x+vb32x)*f4[1])+\n          ((vb54x+vb43x+vb32x)*f5[1]);\n        vcmap[4] = (vb12x*f1[2])+(vb32x*f3[2])+((vb43x+vb32x)*f4[2])+\n          ((vb54x+vb43x+vb32x)*f5[2]);\n        vcmap[5] = (vb12y*f1[2])+(vb32y*f3[2])+((vb43y+vb32y)*f4[2])+\n          ((vb54y+vb43y+vb32y)*f5[2]);\n        ev_tally(nlist,list,5.0,E,vcmap);\n        //ev_tally(5,list,nlocal,newton_bond,E,vcmap);\n      }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::post_force_respa(int vflag, int ilevel, int iloop)\n{\n  if (ilevel == nlevels_respa-1) post_force(vflag);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::min_post_force(int vflag)\n{\n  post_force(vflag);\n}\n\n/* ----------------------------------------------------------------------\n   energy of CMAP term\n------------------------------------------------------------------------- */\n\ndouble FixCMAP::compute_scalar()\n{\n  double all;\n  MPI_Allreduce(&ecmap,&all,1,MPI_DOUBLE,MPI_SUM,world);\n  return all;\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// methods to read CMAP potential file, perform interpolation\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\nvoid FixCMAP::read_grid_map(char *cmapfile)\n{\n  char linebuf[MAXLINE];\n  char *chunk,*line;\n  int i1, i2, i3, i4, i5, i6, j1, j2, j3, j4, j5, j6, counter;\n\n  FILE *fp = NULL;\n  if (comm->me == 0) {\n    fp = force->open_potential(cmapfile);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open fix cmap file %s\",cmapfile);\n      error->one(FLERR,str);\n    }\n  }\n\n  for (int ix1 = 0; ix1 < 6; ix1++)\n    for (int ix2 = 0; ix2 < CMAPDIM; ix2++)\n      for (int ix3 = 0; ix3 < CMAPDIM; ix3++)\n        cmapgrid[ix1][ix2][ix3] = 0.0;\n\n  counter = 0;\n  i1 = i2 = i3 = i4 = i5 = i6 = 0;\n  j1 = j2 = j3 = j4 = j5 = j6 = 0;\n\n  int done = 0;\n\n  while (!done) {\n    // only read on rank 0 and broadcast to all other ranks\n    if (comm->me == 0)\n      done = (fgets(linebuf,MAXLINE,fp) == NULL);\n\n    MPI_Bcast(&done,1,MPI_INT,0,world);\n    if (done) continue;\n\n    MPI_Bcast(linebuf,MAXLINE,MPI_CHAR,0,world);\n\n    // remove leading whitespace\n    line = linebuf;\n    while (line && (*line == ' ' || *line == '\\t' || *line == '\\r')) ++line;\n\n    // skip if empty line or comment\n    if (!line || *line =='\\n' || *line == '\\0' || *line == '#') continue;\n\n    // read in the cmap grid point values\n    // NOTE: The order to read the 6 grid maps is HARD-CODED, thus errors\n    //       will occur if content of the file \"cmap.data\" is altered\n    //\n    // Reading order of the maps:\n    // 1. Alanine map\n    // 2. Alanine before proline map\n    // 3. Proline map\n    // 4. Two adjacent prolines map\n    // 5. Glycine map\n    // 6. Glycine before proline map\n\n    chunk = strtok(line, \" \\r\\n\");\n    while (chunk != NULL) {\n\n      // alanine map\n\n      if (counter < CMAPDIM*CMAPDIM) {\n        cmapgrid[0][i1][j1] = atof(chunk);\n        chunk = strtok(NULL, \" \\r\\n\");\n        j1++;\n        if (j1 == CMAPDIM) {\n          j1 = 0;\n          i1++;\n        }\n        counter++;\n      }\n\n      // alanine-proline map\n\n      else if (counter >= CMAPDIM*CMAPDIM &&\n               counter < 2*CMAPDIM*CMAPDIM) {\n        cmapgrid[1][i2][j2]= atof(chunk);\n        chunk = strtok(NULL, \" \\r\\n\");\n        j2++;\n        if (j2 == CMAPDIM) {\n          j2 = 0;\n          i2++;\n        }\n        counter++;\n      }\n\n      // proline map\n\n      else if (counter >= 2*CMAPDIM*CMAPDIM &&\n               counter < 3*CMAPDIM*CMAPDIM) {\n        cmapgrid[2][i3][j3] = atof(chunk);\n        chunk = strtok(NULL, \" \\r\\n\");\n        j3++;\n        if (j3 == CMAPDIM) {\n          j3 = 0;\n          i3++;\n        }\n        counter++;\n      }\n\n      // 2 adjacent prolines map\n\n      else if (counter >= 3*CMAPDIM*CMAPDIM &&\n               counter < 4*CMAPDIM*CMAPDIM) {\n        cmapgrid[3][i4][j4] = atof(chunk);\n        chunk = strtok(NULL, \" \\r\\n\");\n        j4++;\n        if (j4 == CMAPDIM) {\n          j4 = 0;\n          i4++;\n        }\n        counter++;\n      }\n\n      // glycine map\n\n      else if (counter >= 4*CMAPDIM*CMAPDIM &&\n               counter < 5*CMAPDIM*CMAPDIM) {\n        cmapgrid[4][i5][j5] = atof(chunk);\n        chunk = strtok(NULL, \" \\r\\n\");\n        j5++;\n        if (j5 == CMAPDIM) {\n          j5 = 0;\n          i5++;\n        }\n        counter++;\n      }\n\n      // glycine-proline map\n\n      else if (counter >= 5*CMAPDIM*CMAPDIM &&\n               counter < 6*CMAPDIM*CMAPDIM) {\n        cmapgrid[5][i6][j6] = atof(chunk);\n        chunk = strtok(NULL, \" \\r\\n\");\n        j6++;\n        if (j6 == CMAPDIM) {\n          j6 = 0;\n          i6++;\n        }\n        counter++;\n      }\n\n      else break;\n    }\n  }\n\n  if (comm->me == 0) fclose(fp);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::spline(double *y, double *ddy, int n)\n{\n  // create the 2nd dervatives of a taublated function y_i(x_i)\n  // at the tabulated points\n\n  int i, j;\n  double p, *u;\n\n  memory->create(u,n-1,\"cmap:u\");\n\n  ddy[0] = u[0] = 0.0;\n\n  for (i = 1; i <= n-2; i++) {\n    p = 1.0/(ddy[i-1]+4.0);\n    ddy[i] = -p;\n    u[i] = ((((6.0*y[i+1])-(12.0*y[i])+(6.0*y[i-1]))/(CMAPDX*CMAPDX))-u[i-1])*p;\n  }\n\n  ddy[n-1] = 0.0;\n\n  for (j = n-2; j >= 0; j--)\n    ddy[j] = ddy[j]*ddy[j+1] + u[j];\n\n  memory->destroy(u);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::spl_interpolate(double x, double *y, double *ddy, double &yo,\n                              double &dyo)\n{\n  // perform a 1D cubic spline interpolation\n\n  int ix;\n  double a,b,a1,b1,a2,b2;\n\n  ix = int((x-CMAPXMIN)/CMAPDX-(1./2.));\n\n  a = (CMAPXMIN+(ix*1.0)*CMAPDX-x)/CMAPDX;\n  b = (x-CMAPXMIN-(((ix-1)*1.0)*CMAPDX))/CMAPDX;\n\n  a1 = a*a*a-a;\n  b1 = b*b*b-b;\n\n  a2 = 3.0*a*a-1.0;\n  b2 = 3.0*b*b-1.0;\n  yo = a*y[ix]+b*y[ix+1]+(a1*ddy[ix]+b1*ddy[ix+1])*(CMAPDX*CMAPDX)/6.0;\n  dyo = (y[ix+1]-y[ix])/CMAPDX-a2/6.0*CMAPDX*ddy[ix]+b2/6.0*CMAPDX*ddy[ix+1];\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::set_map_derivatives(double **map, double **d1yo, double **d2yo,\n                                  double **d12yo)\n{\n  // precompute the gradient and cross-derivatives of the map grid points.\n  // use the bicubic spline to calculate the derivatives\n\n  int i, j, k, ii, jj, xm, p;\n  double phi, psi, d1y, d2y, d12y, tyyk,tdyk;\n  double *tmp_y, *tmp_dy, *tmp_ddy, **tmap, **tddmap;\n  int ix;\n  double a,b,a1,b1,a2,b2;\n\n  xm = CMAPDIM/2;\n  p = CMAPDIM;\n\n  d1y = 0.;\n  d2y = 0.;\n  d12y = 0.;\n\n  memory->create(tmp_y,CMAPDIM*2,\"cmap:tmp_y\");\n  memory->create(tmp_dy,CMAPDIM*2,\"cmap:tmp_dy\");\n  memory->create(tmp_ddy,CMAPDIM*2,\"cmap:tmp_ddy\");\n  memory->create(tmap,CMAPDIM*2,CMAPDIM*2,\"cmap:tmap\");\n  memory->create(tddmap,CMAPDIM*2,CMAPDIM*2,\"cmap:tddmap\");\n\n  // periodically expand the original map\n  // use the expanded map for bicubic spline interpolation,\n  //   which is used to obtain the derivatives\n  // actual interpolation is done with bicubic interpolation\n\n  for (i = 0; i < CMAPDIM*2; i++) {\n    ii = ((i+CMAPDIM-xm)%CMAPDIM);\n    for (j = 0; j < CMAPDIM*2; j++) {\n      jj = ((j+CMAPDIM-xm)%CMAPDIM);\n      tmap[i][j] = map[ii][jj];\n    }\n  }\n\n  for (i = 0; i < CMAPDIM*2; i++)\n    spline(tmap[i], tddmap[i], CMAPDIM*2);\n\n  for (i = xm; i < CMAPDIM+xm; i++) {\n    phi = (i-xm)*CMAPDX-180.0;\n    for (j = xm; j < CMAPDIM+xm; j++) {\n      psi = (j-xm)*CMAPDX-180.0;\n      ix = int((psi-CMAPXMIN)/CMAPDX);\n      a = (CMAPXMIN+((ix+1)*1.0)*CMAPDX-psi)/CMAPDX;\n      b = (psi-CMAPXMIN-((ix)*1.0)*CMAPDX)/CMAPDX;\n      a1 = a*a*a-a;\n      b1 = b*b*b-b;\n      a2 = 3.0*a*a-1.0;\n      b2 = 3.0*b*b-1.0;\n      for (k = 0; k < CMAPDIM*2; k++) {\n        tyyk = tmp_y[k];\n        tdyk = tmp_dy[k];\n        tyyk = a*tmap[k][ix]+b*tmap[k][ix+1]+\n          (a1*tddmap[k][ix]+b1*tddmap[k][ix+1])*(CMAPDX*CMAPDX)/6.0;\n        tdyk = (tmap[k][ix+1]-tmap[k][ix])/CMAPDX-\n          (a2/6.0*CMAPDX*tddmap[k][ix])+(b2/6.0*CMAPDX*tddmap[k][ix+1]);\n        tmp_y[k] = tyyk;\n        tmp_dy[k] = tdyk;\n      }\n\n      spline(tmp_y,tmp_ddy,CMAPDIM+xm+xm);\n      ix = int((phi-CMAPXMIN)/CMAPDX);\n      a = (CMAPXMIN+((ix+1)*1.0)*CMAPDX-phi)/CMAPDX;\n      b = (phi-CMAPXMIN-(ix*1.0)*CMAPDX)/CMAPDX;\n      a1 = a*a*a-a;\n      b1 = b*b*b-b;\n      a2 = 3.0*a*a-1.0;\n      b2 = 3.0*b*b-1.0;\n      d1y = (tmp_y[ix+1]-tmp_y[ix])/CMAPDX-\n        a2/6.0*CMAPDX*tmp_ddy[ix]+b2/6.0*CMAPDX*tmp_ddy[ix+1];\n      spline(tmp_dy,tmp_ddy,CMAPDIM+xm+xm);\n      ix = int((phi-CMAPXMIN)/CMAPDX);\n      a = (CMAPXMIN+((ix+1)*1.0)*CMAPDX-phi)/CMAPDX;\n      b = (phi-CMAPXMIN-(ix*1.0)*CMAPDX)/CMAPDX;\n      a1 = a*a*a-a;\n      b1 = b*b*b-b;\n      a2 = 3.0*a*a-1.0;\n      b2 = 3.0*b*b-1.0;\n      d2y = a*tmp_dy[ix]+b*tmp_dy[ix+1]+\n        (a1*tmp_ddy[ix]+b1*tmp_ddy[ix+1])*(CMAPDX*CMAPDX)/6.0;\n      d12y = (tmp_dy[ix+1]-tmp_dy[ix])/CMAPDX-\n        a2/6.0*CMAPDX*tmp_ddy[ix]+b2/6.0*CMAPDX*tmp_ddy[ix+1];\n      d1yo[i%p][j%p] = d1y;\n      d2yo[i%p][j%p] = d2y;\n      d12yo[i%p][j%p] = d12y;\n    }\n  }\n\n  memory->destroy(tmp_y);\n  memory->destroy(tmp_dy);\n  memory->destroy(tmp_ddy);\n  memory->destroy(tmap);\n  memory->destroy(tddmap);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble FixCMAP::dihedral_angle_atan2(double fx, double fy, double fz,\n                                      double ax, double ay, double az,\n                                      double bx, double by, double bz,\n                                      double absg)\n{\n  // calculate the dihedral angle\n\n  double angle, arg1, arg2;\n\n  arg1 = absg*(fx*bx+fy*by+fz*bz);\n  arg2 = ax*bx+ay*by+az*bz;\n\n  if (arg1 == 0 && arg2 == 0)\n    error->all(FLERR,\"CMAP: atan2 function cannot take 2 zero arguments\");\n  else {\n    angle = atan2(arg1,arg2);\n    angle = angle*180.0/MY_PI;\n  }\n\n  return angle;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::bc_coeff(double *gs, double *d1gs, double *d2gs, double *d12gs)\n{\n  // calculate the bicubic interpolation coefficients c_ij\n\n  static int wt[16][16] =\n    { {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},\n      {-3, 0, 0, 3, 0, 0, 0, 0,-2, 0, 0,-1, 0, 0, 0, 0},\n      {2, 0, 0,-2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},\n      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},\n      {0, 0, 0, 0,-3, 0, 0, 3, 0, 0, 0, 0,-2, 0, 0,-1},\n      {0, 0, 0, 0, 2, 0, 0,-2, 0, 0, 0, 0, 1, 0, 0, 1},\n      {-3, 3, 0, 0,-2,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      {0, 0, 0, 0, 0, 0, 0, 0,-3, 3, 0, 0,-2,-1, 0, 0},\n      {9,-9, 9,-9, 6, 3,-3,-6, 6,-6,-3, 3, 4, 2, 1, 2},\n      {-6, 6,-6, 6,-4,-2, 2, 4,-3, 3, 3,-3,-2,-1,-1,-2},\n      {2,-2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n      {0, 0, 0, 0, 0, 0, 0, 0, 2,-2, 0, 0, 1, 1, 0, 0},\n      {-6, 6,-6, 6,-3,-3, 3, 3,-4, 4, 2,-2,-2,-2,-1,-1},\n      {4,-4, 4,-4, 2, 2,-2,-2, 2,-2,-2, 2, 1, 1, 1, 1}\n    };\n\n  int i, j, k, in;\n  double xx, x[16];\n\n  for (i = 0; i < 4; i++) {\n    x[i] = gs[i];\n    x[i+4] = d1gs[i]*CMAPDX;\n    x[i+8] = d2gs[i]*CMAPDX;\n    x[i+12] = d12gs[i]*CMAPDX*CMAPDX;\n  }\n\n  in = 0;\n  for (i = 0; i < 4; i++) {\n    for (j = 0; j < 4; j++) {\n      xx = 0.0;\n      for (k = 0; k < 16; k++) xx += wt[in][k]*x[k];\n      in++;\n      cij[i][j] = xx;\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid FixCMAP::bc_interpol(double x1, double x2, int low1, int low2, double *gs,\n                           double *d1gs, double *d2gs, double *d12gs)\n{\n  // for a given point of interest and its corresponding grid square values,\n  //   gradients and cross-derivatives\n  // calculate the interpolated value of the point of interest (POI)\n\n  int i;\n  double t, u, gs1l, gs2l;\n\n  // set the interpolation coefficients\n\n  bc_coeff(gs,d1gs,d2gs,d12gs);\n\n  gs1l = g_axis[low1];\n  gs2l = g_axis[low2];\n\n  t = (x1-gs1l)/CMAPDX;\n  u = (x2-gs2l)/CMAPDX;\n\n  E = dEdPhi = dEdPsi = 0.0;\n\n  for (i = 3; i >= 0; i--) {\n    E = t*E + ((cij[i][3]*u+cij[i][2])*u+cij[i][1])*u+cij[i][0];\n    dEdPhi = u*dEdPhi + (3.0*cij[3][i]*t+2.0*cij[2][i])*t+cij[1][i];\n    dEdPsi = t*dEdPsi + (3.0*cij[i][3]*u+2.0*cij[i][2])*u+cij[i][1];\n  }\n\n  dEdPhi *= (180.0/MY_PI/CMAPDX);\n  dEdPsi *= (180.0/MY_PI/CMAPDX);\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// methods to read and write data file\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\nvoid FixCMAP::read_data_header(char *line)\n{\n  if (strstr(line,\"crossterms\")) {\n    sscanf(line,BIGINT_FORMAT,&ncmap);\n  } else error->all(FLERR,\"Invalid read data header line for fix cmap\");\n\n  // didn't set in constructor b/c this fix could be defined\n  // before newton command\n\n  newton_bond = force->newton_bond;\n}\n\n/* ----------------------------------------------------------------------\n   unpack N lines in buf from section of data file labeled by keyword\n   id_offset is applied to atomID fields if multiple data files are read\n   store CMAP interactions as if newton_bond = OFF, even if actually ON\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::read_data_section(char *keyword, int n, char *buf,\n                                 tagint id_offset)\n{\n  int m,tmp,itype;\n  tagint atom1,atom2,atom3,atom4,atom5;\n  char *next;\n\n  next = strchr(buf,'\\n');\n  *next = '\\0';\n  int nwords = atom->count_words(buf);\n  *next = '\\n';\n\n  if (nwords != 7) {\n    char str[128];\n    sprintf(str,\"Incorrect %s format in data file\",keyword);\n    error->all(FLERR,str);\n  }\n\n  // loop over lines of CMAP crossterms\n  // tokenize the line into values\n  // add crossterm to one of my atoms, depending on newton_bond\n\n  for (int i = 0; i < n; i++) {\n    next = strchr(buf,'\\n');\n    *next = '\\0';\n    sscanf(buf,\"%d %d \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT\n           \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT,\n           &tmp,&itype,&atom1,&atom2,&atom3,&atom4,&atom5);\n\n    atom1 += id_offset;\n    atom2 += id_offset;\n    atom3 += id_offset;\n    atom4 += id_offset;\n    atom5 += id_offset;\n\n    if ((m = atom->map(atom1)) >= 0) {\n      if (num_crossterm[m] == CMAPMAX)\n        error->one(FLERR,\"Too many CMAP crossterms for one atom\");\n      crossterm_type[m][num_crossterm[m]] = itype;\n      crossterm_atom1[m][num_crossterm[m]] = atom1;\n      crossterm_atom2[m][num_crossterm[m]] = atom2;\n      crossterm_atom3[m][num_crossterm[m]] = atom3;\n      crossterm_atom4[m][num_crossterm[m]] = atom4;\n      crossterm_atom5[m][num_crossterm[m]] = atom5;\n      num_crossterm[m]++;\n    }\n\n    if ((m = atom->map(atom2)) >= 0) {\n      if (num_crossterm[m] == CMAPMAX)\n        error->one(FLERR,\"Too many CMAP crossterms for one atom\");\n      crossterm_type[m][num_crossterm[m]] = itype;\n      crossterm_atom1[m][num_crossterm[m]] = atom1;\n      crossterm_atom2[m][num_crossterm[m]] = atom2;\n      crossterm_atom3[m][num_crossterm[m]] = atom3;\n      crossterm_atom4[m][num_crossterm[m]] = atom4;\n      crossterm_atom5[m][num_crossterm[m]] = atom5;\n      num_crossterm[m]++;\n    }\n\n    if ((m = atom->map(atom3)) >= 0) {\n      if (num_crossterm[m] == CMAPMAX)\n        error->one(FLERR,\"Too many CMAP crossterms for one atom\");\n      crossterm_type[m][num_crossterm[m]] = itype;\n      crossterm_atom1[m][num_crossterm[m]] = atom1;\n      crossterm_atom2[m][num_crossterm[m]] = atom2;\n      crossterm_atom3[m][num_crossterm[m]] = atom3;\n      crossterm_atom4[m][num_crossterm[m]] = atom4;\n      crossterm_atom5[m][num_crossterm[m]] = atom5;\n      num_crossterm[m]++;\n    }\n\n    if ((m = atom->map(atom4)) >= 0) {\n      if (num_crossterm[m] == CMAPMAX)\n        error->one(FLERR,\"Too many CMAP crossterms for one atom\");\n      crossterm_type[m][num_crossterm[m]] = itype;\n      crossterm_atom1[m][num_crossterm[m]] = atom1;\n      crossterm_atom2[m][num_crossterm[m]] = atom2;\n      crossterm_atom3[m][num_crossterm[m]] = atom3;\n      crossterm_atom4[m][num_crossterm[m]] = atom4;\n      crossterm_atom5[m][num_crossterm[m]] = atom5;\n      num_crossterm[m]++;\n    }\n\n    if ((m = atom->map(atom5)) >= 0) {\n      if (num_crossterm[m] == CMAPMAX)\n        error->one(FLERR,\"Too many CMAP crossterms for one atom\");\n      crossterm_type[m][num_crossterm[m]] = itype;\n      crossterm_atom1[m][num_crossterm[m]] = atom1;\n      crossterm_atom2[m][num_crossterm[m]] = atom2;\n      crossterm_atom3[m][num_crossterm[m]] = atom3;\n      crossterm_atom4[m][num_crossterm[m]] = atom4;\n      crossterm_atom5[m][num_crossterm[m]] = atom5;\n      num_crossterm[m]++;\n    }\n\n    buf = next + 1;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nbigint FixCMAP::read_data_skip_lines(char *keyword)\n{\n  return ncmap;\n}\n\n/* ----------------------------------------------------------------------\n   write Mth header line to file\n   only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::write_data_header(FILE *fp, int mth)\n{\n  fprintf(fp,BIGINT_FORMAT \" cmap crossterms\\n\",ncmap);\n}\n\n/* ----------------------------------------------------------------------\n   return size I own for Mth data section\n   # of data sections = 1 for this fix\n   nx = # of crossterms owned by my local atoms\n     if newton_bond off, atom only owns crossterm if it is atom3\n   ny = columns = type + 5 atom IDs\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::write_data_section_size(int mth, int &nx, int &ny)\n{\n  int i,m;\n\n  tagint *tag = atom->tag;\n  int nlocal = atom->nlocal;\n\n  nx = 0;\n  for (i = 0; i < nlocal; i++)\n    for (m = 0; m < num_crossterm[i]; m++)\n      if (crossterm_atom3[i][m] == tag[i]) nx++;\n\n  ny = 6;\n}\n\n/* ----------------------------------------------------------------------\n   pack values for Mth data section into 2d buf\n   buf allocated by caller as owned crossterms by 6\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::write_data_section_pack(int mth, double **buf)\n{\n  int i,m;\n\n  // 1st column = CMAP type\n  // 2nd-6th columns = 5 atom IDs\n\n  tagint *tag = atom->tag;\n  int nlocal = atom->nlocal;\n\n  int n = 0;\n  for (i = 0; i < nlocal; i++) {\n    for (m = 0; m < num_crossterm[i]; m++) {\n      if (crossterm_atom3[i][m] != tag[i]) continue;\n      buf[n][0] = ubuf(crossterm_type[i][m]).d;\n      buf[n][1] = ubuf(crossterm_atom1[i][m]).d;\n      buf[n][2] = ubuf(crossterm_atom2[i][m]).d;\n      buf[n][3] = ubuf(crossterm_atom3[i][m]).d;\n      buf[n][4] = ubuf(crossterm_atom4[i][m]).d;\n      buf[n][5] = ubuf(crossterm_atom5[i][m]).d;\n      n++;\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   write section keyword for Mth data section to file\n   use Molecules or Charges if that is only field, else use fix ID\n   only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::write_data_section_keyword(int mth, FILE *fp)\n{\n  fprintf(fp,\"\\nCMAP\\n\\n\");\n}\n\n/* ----------------------------------------------------------------------\n   write N lines from buf to file\n   convert buf fields to int or double depending on styles\n   index can be used to prepend global numbering\n   only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::write_data_section(int mth, FILE *fp,\n                                  int n, double **buf, int index)\n{\n  for (int i = 0; i < n; i++)\n    fprintf(fp,\"%d %d \" TAGINT_FORMAT \" \" TAGINT_FORMAT\n            \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \" \" TAGINT_FORMAT \"\\n\",\n            index+i,(int) ubuf(buf[i][0]).i,(tagint) ubuf(buf[i][1]).i,\n            (tagint) ubuf(buf[i][2]).i,(tagint) ubuf(buf[i][3]).i,\n            (tagint) ubuf(buf[i][4]).i,(tagint) ubuf(buf[i][5]).i);\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n// methods for restart and communication\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n/* ----------------------------------------------------------------------\n   pack entire state of Fix into one write\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::write_restart(FILE *fp)\n{\n  if (comm->me == 0) {\n    int size = sizeof(bigint);\n    fwrite(&size,sizeof(int),1,fp);\n    fwrite(&ncmap,sizeof(bigint),1,fp);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   use state info from restart file to restart the Fix\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::restart(char *buf)\n{\n  ncmap = *((bigint *) buf);\n}\n\n/* ----------------------------------------------------------------------\n   pack values in local atom-based arrays for restart file\n------------------------------------------------------------------------- */\n\nint FixCMAP::pack_restart(int i, double *buf)\n{\n  int n = 1;\n  for (int m = 0; m < num_crossterm[i]; m++) {\n    buf[n++] = ubuf(MAX(crossterm_type[i][m],-crossterm_type[i][m])).d;\n    buf[n++] = ubuf(crossterm_atom1[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom2[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom3[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom4[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom5[i][m]).d;\n  }\n  buf[0] = n;\n\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   unpack values from atom->extra array to restart the fix\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::unpack_restart(int nlocal, int nth)\n{\n  double **extra = atom->extra;\n\n  // skip to Nth set of extra values\n\n   int n = 0;\n   for (int i = 0; i < nth; i++) n += static_cast<int> (extra[nlocal][n]);\n\n   int count = static_cast<int> (extra[nlocal][n++]);\n   num_crossterm[nlocal] = (count-1)/6;\n\n   for (int m = 0; m < num_crossterm[nlocal]; m++) {\n     crossterm_type[nlocal][m] = (int) ubuf(extra[nlocal][n++]).i;\n     crossterm_atom1[nlocal][m] = (tagint) ubuf(extra[nlocal][n++]).i;\n     crossterm_atom2[nlocal][m] = (tagint) ubuf(extra[nlocal][n++]).i;\n     crossterm_atom3[nlocal][m] = (tagint) ubuf(extra[nlocal][n++]).i;\n     crossterm_atom4[nlocal][m] = (tagint) ubuf(extra[nlocal][n++]).i;\n     crossterm_atom5[nlocal][m] = (tagint) ubuf(extra[nlocal][n++]).i;\n   }\n}\n\n/* ----------------------------------------------------------------------\n   maxsize of any atom's restart data\n------------------------------------------------------------------------- */\n\nint FixCMAP::maxsize_restart()\n{\n  return 1 + CMAPMAX*6;\n}\n\n/* ----------------------------------------------------------------------\n   size of atom nlocal's restart data\n------------------------------------------------------------------------- */\n\nint FixCMAP::size_restart(int nlocal)\n{\n  return 1 + num_crossterm[nlocal]*6;\n}\n\n/* ----------------------------------------------------------------------\n   allocate atom-based array\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::grow_arrays(int nmax)\n{\n  num_crossterm = memory->grow(num_crossterm,nmax,\"cmap:num_crossterm\");\n  crossterm_type = memory->grow(crossterm_type,nmax,CMAPMAX,\n                                \"cmap:crossterm_type\");\n  crossterm_atom1 = memory->grow(crossterm_atom1,nmax,CMAPMAX,\n                                 \"cmap:crossterm_atom1\");\n  crossterm_atom2 = memory->grow(crossterm_atom2,nmax,CMAPMAX,\n                                 \"cmap:crossterm_atom2\");\n  crossterm_atom3 = memory->grow(crossterm_atom3,nmax,CMAPMAX,\n                                 \"cmap:crossterm_atom3\");\n  crossterm_atom4 = memory->grow(crossterm_atom4,nmax,CMAPMAX,\n                                 \"cmap:crossterm_atom4\");\n  crossterm_atom5 = memory->grow(crossterm_atom5,nmax,CMAPMAX,\n                                 \"cmap:crossterm_atom5\");\n\n  // must initialize num_crossterm to 0 for added atoms\n  // may never be set for some atoms when data file is read\n\n  for (int i = nmax_previous; i < nmax; i++) num_crossterm[i] = 0;\n  nmax_previous = nmax;\n}\n\n/* ----------------------------------------------------------------------\n   copy values within local atom-based array\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::copy_arrays(int i, int j, int delflag)\n{\n  num_crossterm[j] = num_crossterm[i];\n\n  for (int k = 0; k < num_crossterm[j]; k++){\n    crossterm_type[j][k] = crossterm_type[i][k];\n    crossterm_atom1[j][k] = crossterm_atom1[i][k];\n    crossterm_atom2[j][k] = crossterm_atom2[i][k];\n    crossterm_atom3[j][k] = crossterm_atom3[i][k];\n    crossterm_atom4[j][k] = crossterm_atom4[i][k];\n    crossterm_atom5[j][k] = crossterm_atom5[i][k];\n  }\n}\n\n/* ----------------------------------------------------------------------\n   initialize one atom's array values, called when atom is created\n------------------------------------------------------------------------- */\n\nvoid FixCMAP::set_arrays(int i)\n{\n  num_crossterm[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   pack values in local atom-based array for exchange with another proc\n------------------------------------------------------------------------- */\n\nint FixCMAP::pack_exchange(int i, double *buf)\n{\n  int n = 0;\n  buf[n++] = ubuf(num_crossterm[i]).d;\n  for (int m = 0; m < num_crossterm[i]; m++) {\n    buf[n++] = ubuf(crossterm_type[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom1[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom2[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom3[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom4[i][m]).d;\n    buf[n++] = ubuf(crossterm_atom5[i][m]).d;\n  }\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   unpack values in local atom-based array from exchange with another proc\n------------------------------------------------------------------------- */\n\nint FixCMAP::unpack_exchange(int nlocal, double *buf)\n{\n  int n = 0;\n  num_crossterm[nlocal] = (int) ubuf(buf[n++]).i;\n  for (int m = 0; m < num_crossterm[nlocal]; m++) {\n    crossterm_type[nlocal][m] = (int) ubuf(buf[n++]).i;\n    crossterm_atom1[nlocal][m] = (tagint) ubuf(buf[n++]).i;\n    crossterm_atom2[nlocal][m] = (tagint) ubuf(buf[n++]).i;\n    crossterm_atom3[nlocal][m] = (tagint) ubuf(buf[n++]).i;\n    crossterm_atom4[nlocal][m] = (tagint) ubuf(buf[n++]).i;\n    crossterm_atom5[nlocal][m] = (tagint) ubuf(buf[n++]).i;\n  }\n  return n;\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble FixCMAP::memory_usage()\n{\n  int nmax = atom->nmax;\n  double bytes = nmax * sizeof(int);        // num_crossterm\n  bytes += nmax*CMAPMAX * sizeof(int);      // crossterm_type\n  bytes += 5*nmax*CMAPMAX * sizeof(int);    // crossterm_atom 12345\n  bytes += maxcrossterm*6 * sizeof(int);    // crosstermlist\n  return bytes;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Tzu-Ray Shan (U Florida, present: tnshan@sandia.gov)\n   LAMMPS implementation of the Charge-optimized many-body (COMB) potential\n   based on the HELL MD program (Prof Simon Phillpot, UF, sphil@mse.ufl.edu)\n   and Aidan Thompson's Tersoff code in LAMMPS\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_comb.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"neigh_request.h\"\n#include \"group.h\"\n#include \"update.h\"\n#include \"my_page.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define MAXLINE 1024\n#define DELTA 4\n#define PGDELTA 1\n#define MAXNEIGH 24\n\n/* ---------------------------------------------------------------------- */\n\nPairComb::PairComb(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  nmax = 0;\n  NCo = NULL;\n  bbij = NULL;\n  map = NULL;\n  esm = NULL;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = 0;\n  maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n\n  intype = NULL;\n  fafb = NULL;\n  dfafb = NULL;\n  ddfafb = NULL;\n  phin = NULL;\n  dphin = NULL;\n  erpaw = NULL;\n\n  sht_num = NULL;\n  sht_first = NULL;\n\n  ipage = NULL;\n  pgsize = oneatom = 0;\n\n  // set comm size needed by this Pair\n\n  comm_forward = 1;\n  comm_reverse = 1;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairComb::~PairComb()\n{\n  memory->destroy(NCo);\n\n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n\n  delete [] elements;\n  memory->sfree(params);\n  memory->destroy(elem2param);\n\n  memory->destroy(intype);\n  memory->destroy(fafb);\n  memory->destroy(dfafb);\n  memory->destroy(ddfafb);\n  memory->destroy(phin);\n  memory->destroy(dphin);\n  memory->destroy(erpaw);\n  memory->destroy(bbij);\n  memory->destroy(sht_num);\n  memory->sfree(sht_first);\n\n  delete [] ipage;\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n    delete [] esm;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum,iparam_i;\n  int itype,jtype,ktype,iparam_ij,iparam_ijk;\n  tagint itag,jtag;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2;\n  double delr1[3],delr2[3],fi[3],fj[3],fk[3];\n  double zeta_ij,prefactor;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  int mr1,mr2,mr3;\n  int rsc,inty;\n  double elp_ij,filp[3],fjlp[3],fklp[3];\n  double iq,jq;\n  double yaself;\n  double potal,fac11,fac11e;\n  double vionij,fvionij,sr1,sr2,sr3,Eov,Fov;\n  int sht_jnum, *sht_jlist, nj;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = vflag_atom = 0;\n\n  // Build short range neighbor list\n\n  Short_neigh();\n\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  yaself = vionij = fvionij = Eov = Fov = 0.0;\n\n  // self energy correction term: potal\n\n  potal_calc(potal,fac11,fac11e);\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    iq = q[i];\n    NCo[i] = 0;\n    nj = 0;\n    iparam_i = elem2param[itype][itype][itype];\n\n    // self energy, only on i atom\n\n    yaself = self(&params[iparam_i],iq,potal);\n\n    if (evflag) ev_tally(i,i,nlocal,0,yaself,0.0,0.0,0.0,0.0,0.0);\n\n    // two-body interactions (long and short repulsive)\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    sht_jlist = sht_first[i];\n    sht_jnum = sht_num[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n      jtag = tag[j];\n\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < x[i][2]) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      // Qj calculates 2-body Coulombic\n\n      jtype = map[type[j]];\n      jq = q[j];\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      iparam_ij = elem2param[itype][jtype][jtype];\n\n      // long range q-dependent\n\n      if (rsq > params[iparam_ij].lcutsq) continue;\n\n      inty = intype[itype][jtype];\n\n      // polynomial three-point interpolation\n\n      tri_point(rsq, mr1, mr2, mr3, sr1, sr2, sr3, itype);\n\n      // 1/r energy and forces\n\n      direct(inty,mr1,mr2,mr3,rsq,sr1,sr2,sr3,iq,jq,\n             potal,fac11,fac11e,vionij,fvionij);\n\n      // field correction to self energy\n\n      field(&params[iparam_ij],rsq,iq,jq,vionij,fvionij);\n\n      // polarization field\n      // sums up long range forces\n\n      f[i][0] += delx*fvionij;\n      f[i][1] += dely*fvionij;\n      f[i][2] += delz*fvionij;\n      f[j][0] -= delx*fvionij;\n      f[j][1] -= dely*fvionij;\n      f[j][2] -= delz*fvionij;\n\n      if (evflag)\n        ev_tally(i,j,nlocal,newton_pair,0.0,vionij,fvionij,delx,dely,delz);\n\n      // short range q-independent\n\n      if (rsq > params[iparam_ij].cutsq) continue;\n\n      repulsive(&params[iparam_ij],rsq,fpair,eflag,evdwl,iq,jq);\n\n      // repulsion is pure two-body, sums up pair repulsive forces\n\n      f[i][0] += delx*fpair;\n      f[i][1] += dely*fpair;\n      f[i][2] += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag)\n        ev_tally(i,j,nlocal,newton_pair,evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    // accumulate coordination number information\n\n    if (cor_flag) {\n      for (jj = 0; jj < sht_jnum; jj++) {\n        j = sht_jlist[jj];\n        jtype = map[type[j]];\n        iparam_ij = elem2param[itype][jtype][jtype];\n\n        if(params[iparam_ij].hfocor > 0.0 ) {\n          delr1[0] = x[j][0] - xtmp;\n          delr1[1] = x[j][1] - ytmp;\n          delr1[2] = x[j][2] - ztmp;\n          rsq1 = vec3_dot(delr1,delr1);\n\n          if (rsq1 > params[iparam_ij].cutsq) continue;\n          NCo[i] += 1;\n        }\n      }\n    }\n\n    // three-body interactions\n    // half i-j loop\n\n    for (jj = 0; jj < sht_jnum; jj++) {\n      j = sht_jlist[jj];\n\n      jtype = map[type[j]];\n      iparam_ij = elem2param[itype][jtype][jtype];\n\n      // this Qj for q-dependent BSi\n\n      jq = q[j];\n\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = vec3_dot(delr1,delr1);\n\n      if (rsq1 > params[iparam_ij].cutsq) continue;\n      nj ++;\n\n      // accumulate bondorder zeta for each i-j interaction via loop over k\n\n      zeta_ij = 0.0;\n      cuo_flag1 = 0; cuo_flag2 = 0;\n\n      for (kk = 0; kk < sht_jnum; kk++) {\n        k = sht_jlist[kk];\n        if (j == k) continue;\n        ktype = map[type[k]];\n        iparam_ijk = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = vec3_dot(delr2,delr2);\n\n        if (rsq2 > params[iparam_ijk].cutsq) continue;\n\n        zeta_ij += zeta(&params[iparam_ijk],rsq1,rsq2,delr1,delr2);\n\n        if (params[iparam_ijk].hfocor == -2.0) cuo_flag1 = 1;\n        if (params[iparam_ijk].hfocor == -1.0) cuo_flag2 = 1;\n      }\n\n      if (cuo_flag1 && cuo_flag2) cuo_flag = 1;\n      else cuo_flag = 0;\n\n      force_zeta(&params[iparam_ij],eflag,i,nj,rsq1,zeta_ij,\n                 iq,jq,fpair,prefactor,evdwl);\n\n      // over-coordination correction for HfO2\n\n      if (cor_flag && NCo[i] != 0)\n        Over_cor(&params[iparam_ij],rsq1,NCo[i],Eov, Fov);\n      evdwl +=  Eov;\n      fpair +=  Fov;\n\n      f[i][0] += delr1[0]*fpair;\n      f[i][1] += delr1[1]*fpair;\n      f[i][2] += delr1[2]*fpair;\n      f[j][0] -= delr1[0]*fpair;\n      f[j][1] -= delr1[1]*fpair;\n      f[j][2] -= delr1[2]*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                           evdwl,0.0,-fpair,-delr1[0],-delr1[1],-delr1[2]);\n\n      // attractive term via loop over k (3-body forces)\n\n      for (kk = 0; kk < sht_jnum; kk++) {\n        k = sht_jlist[kk];\n        if (j == k) continue;\n        ktype = map[type[k]];\n        iparam_ijk = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = vec3_dot(delr2,delr2);\n        if (rsq2 > params[iparam_ijk].cutsq) continue;\n\n        for (rsc = 0; rsc < 3; rsc++)\n          fi[rsc] = fj[rsc] = fk[rsc] = 0.0;\n\n        attractive(&params[iparam_ijk],prefactor,\n                   rsq1,rsq2,delr1,delr2,fi,fj,fk);\n\n        // 3-body LP and BB correction and forces\n\n        elp_ij = elp(&params[iparam_ijk],rsq1,rsq2,delr1,delr2);\n        flp(&params[iparam_ijk],rsq1,rsq2,delr1,delr2,filp,fjlp,fklp);\n\n        for (rsc = 0; rsc < 3; rsc++) {\n          fi[rsc] += filp[rsc];\n          fj[rsc] += fjlp[rsc];\n          fk[rsc] += fklp[rsc];\n        }\n\n        for (rsc = 0; rsc < 3; rsc++) {\n          f[i][rsc] += fi[rsc];\n          f[j][rsc] += fj[rsc];\n          f[k][rsc] += fk[rsc];\n        }\n\n        if (evflag)\n          ev_tally(i,j,nlocal,newton_pair,elp_ij,0.0,0.0,0.0,0.0,0.0);\n        if (vflag_atom) v_tally3(i,j,k,fj,fk,delr1,delr2);\n\n      }\n    }\n\n    if (cuo_flag) params[iparam_i].cutsq *= 0.65;\n  }\n\n  cuo_flag = 0;\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::allocate()\n{\n allocated = 1;\n int n = atom->ntypes;\n\n memory->create(setflag,n+1,n+1,\"pair:setflag\");\n memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n map = new int[n+1];\n esm = new double[n];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairComb::settings(int narg, char **arg)\n{\n  if (narg > 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairComb::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  n = atom->ntypes;\n\n  // generate streitz-mintmire direct 1/r energy look-up table\n\n  if (comm->me == 0 && screen) fprintf(screen,\"Pair COMB:\\n\");\n  if (comm->me == 0 && screen)\n    fprintf(screen,\"  generating Coulomb integral lookup table ...\\n\");\n  sm_table();\n\n  if (cor_flag && comm->me == 0 && screen)\n    fprintf(screen,\"  will apply over-coordination correction ...\\n\");\n  if (!cor_flag&& comm->me == 0 && screen)\n    fprintf(screen,\"  will not apply over-coordination correction ...\\n\");\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairComb::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style COMB requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style COMB requires newton pair on\");\n  if (!atom->q_flag)\n    error->all(FLERR,\"Pair style COMB requires atom attribute q\");\n\n  // ptr to QEQ fix\n\n  //for (i = 0; i < modify->nfix; i++)\n  //  if (strcmp(modify->fix[i]->style,\"qeq\") == 0) break;\n  //if (i < modify->nfix) fixqeq = (FixQEQ *) modify->fix[i];\n  //else fixqeq = NULL;\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this,instance_me);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n\n  // local Comb neighbor list\n  // create pages if first time or if neighbor pgsize/oneatom has changed\n\n  int create = 0;\n  if (ipage == NULL) create = 1;\n  if (pgsize != neighbor->pgsize) create = 1;\n  if (oneatom != neighbor->oneatom) create = 1;\n\n  if (create) {\n    delete [] ipage;\n    pgsize = neighbor->pgsize;\n    oneatom = neighbor->oneatom;\n\n    int nmypage = comm->nthreads;\n    ipage = new MyPage<int>[nmypage];\n    for (int i = 0; i < nmypage; i++)\n      ipage[i].init(oneatom,pgsize);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairComb::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::read_file(char *file)\n{\n  int params_per_line = 49;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = 0;\n  maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open COMB potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each line out of file, skipping blank lines or leading '#'\n  // store line of params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in COMB potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next line\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].powerm = atof(words[3]);\n    params[nparams].c = atof(words[4]);\n    params[nparams].d = atof(words[5]);\n    params[nparams].h = atof(words[6]);\n    params[nparams].powern = atof(words[7]);\n    params[nparams].beta = atof(words[8]);\n    params[nparams].lam21 = atof(words[9]);\n    params[nparams].lam22 = atof(words[10]);\n    params[nparams].bigb1 = atof(words[11]);\n    params[nparams].bigb2 = atof(words[12]);\n    params[nparams].bigr = atof(words[13]);\n    params[nparams].bigd = atof(words[14]);\n    params[nparams].lam11 = atof(words[15]);\n    params[nparams].lam12 = atof(words[16]);\n    params[nparams].biga1 = atof(words[17]);\n    params[nparams].biga2 = atof(words[18]);\n    params[nparams].plp1 = atof(words[19]);\n    params[nparams].plp3 = atof(words[20]);\n    params[nparams].plp6 = atof(words[21]);\n    params[nparams].a123 = atof(words[22]);\n    params[nparams].aconf= atof(words[23]);\n    params[nparams].addrep = atof(words[24]);\n    params[nparams].romigb = atof(words[25]);\n    params[nparams].romigc = atof(words[26]);\n    params[nparams].romigd = atof(words[27]);\n    params[nparams].romiga = atof(words[28]);\n    params[nparams].QL1 = atof(words[29]);\n    params[nparams].QU1 = atof(words[30]);\n    params[nparams].DL1 = atof(words[31]);\n    params[nparams].DU1 = atof(words[32]);\n    params[nparams].QL2 = atof(words[33]);\n    params[nparams].QU2 = atof(words[34]);\n    params[nparams].DL2 = atof(words[35]);\n    params[nparams].DU2 = atof(words[36]);\n    params[nparams].chi = atof(words[37]);\n    params[nparams].dj  = atof(words[38]);\n    params[nparams].dk  = atof(words[39]);\n    params[nparams].dl  = atof(words[40]);\n    params[nparams].dm  = atof(words[41]);\n    params[nparams].esm1 = atof(words[42]);\n    params[nparams].cmn1 = atof(words[43]);\n    params[nparams].cml1 = atof(words[44]);\n    params[nparams].cmn2 = atof(words[45]);\n    params[nparams].cml2 = atof(words[46]);\n    params[nparams].coulcut = atof(words[47]);\n    params[nparams].hfocor = atof(words[48]);\n\n    params[nparams].powermint = int(params[nparams].powerm);\n\n    // parameter sanity checks\n\n    if (params[nparams].lam11 < 0.0 || params[nparams].lam12 < 0.0 ||\n        params[nparams].c < 0.0 || params[nparams].d < 0.0 ||\n        params[nparams].powern < 0.0 || params[nparams].beta < 0.0 ||\n        params[nparams].lam21 < 0.0 || params[nparams].lam22 < 0.0 ||\n        params[nparams].bigb1< 0.0 || params[nparams].bigb2< 0.0 ||\n        params[nparams].biga1< 0.0 || params[nparams].biga2< 0.0 ||\n        params[nparams].bigr < 0.0 || params[nparams].bigd < 0.0 ||\n        params[nparams].bigd > params[nparams].bigr ||\n        params[nparams].powerm - params[nparams].powermint != 0.0 ||\n        (params[nparams].powermint != 3 && params[nparams].powermint != 1) ||\n        params[nparams].plp1 < 0.0 || params[nparams].plp3 < 0.0 ||\n        params[nparams].plp6 < 0.0  ||\n        params[nparams].a123 > 360.0 || params[nparams].aconf < 0.0 ||\n        params[nparams].addrep < 0.0 || params[nparams].romigb < 0.0 ||\n        params[nparams].romigc < 0.0 || params[nparams].romigd < 0.0 ||\n        params[nparams].romiga < 0.0 ||\n        params[nparams].QL1 > 0.0 || params[nparams].QU1 < 0.0 ||\n        params[nparams].DL1 < 0.0 || params[nparams].DU1 > 0.0 ||\n        params[nparams].QL2 > 0.0 || params[nparams].QU2 < 0.0 ||\n        params[nparams].DL2 < 0.0 || params[nparams].DU2 > 0.0 ||\n        params[nparams].chi < 0.0 ||\n//        params[nparams].dj < 0.0 || params[nparams].dk < 0.0 ||\n//        params[nparams].dl < 0.0 || params[nparams].dm < 0.0 ||\n        params[nparams].esm1 < 0.0)\n      error->all(FLERR,\"Illegal COMB parameter\");\n\n    if (params[nparams].lam11 < params[nparams].lam21 ||\n        params[nparams].lam12 < params[nparams].lam22 ||\n        params[nparams].biga1< params[nparams].bigb1 ||\n        params[nparams].biga2< params[nparams].bigb2)\n      error->all(FLERR,\"Illegal COMB parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::setup_params()\n{\n  int i,j,k,m,n;\n\n  // set elem2param for all element triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n        n = -1;\n        for (m = 0; m < nparams; m++) {\n          if (i == params[m].ielement && j == params[m].jelement &&\n              k == params[m].kelement) {\n            if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n            n = m;\n          }\n        }\n        if (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n        elem2param[i][j][k] = n;\n      }\n\n  // compute parameter values derived from inputs\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cut = params[m].bigr + params[m].bigd;\n    params[m].cutsq = params[m].cut*params[m].cut;\n    params[m].c1 = pow(2.0*params[m].powern*1.0e-16,-1.0/params[m].powern);\n    params[m].c2 = pow(2.0*params[m].powern*1.0e-8,-1.0/params[m].powern);\n    params[m].c3 = 1.0/params[m].c2;\n    params[m].c4 = 1.0/params[m].c1;\n    params[m].rlm1 = 0.5*(params[m].lam11+params[m].lam12)*params[m].romigc;\n    params[m].rlm2 = 0.5*(params[m].lam21+params[m].lam22)*params[m].romigd;\n\n    params[m].Qo1 = (params[m].QU1+params[m].QL1)/2.0; // (A22)\n    params[m].dQ1 = (params[m].QU1-params[m].QL1)/2.0; // (A21)\n    params[m].aB1 = 1.0 /\n      (1.0-pow(fabs(params[m].Qo1/params[m].dQ1),10.0)); // (A20)\n    params[m].bB1 = pow(fabs(params[m].aB1),0.1)/params[m].dQ1; // (A19)\n    params[m].nD1 = log(params[m].DU1/(params[m].DU1-params[m].DL1))/\n                    log(params[m].QU1/(params[m].QU1-params[m].QL1));\n    params[m].bD1 = (pow((params[m].DL1-params[m].DU1),(1.0/params[m].nD1)))/\n                    (params[m].QU1-params[m].QL1);\n\n    params[m].Qo2 = (params[m].QU2+params[m].QL2)/2.0; // (A22)\n    params[m].dQ2 = (params[m].QU2-params[m].QL2)/2.0; // (A21)\n    params[m].aB2 = 1.0 /\n      (1.0-pow(fabs(params[m].Qo2/params[m].dQ2),10.0)); // (A20)\n    params[m].bB2 = pow(fabs(params[m].aB2),0.1)/params[m].dQ2; // (A19)\n    params[m].nD2 = log(params[m].DU2/(params[m].DU2-params[m].DL2))/\n                    log(params[m].QU2/(params[m].QU2-params[m].QL2));\n    params[m].bD2 = (pow((params[m].DL2-params[m].DU2),(1.0/params[m].nD2)))/\n                    (params[m].QU2-params[m].QL2);\n\n    params[m].lcut = params[m].coulcut;\n    params[m].lcutsq = params[m].lcut*params[m].lcut;\n\n    params[m].gamma = 1.0;        // for the change in pair_comb.h\n  }\n\n  // set cutmax to max of all params\n\n  cutmax = cutmin = 0.0;\n  cor_flag = 0;\n  for (m = 0; m < nparams; m++) {\n    if (params[m].cut > cutmax) cutmax = params[m].cut;\n    if (params[m].lcut > cutmax) cutmax = params[m].lcut;\n    if (params[m].cutsq > cutmin) cutmin = params[m].cutsq+0.2;\n    if (params[m].hfocor > 0.0001) cor_flag = 1;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::repulsive(Param *param, double rsq, double &fforce,\n                    int eflag, double &eng, double iq, double jq)\n{\n  double r,tmp_fc,tmp_fc_d,tmp_exp,Di,Dj;\n  double bigA,Asi,Asj,vrcs,fvrcs,fforce_tmp;\n  double rslp,rslp2,rslp4,arr1,arr2,fc2j,fc3j,fcp2j,fcp3j;\n\n  double romi = param->addrep;\n  double rrcs = param->bigr + param->bigd;\n\n  r = sqrt(rsq);\n  if (r > rrcs) return ;\n\n  tmp_fc = comb_fc(r,param);\n  tmp_fc_d = comb_fc_d(r,param);\n  tmp_exp = exp(-param->rlm1 * r);\n\n  arr1 = 2.22850; arr2 = 1.89350;\n  fc2j = comb_fc2(r);\n  fc3j = comb_fc3(r);\n  fcp2j = comb_fc2_d(r);\n  fcp3j = comb_fc3_d(r);\n\n  Di = param->DU1 + pow(fabs(param->bD1*(param->QU1-iq)),param->nD1);\n  Dj = param->DU2 + pow(fabs(param->bD2*(param->QU2-jq)),param->nD2);\n  Asi = param->biga1 * exp(param->lam11*Di);\n  Asj = param->biga2 * exp(param->lam12*Dj);\n\n  if ( Asi > 0.0 && Asj > 0.0 )\n    bigA = sqrt(Asi*Asj)*param->romiga;\n  else\n    bigA = 0.0;\n\n  fforce = -bigA * tmp_exp * (tmp_fc_d - tmp_fc*param->rlm1) / r;\n\n  // additional repulsion for TiO2 and HfO2 (switch by cor_flag)\n\n  vrcs = 0.0; fvrcs = 0.0;\n  if (romi > 0.0) {\n    if (!cor_flag) {\n      vrcs = romi * pow((1.0-r/rrcs),2.0);\n      fvrcs= romi * 2.0 * (r/rrcs-1.0)/rrcs; }\n    else if (cor_flag) {\n      rslp = ((arr1-r)/(arr1-arr2));\n      rslp2 = rslp * rslp; rslp4 = rslp2 * rslp2;\n      vrcs = fc2j * fc3j * romi * ((50.0*rslp4-30.0*rslp2+4.50))/8.0;\n      fvrcs = fcp2j*fcp3j*romi*rslp*(-25.0*rslp2+7.50)/(arr1-arr2);\n    }\n    fforce_tmp = fforce*vrcs - (tmp_fc * bigA * tmp_exp * fvrcs);\n    fforce += fforce_tmp;\n  }\n\n  // eng = repulsive energy\n\n  if (eflag) eng = (tmp_fc * bigA * tmp_exp)*(1.0+vrcs);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::zeta(Param *param, double rsqij, double rsqik,\n                         double *delrij, double *delrik)\n{\n  double rij,rik,costheta,arg,ex_delr;\n\n  rij = sqrt(rsqij);\n  if (rij > param->bigr+param->bigd) return 0.0;\n  rik = sqrt(rsqik);\n  costheta = vec3_dot(delrij,delrik) / (rij*rik);\n\n  if (param->powermint == 3) arg = pow(param->rlm2 * (rij-rik),3.0);\n  else arg = param->rlm2 * (rij-rik);\n\n  if (arg > 69.0776) ex_delr = 1.e30;\n  else if (arg < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(arg);\n\n  return comb_fc(rik,param) * comb_gijk(costheta,param) * ex_delr;\n}\n\n/* ----------------------------------------------------------------------\n   Legendre polynomial bond angle correction to energy\n------------------------------------------------------------------------- */\n\ndouble PairComb::elp(Param *param, double rsqij, double rsqik,\n                     double *delrij, double *delrik)\n{\n  if (param->aconf > 1.0e-6 || param->plp1 > 1.0e-6 ||\n      param->plp3 > 1.0e-6 || param->plp6 > 1.0e-6) {\n    double rij,rik,costheta,lp1,lp3,lp6;\n    double rmu,rmu2,comtt,fcj,fck;\n    double pplp1 = param->plp1, pplp3 = param->plp3, pplp6 = param->plp6;\n    double c123 = cos(param->a123*MY_PI/180.0);\n\n    // cos(theta) of the i-j-k\n    // cutoff function of rik\n\n    rij = sqrt(rsqij);\n    rik = sqrt(rsqik);\n    costheta = vec3_dot(delrij,delrik) / (rij*rik);\n    fcj = comb_fc(rij,param);\n    fck = comb_fc(rik,param);\n    rmu = costheta;\n\n    // Legendre Polynomial functions\n\n    if (param->plp1 > 1.0e-6 || param->plp3 > 1.0e-6 || param->plp6 > 1.0e-6) {\n      rmu2 = rmu*rmu;\n      lp1 = rmu; lp3 = 0.5*(5.0*rmu2*rmu-3.0*rmu);\n      lp6 = (231.0*rmu2*rmu2*rmu2-315.0*rmu2*rmu2+105.0*rmu2-5.0)/16.0;\n      comtt = pplp1*lp1 + pplp3*lp3 + pplp6*lp6;\n    } else comtt = 0.0;\n\n    // bond-bending terms\n\n    if (param->aconf>1e-4) {\n      if (param->hfocor >= 0.0)\n        comtt += param->aconf *(rmu-c123)*(rmu-c123);\n      else if (param->hfocor < 0.0)\n        comtt += param->aconf *(4.0-(rmu-c123)*(rmu-c123));\n    }\n\n    return 0.5 * fcj * fck * comtt;\n  }\n\n  return 0.0;\n}\n\n/* ----------------------------------------------------------------------\n   Legendre polynomial bond angle correction to forces\n------------------------------------------------------------------------- */\n\nvoid PairComb::flp(Param *param, double rsqij, double rsqik,\n                   double *delrij, double *delrik, double *drilp,\n                   double *drjlp, double *drklp)\n{\n  double ffj1,ffj2,ffk1,ffk2;\n  ffj1 = 0.0; ffj2 = 0.0; ffk1 = 0.0; ffk2 = 0.0;\n\n  if (param->aconf > 1.0e-4 || param->plp1 > 1.0e-6 ||\n      param->plp3 > 1.0e-6 || param->plp6 > 1.0e-6) {\n    double rij,rik,costheta,lp1,lp1_d,lp3,lp3_d,lp6,lp6_d;\n    double rmu,rmu2,comtt,comtt_d,com4k,com5,fcj,fck,fck_d;\n\n    double pplp1 = param->plp1;\n    double pplp3 = param->plp3;\n    double pplp6 = param->plp6;\n    double c123 = cos(param->a123*MY_PI/180.0);\n\n    // fck_d = derivative of cutoff function\n\n    rij = sqrt(rsqij); rik = sqrt(rsqik);\n    costheta = vec3_dot(delrij,delrik) / (rij*rik);\n    fcj = comb_fc(rij,param);\n    fck = comb_fc(rik,param);\n    fck_d = comb_fc_d(rik,param);\n    rmu = costheta;\n\n    // Legendre Polynomial functions and derivatives\n\n    if (param->plp1 > 1.0e-6 || param->plp3 > 1.0e-6 || param->plp6 > 1.0e-6) {\n      rmu2 = rmu*rmu;\n      lp1 = rmu; lp3 = (2.5*rmu2*rmu-1.5*rmu);\n      lp6 = (231.0*rmu2*rmu2*rmu2-315.0*rmu2*rmu2+105.0*rmu2-5.0)/16.0;\n      lp1_d = 1.0;lp3_d = (7.5*rmu2-1.5);\n      lp6_d = (1386.0*rmu2*rmu2*rmu-1260.0*rmu2*rmu+210.0)/16.0;\n      comtt   = pplp1*lp1   + pplp3*lp3   + pplp6*lp6;\n      comtt_d = pplp1*lp1_d + pplp3*lp3_d + pplp6*lp6_d;\n    } else {\n      comtt = 0.0;\n      comtt_d = 0.0;\n    }\n\n    // bond-bending terms derivatives\n\n    if (param->aconf > 1.0e-4) {\n      if (param->hfocor >= 0.0) {\n        comtt += param->aconf *(rmu-c123)*(rmu-c123);\n        comtt_d += 2.0*param->aconf*(rmu-c123);\n      } else if (param->hfocor < 0.0) {\n        comtt += param->aconf *(4.0-(rmu-c123)*(rmu-c123));\n        comtt_d += -2.0*param->aconf*(rmu-c123);\n      }\n    }\n\n    com4k = 2.0 * fcj * fck_d * comtt;\n    com5 = fcj * fck * comtt_d;\n\n    ffj1 =-0.5*(com5/(rij*rik));\n    ffj2 = 0.5*(com5*rmu/rsqij);\n    ffk1 = ffj1;\n    ffk2 = 0.5*(-com4k/rik+com5*rmu/rsqik);\n\n  } else {\n    ffj1 = 0.0; ffj2 = 0.0;\n    ffk1 = 0.0; ffk2 = 0.0;\n  }\n\n  // j-atom\n\n  vec3_scale(ffj1,delrik,drjlp);             // (k,x[],y[]), y[]=k*x[]\n  vec3_scaleadd(ffj2,delrij,drjlp,drjlp);   // (k,x[],y[],z[]), z[]=k*x[]+y[]\n\n  // k-atom\n\n  vec3_scale(ffk1,delrij,drklp);\n  vec3_scaleadd(ffk2,delrik,drklp,drklp);\n\n  // i-atom\n\n  vec3_add(drjlp,drklp,drilp);                    // (x[],y[],z[]), z[]=x[]+y[]\n  vec3_scale(-1.0,drilp,drilp);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::force_zeta(Param *param, int eflag, int i, int j, double rsq,\n                double zeta_ij, double iq, double jq, double &fforce,\n                double &prefactor, double &eng)\n{\n  double r,fa,fa_d,bij;\n\n  r = sqrt(rsq);\n  if (r > param->bigr+param->bigd) return;\n  fa = comb_fa(r,param,iq,jq);\n  fa_d = comb_fa_d(r,param,iq,jq);\n  bij = comb_bij(zeta_ij,param);\n  bbij[i][j] = bij;\n\n  // force\n  fforce = 0.5*bij*fa_d / r;\n  prefactor = -0.5*fa * comb_bij_d(zeta_ij,param);\n\n  // eng = attractive energy\n  if (eflag) eng = 0.5*bij*fa;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fc(double r, Param *param)\n{\n  double comb_R = param->bigr;\n  double comb_D = param->bigd;\n\n  if (r < comb_R-comb_D) return 1.0;\n  if (r > comb_R+comb_D) return 0.0;\n  return 0.5*(1.0 - sin(MY_PI2*(r - comb_R)/comb_D));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fc_d(double r, Param *param)\n{\n  double comb_R = param->bigr;\n  double comb_D = param->bigd;\n\n  if (r < comb_R-comb_D) return 0.0;\n  if (r > comb_R+comb_D) return 0.0;\n  return -(MY_PI4/comb_D) * cos(MY_PI2*(r - comb_R)/comb_D);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fc2(double r)\n{\n  double comb_R = 1.89350;\n  double comb_D = comb_R + 0.050;\n\n  if (r < comb_R) return 0.0;\n  if (r > comb_D) return 1.0;\n  return 0.5*(1.0 + cos(MY_PI*(r - comb_R)/(comb_D-comb_R)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fc2_d(double r)\n{\n  double comb_R = 1.89350;\n  double comb_D = comb_R + 0.050;\n\n  if (r < comb_R) return 0.0;\n  if (r > comb_D) return 0.0;\n  return -(MY_PI2/(comb_D-comb_R)) * sin(MY_PI*(r - comb_R)/(comb_D-comb_R));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fc3(double r)\n{\n  double comb_R = 2.51350;\n  double comb_D = comb_R + 0.050;\n\n  if (r < comb_R) return 1.0;\n  if (r > comb_D) return 0.0;\n  return 0.5*(1.0 + cos(MY_PI*(r - comb_R)/(comb_D-comb_R)));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fc3_d(double r)\n{\n  double comb_R = 2.51350;\n  double comb_D = comb_R + 0.050;\n\n  if (r < comb_R) return 0.0;\n  if (r > comb_D) return 0.0;\n  return -(MY_PI2/(comb_D-comb_R)) * sin(MY_PI*(r - comb_R)/(comb_D-comb_R));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::self(Param *param, double qi, double selfpot)\n{\n double self_tmp, cmin, cmax, qmin, qmax;\n double s1=param->chi, s2=param->dj, s3=param->dk, s4=param->dl, s5=param->dm;\n\n self_tmp = 0.0;\n qmin = param->QL1*0.90;\n qmax = param->QU1*0.90;\n cmin = cmax = 1000.0;\n\n self_tmp = qi*(s1+qi*(s2+selfpot+qi*(s3+qi*(s4+qi*qi*s5))));\n\n if (qi < qmin) self_tmp += cmin * pow((qi-qmin),4.0);\n if (qi > qmax) self_tmp += cmax * pow((qi-qmax),4.0);\n\n return self_tmp;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fa(double r, Param *param, double iq, double jq)\n{\n  double bigB,Bsi,Bsj;\n  double qi,qj,Di,Dj;\n\n  if (r > param->bigr + param->bigd) return 0.0;\n  qi = iq; qj = jq;\n  Di = Dj = Bsi = Bsj = bigB = 0.0;\n  Di = param->DU1 + pow(fabs(param->bD1*(param->QU1-qi)),param->nD1);\n  Dj = param->DU2 + pow(fabs(param->bD2*(param->QU2-qj)),param->nD2);\n  Bsi = param->bigb1 * exp(param->lam21*Di)*\n       (param->aB1-fabs(pow(param->bB1*(qi-param->Qo1),10.0)));\n  Bsj = param->bigb2 * exp(param->lam22*Dj)*\n       (param->aB2-fabs(pow(param->bB2*(qj-param->Qo2),10.0)));\n  if (Bsi > 0.0 && Bsj > 0.0) bigB = sqrt(Bsi*Bsj)*param->romigb;\n  else bigB = 0.0;\n\n  return -bigB * exp(-param->rlm2 * r) * comb_fc(r,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_fa_d(double r, Param *param, double iq, double jq)\n{\n  double bigB,Bsi,Bsj;\n  double qi,qj,Di,Dj;\n\n  if (r > param->bigr + param->bigd) return 0.0;\n  qi = iq; qj = jq;\n  Di = Dj = Bsi = Bsj = bigB = 0.0;\n  Di = param->DU1 + pow(fabs(param->bD1*(param->QU1-qi)),param->nD1);\n  Dj = param->DU2 + pow(fabs(param->bD2*(param->QU2-qj)),param->nD2);\n  Bsi = param->bigb1 * exp(param->lam21*Di)*\n       (param->aB1-fabs(pow(param->bB1*(qi-param->Qo1),10.0)));\n  Bsj = param->bigb2 * exp(param->lam22*Dj)*\n       (param->aB2-fabs(pow(param->bB2*(qj-param->Qo2),10.0)));\n  if (Bsi > 0.0 && Bsj > 0.0) bigB = sqrt(Bsi*Bsj)*param->romigb;\n  else bigB = 0.0;\n\n  return bigB * exp(-param->rlm2 * r) *\n    (param->rlm2 * comb_fc(r,param) - comb_fc_d(r,param));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_bij(double zeta, Param *param)\n{\n  double tmp = param->beta * zeta;\n  if (tmp > param->c1) return 1.0/sqrt(tmp);\n  if (tmp > param->c2)\n    return (1.0 - pow(tmp,-1.0*param->powern) / (2.0*param->powern))/sqrt(tmp);\n  if (tmp < param->c4) return 1.0;\n  if (tmp < param->c3)\n    return 1.0 - pow(tmp,param->powern)/(2.0*param->powern);\n  return pow(1.0 + pow(tmp,param->powern), -1.0/(2.0*param->powern));\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::comb_bij_d(double zeta, Param *param)\n{\n  double tmp = param->beta * zeta;\n  if (tmp > param->c1) return param->beta * -0.5*pow(tmp,-1.5);\n  if (tmp > param->c2)\n    return param->beta * (-0.5*pow(tmp,-1.5) *\n\t\t\t  // error in negligible 2nd term fixed 9/30/2015\n\t\t\t  // (1.0 - 0.5*(1.0 +  1.0/(2.0*param->powern)) *\n                          (1.0 - (1.0 +  1.0/(2.0*param->powern)) *\n                           pow(tmp,-param->powern)));\n  if (tmp < param->c4) return 0.0;\n  if (tmp < param->c3)\n    return -0.5*param->beta * pow(tmp,param->powern-1.0);\n\n  double tmp_n = pow(tmp,param->powern);\n  return -0.5 * pow(1.0+tmp_n, -1.0-(1.0/(2.0*param->powern)))*tmp_n / zeta;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::attractive(Param *param, double prefactor,\n                          double rsqij, double rsqik,\n                          double *delrij, double *delrik,\n                          double *fi, double *fj, double *fk)\n{\n  double rij_hat[3],rik_hat[3];\n  double rij,rijinv,rik,rikinv;\n\n  rij = sqrt(rsqij);\n  rijinv = 1.0/rij;\n  vec3_scale(rijinv,delrij,rij_hat);\n\n  rik = sqrt(rsqik);\n  rikinv = 1.0/rik;\n  vec3_scale(rikinv,delrik,rik_hat);\n\n  comb_zetaterm_d(prefactor,rij_hat,rij,rik_hat,rik,fi,fj,fk,param);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::comb_zetaterm_d(double prefactor, double *rij_hat, double rij,\n                               double *rik_hat, double rik, double *dri,\n                               double *drj, double *drk, Param *param)\n{\n  double gijk,gijk_d,ex_delr,ex_delr_d,fc,dfc,cos_theta,tmp;\n  double dcosdri[3],dcosdrj[3],dcosdrk[3];\n\n  fc = comb_fc(rik,param);\n  dfc = comb_fc_d(rik,param);\n  if (param->powermint == 3) tmp = pow(param->rlm2 * (rij-rik),3.0);\n  else tmp = param->rlm2 * (rij-rik);\n\n  if (tmp > 69.0776) ex_delr = 1.e30;\n  else if (tmp < -69.0776) ex_delr = 0.0;\n  else ex_delr = exp(tmp); // ex_delr is Ygexp\n\n  if (param->powermint == 3)\n    ex_delr_d = 3.0*pow(param->rlm2,3.0) * pow(rij-rik,2.0)*ex_delr; // com3\n  else ex_delr_d = param->rlm2 * ex_delr; // com3\n\n  cos_theta = vec3_dot(rij_hat,rik_hat);\n  gijk = comb_gijk(cos_theta,param);\n  gijk_d = comb_gijk_d(cos_theta,param);\n  costheta_d(rij_hat,rij,rik_hat,rik,dcosdri,dcosdrj,dcosdrk);\n\n  // compute the derivative wrt Ri\n  // dri = -dfc*gijk*ex_delr*rik_hat;\n  // dri += fc*gijk_d*ex_delr*dcosdri;\n  // dri += fc*gijk*ex_delr_d*(rik_hat - rij_hat);\n  // (k,x[],y[]), y[]=k*x[]\n  // (k,x[],y[],z[]), z[]=k*x[]+y[]\n\n  vec3_scale(-dfc*gijk*ex_delr,rik_hat,dri);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdri,dri,dri);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rik_hat,dri,dri);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rij_hat,dri,dri);\n  vec3_scale(prefactor,dri,dri);\n\n  // compute the derivative wrt Rj\n  // drj = fc*gijk_d*ex_delr*dcosdrj;\n  // drj += fc*gijk*ex_delr_d*rij_hat;\n\n  vec3_scale(fc*gijk_d*ex_delr,dcosdrj,drj);\n  vec3_scaleadd(fc*gijk*ex_delr_d,rij_hat,drj,drj);\n  vec3_scale(prefactor,drj,drj);\n\n  // compute the derivative wrt Rk\n  // drk = dfc*gijk*ex_delr*rik_hat;\n  // drk += fc*gijk_d*ex_delr*dcosdrk;\n  // drk += -fc*gijk*ex_delr_d*rik_hat;\n\n  vec3_scale(dfc*gijk*ex_delr,rik_hat,drk);\n  vec3_scaleadd(fc*gijk_d*ex_delr,dcosdrk,drk,drk);\n  vec3_scaleadd(-fc*gijk*ex_delr_d,rik_hat,drk,drk);\n  vec3_scale(prefactor,drk,drk);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::costheta_d(double *rij_hat, double rij,\n                             double *rik_hat, double rik,\n                             double *dri, double *drj, double *drk)\n{\n  // first element is devative wrt Ri, second wrt Rj, third wrt Rk\n\n  double cos_theta = vec3_dot(rij_hat,rik_hat);\n\n  vec3_scaleadd(-cos_theta,rij_hat,rik_hat,drj);\n  vec3_scale(1.0/rij,drj,drj);\n  vec3_scaleadd(-cos_theta,rik_hat,rij_hat,drk);\n  vec3_scale(1.0/rik,drk,drk);\n  vec3_add(drj,drk,dri);\n  vec3_scale(-1.0,dri,dri);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::sm_table()\n{\n  int i,j,k,m,nntypes,ncoul;\n  int inty, itype, jtype;\n  int iparam_i, iparam_ij, iparam_ji;\n  double r,dra,drin,rc,z,zr,zrc,ea,eb,ea3,eb3,alf;\n  double exp2er,exp2ersh,fafash,dfafash,F1,dF1,ddF1,E1,E2,E3,E4;\n  double exp2ear,exp2ebr,exp2earsh,exp2ebrsh,fafbsh,dfafbsh;\n\n  int n = atom->ntypes;\n  int nmax = atom->nmax;\n\n  dra  = 0.001;  // lookup table step size\n  drin = 0.1;    // starting distance of 1/r\n  rc = cutmax;\n  alf = 0.20;\n\n  nntypes = int((n+1)*n/2); // interaction types\n  ncoul = int((rc-drin)/dra)+1;\n\n  // allocate arrays\n\n  memory->create(intype,n,n,\"pair:intype\");\n  memory->create(fafb,ncoul,nntypes,\"pair:fafb\");\n  memory->create(dfafb,ncoul,nntypes,\"pair:dfafb\");\n  memory->create(ddfafb,ncoul,nntypes,\"pair:ddfafb\");\n  memory->create(phin,ncoul,nntypes,\"pair:phin\");\n  memory->create(dphin,ncoul,nntypes,\"pair:dphin\");\n  memory->create(erpaw,25000,2,\"pair:erpaw\");\n  memory->create(NCo,nmax,\"pair:NCo\");\n  memory->create(bbij,nmax,MAXNEIGH,\"pair:bbij\");\n  memory->create(sht_num,nmax,\"pair:sht_num\");\n  sht_first = (int **) memory->smalloc(nmax*sizeof(int *),\"pair:sht_first\");\n\n  // set interaction number: 0-0=0, 1-1=1, 0-1=1-0=2\n\n  m = 0; k = n;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (j == i) {\n        intype[i][j] = m;\n        m += 1;\n      } else if (j != i && j > i) {\n        intype[i][j] = k;\n        k += 1;\n      } else if (j != i && j < i) {\n        intype[i][j] = intype[j][i];\n      }\n    }\n  }\n\n  // default arrays to zero\n\n  for (i = 0; i < ncoul; i ++) {\n    for (j = 0; j < nntypes; j ++) {\n      fafb[i][j] = 0.0;\n      dfafb[i][j] = 0.0;\n      ddfafb[i][j] = 0.0;\n      phin[i][j] = 0.0;\n      dphin[i][j] = 0.0;\n    }\n  }\n\n  // direct 1/r energy with Slater 1S orbital overlap\n\n  for (i = 0; i < n; i++) {\n    if (map[i+1] < 0) continue;\n    r = drin;\n    itype = params[map[i+1]].ielement;\n    iparam_i = elem2param[itype][itype][itype];\n    z = params[iparam_i].esm1;\n\n    if (comm->me == 0 && screen)\n      fprintf(screen,\"  element[%d] = %-2s, z = %g\\n\",i+1,elements[map[i+1]],z);\n\n    for (j = 0; j < ncoul; j++) {\n      exp2er = exp(-2.0 * z * r);\n      phin[j][i] = 1.0 - exp2er * (1.0 + 2.0 * z * r * (1.0 + z * r));\n      dphin[j][i] = (4.0 * exp2er * z * z * z * r * r);\n      r += dra;\n    }\n  }\n\n  for (i = 0; i < n; i ++) {\n    if (map[i+1] < 0) continue;\n    for (j = 0; j < n; j ++) {\n      if (map[j+1] < 0) continue;\n      r = drin;\n      if (j == i) {\n        itype = params[map[i+1]].ielement;\n        inty = intype[itype][itype];\n        iparam_i = elem2param[itype][itype][itype];\n        z = params[iparam_i].esm1;\n        zrc = z * rc;\n        exp2ersh = exp(-2.0 * zrc);\n        fafash = -exp2ersh * (1.0 / rc +\n                              z * (11.0/8.0 + 3.0/4.0*zrc + zrc*zrc/6.0));\n        dfafash = exp2ersh * (1.0/(rc*rc) + 2.0*z/rc +\n                              z*z*(2.0 + 7.0/6.0*zrc + zrc*zrc/3.0));\n        for (k = 0; k < ncoul; k ++) {\n          zr = z * r;\n          exp2er = exp(-2.0*zr);\n          F1 = -exp2er * (1.0 / r +\n                          z * (11.0/8.0 + 3.0/4.0*zr + zr*zr/6.0));\n          dF1 = exp2er * (1.0/(r*r) + 2.0*z/r +\n                          z*z*(2.0 + 7.0/6.0*zr + zr*zr/3.0));\n          ddF1 = -exp2er * (2.0/(r*r*r) + 4.0*z/(r*r) -\n                            z*z*z/3.0*(17.0/2.0 + 5.0*zr + 2.0*zr*zr));\n          fafb[k][inty] = F1-fafash-(r-rc)*dfafash;\n          dfafb[k][inty] = (dF1 - dfafash);\n          ddfafb[k][inty] = ddF1;\n          r += dra;\n        }\n      } else if (j != i) {\n        itype = params[map[i+1]].ielement;\n        jtype = params[map[j+1]].ielement;\n        inty = intype[itype][jtype];\n        iparam_ij = elem2param[itype][jtype][jtype];\n        ea = params[iparam_ij].esm1;\n        ea3 = ea*ea*ea;\n        iparam_ji = elem2param[jtype][itype][itype];\n        eb = params[iparam_ji].esm1;\n        eb3 = eb*eb*eb;\n        E1 = ea*eb3*eb/((ea+eb)*(ea+eb)*(ea-eb)*(ea-eb));\n        E2 = eb*ea3*ea/((ea+eb)*(ea+eb)*(eb-ea)*(eb-ea));\n        E3 = (3.0*ea*ea*eb3*eb-eb3*eb3) /\n          ((ea+eb)*(ea+eb)*(ea+eb)*(ea-eb)*(ea-eb)*(ea-eb));\n        E4 = (3.0*eb*eb*ea3*ea-ea3*ea3) /\n          ((ea+eb)*(ea+eb)*(ea+eb)*(eb-ea)*(eb-ea)*(eb-ea));\n        exp2earsh = exp(-2.0*ea*rc);\n        exp2ebrsh = exp(-2.0*eb*rc);\n        fafbsh = -exp2earsh*(E1 + E3/rc)-exp2ebrsh*(E2 + E4/rc);\n        dfafbsh =\n          exp2earsh*(2.0*ea*(E1+E3/rc)+E3/(rc*rc)) +\n          exp2ebrsh*(2.0*eb*(E2+E4/rc)+E4/(rc*rc));\n        for (k = 0; k < ncoul; k ++) {\n          exp2ear = exp(-2.0*ea*r);\n          exp2ebr = exp(-2.0*eb*r);\n          fafb[k][inty] =\n            - exp2ear*(E1+E3/r) - exp2ebr*(E2+E4/r)\n            - fafbsh - (r-rc) * dfafbsh;\n          dfafb[k][inty] = (exp2ear*(2.0*ea*(E1+E3/r) + E3/(r*r))\n                            + exp2ebr*(2.0*eb*(E2+E4/r) + E4/(r*r))- dfafbsh);\n          ddfafb[k][inty] = (- exp2ear*(E3/(r*r)*(1.0/r+2.0*ea/r+2.0/(r*r))\n                                        + 2.0*ea*(E1+E3/r))-\n                             exp2ebr*(E4/(r*r)\n                                      *(1.0/r+2.0*eb/r+2.0/(r*r)) +\n                                      2.0*eb*(E2+E4/r)));\n          r += dra;\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < 25000; i ++) {\n    r = dra * i + drin;\n    erpaw[i][0] = erfc(r*alf);\n    erpaw[i][1] = exp(-r*r*alf*alf);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::potal_calc(double &calc1, double &calc2, double &calc3)\n{\n  double alf,rcoul,esucon;\n  int m;\n\n  rcoul = 0.0;\n  for (m = 0; m < nparams; m++)\n    if (params[m].lcut > rcoul) rcoul = params[m].lcut;\n\n  alf = 0.20;\n  esucon = force->qqr2e;\n\n  calc2 = (erfc(rcoul*alf)/rcoul/rcoul+2.0*alf/MY_PIS*\n           exp(-alf*alf*rcoul*rcoul)/rcoul)*esucon/rcoul;\n  calc3 = (erfc(rcoul*alf)/rcoul)*esucon;\n  calc1 = -(alf/MY_PIS*esucon+calc3*0.5);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::tri_point(double rsq, int &mr1, int &mr2,\n                         int &mr3, double &sr1, double &sr2,\n                         double &sr3, int &itype)\n{\n double r, rin, dr, dd, rr1, rridr, rridr2;\n\n rin = 0.10; dr = 0.0010;\n r = sqrt(rsq);\n if (r < rin + 2.0*dr) r = rin + 2.0*dr;\n if (r > cutmax - 2.0*dr) r = cutmax - 2.0*dr;\n rridr = (r-rin)/dr;\n\n mr1 = int(rridr)-1;\n dd = rridr - float(mr1);\n if (dd > 0.5) mr1 += 1;\n mr2 = mr1 + 1;\n mr3 = mr2 + 1;\n\n rr1 = float(mr1)*dr;\n rridr = (r - rin - rr1)/dr;\n rridr2 = rridr * rridr;\n\n sr1 = (rridr2 - rridr) * 0.50;\n sr2 = 1.0 - rridr2;\n sr3 = (rridr2 + rridr) * 0.50;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::direct(int inty, int mr1, int mr2, int mr3, double rsq,\n                      double sr1, double sr2, double sr3,\n                      double iq, double jq,\n                      double potal, double fac11, double fac11e,\n                      double &pot_tmp, double &pot_d)\n{\n double r,erfcc,fafbn1,potij,sme2,esucon;\n double r3,erfcd,dfafbn1,smf2,dvdrr,alf,alfdpi;\n\n r = sqrt(rsq);\n r3 = r * rsq;\n alf = 0.20;\n alfdpi = 2.0*alf/MY_PIS;\n esucon = force->qqr2e;\n pot_tmp = 0.0;\n pot_d = 0.0;\n\n // 1/r energy\n\n erfcc = sr1*erpaw[mr1][0] + sr2*erpaw[mr2][0] + sr3*erpaw[mr3][0];\n fafbn1= sr1*fafb[mr1][inty] + sr2*fafb[mr2][inty] + sr3*fafb[mr3][inty];\n potij = (erfcc/r * esucon - fac11e);\n sme2 = potij + fafbn1 * esucon;\n pot_tmp = 1.0 * iq * jq *sme2;\n\n // 1/r force (wrt r)\n\n erfcd = sr1*erpaw[mr1][1] + sr2*erpaw[mr2][1] + sr3*erpaw[mr3][1];\n dfafbn1= sr1*dfafb[mr1][inty] + sr2*dfafb[mr2][inty] + sr3*dfafb[mr3][inty];\n dvdrr = (erfcc/r3+alfdpi*erfcd/rsq)*esucon-fac11;\n smf2 = dvdrr - dfafbn1 * esucon/r;\n pot_d =  1.0 * iq * jq * smf2;\n\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::field(Param *param, double rsq, double iq,double jq,\n                     double &vionij,double &fvionij)\n{\n double r,r5,r6,rc,rc5,rc6,rf5,drf6,smpn,smpl,rfx1,rfx2;\n double cmi1,cmi2,cmj1,cmj2;\n\n r = sqrt(rsq);\n r5 = r*r*r*r*r;\n r6 = r5 * r;\n rc = param->lcut;\n rc5 = rc*rc*rc*rc*rc;\n rc6 = rc5 * rc;\n cmi1 = param->cmn1;\n cmi2 = param->cmn2;\n cmj1 = param->cml1;\n cmj2 = param->cml2;\n rf5 = 1.0/r5 - 1.0/rc5 + 5.0*(r-rc)/rc6;\n drf6 = 5.0/rc6 - 5.0/r6;\n\n // field correction energy\n\n smpn = rf5*jq*(cmi1+jq*cmi2);\n smpl = rf5*iq*(cmj1+iq*cmj2);\n vionij += 1.0 * (smpn + smpl);\n\n // field correction force\n\n rfx1 = jq*drf6*(cmi1+jq*cmi2)/r;\n rfx2 = iq*drf6*(cmj1+iq*cmj2)/r;\n fvionij -= 1.0 * (rfx1 + rfx2);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::yasu_char(double *qf_fix, int &igroup)\n{\n  int i,j,ii,jj,jnum;\n  int itype,jtype,iparam_i,iparam_ij;\n  tagint itag,jtag;\n  double xtmp,ytmp,ztmp;\n  double rsq1,delr1[3];\n  int *ilist,*jlist,*numneigh,**firstneigh;\n  double iq,jq,fqi,fqij,fqjj;\n  double potal,fac11,fac11e,sr1,sr2,sr3;\n  int mr1,mr2,mr3,inty,nj;\n\n\n  double **x = atom->x;\n  double *q = atom->q;\n  int *type = atom->type;\n  tagint *tag = atom->tag;\n\n  int inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  int *mask = atom->mask;\n  int groupbit = group->bitmask[igroup];\n\n  qf = qf_fix;\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    if (mask[i] & groupbit)\n      qf[i] = 0.0;\n  }\n\n  // communicating charge force to all nodes, first forward then reverse\n\n  comm->forward_comm_pair(this);\n\n  // self energy correction term: potal\n\n  potal_calc(potal,fac11,fac11e);\n\n  // loop over full neighbor list of my atoms\n\n  fqi = fqij = fqjj = 0.0;\n\n  for (ii = 0; ii < inum; ii ++) {\n    i = ilist[ii];\n    itag = tag[i];\n    nj = 0;\n    if (mask[i] & groupbit) {\n      itype = map[type[i]];\n      xtmp = x[i][0];\n      ytmp = x[i][1];\n      ztmp = x[i][2];\n      iq = q[i];\n      iparam_i = elem2param[itype][itype][itype];\n\n      // charge force from self energy\n\n      fqi = qfo_self(&params[iparam_i],iq,potal);\n\n      // two-body interactions\n\n      jlist = firstneigh[i];\n      jnum = numneigh[i];\n\n      for (jj = 0; jj < jnum; jj++) {\n        j = jlist[jj];\n        j &= NEIGHMASK;\n        jtag = tag[j];\n\n        if (itag > jtag) {\n          if ((itag+jtag) % 2 == 0) continue;\n        } else if (itag < jtag) {\n          if ((itag+jtag) % 2 == 1) continue;\n        } else {\n          if (x[j][2] < x[i][2]) continue;\n          if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n          if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n        }\n\n        jtype = map[type[j]];\n        jq = q[j];\n\n        delr1[0] = x[j][0] - xtmp;\n        delr1[1] = x[j][1] - ytmp;\n        delr1[2] = x[j][2] - ztmp;\n        rsq1 = vec3_dot(delr1,delr1);\n\n        iparam_ij = elem2param[itype][jtype][jtype];\n\n        // long range q-dependent\n\n        if (rsq1 > params[iparam_ij].lcutsq) continue;\n\n        inty = intype[itype][jtype];\n\n        // polynomial three-point interpolation\n\n        tri_point(rsq1,mr1,mr2,mr3,sr1,sr2,sr3,itype);\n\n        // 1/r charge forces\n\n        qfo_direct(inty,mr1,mr2,mr3,rsq1,sr1,sr2,sr3,fac11e,fqij);\n        fqi += jq * fqij;  qf[j] += iq * fqij;\n\n        // field correction to self energy and charge force\n\n        qfo_field(&params[iparam_ij],rsq1,iq,jq,fqij,fqjj);\n        fqi += fqij;\n        qf[j] += fqjj;\n      }\n\n        // three-body interactions\n\n      for (jj = 0; jj < jnum; jj++) {\n        j = jlist[jj];\n        j &= NEIGHMASK;\n        jtype = map[type[j]];\n        jq = q[j];\n\n        delr1[0] = x[j][0] - xtmp;\n        delr1[1] = x[j][1] - ytmp;\n        delr1[2] = x[j][2] - ztmp;\n        rsq1 = vec3_dot(delr1,delr1);\n\n        iparam_ij = elem2param[itype][jtype][jtype];\n\n        if (rsq1 > params[iparam_ij].cutsq) continue;\n        nj ++;\n\n        // charge force in Aij and Bij\n\n        qfo_short(&params[iparam_ij],i,nj,rsq1,iq,jq,fqij,fqjj);\n        fqi += fqij;  qf[j] += fqjj;\n      }\n      qf[i] += fqi;\n    }\n  }\n\n  comm->reverse_comm_pair(this);\n\n  // sum charge force on each node and return it\n\n  double eneg = 0.0;\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    if (mask[i] & groupbit)\n      eneg += qf[i];\n  }\n  MPI_Allreduce(&eneg,&enegtot,1,MPI_DOUBLE,MPI_SUM,world);\n  return enegtot;\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairComb::qfo_self(Param *param, double qi, double selfpot)\n{\n double self_d,cmin,cmax,qmin,qmax;\n double s1 = param->chi;\n double s2 = param->dj;\n double s3 = param->dk;\n double s4 = param->dl;\n double s5 = param->dm;\n\n self_d = 0.0;\n qmin = param->QL1*0.90;\n qmax = param->QU1*0.90;\n cmin = cmax = 1000.0;\n\n self_d = s1+qi*(2.0*(s2+selfpot)+qi*(3.0*s3+qi*(4.0*s4+qi*qi*6.0*s5)));\n\n if (qi < qmin) {\n   // char str[128];\n   // sprintf(str,\"Pair COMB charge %.10f with force %.10f hit min barrier\",\n   // qi,self_d);\n   // error->warning(FLERR,str,0);\n   self_d += 4.0 * cmin * pow((qi-qmin),3.0);\n }\n if (qi > qmax) {\n   // char str[128];\n   // sprintf(str,\"Pair COMB charge %.10f with force %.10f hit max barrier\",\n   //           qi,self_d);\n   // error->warning(FLERR,str,0);\n   self_d += 4.0 * cmax * pow((qi-qmax),3.0);\n }\n\n return self_d;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::qfo_direct(int inty, int mr1, int mr2, int mr3,\n                          double rsq, double sr1, double sr2,\n                          double sr3, double fac11e, double &fqij)\n{\n double r, erfcc, fafbn1, vm, esucon;\n\n r = sqrt(rsq);\n esucon=force->qqr2e;\n\n // 1/r force (wrt q)\n\n erfcc = sr1*erpaw[mr1][0]   + sr2*erpaw[mr2][0]   + sr3*erpaw[mr3][0];\n fafbn1= sr1*fafb[mr1][inty] + sr2*fafb[mr2][inty] + sr3*fafb[mr3][inty];\n vm = (erfcc/r * esucon - fac11e);\n fqij = 1.0 * (vm+esucon*fafbn1);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::qfo_field(Param *param, double rsq,double iq,double jq,\n                         double &fqij, double &fqjj)\n{\n double r,r5,rc,rc5,rc6;\n double cmi1,cmi2,cmj1,cmj2,rf5;\n\n fqij = fqjj = 0.0;\n r  = sqrt(rsq);\n r5 = r*r*r*r*r;\n rc = param->lcut;\n rc5 = rc*rc*rc*rc*rc;\n rc6 = rc5 * rc;\n cmi1 = param->cmn1;\n cmi2 = param->cmn2;\n cmj1 = param->cml1;\n cmj2 = param->cml2;\n rf5 = 1.0/r5 - 1.0/rc5 + 5.0*(r-rc)/rc6;\n\n // field correction charge force\n\n fqij = 1.0 * rf5 * (cmj1 + 2.0 * iq * cmj2);\n fqjj = 1.0 * rf5 * (cmi1 + 2.0 * jq * cmi2);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::qfo_short(Param *param, int i, int j, double rsq,\n                         double iq, double jq, double &fqij, double &fqjj)\n{\n  double r,tmp_fc,tmp_exp1,tmp_exp2;\n  double Asi,Asj,vrcs;\n  double romi = param->addrep,rrcs = param->bigr + param->bigd;\n  double qi,qj,Di,Dj,Bsi,Bsj;\n  double QUchi,QOchi,QUchj,QOchj,YYDiqp,YYDjqp;\n  double YYAsiqp,YYAsjqp,YYBsiqp,YYBsjqp;\n  double caj,cbj,bij,cfqr,cfqs;\n  double romie = param->romiga;\n  double romib = param->romigb;\n  double ca1,ca2,ca3,ca4;\n  double rslp,rslp2,rslp4,arr1,arr2,fc2j,fc3j;\n\n  qi = iq; qj = jq; r = sqrt(rsq);\n  Di = Dj = Asi = Asj = Bsi = Bsj = 0.0;\n  QUchi = QOchi = QUchj = QOchj = YYDiqp = YYDjqp =0.0;\n  YYAsiqp = YYAsjqp = YYBsiqp = YYBsjqp = 0.0;\n  caj = cbj = vrcs = cfqr = cfqs = 0.0;\n\n  tmp_fc = comb_fc(r,param);\n  tmp_exp1 = exp(-param->rlm1 * r);\n  tmp_exp2 = exp(-param->rlm2 * r);\n  bij = bbij[i][j]; //comb_bij(zeta_ij,param);\n\n  arr1 = 2.22850; arr2 = 1.89350;\n  fc2j = comb_fc2(r);\n  fc3j = comb_fc3(r);\n\n  vrcs = 0.0;\n  if (romi > 0.0) {\n    if (!cor_flag) vrcs = romi * pow((1.0-r/rrcs),2.0);\n    else if (cor_flag) {\n      rslp = ((arr1-r)/(arr1-arr2));\n      rslp2 = rslp * rslp; rslp4 = rslp2 * rslp2;\n      vrcs = fc2j * fc3j * romi * ((50.0*rslp4-30.0*rslp2+4.50))/8.0;\n    }\n  }\n\n  Di = param->DU1 + pow(fabs(param->bD1*(param->QU1-qi)),param->nD1);\n  Dj = param->DU2 + pow(fabs(param->bD2*(param->QU2-qj)),param->nD2);\n\n  Asi = param->biga1 * exp(param->lam11*Di);\n  Asj = param->biga2 * exp(param->lam12*Dj);\n  Bsi = param->bigb1 * exp(param->lam21*Di)*\n    (param->aB1-fabs(pow(param->bB1*(qi-param->Qo1),10.0)));\n  Bsj = param->bigb2 * exp(param->lam22*Dj)*\n    (param->aB2-fabs(pow(param->bB2*(qj-param->Qo2),10.0)));\n\n  QUchi = (param->QU1-qi)*param->bD1;\n  QUchj = (param->QU2-qj)*param->bD2;\n  QOchi = (qi-param->Qo1)*param->bB1;\n  QOchj = (qj-param->Qo2)*param->bB2;\n\n  if (QUchi == 0.0) YYDiqp = 0.0;\n  else YYDiqp = -param->nD1 * QUchi * param->bD1 *\n         pow(fabs(QUchi),(param->nD1-2.0));\n\n  if (QUchj == 0.0) YYDjqp = 0.0;\n  else YYDjqp = -param->nD2 * QUchj * param->bD2 *\n         pow(fabs(QUchj),(param->nD2-2.0));\n\n  YYAsiqp = Asi * param->lam11 * YYDiqp;\n  YYAsjqp = Asj * param->lam12 * YYDjqp;\n\n  if (QOchi == 0.0)\n    YYBsiqp=Bsi*param->lam21*YYDiqp;\n  else\n    YYBsiqp=Bsi*param->lam21*YYDiqp-param->bigb1*exp(param->lam21*Di)*\n      10.0*QOchi*param->bB1*pow(fabs(QOchi),(10.0-2.0));\n\n  if (QOchj == 0.0)\n    YYBsjqp=Bsj*param->lam22*YYDjqp;\n  else\n    YYBsjqp=Bsj*param->lam22*YYDjqp-param->bigb2*exp(param->lam22*Dj)*\n      10.0*QOchj*param->bB2*pow(fabs(QOchj),(10.0-2.0));\n\n  if (Asi > 0.0 && Asj > 0.0) caj = 1.0/(2.0*sqrt(Asi*Asj)) * romie;\n  else caj = 0.0;\n\n  if (Bsi > 0.0 && Bsj > 0.0) cbj = 1.0/(2.0*sqrt(Bsi*Bsj)) * romib ;\n  else cbj = 0.0;\n\n  cfqr =  0.50 * tmp_fc * (1.0 + vrcs); // 0.5 b/c full atom loop\n  cfqs = -0.50 * tmp_fc *  bij;\n\n  ca1 = Asj * caj * YYAsiqp;\n  ca2 = Bsj * cbj * YYBsiqp;\n  ca3 = Asi * caj * YYAsjqp;\n  ca4 = Bsi * cbj * YYBsjqp;\n\n  fqij  = cfqr * tmp_exp1 * ca1;\n  fqij += cfqs * tmp_exp2 * ca2;\n  fqjj  = cfqr * tmp_exp1 * ca3;\n  fqjj += cfqs * tmp_exp2 * ca4;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::Over_cor(Param *param, double rsq1, int NCoi,\n                        double &Eov, double &Fov)\n{\n  double ECo,BCo,tmp_fc,tmp_fc_d;\n  double r = sqrt(rsq1);\n  int NCon = NCoi - 7;\n\n  tmp_fc = comb_fc(r,param);\n  tmp_fc_d = comb_fc(r,param);\n  Eov = 0.0; Fov = 0.0;\n  ECo = param->hfocor;\n  BCo = 0.1;\n\n  if (NCon >= 0.20) {\n    Eov = tmp_fc * ECo * NCon/(1.0+exp(BCo*NCon));\n    Fov = -(tmp_fc_d*Eov + tmp_fc*ECo/(1.0+exp(BCo*NCon)) -\n            (tmp_fc*ECo*NCon*BCo*exp(BCo*NCon)) /\n            ((1.0+exp(BCo*NCon))*(1.0+exp(BCo*NCon))));\n    Fov /= r;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairComb::pack_forward_comm(int n, int *list, double *buf,\n                                int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i ++) {\n    j = list[i];\n    buf[m++] = qf[j];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n ;\n  for (i = first; i < last; i++) qf[i] = buf[m++];\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairComb::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) buf[m++] = qf[i];\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    qf[j] += buf[m++];\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairComb::Short_neigh()\n{\n  int nj;\n  int inum,jnum,i,j,ii,jj;\n  int *neighptrj,*ilist,*jlist,*numneigh;\n  int **firstneigh;\n  double xtmp,ytmp,ztmp,rsq,delrj[3];\n\n  double **x = atom->x;\n\n  if (atom->nmax > nmax) {\n    memory->sfree(sht_first);\n    nmax = atom->nmax;\n    sht_first = (int **) memory->smalloc(nmax*sizeof(int *),\n                                         \"pair:sht_first\");\n    memory->grow(sht_num,nmax,\"pair:sht_num\");\n    memory->grow(NCo,nmax,\"pair:NCo\");\n    memory->grow(bbij,nmax,MAXNEIGH,\"pair:bbij\");\n  }\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // create Comb neighbor list\n\n  ipage->reset();\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n\n    nj = 0;\n    neighptrj = ipage->vget();\n\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delrj[0] = xtmp - x[j][0];\n      delrj[1] = ytmp - x[j][1];\n      delrj[2] = ztmp - x[j][2];\n      rsq = vec3_dot(delrj,delrj);\n\n      if (rsq > cutmin) continue;\n      neighptrj[nj++] = j;\n    }\n\n    sht_first[i] = neighptrj;\n    sht_num[i] = nj;\n    ipage->vgot(nj);\n    if (ipage->status())\n      error->one(FLERR,\"Neighbor list overflow, boost neigh_modify one\");\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairComb::memory_usage()\n{\n  double bytes = maxeatom * sizeof(double);\n  bytes += maxvatom*6 * sizeof(double);\n  bytes += nmax * sizeof(int);\n  bytes += nmax * sizeof(int *);\n\n  for (int i = 0; i < comm->nthreads; i++)\n    bytes += ipage[i].size();\n\n  bytes += nmax * sizeof(int);\n  bytes += MAXNEIGH*nmax * sizeof(double);\n  return bytes;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(comb,PairComb)\n\n#else\n\n#ifndef LMP_PAIR_COMB_H\n#define LMP_PAIR_COMB_H\n\n#include \"pair.h\"\n#include \"my_page.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairComb : public Pair {\n public:\n  PairComb(class LAMMPS *);\n  virtual ~PairComb();\n  virtual void compute(int, int);\n  void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n  double memory_usage();\n\n  virtual double yasu_char(double *, int &);\n  double enegtot;\n\n protected:\n  struct Param {\n    double lam11,lam12,lam21,lam22;\n    double c,d,h;\n    double gamma,powerm;\n    double powern,beta;\n    double biga1,biga2,bigb1,bigb2;\n    double bigd,bigr;\n    double cut,cutsq;\n    double c1,c2,c3,c4;\n    double plp1,plp3,plp6,a123,aconf;\n    double rlm1,rlm2;\n    double romiga,romigb,romigc,romigd,addrep;\n    double QU1,QL1,DU1,DL1,Qo1,dQ1,aB1,bB1,nD1,bD1;\n    double QU2,QL2,DU2,DL2,Qo2,dQ2,aB2,bB2,nD2,bD2;\n    double chi,dj,dk,dl,dm,esm1,esm2,cmn1,cmn2,cml1,cml2;\n    double coulcut, lcut, lcutsq, hfocor;\n    int ielement,jelement,kelement;\n    int powermint;\n  };\n\n  double cutmax;                // max cutoff for all elements\n  int nelements;                // # of unique elements\n  char **elements;              // names of unique elements\n  int ***elem2param;            // mapping from element triplets to parameters\n  int *map;                     // mapping from atom types to elements\n  int nparams;                  // # of stored parameter sets\n  int maxparam;                 // max # of parameter sets\n  double precision;\n  Param *params;                // parameter set for an I-J-K interaction\n\n  int nmax;\n  double *qf;\n\n  double *esm, **fafb, **dfafb, **ddfafb, **phin, **dphin, **erpaw;\n  double *charge;\n  int **intype, *typeno;\n  int *NCo, cor_flag, cuo_flag, cuo_flag1, cuo_flag2;\n  double **bbij;\n\n  int pgsize;                      // size of neighbor page\n  int oneatom;                     // max # of neighbors for one atom\n  int *sht_num,**sht_first;        // short-range neighbor list\n  MyPage<int> *ipage;              // neighbor list pages\n  double cutmin;\n\n  void allocate();\n  virtual void read_file(char *);\n  void setup_params();\n  virtual void repulsive(Param *, double, double &, int,\n                         double &, double, double);\n  double zeta(Param *, double, double, double *, double *);\n  void force_zeta(Param *, int, int, int, double, double, double, double,\n                  double &, double &, double &);\n  void attractive(Param *, double, double, double, double *, double *,\n                  double *, double *, double *);\n  double elp(Param *, double, double, double *, double *);\n  void flp(Param *, double, double, double *, double *, double *,\n           double *, double *);\n  double comb_fc(double, Param *);\n  double comb_fc_d(double, Param *);\n  double comb_fc2(double);\n  double comb_fc2_d(double);\n  double comb_fc3(double);\n  double comb_fc3_d(double);\n  virtual double comb_fa(double, Param *, double,double);\n  virtual double comb_fa_d(double, Param *, double,double);\n  double comb_bij(double, Param *);\n  double comb_bij_d(double, Param *);\n\n  inline double comb_gijk(const double costheta,\n                          const Param * const param) const {\n    const double comb_c = param->c * param->c;\n    const double comb_d = param->d * param->d;\n    const double hcth = param->h - costheta;\n\n    return param->gamma*(1.0 + comb_c/comb_d - comb_c / (comb_d + hcth*hcth));\n  }\n\n  inline double comb_gijk_d(const double costheta,\n                            const Param * const param) const {\n    const double comb_c = param->c * param->c;\n    const double comb_d = param->d * param->d;\n    const double hcth = param->h - costheta;\n    const double numerator = -2.0 * comb_c * hcth;\n    const double denominator = 1.0/(comb_d + hcth*hcth);\n    return param->gamma*numerator*denominator*denominator;\n  }\n\n  void comb_zetaterm_d(double, double *, double, double *, double,\n                               double *, double *, double *, Param *);\n  void costheta_d(double *, double, double *, double,\n                  double *, double *, double *);\n  double self(Param *, double, double);\n  void sm_table();\n  void potal_calc(double &, double &, double &);\n  void tri_point(double, int &, int &, int &, double &, double &,\n                 double &, int &);\n  void direct(int,int,int,int,double,double,double,double,double,double,\n        double,double,double,double &,double &);\n  void field(Param *,double,double,double,double &,double &);\n  double qfo_self(Param *, double, double);\n  void qfo_short(Param *, int, int, double, double, double,\n                  double &, double &);\n  void qfo_direct (int, int, int, int, double, double, double, double,\n        double, double &);\n  void qfo_field(Param *, double,double ,double ,double &, double &);\n  void qsolve(double *);\n  void Over_cor(Param *, double, int, double &, double &);\n  int pack_reverse_comm(int, int, double *);\n  void unpack_reverse_comm(int, int *, double *);\n  int pack_forward_comm(int , int *, double *, int, int *);\n  void unpack_forward_comm(int , int , double *);\n\n  void Short_neigh();\n\n  // vector functions, inline for efficiency\n\n  inline double vec3_dot(const double x[3], const double y[3]) const {\n    return x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n  }\n\n  inline void vec3_add(const double x[3], const double y[3],\n                       double * const z) const {\n    z[0] = x[0]+y[0];  z[1] = x[1]+y[1];  z[2] = x[2]+y[2];\n  }\n\n  inline void vec3_scale(const double k, const double x[3],\n                         double y[3]) const {\n    y[0] = k*x[0];  y[1] = k*x[1];  y[2] = k*x[2];\n  }\n\n  inline void vec3_scaleadd(const double k, const double x[3],\n                            const double y[3], double * const z) const {\n    z[0] = k*x[0]+y[0];\n    z[1] = k*x[1]+y[1];\n    z[2] = k*x[2]+y[2];\n  }\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Pair style COMB requires atom IDs\n\nThis is a requirement to use the AIREBO potential.\n\nE: Pair style COMB requires newton pair on\n\nSee the newton command.  This is a restriction to use the COMB\npotential.\n\nE: Pair style COMB requires atom attribute q\n\nSelf-explanatory.\n\nE: All pair coeffs are not set\n\nAll pair coefficients must be set in the data file or by the\npair_coeff command before running a simulation.\n\nE: Cannot open COMB potential file %s\n\nThe specified COMB potential file cannot be opened.  Check that the\npath and name are correct.\n\nE: Incorrect format in COMB potential file\n\nIncorrect number of words per line in the potential file.\n\nE: Illegal COMB parameter\n\nOne or more of the coefficients defined in the potential file is\ninvalid.\n\nE: Potential file has duplicate entry\n\nThe potential file has more than one entry for the same element.\n\nE: Potential file is missing an entry\n\nThe potential file does not have a needed entry.\n\nW: Pair COMB charge %.10f with force %.10f hit min barrier\n\nSomething is possibly wrong with your model.\n\nW: Pair COMB charge %.10f with force %.10f hit max barrier\n\nSomething is possibly wrong with your model.\n\nE: Neighbor list overflow, boost neigh_modify one\n\nThere are too many neighbors of a single atom.  Use the neigh_modify\ncommand to increase the max number of neighbors allowed for one atom.\nYou may also want to boost the page size.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Stephen Foiles (SNL), Murray Daw (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_eam.h\"\n#include \"atom.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n\n/* ---------------------------------------------------------------------- */\n\nPairEAM::PairEAM(LAMMPS *lmp) : Pair(lmp)\n{\n  restartinfo = 0;\n  manybody_flag = 1;\n\n  nmax = 0;\n  rho = NULL;\n  fp = NULL;\n  map = NULL;\n  type2frho = NULL;\n\n  nfuncfl = 0;\n  funcfl = NULL;\n\n  setfl = NULL;\n  fs = NULL;\n\n  frho = NULL;\n  rhor = NULL;\n  z2r = NULL;\n  scale = NULL;\n\n  frho_spline = NULL;\n  rhor_spline = NULL;\n  z2r_spline = NULL;\n\n  // set comm size needed by this Pair\n\n  comm_forward = 1;\n  comm_reverse = 1;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairEAM::~PairEAM()\n{\n  if (copymode) return;\n\n  memory->destroy(rho);\n  memory->destroy(fp);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    delete [] map;\n    delete [] type2frho;\n    map = NULL;\n    type2frho = NULL;\n    memory->destroy(type2rhor);\n    memory->destroy(type2z2r);\n    memory->destroy(scale);\n  }\n\n  if (funcfl) {\n    for (int i = 0; i < nfuncfl; i++) {\n      delete [] funcfl[i].file;\n      memory->destroy(funcfl[i].frho);\n      memory->destroy(funcfl[i].rhor);\n      memory->destroy(funcfl[i].zr);\n    }\n    memory->sfree(funcfl);\n    funcfl = NULL;\n  }\n\n  if (setfl) {\n    for (int i = 0; i < setfl->nelements; i++) delete [] setfl->elements[i];\n    delete [] setfl->elements;\n    delete [] setfl->mass;\n    memory->destroy(setfl->frho);\n    memory->destroy(setfl->rhor);\n    memory->destroy(setfl->z2r);\n    delete setfl;\n    setfl = NULL;\n  }\n\n  if (fs) {\n    for (int i = 0; i < fs->nelements; i++) delete [] fs->elements[i];\n    delete [] fs->elements;\n    delete [] fs->mass;\n    memory->destroy(fs->frho);\n    memory->destroy(fs->rhor);\n    memory->destroy(fs->z2r);\n    delete fs;\n    fs = NULL;\n  }\n\n  memory->destroy(frho);\n  memory->destroy(rhor);\n  memory->destroy(z2r);\n\n  memory->destroy(frho_spline);\n  memory->destroy(rhor_spline);\n  memory->destroy(z2r_spline);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEAM::compute(int eflag, int vflag)\n{\n  int i,j,ii,jj,m,inum,jnum,itype,jtype;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,r,p,rhoip,rhojp,z2,z2p,recip,phip,psip,phi;\n  double *coeff;\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = eflag_global = eflag_atom = 0;\n\n  // grow energy and fp arrays if necessary\n  // need to be atom->nmax in length\n\n  if (atom->nmax > nmax) {\n    memory->destroy(rho);\n    memory->destroy(fp);\n    nmax = atom->nmax;\n    memory->create(rho,nmax,\"pair:rho\");\n    memory->create(fp,nmax,\"pair:fp\");\n  }\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int nall = nlocal + atom->nghost;\n  int newton_pair = force->newton_pair;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  // zero out density\n\n  if (newton_pair) {\n    for (i = 0; i < nall; i++) rho[i] = 0.0;\n  } else for (i = 0; i < nlocal; i++) rho[i] = 0.0;\n\n  // rho = density at each atom\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq) {\n        jtype = type[j];\n        p = sqrt(rsq)*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n        coeff = rhor_spline[type2rhor[jtype][itype]][m];\n        rho[i] += ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        if (newton_pair || j < nlocal) {\n          coeff = rhor_spline[type2rhor[itype][jtype]][m];\n          rho[j] += ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n        }\n      }\n    }\n  }\n\n  // communicate and sum densities\n\n  if (newton_pair) comm->reverse_comm_pair(this);\n\n  // fp = derivative of embedding energy at each atom\n  // phi = embedding energy at each atom\n  // if rho > rhomax (e.g. due to close approach of two atoms),\n  //   will exceed table, so add linear term to conserve energy\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    p = rho[i]*rdrho + 1.0;\n    m = static_cast<int> (p);\n    m = MAX(1,MIN(m,nrho-1));\n    p -= m;\n    p = MIN(p,1.0);\n    coeff = frho_spline[type2frho[type[i]]][m];\n    fp[i] = (coeff[0]*p + coeff[1])*p + coeff[2];\n    if (eflag) {\n      phi = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n      if (rho[i] > rhomax) phi += fp[i] * (rho[i]-rhomax);\n      phi *= scale[type[i]][type[i]];\n      if (eflag_global) eng_vdwl += phi;\n      if (eflag_atom) eatom[i] += phi;\n    }\n  }\n\n  // communicate derivative of embedding function\n\n  comm->forward_comm_pair(this);\n\n  // compute forces on each atom\n  // loop over neighbors of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    itype = type[i];\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutforcesq) {\n        jtype = type[j];\n        r = sqrt(rsq);\n        p = r*rdr + 1.0;\n        m = static_cast<int> (p);\n        m = MIN(m,nr-1);\n        p -= m;\n        p = MIN(p,1.0);\n\n        // rhoip = derivative of (density at atom j due to atom i)\n        // rhojp = derivative of (density at atom i due to atom j)\n        // phi = pair potential energy\n        // phip = phi'\n        // z2 = phi * r\n        // z2p = (phi * r)' = (phi' r) + phi\n        // psip needs both fp[i] and fp[j] terms since r_ij appears in two\n        //   terms of embed eng: Fi(sum rho_ij) and Fj(sum rho_ji)\n        //   hence embed' = Fi(sum rho_ij) rhojp + Fj(sum rho_ji) rhoip\n        // scale factor can be applied by thermodynamic integration\n\n        coeff = rhor_spline[type2rhor[itype][jtype]][m];\n        rhoip = (coeff[0]*p + coeff[1])*p + coeff[2];\n        coeff = rhor_spline[type2rhor[jtype][itype]][m];\n        rhojp = (coeff[0]*p + coeff[1])*p + coeff[2];\n        coeff = z2r_spline[type2z2r[itype][jtype]][m];\n        z2p = (coeff[0]*p + coeff[1])*p + coeff[2];\n        z2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n\n        recip = 1.0/r;\n        phi = z2*recip;\n        phip = z2p*recip - phi*recip;\n        psip = fp[i]*rhojp + fp[j]*rhoip + phip;\n        fpair = -scale[itype][jtype]*psip*recip;\n\n        f[i][0] += delx*fpair;\n        f[i][1] += dely*fpair;\n        f[i][2] += delz*fpair;\n        if (newton_pair || j < nlocal) {\n          f[j][0] -= delx*fpair;\n          f[j][1] -= dely*fpair;\n          f[j][2] -= delz*fpair;\n        }\n\n        if (eflag) evdwl = scale[itype][jtype]*phi;\n        if (evflag) ev_tally(i,j,nlocal,newton_pair,\n                             evdwl,0.0,fpair,delx,dely,delz);\n      }\n    }\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairEAM::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  map = new int[n+1];\n  for (int i = 1; i <= n; i++) map[i] = -1;\n\n  type2frho = new int[n+1];\n  memory->create(type2rhor,n+1,n+1,\"pair:type2rhor\");\n  memory->create(type2z2r,n+1,n+1,\"pair:type2z2r\");\n  memory->create(scale,n+1,n+1,\"pair:scale\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairEAM::settings(int narg, char **arg)\n{\n  if (narg > 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n   read DYNAMO funcfl file\n------------------------------------------------------------------------- */\n\nvoid PairEAM::coeff(int narg, char **arg)\n{\n  if (!allocated) allocate();\n\n  if (narg != 3) error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // parse pair of atom types\n\n  int ilo,ihi,jlo,jhi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n\n  // read funcfl file if hasn't already been read\n  // store filename in Funcfl data struct\n\n  int ifuncfl;\n  for (ifuncfl = 0; ifuncfl < nfuncfl; ifuncfl++)\n    if (strcmp(arg[2],funcfl[ifuncfl].file) == 0) break;\n\n  if (ifuncfl == nfuncfl) {\n    nfuncfl++;\n    funcfl = (Funcfl *)\n      memory->srealloc(funcfl,nfuncfl*sizeof(Funcfl),\"pair:funcfl\");\n    read_file(arg[2]);\n    int n = strlen(arg[2]) + 1;\n    funcfl[ifuncfl].file = new char[n];\n    strcpy(funcfl[ifuncfl].file,arg[2]);\n  }\n\n  // set setflag and map only for i,i type pairs\n  // set mass of atom type if i = j\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    for (int j = MAX(jlo,i); j <= jhi; j++) {\n      if (i == j) {\n        setflag[i][i] = 1;\n        map[i] = ifuncfl;\n        atom->set_mass(FLERR,i,funcfl[ifuncfl].mass);\n        count++;\n      }\n      scale[i][j] = 1.0;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairEAM::init_style()\n{\n  // convert read-in file(s) to arrays and spline them\n\n  file2array();\n  array2spline();\n\n  neighbor->request(this,instance_me);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairEAM::init_one(int i, int j)\n{\n  // single global cutoff = max of cut from all files read in\n  // for funcfl could be multiple files\n  // for setfl or fs, just one file\n\n  if (setflag[i][j] == 0) scale[i][j] = 1.0;\n  scale[j][i] = scale[i][j];\n\n  if (funcfl) {\n    cutmax = 0.0;\n    for (int m = 0; m < nfuncfl; m++)\n      cutmax = MAX(cutmax,funcfl[m].cut);\n  } else if (setfl) cutmax = setfl->cut;\n  else if (fs) cutmax = fs->cut;\n\n  cutforcesq = cutmax*cutmax;\n\n  return cutmax;\n}\n\n/* ----------------------------------------------------------------------\n   read potential values from a DYNAMO single element funcfl file\n------------------------------------------------------------------------- */\n\nvoid PairEAM::read_file(char *filename)\n{\n  Funcfl *file = &funcfl[nfuncfl-1];\n\n  int me = comm->me;\n  FILE *fptr;\n  char line[MAXLINE];\n\n  if (me == 0) {\n    fptr = force->open_potential(filename);\n    if (fptr == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open EAM potential file %s\",filename);\n      error->one(FLERR,str);\n    }\n  }\n\n  int tmp,nwords;\n  if (me == 0) {\n    fgets(line,MAXLINE,fptr);\n    fgets(line,MAXLINE,fptr);\n    sscanf(line,\"%d %lg\",&tmp,&file->mass);\n    fgets(line,MAXLINE,fptr);\n    nwords = sscanf(line,\"%d %lg %d %lg %lg\",\n           &file->nrho,&file->drho,&file->nr,&file->dr,&file->cut);\n  }\n\n  MPI_Bcast(&nwords,1,MPI_INT,0,world);\n  MPI_Bcast(&file->mass,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->nrho,1,MPI_INT,0,world);\n  MPI_Bcast(&file->drho,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->nr,1,MPI_INT,0,world);\n  MPI_Bcast(&file->dr,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&file->cut,1,MPI_DOUBLE,0,world);\n\n  if ((nwords != 5) || (file->nrho <= 0) || (file->nr <= 0) || (file->dr <= 0.0))\n    error->all(FLERR,\"Invalid EAM potential file\");\n\n  memory->create(file->frho,(file->nrho+1),\"pair:frho\");\n  memory->create(file->rhor,(file->nr+1),\"pair:rhor\");\n  memory->create(file->zr,(file->nr+1),\"pair:zr\");\n\n  if (me == 0) grab(fptr,file->nrho,&file->frho[1]);\n  MPI_Bcast(&file->frho[1],file->nrho,MPI_DOUBLE,0,world);\n\n  if (me == 0) grab(fptr,file->nr,&file->zr[1]);\n  MPI_Bcast(&file->zr[1],file->nr,MPI_DOUBLE,0,world);\n\n  if (me == 0) grab(fptr,file->nr,&file->rhor[1]);\n  MPI_Bcast(&file->rhor[1],file->nr,MPI_DOUBLE,0,world);\n\n  if (me == 0) fclose(fptr);\n}\n\n/* ----------------------------------------------------------------------\n   convert read-in funcfl potential(s) to standard array format\n   interpolate all file values to a single grid and cutoff\n------------------------------------------------------------------------- */\n\nvoid PairEAM::file2array()\n{\n  int i,j,k,m,n;\n  int ntypes = atom->ntypes;\n  double sixth = 1.0/6.0;\n\n  // determine max function params from all active funcfl files\n  // active means some element is pointing at it via map\n\n  int active;\n  double rmax;\n  dr = drho = rmax = rhomax = 0.0;\n\n  for (int i = 0; i < nfuncfl; i++) {\n    active = 0;\n    for (j = 1; j <= ntypes; j++)\n      if (map[j] == i) active = 1;\n    if (active == 0) continue;\n    Funcfl *file = &funcfl[i];\n    dr = MAX(dr,file->dr);\n    drho = MAX(drho,file->drho);\n    rmax = MAX(rmax,(file->nr-1) * file->dr);\n    rhomax = MAX(rhomax,(file->nrho-1) * file->drho);\n  }\n\n  // set nr,nrho from cutoff and spacings\n  // 0.5 is for round-off in divide\n\n  nr = static_cast<int> (rmax/dr + 0.5);\n  nrho = static_cast<int> (rhomax/drho + 0.5);\n\n  // ------------------------------------------------------------------\n  // setup frho arrays\n  // ------------------------------------------------------------------\n\n  // allocate frho arrays\n  // nfrho = # of funcfl files + 1 for zero array\n\n  nfrho = nfuncfl + 1;\n  memory->destroy(frho);\n  memory->create(frho,nfrho,nrho+1,\"pair:frho\");\n\n  // interpolate each file's frho to a single grid and cutoff\n\n  double r,p,cof1,cof2,cof3,cof4;\n\n  n = 0;\n  for (i = 0; i < nfuncfl; i++) {\n    Funcfl *file = &funcfl[i];\n    for (m = 1; m <= nrho; m++) {\n      r = (m-1)*drho;\n      p = r/file->drho + 1.0;\n      k = static_cast<int> (p);\n      k = MIN(k,file->nrho-2);\n      k = MAX(k,2);\n      p -= k;\n      p = MIN(p,2.0);\n      cof1 = -sixth*p*(p-1.0)*(p-2.0);\n      cof2 = 0.5*(p*p-1.0)*(p-2.0);\n      cof3 = -0.5*p*(p+1.0)*(p-2.0);\n      cof4 = sixth*p*(p*p-1.0);\n      frho[n][m] = cof1*file->frho[k-1] + cof2*file->frho[k] +\n        cof3*file->frho[k+1] + cof4*file->frho[k+2];\n    }\n    n++;\n  }\n\n  // add extra frho of zeroes for non-EAM types to point to (pair hybrid)\n  // this is necessary b/c fp is still computed for non-EAM atoms\n\n  for (m = 1; m <= nrho; m++) frho[nfrho-1][m] = 0.0;\n\n  // type2frho[i] = which frho array (0 to nfrho-1) each atom type maps to\n  // if atom type doesn't point to file (non-EAM atom in pair hybrid)\n  // then map it to last frho array of zeroes\n\n  for (i = 1; i <= ntypes; i++)\n    if (map[i] >= 0) type2frho[i] = map[i];\n    else type2frho[i] = nfrho-1;\n\n  // ------------------------------------------------------------------\n  // setup rhor arrays\n  // ------------------------------------------------------------------\n\n  // allocate rhor arrays\n  // nrhor = # of funcfl files\n\n  nrhor = nfuncfl;\n  memory->destroy(rhor);\n  memory->create(rhor,nrhor,nr+1,\"pair:rhor\");\n\n  // interpolate each file's rhor to a single grid and cutoff\n\n  n = 0;\n  for (i = 0; i < nfuncfl; i++) {\n    Funcfl *file = &funcfl[i];\n    for (m = 1; m <= nr; m++) {\n      r = (m-1)*dr;\n      p = r/file->dr + 1.0;\n      k = static_cast<int> (p);\n      k = MIN(k,file->nr-2);\n      k = MAX(k,2);\n      p -= k;\n      p = MIN(p,2.0);\n      cof1 = -sixth*p*(p-1.0)*(p-2.0);\n      cof2 = 0.5*(p*p-1.0)*(p-2.0);\n      cof3 = -0.5*p*(p+1.0)*(p-2.0);\n      cof4 = sixth*p*(p*p-1.0);\n      rhor[n][m] = cof1*file->rhor[k-1] + cof2*file->rhor[k] +\n        cof3*file->rhor[k+1] + cof4*file->rhor[k+2];\n    }\n    n++;\n  }\n\n  // type2rhor[i][j] = which rhor array (0 to nrhor-1) each type pair maps to\n  // for funcfl files, I,J mapping only depends on I\n  // OK if map = -1 (non-EAM atom in pair hybrid) b/c type2rhor not used\n\n  for (i = 1; i <= ntypes; i++)\n    for (j = 1; j <= ntypes; j++)\n      type2rhor[i][j] = map[i];\n\n  // ------------------------------------------------------------------\n  // setup z2r arrays\n  // ------------------------------------------------------------------\n\n  // allocate z2r arrays\n  // nz2r = N*(N+1)/2 where N = # of funcfl files\n\n  nz2r = nfuncfl*(nfuncfl+1)/2;\n  memory->destroy(z2r);\n  memory->create(z2r,nz2r,nr+1,\"pair:z2r\");\n\n  // create a z2r array for each file against other files, only for I >= J\n  // interpolate zri and zrj to a single grid and cutoff\n\n  double zri,zrj;\n\n  n = 0;\n  for (i = 0; i < nfuncfl; i++) {\n    Funcfl *ifile = &funcfl[i];\n    for (j = 0; j <= i; j++) {\n      Funcfl *jfile = &funcfl[j];\n\n      for (m = 1; m <= nr; m++) {\n        r = (m-1)*dr;\n\n        p = r/ifile->dr + 1.0;\n        k = static_cast<int> (p);\n        k = MIN(k,ifile->nr-2);\n        k = MAX(k,2);\n        p -= k;\n        p = MIN(p,2.0);\n        cof1 = -sixth*p*(p-1.0)*(p-2.0);\n        cof2 = 0.5*(p*p-1.0)*(p-2.0);\n        cof3 = -0.5*p*(p+1.0)*(p-2.0);\n        cof4 = sixth*p*(p*p-1.0);\n        zri = cof1*ifile->zr[k-1] + cof2*ifile->zr[k] +\n          cof3*ifile->zr[k+1] + cof4*ifile->zr[k+2];\n\n        p = r/jfile->dr + 1.0;\n        k = static_cast<int> (p);\n        k = MIN(k,jfile->nr-2);\n        k = MAX(k,2);\n        p -= k;\n        p = MIN(p,2.0);\n        cof1 = -sixth*p*(p-1.0)*(p-2.0);\n        cof2 = 0.5*(p*p-1.0)*(p-2.0);\n        cof3 = -0.5*p*(p+1.0)*(p-2.0);\n        cof4 = sixth*p*(p*p-1.0);\n        zrj = cof1*jfile->zr[k-1] + cof2*jfile->zr[k] +\n          cof3*jfile->zr[k+1] + cof4*jfile->zr[k+2];\n\n        z2r[n][m] = 27.2*0.529 * zri*zrj;\n      }\n      n++;\n    }\n  }\n\n  // type2z2r[i][j] = which z2r array (0 to nz2r-1) each type pair maps to\n  // set of z2r arrays only fill lower triangular Nelement matrix\n  // value = n = sum over rows of lower-triangular matrix until reach irow,icol\n  // swap indices when irow < icol to stay lower triangular\n  // if map = -1 (non-EAM atom in pair hybrid):\n  //   type2z2r is not used by non-opt\n  //   but set type2z2r to 0 since accessed by opt\n\n  int irow,icol;\n  for (i = 1; i <= ntypes; i++) {\n    for (j = 1; j <= ntypes; j++) {\n      irow = map[i];\n      icol = map[j];\n      if (irow == -1 || icol == -1) {\n        type2z2r[i][j] = 0;\n        continue;\n      }\n      if (irow < icol) {\n        irow = map[j];\n        icol = map[i];\n      }\n      n = 0;\n      for (m = 0; m < irow; m++) n += m + 1;\n      n += icol;\n      type2z2r[i][j] = n;\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEAM::array2spline()\n{\n  rdr = 1.0/dr;\n  rdrho = 1.0/drho;\n\n  memory->destroy(frho_spline);\n  memory->destroy(rhor_spline);\n  memory->destroy(z2r_spline);\n\n  memory->create(frho_spline,nfrho,nrho+1,7,\"pair:frho\");\n  memory->create(rhor_spline,nrhor,nr+1,7,\"pair:rhor\");\n  memory->create(z2r_spline,nz2r,nr+1,7,\"pair:z2r\");\n\n  for (int i = 0; i < nfrho; i++)\n    interpolate(nrho,drho,frho[i],frho_spline[i]);\n\n  for (int i = 0; i < nrhor; i++)\n    interpolate(nr,dr,rhor[i],rhor_spline[i]);\n\n  for (int i = 0; i < nz2r; i++)\n    interpolate(nr,dr,z2r[i],z2r_spline[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEAM::interpolate(int n, double delta, double *f, double **spline)\n{\n  for (int m = 1; m <= n; m++) spline[m][6] = f[m];\n\n  spline[1][5] = spline[2][6] - spline[1][6];\n  spline[2][5] = 0.5 * (spline[3][6]-spline[1][6]);\n  spline[n-1][5] = 0.5 * (spline[n][6]-spline[n-2][6]);\n  spline[n][5] = spline[n][6] - spline[n-1][6];\n\n  for (int m = 3; m <= n-2; m++)\n    spline[m][5] = ((spline[m-2][6]-spline[m+2][6]) +\n                    8.0*(spline[m+1][6]-spline[m-1][6])) / 12.0;\n\n  for (int m = 1; m <= n-1; m++) {\n    spline[m][4] = 3.0*(spline[m+1][6]-spline[m][6]) -\n      2.0*spline[m][5] - spline[m+1][5];\n    spline[m][3] = spline[m][5] + spline[m+1][5] -\n      2.0*(spline[m+1][6]-spline[m][6]);\n  }\n\n  spline[n][4] = 0.0;\n  spline[n][3] = 0.0;\n\n  for (int m = 1; m <= n; m++) {\n    spline[m][2] = spline[m][5]/delta;\n    spline[m][1] = 2.0*spline[m][4]/delta;\n    spline[m][0] = 3.0*spline[m][3]/delta;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   grab n values from file fp and put them in list\n   values can be several to a line\n   only called by proc 0\n------------------------------------------------------------------------- */\n\nvoid PairEAM::grab(FILE *fptr, int n, double *list)\n{\n  char *ptr;\n  char line[MAXLINE];\n\n  int i = 0;\n  while (i < n) {\n    fgets(line,MAXLINE,fptr);\n    ptr = strtok(line,\" \\t\\n\\r\\f\");\n    list[i++] = atof(ptr);\n    while ((ptr = strtok(NULL,\" \\t\\n\\r\\f\"))) list[i++] = atof(ptr);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble PairEAM::single(int i, int j, int itype, int jtype,\n                       double rsq, double factor_coul, double factor_lj,\n                       double &fforce)\n{\n  int m;\n  double r,p,rhoip,rhojp,z2,z2p,recip,phi,phip,psip;\n  double *coeff;\n\n  r = sqrt(rsq);\n  p = r*rdr + 1.0;\n  m = static_cast<int> (p);\n  m = MIN(m,nr-1);\n  p -= m;\n  p = MIN(p,1.0);\n\n  coeff = rhor_spline[type2rhor[itype][jtype]][m];\n  rhoip = (coeff[0]*p + coeff[1])*p + coeff[2];\n  coeff = rhor_spline[type2rhor[jtype][itype]][m];\n  rhojp = (coeff[0]*p + coeff[1])*p + coeff[2];\n  coeff = z2r_spline[type2z2r[itype][jtype]][m];\n  z2p = (coeff[0]*p + coeff[1])*p + coeff[2];\n  z2 = ((coeff[3]*p + coeff[4])*p + coeff[5])*p + coeff[6];\n\n  recip = 1.0/r;\n  phi = z2*recip;\n  phip = z2p*recip - phi*recip;\n  psip = fp[i]*rhojp + fp[j]*rhoip + phip;\n  fforce = -psip*recip;\n\n  return phi;\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairEAM::pack_forward_comm(int n, int *list, double *buf,\n                               int pbc_flag, int *pbc)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    buf[m++] = fp[j];\n  }\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEAM::unpack_forward_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) fp[i] = buf[m++];\n}\n\n/* ---------------------------------------------------------------------- */\n\nint PairEAM::pack_reverse_comm(int n, int first, double *buf)\n{\n  int i,m,last;\n\n  m = 0;\n  last = first + n;\n  for (i = first; i < last; i++) buf[m++] = rho[i];\n  return m;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairEAM::unpack_reverse_comm(int n, int *list, double *buf)\n{\n  int i,j,m;\n\n  m = 0;\n  for (i = 0; i < n; i++) {\n    j = list[i];\n    rho[j] += buf[m++];\n  }\n}\n\n/* ----------------------------------------------------------------------\n   memory usage of local atom-based arrays\n------------------------------------------------------------------------- */\n\ndouble PairEAM::memory_usage()\n{\n  double bytes = maxeatom * sizeof(double);\n  bytes += maxvatom*6 * sizeof(double);\n  bytes += 2 * nmax * sizeof(double);\n  return bytes;\n}\n\n/* ----------------------------------------------------------------------\n   swap fp array with one passed in by caller\n------------------------------------------------------------------------- */\n\nvoid PairEAM::swap_eam(double *fp_caller, double **fp_caller_hold)\n{\n  double *tmp = fp;\n  fp = fp_caller;\n  *fp_caller_hold = tmp;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid *PairEAM::extract(const char *str, int &dim)\n{\n  dim = 2;\n  if (strcmp(str,\"scale\") == 0) return (void *) scale;\n  return NULL;\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"angle_cosine.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define SMALL 0.001\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosine::AngleCosine(LAMMPS *lmp) : Angle(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosine::~AngleCosine()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosine::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,n,type;\n  double delx1,dely1,delz1,delx2,dely2,delz2;\n  double eangle,f1[3],f3[3];\n  double rsq1,rsq2,r1,r2,c,a,a11,a12,a22;\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // c = cosine of angle\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    // force & energy\n\n    if (eflag) eangle = k[type]*(1.0+c);\n\n    a = k[type];\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    f1[0] = a11*delx1 + a12*delx2;\n    f1[1] = a11*dely1 + a12*dely2;\n    f1[2] = a11*delz1 + a12*delz2;\n    f3[0] = a22*delx2 + a12*delx1;\n    f3[1] = a22*dely2 + a12*dely1;\n    f3[2] = a22*delz2 + a12*delz1;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosine::allocate()\n{\n  allocated = 1;\n  int n = atom->nangletypes;\n\n  memory->create(k,n+1,\"angle:k\");\n  memory->create(setflag,n+1,\"angle:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid AngleCosine::coeff(int narg, char **arg)\n{\n  if (narg != 2) error->all(FLERR,\"Incorrect args for angle coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->nangletypes,ilo,ihi);\n\n  double k_one = force->numeric(FLERR,arg[1]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for angle coefficients\");\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosine::equilibrium_angle(int i)\n{\n  return MY_PI;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid AngleCosine::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->nangletypes,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid AngleCosine::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) fread(&k[1],sizeof(double),atom->nangletypes,fp);\n  MPI_Bcast(&k[1],atom->nangletypes,MPI_DOUBLE,0,world);\n\n  for (int i = 1; i <= atom->nangletypes; i++) setflag[i] = 1;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid AngleCosine::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->nangletypes; i++)\n    fprintf(fp,\"%d %g\\n\",i,k[i]);\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosine::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  return k[type]*(1.0+c);\n}\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing authors: Paul Crozier (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_dsmc.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n#include \"domain.h\"\n#include \"update.h\"\n#include \"random_mars.h\"\n#include <limits.h>\n\nusing namespace LAMMPS_NS;\n\n/* ---------------------------------------------------------------------- */\n\nPairDSMC::PairDSMC(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n\n  total_number_of_collisions = 0;\n  max_particles = max_particle_list = 0;\n  next_particle = NULL;\n  random = NULL;\n}\n\n/* ---------------------------------------------------------------------- */\n\nPairDSMC::~PairDSMC()\n{\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(sigma);\n    memory->destroy(cut);\n    memory->destroy(V_sigma_max);\n    memory->destroy(particle_list);\n    memory->destroy(first);\n    memory->destroy(number);\n  }\n\n  delete [] next_particle;\n  delete random;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairDSMC::compute(int eflag, int vflag)\n{\n  double **x = atom->x;\n  double *mass = atom->mass;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n\n  for (int i = 1; i <= atom->ntypes; ++i)\n    for (int j = 0; j < total_ncells; ++j) {\n      first[i][j] = -1;\n      number[i][j] = 0;\n    }\n\n  if (atom->nmax > max_particles) {\n    delete [] next_particle;\n    max_particles = atom->nmax;\n    next_particle = new int[max_particles];\n  }\n\n  // find each particle's cell and sort by type\n  // assume a constant volume and shape simulation domain\n  // skip particle if outside processor domain\n\n  for (int i = 0; i < nlocal; ++i) {\n    int xcell = static_cast<int>((x[i][0] - domain->boxlo[0])/cellx);\n    int ycell = static_cast<int>((x[i][1] - domain->boxlo[1])/celly);\n    int zcell = static_cast<int>((x[i][2] - domain->boxlo[2])/cellz);\n\n    if ((xcell < 0) || (xcell > ncellsx-1) ||\n        (ycell < 0) || (ycell > ncellsy-1) ||\n        (zcell < 0) || (zcell > ncellsz-1)) continue;\n\n    int icell = xcell + ycell*ncellsx + zcell*ncellsx*ncellsy;\n    itype = type[i];\n    next_particle[i] = first[itype][icell];\n    first[itype][icell] = i;\n    number[itype][icell]++;\n  }\n\n  for (int icell = 0; icell < total_ncells; ++icell) {\n\n    for (itype = 1; itype <= atom->ntypes; ++itype) {\n      number_of_A = number[itype][icell];\n      if (number_of_A > max_particle_list) {\n        max_particle_list = number_of_A;\n        memory->grow(particle_list,atom->ntypes+1,max_particle_list,\n                     \"pair:particle_list\");\n      }\n\n      int m = first[itype][icell];\n      for (int k = 0; k < number_of_A; k++) {\n        particle_list[itype][k] = m;\n        m = next_particle[m];\n      }\n    }\n\n    for (itype = 1; itype <= atom->ntypes; ++itype) {\n      imass = mass[itype];\n      number_of_A = number[itype][icell];\n\n      for (jtype = itype; jtype <= atom->ntypes; ++jtype) {\n        jmass = mass[jtype];\n        number_of_B = number[jtype][icell];\n\n        reduced_mass = imass*jmass/(imass + jmass);\n        total_mass = imass + jmass;\n        jmass_tmass = jmass/total_mass;\n        imass_tmass = imass/total_mass;\n\n        // if necessary, recompute V_sigma_max values\n\n        if (recompute_vsigmamax_stride &&\n            (update->ntimestep % recompute_vsigmamax_stride == 0))\n          recompute_V_sigma_max(icell);\n\n        // # of collisions to perform for itype-jtype pairs\n\n        double &Vs_max = V_sigma_max[itype][jtype];\n        double num_of_collisions_double = number_of_A * number_of_B *\n          weighting * Vs_max * update->dt / vol;\n\n        if ((itype == jtype) && number_of_B)\n          num_of_collisions_double *=\n            0.5 * double(number_of_B - 1) / double(number_of_B);\n\n        int num_of_collisions =\n          convert_double_to_equivalent_int(num_of_collisions_double);\n\n        if (num_of_collisions > number_of_A)\n          error->warning(FLERR,\"Pair dsmc: num_of_collisions > number_of_A\",0);\n        if (num_of_collisions > number_of_B)\n          error->warning(FLERR,\"Pair dsmc: num_of_collisions > number_of_B\",0);\n\n        // perform collisions on pairs of particles in icell\n\n        for (int k = 0; k < num_of_collisions; k++) {\n          if ((number_of_A < 1) || (number_of_B < 1)) break;\n          if ((itype == jtype) && (number_of_A < 2)) break;\n          int ith_A = static_cast<int>(random->uniform()*number_of_A);\n          int jth_B = static_cast<int>(random->uniform()*number_of_B);\n          int i = particle_list[itype][ith_A];\n          int j = particle_list[jtype][jth_B];\n          if (i == j) {\n            k--;\n            continue;\n          }\n          double probability = V_sigma(i,j)/Vs_max;\n          if (probability > random->uniform()) scatter_random(i,j,icell);\n        }\n      }\n    }\n  }\n}\n\n/* ----------------------------------------------------------------------\n   allocate all arrays\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n\n  memory->create(cut,n+1,n+1,\"pair:cut\");\n  memory->create(sigma,n+1,n+1,\"pair:sigma\");\n  memory->create(V_sigma_max,n+1,n+1,\"pair:V_sigma_max\");\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::settings(int narg, char **arg)\n{\n  if (narg != 6) error->all(FLERR,\"Illegal pair_style command\");\n\n  cut_global = 0.0;\n  max_cell_size = force->numeric(FLERR,arg[0]);\n  seed = force->inumeric(FLERR,arg[1]);\n  weighting = force->numeric(FLERR,arg[2]);\n  T_ref = force->numeric(FLERR,arg[3]);\n  recompute_vsigmamax_stride = force->inumeric(FLERR,arg[4]);\n  vsigmamax_samples = force->inumeric(FLERR,arg[5]);\n\n  // initialize Marsaglia RNG with processor-unique seed\n\n  if (max_cell_size <= 0.0) error->all(FLERR,\"Illegal pair_style command\");\n  if (seed <= 0) error->all(FLERR,\"Illegal pair_style command\");\n  if (random) delete random;\n  random = new RanMars(lmp,seed + comm->me);\n\n  kT_ref = force->boltz*T_ref;\n\n  // reset cutoffs that have been explicitly set\n\n  if (allocated) {\n    int i,j;\n    for (i = 1; i <= atom->ntypes; i++)\n      for (j = i; j <= atom->ntypes; j++)\n        if (setflag[i][j]) cut[i][j] = cut_global;\n  }\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::coeff(int narg, char **arg)\n{\n  if (narg < 3 || narg > 4) error->all(FLERR,\"Incorrect args for pair coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi,jlo,jhi;\n  force->bounds(FLERR,arg[0],atom->ntypes,ilo,ihi);\n  force->bounds(FLERR,arg[1],atom->ntypes,jlo,jhi);\n\n  double sigma_one = force->numeric(FLERR,arg[2]);\n\n  double cut_one = cut_global;\n  if (narg == 4) cut_one = force->numeric(FLERR,arg[3]);\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    for (int j = MAX(jlo,i); j <= jhi; j++) {\n      sigma[i][j] = sigma_one;\n      cut[i][j] = cut_one;\n      setflag[i][j] = 1;\n      count++;\n    }\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::init_style()\n{\n  ncellsx = ncellsy = ncellsz = 1;\n  while (((domain->boxhi[0] - domain->boxlo[0])/ncellsx) > max_cell_size)\n    ncellsx++;\n  while (((domain->boxhi[1] - domain->boxlo[1])/ncellsy) > max_cell_size)\n    ncellsy++;\n  while (((domain->boxhi[2] - domain->boxlo[2])/ncellsz) > max_cell_size)\n    ncellsz++;\n\n  cellx = (domain->boxhi[0] - domain->boxlo[0])/ncellsx;\n  celly = (domain->boxhi[1] - domain->boxlo[1])/ncellsy;\n  cellz = (domain->boxhi[2] - domain->boxlo[2])/ncellsz;\n\n  if (comm->me == 0) {\n    if (screen) fprintf(screen,\"DSMC cell size = %g x %g x %g\\n\",\n                        cellx,celly,cellz);\n    if (logfile) fprintf(logfile,\"DSMC cell size = %g x %g x %g\\n\",\n                         cellx,celly,cellz);\n  }\n\n  total_ncells = ncellsx*ncellsy*ncellsz;\n  vol = cellx*celly*cellz;\n\n  memory->create(particle_list,atom->ntypes+1,0,\"pair:particle_list\");\n  memory->create(first,atom->ntypes+1,total_ncells,\"pair:first\");\n  memory->create(number,atom->ntypes+1,total_ncells,\"pair:number\");\n\n  for (int i = 1; i <= atom->ntypes; i++)\n    for (int j = 1; j <= atom->ntypes; j++)\n      V_sigma_max[i][j] = 0.0;\n\n  two_pi = 8.0*atan(1.0);\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairDSMC::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) cut[i][j] = 0.0;\n  return cut[i][j];\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::write_restart(FILE *fp)\n{\n  write_restart_settings(fp);\n\n  int i,j;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      fwrite(&setflag[i][j],sizeof(int),1,fp);\n      if (setflag[i][j]) {\n        fwrite(&sigma[i][j],sizeof(double),1,fp);\n        fwrite(&cut[i][j],sizeof(double),1,fp);\n      }\n    }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::read_restart(FILE *fp)\n{\n  read_restart_settings(fp);\n  allocate();\n\n  int i,j;\n  int me = comm->me;\n  for (i = 1; i <= atom->ntypes; i++)\n    for (j = i; j <= atom->ntypes; j++) {\n      if (me == 0) fread(&setflag[i][j],sizeof(int),1,fp);\n      MPI_Bcast(&setflag[i][j],1,MPI_INT,0,world);\n      if (setflag[i][j]) {\n        if (me == 0) {\n          fread(&sigma[i][j],sizeof(double),1,fp);\n          fread(&cut[i][j],sizeof(double),1,fp);\n        }\n        MPI_Bcast(&sigma[i][j],1,MPI_DOUBLE,0,world);\n        MPI_Bcast(&cut[i][j],1,MPI_DOUBLE,0,world);\n      }\n    }\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 writes to restart file\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::write_restart_settings(FILE *fp)\n{\n  fwrite(&cut_global,sizeof(double),1,fp);\n  fwrite(&max_cell_size,sizeof(double),1,fp);\n  fwrite(&seed,sizeof(int),1,fp);\n  fwrite(&offset_flag,sizeof(int),1,fp);\n  fwrite(&mix_flag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n  proc 0 reads from restart file, bcasts\n------------------------------------------------------------------------- */\n\nvoid PairDSMC::read_restart_settings(FILE *fp)\n{\n  if (comm->me == 0) {\n    fread(&cut_global,sizeof(double),1,fp);\n    fread(&max_cell_size,sizeof(double),1,fp);\n    fread(&seed,sizeof(int),1,fp);\n    fread(&offset_flag,sizeof(int),1,fp);\n    fread(&mix_flag,sizeof(int),1,fp);\n  }\n\n  MPI_Bcast(&cut_global,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&max_cell_size,1,MPI_DOUBLE,0,world);\n  MPI_Bcast(&seed,1,MPI_INT,0,world);\n  MPI_Bcast(&offset_flag,1,MPI_INT,0,world);\n  MPI_Bcast(&mix_flag,1,MPI_INT,0,world);\n\n  // initialize Marsaglia RNG with processor-unique seed\n  // same seed that pair_style command initially specified\n\n  if (random) delete random;\n  random = new RanMars(lmp,seed + comm->me);\n}\n\n/*-------------------------------------------------------------------------\n  rezero and recompute the V_sigma_max values this timestep for use during\n  the next nrezero timesteps\n-------------------------------------------------------------------------*/\n\nvoid PairDSMC::recompute_V_sigma_max(int icell)\n{\n  int i,j,k;\n  double Vsigma_max = 0;\n\n  if (number_of_A && number_of_B) {\n    for (k = 0; k < vsigmamax_samples; k++) {\n      i = particle_list[itype]\n        [static_cast<int>(random->uniform()*number_of_A)];\n      j = particle_list[jtype]\n        [static_cast<int>(random->uniform()*number_of_B)];\n      if (i == j) continue;\n      Vsigma_max = MAX(Vsigma_max,V_sigma(i,j));\n    }\n  }\n  V_sigma_max[itype][jtype] = Vsigma_max;\n}\n\n/*-------------------------------------------------------------------------\n  VHS model\n  compute the velocity vector difference between i and j and multiply by\n  their combined collision cross section, sigma, for neutral-neutral\n  collisions using the Variable Hard Sphere model\n-------------------------------------------------------------------------*/\n\ndouble PairDSMC::V_sigma(int i, int j)\n{\n  double relative_velocity_sq,relative_velocity,pair_sigma;\n  double delv[3];\n  double *vi = atom->v[i];\n  double *vj = atom->v[j];\n\n  subtract3d(vi,vj,delv);\n  relative_velocity_sq = dot3d(delv,delv);\n  relative_velocity = sqrt(relative_velocity_sq);\n\n  // from Bird eq 4.63, and omega=0.67\n  // (omega - 0.5) = 0.17\n  // 1/GAMMA(2.5 - omega) = 1.06418029298371\n\n  if (relative_velocity_sq != 0.0)\n    pair_sigma = sigma[itype][jtype]*\n      pow(kT_ref/(0.5*reduced_mass*relative_velocity_sq),0.17) *\n      1.06418029298371;\n  else\n    pair_sigma = 0.0;\n\n  return relative_velocity*pair_sigma;\n}\n\n/*-------------------------------------------------------------------------\n  generate new velocities for collided particles\n-------------------------------------------------------------------------*/\n\nvoid PairDSMC::scatter_random(int i, int j, int icell)\n{\n  double mag_delv,cos_phi,cos_squared,r,theta;\n  double delv[3],vcm[3];\n  double *vi = atom->v[i];\n  double *vj = atom->v[j];\n\n  subtract3d(vi,vj,delv);\n  if (itype == jtype) mag_delv = sqrt(dot3d(delv,delv))*0.5;\n  else mag_delv = sqrt(dot3d(delv,delv));\n\n  cos_phi = 1.0 - (2.0*random->uniform());\n  cos_squared = MIN(1.0,cos_phi*cos_phi);\n  r = sqrt(1.0 - cos_squared);\n  delv[0] = cos_phi*mag_delv;\n  theta = two_pi*random->uniform();\n  delv[1] = r*mag_delv*cos(theta);\n  delv[2] = r*mag_delv*sin(theta);\n\n  if (itype == jtype) {\n    vcm[0] = (vi[0]+vj[0])*0.5;\n    vcm[1] = (vi[1]+vj[1])*0.5;\n    vcm[2] = (vi[2]+vj[2])*0.5;\n    vi[0] = vcm[0] + delv[0];\n    vi[1] = vcm[1] + delv[1];\n    vi[2] = vcm[2] + delv[2];\n    vj[0] = vcm[0] - delv[0];\n    vj[1] = vcm[1] - delv[1];\n    vj[2] = vcm[2] - delv[2];\n  } else {\n    vcm[0] = vi[0]*imass_tmass + vj[0]*jmass_tmass;\n    vcm[1] = vi[1]*imass_tmass + vj[1]*jmass_tmass;\n    vcm[2] = vi[2]*imass_tmass + vj[2]*jmass_tmass;\n    vi[0] = vcm[0] + delv[0]*jmass_tmass;\n    vi[1] = vcm[1] + delv[1]*jmass_tmass;\n    vi[2] = vcm[2] + delv[2]*jmass_tmass;\n    vj[0] = vcm[0] - delv[0]*imass_tmass;\n    vj[1] = vcm[1] - delv[1]*imass_tmass;\n    vj[2] = vcm[2] - delv[2]*imass_tmass;\n  }\n\n  total_number_of_collisions++;\n}\n\n/* ----------------------------------------------------------------------\n   This method converts the double supplied by the calling function into\n   an int, which is returned. By adding a random number between 0 and 1\n   to the double before converting it to an int, we ensure that,\n   statistically, we round down with probability identical to the\n   remainder and up the rest of the time. So even though we're using an\n   integer, we're statistically matching the exact expression represented\n   by the double.\n------------------------------------------------------------------------- */\n\nint PairDSMC::convert_double_to_equivalent_int(double input_double)\n{\n  if (input_double > INT_MAX)\n    error->all(FLERR,\"Tried to convert a double to int, but input_double > INT_MAX\");\n\n  int output_int = static_cast<int>(input_double + random->uniform());\n  return output_int;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef PAIR_CLASS\n\nPairStyle(dsmc,PairDSMC)\n\n#else\n\n#ifndef LMP_PAIR_DSMC_H\n#define LMP_PAIR_DSMC_H\n\n#include \"pair.h\"\n\nnamespace LAMMPS_NS {\n\nclass PairDSMC : public Pair {\n public:\n  PairDSMC(class LAMMPS *);\n  virtual ~PairDSMC();\n  virtual void compute(int, int);\n  virtual void settings(int, char **);\n  void coeff(int, char **);\n  void init_style();\n  double init_one(int, int);\n  void write_restart(FILE *);\n  void read_restart(FILE *);\n  virtual void write_restart_settings(FILE *);\n  virtual void read_restart_settings(FILE *);\n\n private:\n  double cut_global;\n  double **cut;\n  double **sigma;\n\n  double cellx;\n  double celly;\n  double cellz;\n  int ncellsx;\n  int ncellsy;\n  int ncellsz;\n  int total_ncells;\n  int total_number_of_collisions;\n  int recompute_vsigmamax_stride;\n  int vsigmamax_samples;\n  double T_ref;\n  double kT_ref;\n  double two_pi;\n  double max_cell_size;\n\n  int seed;\n  int number_of_A;\n  int number_of_B;\n  int max_particle_list;\n\n  class RanMars *random;\n\n  int **particle_list;\n  int **first;\n  int **number;\n\n  double **V_sigma_max;\n\n  int max_particles;\n  int *next_particle;\n\n  int itype;\n  int jtype;\n\n  double imass;\n  double jmass;\n  double total_mass;\n  double reduced_mass;\n  double imass_tmass;\n  double jmass_tmass;\n  double vol;\n  double weighting;\n\n  void allocate();\n  void recompute_V_sigma_max(int);\n  double V_sigma(int, int);\n  void scatter_random(int, int, int);\n  int convert_double_to_equivalent_int(double);\n\n  inline void subtract3d(const double *v1, const double *v2, double *v3) {\n    v3[0] = v2[0] - v1[0];\n    v3[1] = v2[1] - v1[1];\n    v3[2] = v2[2] - v1[2];\n  }\n\n  inline double dot3d(const double *v1, const double *v2) {\n    return( v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2] );\n  }\n};\n\n}\n\n#endif\n#endif\n\n/* ERROR/WARNING messages:\n\nW: Pair dsmc: num_of_collisions > number_of_A\n\nCollision model in DSMC is breaking down.\n\nW: Pair dsmc: num_of_collisions > number_of_B\n\nCollision model in DSMC is breaking down.\n\nE: Illegal ... command\n\nSelf-explanatory.  Check the input script syntax and compare to the\ndocumentation for the command.  You can use -echo screen as a\ncommand-line option when running LAMMPS to see the offending line.\n\nE: Incorrect args for pair coefficients\n\nSelf-explanatory.  Check the input script or data file.\n\nE: Tried to convert a double to int, but input_double > INT_MAX\n\nSelf-explanatory.\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Paul Crozier (SNL)\n     The force-shifted sections were provided by Robert Meissner \n     and Lucio Colombi Ciacchi of Bremen University, Bremen, Germany,\n     with additional assistance from Robert A. Latour, Clemson University \n------------------------------------------------------------------------- */\n\n#include <mpi.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"dihedral_charmmfsw.h\"\n#include \"atom.h\"\n#include \"comm.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"force.h\"\n#include \"pair.h\"\n#include \"update.h\"\n#include \"respa.h\"\n#include \"math_const.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\nusing namespace MathConst;\n\n#define TOLERANCE 0.05\n\n/* ---------------------------------------------------------------------- */\n\nDihedralCharmmfsw::DihedralCharmmfsw(LAMMPS *lmp) : Dihedral(lmp)\n{\n  weightflag = 0;\n  writedata = 1;\n}\n\n/* ---------------------------------------------------------------------- */\n\nDihedralCharmmfsw::~DihedralCharmmfsw()\n{\n  if (allocated && !copymode) {\n    memory->destroy(setflag);\n    memory->destroy(k);\n    memory->destroy(multiplicity);\n    memory->destroy(shift);\n    memory->destroy(cos_shift);\n    memory->destroy(sin_shift);\n    memory->destroy(weight);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,i4,i,m,n,type;\n  double vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z,vb2xm,vb2ym,vb2zm;\n  double edihedral,f1[3],f2[3],f3[3],f4[3];\n  double ax,ay,az,bx,by,bz,rasq,rbsq,rgsq,rg,rginv,ra2inv,rb2inv,rabinv;\n  double df,df1,ddf1,fg,hg,fga,hgb,gaa,gbb;\n  double dtfx,dtfy,dtfz,dtgx,dtgy,dtgz,dthx,dthy,dthz;\n  double c,s,p,sx2,sy2,sz2;\n  int itype,jtype;\n  double delx,dely,delz,rsq,r2inv,r6inv,r;\n  double forcecoul,forcelj,fpair,ecoul,evdwl;\n\n  edihedral = evdwl = ecoul = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  // insure pair->ev_tally() will use 1-4 virial contribution\n\n  if (weightflag && vflag_global == 2)\n    force->pair->vflag_either = force->pair->vflag_global = 1;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  double *q = atom->q;\n  int *atomtype = atom->type;\n  int **dihedrallist = neighbor->dihedrallist;\n  int ndihedrallist = neighbor->ndihedrallist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n  double qqrd2e = force->qqrd2e;\n\n  for (n = 0; n < ndihedrallist; n++) {\n    i1 = dihedrallist[n][0];\n    i2 = dihedrallist[n][1];\n    i3 = dihedrallist[n][2];\n    i4 = dihedrallist[n][3];\n    type = dihedrallist[n][4];\n\n    // 1st bond\n\n    vb1x = x[i1][0] - x[i2][0];\n    vb1y = x[i1][1] - x[i2][1];\n    vb1z = x[i1][2] - x[i2][2];\n\n    // 2nd bond\n\n    vb2x = x[i3][0] - x[i2][0];\n    vb2y = x[i3][1] - x[i2][1];\n    vb2z = x[i3][2] - x[i2][2];\n\n    vb2xm = -vb2x;\n    vb2ym = -vb2y;\n    vb2zm = -vb2z;\n\n    // 3rd bond\n\n    vb3x = x[i4][0] - x[i3][0];\n    vb3y = x[i4][1] - x[i3][1];\n    vb3z = x[i4][2] - x[i3][2];\n\n    ax = vb1y*vb2zm - vb1z*vb2ym;\n    ay = vb1z*vb2xm - vb1x*vb2zm;\n    az = vb1x*vb2ym - vb1y*vb2xm;\n    bx = vb3y*vb2zm - vb3z*vb2ym;\n    by = vb3z*vb2xm - vb3x*vb2zm;\n    bz = vb3x*vb2ym - vb3y*vb2xm;\n\n    rasq = ax*ax + ay*ay + az*az;\n    rbsq = bx*bx + by*by + bz*bz;\n    rgsq = vb2xm*vb2xm + vb2ym*vb2ym + vb2zm*vb2zm;\n    rg = sqrt(rgsq);\n\n    rginv = ra2inv = rb2inv = 0.0;\n    if (rg > 0) rginv = 1.0/rg;\n    if (rasq > 0) ra2inv = 1.0/rasq;\n    if (rbsq > 0) rb2inv = 1.0/rbsq;\n    rabinv = sqrt(ra2inv*rb2inv);\n\n    c = (ax*bx + ay*by + az*bz)*rabinv;\n    s = rg*rabinv*(ax*vb3x + ay*vb3y + az*vb3z);\n\n    // error check\n\n    if (c > 1.0 + TOLERANCE || c < (-1.0 - TOLERANCE)) {\n      int me;\n      MPI_Comm_rank(world,&me);\n      if (screen) {\n        char str[128];\n        sprintf(str,\"Dihedral problem: %d \" BIGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT \" \"\n                TAGINT_FORMAT \" \" TAGINT_FORMAT,\n                me,update->ntimestep,\n                atom->tag[i1],atom->tag[i2],atom->tag[i3],atom->tag[i4]);\n        error->warning(FLERR,str,0);\n        fprintf(screen,\"  1st atom: %d %g %g %g\\n\",\n                me,x[i1][0],x[i1][1],x[i1][2]);\n        fprintf(screen,\"  2nd atom: %d %g %g %g\\n\",\n                me,x[i2][0],x[i2][1],x[i2][2]);\n        fprintf(screen,\"  3rd atom: %d %g %g %g\\n\",\n                me,x[i3][0],x[i3][1],x[i3][2]);\n        fprintf(screen,\"  4th atom: %d %g %g %g\\n\",\n                me,x[i4][0],x[i4][1],x[i4][2]);\n      }\n    }\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    m = multiplicity[type];\n    p = 1.0;\n    ddf1 = df1 = 0.0;\n\n    for (i = 0; i < m; i++) {\n      ddf1 = p*c - df1*s;\n      df1 = p*s + df1*c;\n      p = ddf1;\n    }\n\n    p = p*cos_shift[type] + df1*sin_shift[type];\n    df1 = df1*cos_shift[type] - ddf1*sin_shift[type];\n    df1 *= -m;\n    p += 1.0;\n\n    if (m == 0) {\n      p = 1.0 + cos_shift[type];\n      df1 = 0.0;\n    }\n\n    if (eflag) edihedral = k[type] * p;\n\n    fg = vb1x*vb2xm + vb1y*vb2ym + vb1z*vb2zm;\n    hg = vb3x*vb2xm + vb3y*vb2ym + vb3z*vb2zm;\n    fga = fg*ra2inv*rginv;\n    hgb = hg*rb2inv*rginv;\n    gaa = -ra2inv*rg;\n    gbb = rb2inv*rg;\n\n    dtfx = gaa*ax;\n    dtfy = gaa*ay;\n    dtfz = gaa*az;\n    dtgx = fga*ax - hgb*bx;\n    dtgy = fga*ay - hgb*by;\n    dtgz = fga*az - hgb*bz;\n    dthx = gbb*bx;\n    dthy = gbb*by;\n    dthz = gbb*bz;\n\n    df = -k[type] * df1;\n\n    sx2 = df*dtgx;\n    sy2 = df*dtgy;\n    sz2 = df*dtgz;\n\n    f1[0] = df*dtfx;\n    f1[1] = df*dtfy;\n    f1[2] = df*dtfz;\n\n    f2[0] = sx2 - f1[0];\n    f2[1] = sy2 - f1[1];\n    f2[2] = sz2 - f1[2];\n\n    f4[0] = df*dthx;\n    f4[1] = df*dthy;\n    f4[2] = df*dthz;\n\n    f3[0] = -sx2 - f4[0];\n    f3[1] = -sy2 - f4[1];\n    f3[2] = -sz2 - f4[2];\n\n    // apply force to each of 4 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] += f2[0];\n      f[i2][1] += f2[1];\n      f[i2][2] += f2[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (newton_bond || i4 < nlocal) {\n      f[i4][0] += f4[0];\n      f[i4][1] += f4[1];\n      f[i4][2] += f4[2];\n    }\n\n    if (evflag)\n      ev_tally(i1,i2,i3,i4,nlocal,newton_bond,edihedral,f1,f3,f4,\n               vb1x,vb1y,vb1z,vb2x,vb2y,vb2z,vb3x,vb3y,vb3z);\n\n    // 1-4 LJ and Coulomb interactions\n    // tally energy/virial in pair, using newton_bond as newton flag\n\n    if (weight[type] > 0.0) {\n      itype = atomtype[i1];\n      jtype = atomtype[i4];\n\n      delx = x[i1][0] - x[i4][0];\n      dely = x[i1][1] - x[i4][1];\n      delz = x[i1][2] - x[i4][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n      r2inv = 1.0/rsq;\n      r6inv = r2inv*r2inv*r2inv;\n\n      // modifying coul and LJ force and energies to apply \n      //   force_shift and force_switch as in CHARMM pairwise\n      // LJ interactions between 1-4 atoms should usually be\n      //   for r < cut_inner, so switching not applied\n\n      r = sqrt(rsq);\n      if (implicit) forcecoul = qqrd2e * q[i1]*q[i4]*r2inv;\n      else if (dihedflag) forcecoul = qqrd2e * q[i1]*q[i4]*sqrt(r2inv);\n      else forcecoul = qqrd2e * q[i1]*q[i4]*(sqrt(r2inv) - \n                                             r*cut_coulinv14*cut_coulinv14);\n      forcelj = r6inv * (lj14_1[itype][jtype]*r6inv - lj14_2[itype][jtype]);\n      fpair = weight[type] * (forcelj+forcecoul)*r2inv;\n\n      if (eflag) {\n        if (dihedflag) ecoul = weight[type] * forcecoul;\n        else ecoul = weight[type] * qqrd2e * q[i1]*q[i4] *\n               (sqrt(r2inv) + r*cut_coulinv14*cut_coulinv14 - \n                2.0*cut_coulinv14);\n        evdwl14_12 = r6inv*lj14_3[itype][jtype]*r6inv - \n          lj14_3[itype][jtype]*cut_lj_inner6inv*cut_lj6inv;\n        evdwl14_6 = -lj14_4[itype][jtype]*r6inv + \n          lj14_4[itype][jtype]*cut_lj_inner3inv*cut_lj3inv;\n        evdwl = evdwl14_12 + evdwl14_6;\n        evdwl *= weight[type];\n      }\n\n      if (newton_bond || i1 < nlocal) {\n        f[i1][0] += delx*fpair;\n        f[i1][1] += dely*fpair;\n        f[i1][2] += delz*fpair;\n      }\n      if (newton_bond || i4 < nlocal) {\n        f[i4][0] -= delx*fpair;\n        f[i4][1] -= dely*fpair;\n        f[i4][2] -= delz*fpair;\n      }\n\n      if (evflag) force->pair->ev_tally(i1,i4,nlocal,newton_bond,\n                                        evdwl,ecoul,fpair,delx,dely,delz);\n    }\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::allocate()\n{\n  allocated = 1;\n  int n = atom->ndihedraltypes;\n\n  memory->create(k,n+1,\"dihedral:k\");\n  memory->create(multiplicity,n+1,\"dihedral:k\");\n  memory->create(shift,n+1,\"dihedral:shift\");\n  memory->create(cos_shift,n+1,\"dihedral:cos_shift\");\n  memory->create(sin_shift,n+1,\"dihedral:sin_shift\");\n  memory->create(weight,n+1,\"dihedral:weight\");\n\n  memory->create(setflag,n+1,\"dihedral:setflag\");\n  for (int i = 1; i <= n; i++) setflag[i] = 0;\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one type\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::coeff(int narg, char **arg)\n{\n  if (narg != 5) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n  if (!allocated) allocate();\n\n  int ilo,ihi;\n  force->bounds(FLERR,arg[0],atom->ndihedraltypes,ilo,ihi);\n\n  // require integer values of shift for backwards compatibility\n  // arbitrary phase angle shift could be allowed, but would break\n  //   backwards compatibility and is probably not needed\n\n  double k_one = force->numeric(FLERR,arg[1]);\n  int multiplicity_one = force->inumeric(FLERR,arg[2]);\n  int shift_one = force->inumeric(FLERR,arg[3]);\n  double weight_one = force->numeric(FLERR,arg[4]);\n\n  if (multiplicity_one < 0)\n    error->all(FLERR,\"Incorrect multiplicity arg for dihedral coefficients\");\n  if (weight_one < 0.0 || weight_one > 1.0)\n    error->all(FLERR,\"Incorrect weight arg for dihedral coefficients\");\n  if (weight_one > 0.0) weightflag=1;\n\n  int count = 0;\n  for (int i = ilo; i <= ihi; i++) {\n    k[i] = k_one;\n    shift[i] = shift_one;\n    cos_shift[i] = cos(MY_PI*shift_one/180.0);\n    sin_shift[i] = sin(MY_PI*shift_one/180.0);\n    multiplicity[i] = multiplicity_one;\n    weight[i] = weight_one;\n    setflag[i] = 1;\n    count++;\n  }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for dihedral coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   error check and initialize all values needed for force computation\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::init_style()\n{\n  if (strstr(update->integrate_style,\"respa\")) {\n    Respa *r = (Respa *) update->integrate;\n    if (r->level_pair >= 0 && (r->level_pair != r->level_dihedral))\n      error->all(FLERR,\"Dihedral style charmmfsw must be set to same\"\n        \" r-RESPA level as 'pair'\");\n    if (r->level_outer >= 0 && (r->level_outer != r->level_dihedral))\n      error->all(FLERR,\"Dihedral style charmmfsw must be set to same\"\n        \" r-RESPA level as 'outer'\");\n  }\n\n  // insure use of CHARMM pair_style if any weight factors are non-zero\n  // set local ptrs to LJ 14 arrays setup by Pair\n  // also verify that the correct 1-4 scaling is set\n\n  if (weightflag) {\n\n    if ((force->special_lj[3] != 0.0) || (force->special_coul[3] != 0.0))\n      error->all(FLERR,\"Must use 'special_bonds charmm' with\"\n                 \" dihedral style charmm for use with CHARMM pair styles\");\n\n    int itmp;\n    if (force->pair == NULL)\n      error->all(FLERR,\"Dihedral charmmfsw is incompatible with Pair style\");\n    lj14_1 = (double **) force->pair->extract(\"lj14_1\",itmp);\n    lj14_2 = (double **) force->pair->extract(\"lj14_2\",itmp);\n    lj14_3 = (double **) force->pair->extract(\"lj14_3\",itmp);\n    lj14_4 = (double **) force->pair->extract(\"lj14_4\",itmp);\n    int *ptr = (int *) force->pair->extract(\"implicit\",itmp);\n    if (!lj14_1 || !lj14_2 || !lj14_3 || !lj14_4 || !ptr)\n      error->all(FLERR,\"Dihedral charmmfsw is incompatible with Pair style\");\n    implicit = *ptr;\n  }\n\n  // constants for applying force switch (LJ) and force_shift (coul)\n  // to 1/4 dihedral atoms to match CHARMM pairwise interactions\n\n  int itmp;\n  int *p_dihedflag = (int *) force->pair->extract(\"dihedflag\",itmp);\n  double *p_cutljinner = (double *) force->pair->extract(\"cut_lj_inner\",itmp);\n  double *p_cutlj = (double *) force->pair->extract(\"cut_lj\",itmp);\n  double *p_cutcoul = (double *) force->pair->extract(\"cut_coul\",itmp);\n  \n  if (p_cutcoul == NULL || p_cutljinner == NULL || \n      p_cutlj == NULL || p_dihedflag == NULL)\n    error->all(FLERR,\"Dihedral charmmfsw is incompatible with Pair style\");\n  \n  dihedflag = *p_dihedflag;\n  cut_coul14 = *p_cutcoul;\n  cut_lj_inner14 = *p_cutljinner;\n  cut_lj14 = *p_cutlj;\n\n  cut_coulinv14 = 1/cut_coul14;\n  cut_lj_inner3inv = (1/cut_lj_inner14) * (1/cut_lj_inner14) * \n    (1/cut_lj_inner14);\n  cut_lj_inner6inv = cut_lj_inner3inv * cut_lj_inner3inv;\n  cut_lj3inv = (1/cut_lj14) * (1/cut_lj14) * (1/cut_lj14);\n  cut_lj6inv = cut_lj3inv * cut_lj3inv;\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes out coeffs to restart file\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::write_restart(FILE *fp)\n{\n  fwrite(&k[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&multiplicity[1],sizeof(int),atom->ndihedraltypes,fp);\n  fwrite(&shift[1],sizeof(int),atom->ndihedraltypes,fp);\n  fwrite(&weight[1],sizeof(double),atom->ndihedraltypes,fp);\n  fwrite(&weightflag,sizeof(int),1,fp);\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 reads coeffs from restart file, bcasts them\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::read_restart(FILE *fp)\n{\n  allocate();\n\n  if (comm->me == 0) {\n    fread(&k[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&multiplicity[1],sizeof(int),atom->ndihedraltypes,fp);\n    fread(&shift[1],sizeof(int),atom->ndihedraltypes,fp);\n    fread(&weight[1],sizeof(double),atom->ndihedraltypes,fp);\n    fread(&weightflag,sizeof(int),1,fp);\n  }\n  MPI_Bcast(&k[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&multiplicity[1],atom->ndihedraltypes,MPI_INT,0,world);\n  MPI_Bcast(&shift[1],atom->ndihedraltypes,MPI_INT,0,world);\n  MPI_Bcast(&weight[1],atom->ndihedraltypes,MPI_DOUBLE,0,world);\n  MPI_Bcast(&weightflag,1,MPI_INT,0,world);\n\n  for (int i = 1; i <= atom->ndihedraltypes; i++) {\n    setflag[i] = 1;\n    cos_shift[i] = cos(MY_PI*shift[i]/180.0);\n    sin_shift[i] = sin(MY_PI*shift[i]/180.0);\n  }\n}\n\n/* ----------------------------------------------------------------------\n   proc 0 writes to data file\n------------------------------------------------------------------------- */\n\nvoid DihedralCharmmfsw::write_data(FILE *fp)\n{\n  for (int i = 1; i <= atom->ndihedraltypes; i++)\n    fprintf(fp,\"%d %g %d %d %g\\n\",i,k[i],multiplicity[i],shift[i],weight[i]);\n}\n\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author:  Yongnan Xiong (HNU), xyn@hnu.edu.cn\n                         Aidan Thompson (SNL)\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"pair_vashishta.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"neigh_request.h\"\n#include \"force.h\"\n#include \"comm.h\"\n#include \"memory.h\"\n#include \"neighbor.h\"\n#include \"neigh_list.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define MAXLINE 1024\n#define DELTA 4\n\n/* ---------------------------------------------------------------------- */\n\nPairVashishta::PairVashishta(LAMMPS *lmp) : Pair(lmp)\n{\n  single_enable = 0;\n  restartinfo = 0;\n  one_coeff = 1;\n  manybody_flag = 1;\n\n  nelements = 0;\n  elements = NULL;\n  nparams = maxparam = 0;\n  params = NULL;\n  elem2param = NULL;\n  map = NULL;\n\n  r0max = 0.0;\n  maxshort = 10;\n  neighshort = NULL;\n}\n\n/* ----------------------------------------------------------------------\n   check if allocated, since class can be destructed when incomplete\n------------------------------------------------------------------------- */\n\nPairVashishta::~PairVashishta()\n{\n  if (copymode) return;\n  \n  if (elements)\n    for (int i = 0; i < nelements; i++) delete [] elements[i];\n  delete [] elements;\n  memory->destroy(params);\n  memory->destroy(elem2param);\n\n  if (allocated) {\n    memory->destroy(setflag);\n    memory->destroy(cutsq);\n    memory->destroy(neighshort);\n    delete [] map;\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishta::compute(int eflag, int vflag)\n{\n  int i,j,k,ii,jj,kk,inum,jnum,jnumm1;\n  int itype,jtype,ktype,ijparam,ikparam,ijkparam;\n  tagint itag,jtag;\n  double xtmp,ytmp,ztmp,delx,dely,delz,evdwl,fpair;\n  double rsq,rsq1,rsq2;\n  double delr1[3],delr2[3],fj[3],fk[3];\n  int *ilist,*jlist,*numneigh,**firstneigh;\n\n  evdwl = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = vflag_fdotr = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  tagint *tag = atom->tag;\n  int *type = atom->type;\n  int nlocal = atom->nlocal;\n  int newton_pair = force->newton_pair;\n  const double cutshortsq = r0max*r0max;\n\n  inum = list->inum;\n  ilist = list->ilist;\n  numneigh = list->numneigh;\n  firstneigh = list->firstneigh;\n\n  double fxtmp,fytmp,fztmp;\n\n  // loop over full neighbor list of my atoms\n\n  for (ii = 0; ii < inum; ii++) {\n    i = ilist[ii];\n    itag = tag[i];\n    itype = map[type[i]];\n    xtmp = x[i][0];\n    ytmp = x[i][1];\n    ztmp = x[i][2];\n    fxtmp = fytmp = fztmp = 0.0;\n\n    // two-body interactions, skip half of them\n\n    jlist = firstneigh[i];\n    jnum = numneigh[i];\n    int numshort = 0;\n\n    for (jj = 0; jj < jnum; jj++) {\n      j = jlist[jj];\n      j &= NEIGHMASK;\n\n      delx = xtmp - x[j][0];\n      dely = ytmp - x[j][1];\n      delz = ztmp - x[j][2];\n      rsq = delx*delx + dely*dely + delz*delz;\n\n      if (rsq < cutshortsq) {\n        neighshort[numshort++] = j;\n        if (numshort >= maxshort) {\n          maxshort += maxshort/2;\n          memory->grow(neighshort,maxshort,\"pair:neighshort\");\n        }\n      }\n\n      jtag = tag[j];\n      if (itag > jtag) {\n        if ((itag+jtag) % 2 == 0) continue;\n      } else if (itag < jtag) {\n        if ((itag+jtag) % 2 == 1) continue;\n      } else {\n        if (x[j][2] < ztmp) continue;\n        if (x[j][2] == ztmp && x[j][1] < ytmp) continue;\n        if (x[j][2] == ztmp && x[j][1] == ytmp && x[j][0] < xtmp) continue;\n      }\n\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      if (rsq >= params[ijparam].cutsq) continue;\n\n      twobody(&params[ijparam],rsq,fpair,eflag,evdwl);\n\n      fxtmp += delx*fpair;\n      fytmp += dely*fpair;\n      fztmp += delz*fpair;\n      f[j][0] -= delx*fpair;\n      f[j][1] -= dely*fpair;\n      f[j][2] -= delz*fpair;\n\n      if (evflag) ev_tally(i,j,nlocal,newton_pair,\n      \t\t\t   evdwl,0.0,fpair,delx,dely,delz);\n    }\n\n    jnumm1 = numshort - 1;\n\n    for (jj = 0; jj < jnumm1; jj++) {\n      j = neighshort[jj];\n      jtype = map[type[j]];\n      ijparam = elem2param[itype][jtype][jtype];\n      delr1[0] = x[j][0] - xtmp;\n      delr1[1] = x[j][1] - ytmp;\n      delr1[2] = x[j][2] - ztmp;\n      rsq1 = delr1[0]*delr1[0] + delr1[1]*delr1[1] + delr1[2]*delr1[2];\n      if (rsq1 >= params[ijparam].cutsq2) continue;\n\n      double fjxtmp,fjytmp,fjztmp;\n      fjxtmp = fjytmp = fjztmp = 0.0;\n\n      for (kk = jj+1; kk < numshort; kk++) {\n        k = neighshort[kk];\n        ktype = map[type[k]];\n        ikparam = elem2param[itype][ktype][ktype];\n        ijkparam = elem2param[itype][jtype][ktype];\n\n        delr2[0] = x[k][0] - xtmp;\n        delr2[1] = x[k][1] - ytmp;\n        delr2[2] = x[k][2] - ztmp;\n        rsq2 = delr2[0]*delr2[0] + delr2[1]*delr2[1] + delr2[2]*delr2[2];\n        if (rsq2 >= params[ikparam].cutsq2) continue;\n\n        threebody(&params[ijparam],&params[ikparam],&params[ijkparam],\n                  rsq1,rsq2,delr1,delr2,fj,fk,eflag,evdwl);\n\n        fxtmp -= fj[0] + fk[0];\n        fytmp -= fj[1] + fk[1];\n        fztmp -= fj[2] + fk[2];\n        fjxtmp += fj[0];\n        fjytmp += fj[1];\n        fjztmp += fj[2];\n        f[k][0] += fk[0];\n        f[k][1] += fk[1];\n        f[k][2] += fk[2];\n\n        if (evflag) ev_tally3(i,j,k,evdwl,0.0,fj,fk,delr1,delr2);\n      }\n      f[j][0] += fjxtmp;\n      f[j][1] += fjytmp;\n      f[j][2] += fjztmp;\n    }\n    f[i][0] += fxtmp;\n    f[i][1] += fytmp;\n    f[i][2] += fztmp;\n  }\n\n  if (vflag_fdotr) virial_fdotr_compute();\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishta::allocate()\n{\n  allocated = 1;\n  int n = atom->ntypes;\n\n  memory->create(setflag,n+1,n+1,\"pair:setflag\");\n  memory->create(cutsq,n+1,n+1,\"pair:cutsq\");\n  memory->create(neighshort,maxshort,\"pair:neighshort\");\n\n  map = new int[n+1];\n}\n\n/* ----------------------------------------------------------------------\n   global settings\n------------------------------------------------------------------------- */\n\nvoid PairVashishta::settings(int narg, char **arg)\n{\n  if (narg != 0) error->all(FLERR,\"Illegal pair_style command\");\n}\n\n/* ----------------------------------------------------------------------\n   set coeffs for one or more type pairs\n------------------------------------------------------------------------- */\n\nvoid PairVashishta::coeff(int narg, char **arg)\n{\n  int i,j,n;\n\n  if (!allocated) allocate();\n\n  if (narg != 3 + atom->ntypes)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // insure I,J args are * *\n\n  if (strcmp(arg[0],\"*\") != 0 || strcmp(arg[1],\"*\") != 0)\n    error->all(FLERR,\"Incorrect args for pair coefficients\");\n\n  // read args that map atom types to elements in potential file\n  // map[i] = which element the Ith atom type is, -1 if NULL\n  // nelements = # of unique elements\n  // elements = list of element names\n\n  if (elements) {\n    for (i = 0; i < nelements; i++) delete [] elements[i];\n    delete [] elements;\n  }\n  elements = new char*[atom->ntypes];\n  for (i = 0; i < atom->ntypes; i++) elements[i] = NULL;\n\n  nelements = 0;\n  for (i = 3; i < narg; i++) {\n    if (strcmp(arg[i],\"NULL\") == 0) {\n      map[i-2] = -1;\n      continue;\n    }\n    for (j = 0; j < nelements; j++)\n      if (strcmp(arg[i],elements[j]) == 0) break;\n    map[i-2] = j;\n    if (j == nelements) {\n      n = strlen(arg[i]) + 1;\n      elements[j] = new char[n];\n      strcpy(elements[j],arg[i]);\n      nelements++;\n    }\n  }\n\n  // read potential file and initialize potential parameters\n\n  read_file(arg[2]);\n  setup_params();\n\n  // clear setflag since coeff() called once with I,J = * *\n\n  n = atom->ntypes;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      setflag[i][j] = 0;\n\n  // set setflag i,j for type pairs where both are mapped to elements\n\n  int count = 0;\n  for (int i = 1; i <= n; i++)\n    for (int j = i; j <= n; j++)\n      if (map[i] >= 0 && map[j] >= 0) {\n        setflag[i][j] = 1;\n        count++;\n      }\n\n  if (count == 0) error->all(FLERR,\"Incorrect args for pair coefficients\");\n}\n\n/* ----------------------------------------------------------------------\n   init specific to this pair style\n------------------------------------------------------------------------- */\n\nvoid PairVashishta::init_style()\n{\n  if (atom->tag_enable == 0)\n    error->all(FLERR,\"Pair style Vashishta requires atom IDs\");\n  if (force->newton_pair == 0)\n    error->all(FLERR,\"Pair style Vashishta requires newton pair on\");\n\n  // need a full neighbor list\n\n  int irequest = neighbor->request(this);\n  neighbor->requests[irequest]->half = 0;\n  neighbor->requests[irequest]->full = 1;\n}\n\n/* ----------------------------------------------------------------------\n   init for one type pair i,j and corresponding j,i\n------------------------------------------------------------------------- */\n\ndouble PairVashishta::init_one(int i, int j)\n{\n  if (setflag[i][j] == 0) error->all(FLERR,\"All pair coeffs are not set\");\n\n  return cutmax;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishta::read_file(char *file)\n{\n  int params_per_line = 17;\n  char **words = new char*[params_per_line+1];\n\n  memory->sfree(params);\n  params = NULL;\n  nparams = maxparam = 0;\n\n  // open file on proc 0\n\n  FILE *fp;\n  if (comm->me == 0) {\n    fp = force->open_potential(file);\n    if (fp == NULL) {\n      char str[128];\n      sprintf(str,\"Cannot open Vashishta potential file %s\",file);\n      error->one(FLERR,str);\n    }\n  }\n\n  // read each set of params from potential file\n  // one set of params can span multiple lines\n  // store params if all 3 element tags are in element list\n\n  int n,nwords,ielement,jelement,kelement;\n  char line[MAXLINE],*ptr;\n  int eof = 0;\n\n  while (1) {\n    if (comm->me == 0) {\n      ptr = fgets(line,MAXLINE,fp);\n      if (ptr == NULL) {\n        eof = 1;\n        fclose(fp);\n      } else n = strlen(line) + 1;\n    }\n    MPI_Bcast(&eof,1,MPI_INT,0,world);\n    if (eof) break;\n    MPI_Bcast(&n,1,MPI_INT,0,world);\n    MPI_Bcast(line,n,MPI_CHAR,0,world);\n\n    // strip comment, skip line if blank\n\n    if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n    nwords = atom->count_words(line);\n    if (nwords == 0) continue;\n\n    // concatenate additional lines until have params_per_line words\n\n    while (nwords < params_per_line) {\n      n = strlen(line);\n      if (comm->me == 0) {\n        ptr = fgets(&line[n],MAXLINE-n,fp);\n        if (ptr == NULL) {\n          eof = 1;\n          fclose(fp);\n        } else n = strlen(line) + 1;\n      }\n      MPI_Bcast(&eof,1,MPI_INT,0,world);\n      if (eof) break;\n      MPI_Bcast(&n,1,MPI_INT,0,world);\n      MPI_Bcast(line,n,MPI_CHAR,0,world);\n      if ((ptr = strchr(line,'#'))) *ptr = '\\0';\n      nwords = atom->count_words(line);\n    }\n\n    if (nwords != params_per_line)\n      error->all(FLERR,\"Incorrect format in Vashishta potential file\");\n\n    // words = ptrs to all words in line\n\n    nwords = 0;\n    words[nwords++] = strtok(line,\" \\t\\n\\r\\f\");\n    while ((words[nwords++] = strtok(NULL,\" \\t\\n\\r\\f\"))) continue;\n\n    // ielement,jelement,kelement = 1st args\n    // if all 3 args are in element list, then parse this line\n    // else skip to next entry in file\n\n    for (ielement = 0; ielement < nelements; ielement++)\n      if (strcmp(words[0],elements[ielement]) == 0) break;\n    if (ielement == nelements) continue;\n    for (jelement = 0; jelement < nelements; jelement++)\n      if (strcmp(words[1],elements[jelement]) == 0) break;\n    if (jelement == nelements) continue;\n    for (kelement = 0; kelement < nelements; kelement++)\n      if (strcmp(words[2],elements[kelement]) == 0) break;\n    if (kelement == nelements) continue;\n\n    // load up parameter settings and error check their values\n\n    if (nparams == maxparam) {\n      maxparam += DELTA;\n      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),\n                                          \"pair:params\");\n    }\n\n    params[nparams].ielement = ielement;\n    params[nparams].jelement = jelement;\n    params[nparams].kelement = kelement;\n    params[nparams].bigh = atof(words[3]);\n    params[nparams].eta = atof(words[4]);\n    params[nparams].zi = atof(words[5]);\n    params[nparams].zj = atof(words[6]);\n    params[nparams].lambda1 = atof(words[7]);\n    params[nparams].bigd = atof(words[8]);\n    params[nparams].lambda4 = atof(words[9]);\n    params[nparams].bigw = atof(words[10]);\n    params[nparams].cut = atof(words[11]);\n    params[nparams].bigb = atof(words[12]);\n    params[nparams].gamma = atof(words[13]);\n    params[nparams].r0 = atof(words[14]);\n    params[nparams].bigc = atof(words[15]);\n    params[nparams].costheta = atof(words[16]);\n\n    if (params[nparams].bigb < 0.0 || params[nparams].gamma < 0.0 ||\n        params[nparams].r0 < 0.0 || params[nparams].bigc < 0.0 ||\n        params[nparams].bigh < 0.0 || params[nparams].eta < 0.0 ||\n        params[nparams].lambda1 < 0.0 || params[nparams].bigd < 0.0 ||\n        params[nparams].lambda4 < 0.0 || params[nparams].bigw < 0.0 ||\n        params[nparams].cut < 0.0)\n      error->all(FLERR,\"Illegal Vashishta parameter\");\n\n    nparams++;\n  }\n\n  delete [] words;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishta::setup_params()\n{\n  int i,j,k,m,n;\n\n  // set elem2param for all triplet combinations\n  // must be a single exact match to lines read from file\n  // do not allow for ACB in place of ABC\n\n  memory->destroy(elem2param);\n  memory->create(elem2param,nelements,nelements,nelements,\"pair:elem2param\");\n\n  for (i = 0; i < nelements; i++)\n    for (j = 0; j < nelements; j++)\n      for (k = 0; k < nelements; k++) {\n        n = -1;\n        for (m = 0; m < nparams; m++) {\n          if (i == params[m].ielement && j == params[m].jelement &&\n              k == params[m].kelement) {\n            if (n >= 0) error->all(FLERR,\"Potential file has duplicate entry\");\n            n = m;\n          }\n        }\n        if (n < 0) error->all(FLERR,\"Potential file is missing an entry\");\n        elem2param[i][j][k] = n;\n      }\n\n  // compute parameter values derived from inputs\n\n  // set cutsq using shortcut to reduce neighbor list for accelerated\n  // calculations. cut must remain unchanged as it is a potential parameter\n  double tmp_par;\n\n  for (m = 0; m < nparams; m++) {\n    params[m].cutsq = params[m].cut * params[m].cut;\n    params[m].cutsq2 = params[m].r0 * params[m].r0;\n\n    tmp_par = params[m].lambda1;\n    params[m].lam1inv = (tmp_par == 0.0) ? 0.0 : 1.0/tmp_par;\n    tmp_par = params[m].lambda4;\n    params[m].lam4inv = (tmp_par == 0.0) ? 0.0 : 1.0/tmp_par;\n    params[m].zizj = params[m].zi*params[m].zj * force->qqr2e;\n    // note that bigd does not have 1/2 factor\n    params[m].mbigd = params[m].bigd;\n    params[m].heta = params[m].bigh*params[m].eta;\n    params[m].big2b = 2.0*params[m].bigb;\n    params[m].big6w = 6.0*params[m].bigw;\n\n    tmp_par = params[m].cut;\n    params[m].rcinv =  (tmp_par == 0.0) ? 0.0 : 1.0/tmp_par;\n    params[m].rc2inv = params[m].rcinv*params[m].rcinv;\n    params[m].rc4inv = params[m].rc2inv*params[m].rc2inv;\n    params[m].rc6inv = params[m].rc2inv*params[m].rc4inv;\n    params[m].rceta = pow(params[m].rcinv,params[m].eta);\n    params[m].lam1rc = params[m].cut*params[m].lam1inv;\n    params[m].lam4rc = params[m].cut*params[m].lam4inv;\n    params[m].vrcc2 = params[m].zizj*params[m].rcinv *\n      exp(-params[m].lam1rc);\n    params[m].vrcc3 = params[m].mbigd*params[m].rc4inv *\n      exp(-params[m].lam4rc);\n    params[m].vrc = params[m].bigh*params[m].rceta +\n      params[m].vrcc2 - params[m].vrcc3 -\n      params[m].bigw*params[m].rc6inv;\n\n    params[m].dvrc =\n      params[m].vrcc3 * (4.0*params[m].rcinv+params[m].lam4inv)\n      + params[m].big6w * params[m].rc6inv * params[m].rcinv\n      - params[m].heta * params[m].rceta*params[m].rcinv\n      - params[m].vrcc2 * (params[m].rcinv+params[m].lam1inv);\n    params[m].c0 = params[m].cut*params[m].dvrc - params[m].vrc;\n  }\n\n  // set cutmax to max of all cutoff params. r0max only for r0\n\n  cutmax = 0.0;\n  r0max = 0.0;\n  for (m = 0; m < nparams; m++) {\n    if (params[m].cut > cutmax) cutmax = params[m].cut;\n    if (params[m].r0 > r0max) r0max = params[m].r0;\n  }\n  if (r0max > cutmax) cutmax = r0max;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishta::twobody(Param *param, double rsq, double &fforce,\n                            int eflag, double &eng)\n{\n  double r,rinvsq,r4inv,r6inv,reta,lam1r,lam4r,vc2,vc3;\n\n  r = sqrt(rsq);\n  rinvsq = 1.0/rsq;\n  r4inv = rinvsq*rinvsq;\n  r6inv = rinvsq*r4inv;\n  reta = pow(r,-param->eta);\n  lam1r = r*param->lam1inv;\n  lam4r = r*param->lam4inv;\n  vc2 = param->zizj * exp(-lam1r)/r;\n  vc3 = param->mbigd * r4inv*exp(-lam4r);\n\n  fforce = (param->dvrc*r\n\t    - (4.0*vc3 + lam4r*vc3+param->big6w*r6inv\n\t       - param->heta*reta - vc2 - lam1r*vc2)\n\t    ) * rinvsq;\n  if (eflag) eng = param->bigh*reta\n\t       + vc2 - vc3 - param->bigw*r6inv\n\t       - r*param->dvrc + param->c0;\n}\n\n/* ---------------------------------------------------------------------- */\n\nvoid PairVashishta::threebody(Param *paramij, Param *paramik, Param *paramijk,\n                       double rsq1, double rsq2,\n                       double *delr1, double *delr2,\n                       double *fj, double *fk, int eflag, double &eng)\n{\n  double r1,rinvsq1,rainv1,gsrainv1,gsrainvsq1,expgsrainv1;\n  double r2,rinvsq2,rainv2,gsrainv2,gsrainvsq2,expgsrainv2;\n  double rinv12,cs,delcs,delcssq,facexp,facrad,frad1,frad2,pcsinv,pcsinvsq,pcs;\n  double facang,facang12,csfacang,csfac1,csfac2;\n\n  r1 = sqrt(rsq1);\n  rinvsq1 = 1.0/rsq1;\n  rainv1 = 1.0/(r1 - paramij->r0);\n  gsrainv1 = paramij->gamma * rainv1;\n  gsrainvsq1 = gsrainv1*rainv1/r1;\n  expgsrainv1 = exp(gsrainv1);\n\n  r2 = sqrt(rsq2);\n  rinvsq2 = 1.0/rsq2;\n  rainv2 = 1.0/(r2 - paramik->r0);\n  gsrainv2 = paramik->gamma * rainv2;\n  gsrainvsq2 = gsrainv2*rainv2/r2;\n  expgsrainv2 = exp(gsrainv2);\n\n  rinv12 = 1.0/(r1*r2);\n  cs = (delr1[0]*delr2[0] + delr1[1]*delr2[1] + delr1[2]*delr2[2]) * rinv12;\n  delcs = cs - paramijk->costheta;\n  delcssq = delcs*delcs;\n  pcsinv = paramijk->bigc*delcssq + 1.0;\n  pcsinvsq = pcsinv*pcsinv;\n  pcs = delcssq/pcsinv;\n\n  facexp = expgsrainv1*expgsrainv2;\n\n  facrad = paramijk->bigb * facexp * pcs;\n  frad1 = facrad*gsrainvsq1;\n  frad2 = facrad*gsrainvsq2;\n  facang = paramijk->big2b * facexp * delcs/pcsinvsq;\n  facang12 = rinv12*facang;\n  csfacang = cs*facang;\n  csfac1 = rinvsq1*csfacang;\n\n  fj[0] = delr1[0]*(frad1+csfac1)-delr2[0]*facang12;\n  fj[1] = delr1[1]*(frad1+csfac1)-delr2[1]*facang12;\n  fj[2] = delr1[2]*(frad1+csfac1)-delr2[2]*facang12;\n\n  csfac2 = rinvsq2*csfacang;\n\n  fk[0] = delr2[0]*(frad2+csfac2)-delr1[0]*facang12;\n  fk[1] = delr2[1]*(frad2+csfac2)-delr1[1]*facang12;\n  fk[2] = delr2[2]*(frad2+csfac2)-delr1[2]*facang12;\n\n  if (eflag) eng = facrad;\n}\n","/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n#ifdef ANGLE_CLASS\n\nAngleStyle(cosine/delta,AngleCosineDelta)\n\n#else\n\n#ifndef LMP_ANGLE_COSINE_DELTA_H\n#define LMP_ANGLE_COSINE_DELTA_H\n\n#include <stdio.h>\n#include \"angle_cosine_squared.h\"\n\nnamespace LAMMPS_NS {\n\nclass AngleCosineDelta : public AngleCosineSquared {\n public:\n  AngleCosineDelta(class LAMMPS *);\n  virtual void compute(int, int);\n  double single(int, int, int, int);\n};\n\n}\n\n#endif\n#endif\n/* ERROR/WARNING messages:\n\n*/\n","/* ----------------------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Axel Kohlmeyer (Temple U), akohlmey at gmail.com\n------------------------------------------------------------------------- */\n\n#include <math.h>\n#include <stdlib.h>\n#include \"angle_cosine_delta.h\"\n#include \"atom.h\"\n#include \"neighbor.h\"\n#include \"domain.h\"\n#include \"comm.h\"\n#include \"force.h\"\n#include \"memory.h\"\n#include \"error.h\"\n\nusing namespace LAMMPS_NS;\n\n#define SMALL 0.001\n\n/* ---------------------------------------------------------------------- */\n\nAngleCosineDelta::AngleCosineDelta(LAMMPS *lmp) : AngleCosineSquared(lmp) {}\n\n/* ---------------------------------------------------------------------- */\n\nvoid AngleCosineDelta::compute(int eflag, int vflag)\n{\n  int i1,i2,i3,n,type;\n  double delx1,dely1,delz1,delx2,dely2,delz2,theta,dtheta,dcostheta,tk;\n  double eangle,f1[3],f3[3];\n  double rsq1,rsq2,r1,r2,c,a,cot,a11,a12,a22,b11,b12,b22,c0,s0,s;\n\n  eangle = 0.0;\n  if (eflag || vflag) ev_setup(eflag,vflag);\n  else evflag = 0;\n\n  double **x = atom->x;\n  double **f = atom->f;\n  int **anglelist = neighbor->anglelist;\n  int nanglelist = neighbor->nanglelist;\n  int nlocal = atom->nlocal;\n  int newton_bond = force->newton_bond;\n\n  for (n = 0; n < nanglelist; n++) {\n    i1 = anglelist[n][0];\n    i2 = anglelist[n][1];\n    i3 = anglelist[n][2];\n    type = anglelist[n][3];\n\n    // 1st bond\n\n    delx1 = x[i1][0] - x[i2][0];\n    dely1 = x[i1][1] - x[i2][1];\n    delz1 = x[i1][2] - x[i2][2];\n\n    rsq1 = delx1*delx1 + dely1*dely1 + delz1*delz1;\n    r1 = sqrt(rsq1);\n\n    // 2nd bond\n\n    delx2 = x[i3][0] - x[i2][0];\n    dely2 = x[i3][1] - x[i2][1];\n    delz2 = x[i3][2] - x[i2][2];\n\n    rsq2 = delx2*delx2 + dely2*dely2 + delz2*delz2;\n    r2 = sqrt(rsq2);\n\n    // angle (cos and sin)\n\n    c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n    c /= r1*r2;\n\n    if (c > 1.0) c = 1.0;\n    if (c < -1.0) c = -1.0;\n\n    theta = acos(c);\n\n    s = sqrt(1.0 - c*c);\n    if (s < SMALL) s = SMALL;\n    s = 1.0/s;\n\n    cot = c/s;\n\n    // force & energy\n\n    dtheta = theta - theta0[type];\n    dcostheta = cos(dtheta);\n    tk = k[type] * (1.0-dcostheta);\n\n    if (eflag) eangle = tk;\n\n    a = -k[type];\n\n    // expand dtheta for cos and sin contribution to force\n\n    a11 = a*c / rsq1;\n    a12 = -a / (r1*r2);\n    a22 = a*c / rsq2;\n\n    b11 = -a*c*cot / rsq1;\n    b12 = a*cot / (r1*r2);\n    b22 = -a*c*cot / rsq2;\n\n    c0 = cos(theta0[type]);\n    s0 = sin(theta0[type]);\n\n    f1[0] = (a11*delx1 + a12*delx2)*c0 + (b11*delx1 + b12*delx2)*s0;\n    f1[1] = (a11*dely1 + a12*dely2)*c0 + (b11*dely1 + b12*dely2)*s0;\n    f1[2] = (a11*delz1 + a12*delz2)*c0 + (b11*delz1 + b12*delz2)*s0;\n    f3[0] = (a22*delx2 + a12*delx1)*c0 + (b22*delx2 + b12*delx1)*s0;\n    f3[1] = (a22*dely2 + a12*dely1)*c0 + (b22*dely2 + b12*dely1)*s0;\n    f3[2] = (a22*delz2 + a12*delz1)*c0 + (b22*delz2 + b12*delz1)*s0;\n\n    // apply force to each of 3 atoms\n\n    if (newton_bond || i1 < nlocal) {\n      f[i1][0] += f1[0];\n      f[i1][1] += f1[1];\n      f[i1][2] += f1[2];\n    }\n\n    if (newton_bond || i2 < nlocal) {\n      f[i2][0] -= f1[0] + f3[0];\n      f[i2][1] -= f1[1] + f3[1];\n      f[i2][2] -= f1[2] + f3[2];\n    }\n\n    if (newton_bond || i3 < nlocal) {\n      f[i3][0] += f3[0];\n      f[i3][1] += f3[1];\n      f[i3][2] += f3[2];\n    }\n\n    if (evflag) ev_tally(i1,i2,i3,nlocal,newton_bond,eangle,f1,f3,\n                         delx1,dely1,delz1,delx2,dely2,delz2);\n  }\n}\n\n/* ---------------------------------------------------------------------- */\n\ndouble AngleCosineDelta::single(int type, int i1, int i2, int i3)\n{\n  double **x = atom->x;\n\n  double delx1 = x[i1][0] - x[i2][0];\n  double dely1 = x[i1][1] - x[i2][1];\n  double delz1 = x[i1][2] - x[i2][2];\n  domain->minimum_image(delx1,dely1,delz1);\n  double r1 = sqrt(delx1*delx1 + dely1*dely1 + delz1*delz1);\n\n  double delx2 = x[i3][0] - x[i2][0];\n  double dely2 = x[i3][1] - x[i2][1];\n  double delz2 = x[i3][2] - x[i2][2];\n  domain->minimum_image(delx2,dely2,delz2);\n  double r2 = sqrt(delx2*delx2 + dely2*dely2 + delz2*delz2);\n\n  double c = delx1*delx2 + dely1*dely2 + delz1*delz2;\n  c /= r1*r2;\n  if (c > 1.0) c = 1.0;\n  if (c < -1.0) c = -1.0;\n\n  double theta = acos(c);\n  double dtheta = theta - theta0[type];\n  double dcostheta = cos(dtheta);\n  double tk = k[type] * (1.0-dcostheta);\n  return tk;\n}\n"]}